// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;
function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }
  return bundleURL;
}
function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);
    if (matches) {
      return getBaseURL(matches[0]);
    }
  }
  return '/';
}
function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)?\/[^/]+(?:\?.*)?$/, '$1') + '/';
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    link.remove();
  };
  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
module.exports = reloadCSS;
},{"./bundle-url":"node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"src/styles.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');
module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};

// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};
},{}],"node_modules/path-browserify/index.js":[function(require,module,exports) {
var process = require("process");
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

},{"process":"node_modules/process/browser.js"}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/safe-buffer/index.js":[function(require,module,exports) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/randombytes/browser.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

},{"safe-buffer":"node_modules/safe-buffer/index.js","process":"node_modules/process/browser.js"}],"node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],"node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }
  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports) {
module.exports = require('events').EventEmitter;
},{"events":"node_modules/events/events.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/buffer_list.js":[function(require,module,exports) {

'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var _require = require('buffer'),
  Buffer = _require.Buffer;
var _require2 = require('util'),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":"node_modules/buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports) {
var process = require("process");
'use strict';

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
},{"process":"node_modules/process/browser.js"}],"node_modules/hash-base/node_modules/readable-stream/errors-browser.js":[function(require,module,exports) {
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError = /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);
    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }
    return NodeError;
  }(Base);
  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }
  var msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }
  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;
},{}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js":[function(require,module,exports) {
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":"node_modules/hash-base/node_modules/readable-stream/errors-browser.js"}],"node_modules/util-deprecate/browser.js":[function(require,module,exports) {
var global = arguments[3];

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

},{}],"node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
},{"util-deprecate":"node_modules/util-deprecate/browser.js","./internal/streams/stream":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"node_modules/buffer/index.js","./internal/streams/destroy":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/hash-base/node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js","process":"node_modules/process/browser.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
},{"./_stream_readable":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js","inherits":"node_modules/inherits/inherits_browser.js","process":"node_modules/process/browser.js"}],"node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":"node_modules/hash-base/node_modules/readable-stream/errors-browser.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js":[function(require,module,exports) {
var process = require("process");
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
},{"./end-of-stream":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","process":"node_modules/process/browser.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/from-browser.js":[function(require,module,exports) {
module.exports = function () {
  throw new Error('Readable.from is not available in the browser');
};
},{}],"node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"events":"node_modules/events/events.js","./internal/streams/stream":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"node_modules/buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js","./internal/streams/buffer_list":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/buffer_list.js","./internal/streams/destroy":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/hash-base/node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js","string_decoder/":"node_modules/string_decoder/lib/string_decoder.js","./internal/streams/async_iterator":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js","./internal/streams/from":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/from-browser.js","process":"node_modules/process/browser.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;
var _require$codes = require('../errors').codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":"node_modules/hash-base/node_modules/readable-stream/errors-browser.js","./_stream_duplex":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/pipeline.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":"node_modules/hash-base/node_modules/readable-stream/errors-browser.js","./end-of-stream":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"}],"node_modules/hash-base/node_modules/readable-stream/readable-browser.js":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');
},{"./lib/_stream_readable.js":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_writable.js":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_duplex.js":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"node_modules/hash-base/node_modules/readable-stream/lib/_stream_passthrough.js","./lib/internal/streams/end-of-stream.js":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","./lib/internal/streams/pipeline.js":"node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/pipeline.js"}],"node_modules/hash-base/index.js":[function(require,module,exports) {

'use strict';

var Buffer = require('safe-buffer').Buffer;
var Transform = require('readable-stream').Transform;
var inherits = require('inherits');
function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}
function HashBase(blockSize) {
  Transform.call(this);
  this._block = Buffer.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];
  this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;
  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }
  callback(error);
};
HashBase.prototype._flush = function (callback) {
  var error = null;
  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }
  callback(error);
};
HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

  // consume data
  var block = this._block;
  var offset = 0;
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
    this._update();
    this._blockOffset = 0;
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++];

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }
  return this;
};
HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};
HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;
  var digest = this._digest();
  if (encoding !== undefined) digest = digest.toString(encoding);

  // reset state
  this._block.fill(0);
  this._blockOffset = 0;
  for (var i = 0; i < 4; ++i) this._length[i] = 0;
  return digest;
};
HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};
module.exports = HashBase;
},{"safe-buffer":"node_modules/safe-buffer/index.js","readable-stream":"node_modules/hash-base/node_modules/readable-stream/readable-browser.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/md5.js/index.js":[function(require,module,exports) {

'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"inherits":"node_modules/inherits/inherits_browser.js","hash-base":"node_modules/hash-base/index.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/ripemd160/index.js":[function(require,module,exports) {

'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":"node_modules/buffer/index.js","inherits":"node_modules/inherits/inherits_browser.js","hash-base":"node_modules/hash-base/index.js"}],"node_modules/sha.js/hash.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha.js":[function(require,module,exports) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha1.js":[function(require,module,exports) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha256.js":[function(require,module,exports) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha224.js":[function(require,module,exports) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"inherits":"node_modules/inherits/inherits_browser.js","./sha256":"node_modules/sha.js/sha256.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha512.js":[function(require,module,exports) {

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha384.js":[function(require,module,exports) {

var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"inherits":"node_modules/inherits/inherits_browser.js","./sha512":"node_modules/sha.js/sha512.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/index.js":[function(require,module,exports) {
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":"node_modules/sha.js/sha.js","./sha1":"node_modules/sha.js/sha1.js","./sha224":"node_modules/sha.js/sha224.js","./sha256":"node_modules/sha.js/sha256.js","./sha384":"node_modules/sha.js/sha384.js","./sha512":"node_modules/sha.js/sha512.js"}],"node_modules/process-nextick-args/index.js":[function(require,module,exports) {
var process = require("process");
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


},{"process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"node_modules/events/events.js"}],"node_modules/readable-stream/node_modules/safe-buffer/index.js":[function(require,module,exports) {

/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/core-util-is/lib/util.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('buffer').Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/readable-stream/lib/internal/streams/BufferList.js":[function(require,module,exports) {

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":"node_modules/readable-stream/node_modules/safe-buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports) {
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        pna.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        pna.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        pna.nextTick(emitErrorNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        pna.nextTick(emitErrorNT, _this, err);
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":"node_modules/process-nextick-args/index.js"}],"node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports) {
var process = require("process");

var global = arguments[3];
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/
var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !true && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');
util.inherits(Writable, Stream);
function nop() {}
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }
  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};
function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
};
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
},{"process-nextick-args":"node_modules/process-nextick-args/index.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js","util-deprecate":"node_modules/util-deprecate/browser.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream-browser.js","safe-buffer":"node_modules/readable-stream/node_modules/safe-buffer/index.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"process-nextick-args":"node_modules/process-nextick-args/index.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_readable":"node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"node_modules/readable-stream/lib/_stream_writable.js"}],"node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"node_modules/readable-stream/node_modules/safe-buffer/index.js"}],"node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, { hasUnpiped: false });
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"process-nextick-args":"node_modules/process-nextick-args/index.js","isarray":"node_modules/isarray/index.js","events":"node_modules/events/events.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream-browser.js","safe-buffer":"node_modules/readable-stream/node_modules/safe-buffer/index.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js","./internal/streams/BufferList":"node_modules/readable-stream/lib/internal/streams/BufferList.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","string_decoder/":"node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js","process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"node_modules/readable-stream/lib/_stream_transform.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/readable-browser.js":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_readable.js":"node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_writable.js":"node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_duplex.js":"node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"node_modules/readable-stream/lib/_stream_passthrough.js"}],"node_modules/readable-stream/writable-browser.js":[function(require,module,exports) {
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":"node_modules/readable-stream/lib/_stream_writable.js"}],"node_modules/readable-stream/duplex-browser.js":[function(require,module,exports) {
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":"node_modules/readable-stream/lib/_stream_duplex.js"}],"node_modules/readable-stream/transform.js":[function(require,module,exports) {
module.exports = require('./readable').Transform

},{"./readable":"node_modules/readable-stream/readable-browser.js"}],"node_modules/readable-stream/passthrough.js":[function(require,module,exports) {
module.exports = require('./readable').PassThrough

},{"./readable":"node_modules/readable-stream/readable-browser.js"}],"node_modules/stream-browserify/index.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"node_modules/events/events.js","inherits":"node_modules/inherits/inherits_browser.js","readable-stream/readable.js":"node_modules/readable-stream/readable-browser.js","readable-stream/writable.js":"node_modules/readable-stream/writable-browser.js","readable-stream/duplex.js":"node_modules/readable-stream/duplex-browser.js","readable-stream/transform.js":"node_modules/readable-stream/transform.js","readable-stream/passthrough.js":"node_modules/readable-stream/passthrough.js"}],"node_modules/cipher-base/index.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"safe-buffer":"node_modules/safe-buffer/index.js","stream":"node_modules/stream-browserify/index.js","string_decoder":"node_modules/string_decoder/lib/string_decoder.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/create-hash/browser.js":[function(require,module,exports) {
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"inherits":"node_modules/inherits/inherits_browser.js","md5.js":"node_modules/md5.js/index.js","ripemd160":"node_modules/ripemd160/index.js","sha.js":"node_modules/sha.js/index.js","cipher-base":"node_modules/cipher-base/index.js"}],"node_modules/create-hmac/legacy.js":[function(require,module,exports) {

'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"inherits":"node_modules/inherits/inherits_browser.js","safe-buffer":"node_modules/safe-buffer/index.js","cipher-base":"node_modules/cipher-base/index.js"}],"node_modules/create-hash/md5.js":[function(require,module,exports) {
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":"node_modules/md5.js/index.js"}],"node_modules/create-hmac/browser.js":[function(require,module,exports) {

'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"inherits":"node_modules/inherits/inherits_browser.js","./legacy":"node_modules/create-hmac/legacy.js","cipher-base":"node_modules/cipher-base/index.js","safe-buffer":"node_modules/safe-buffer/index.js","create-hash/md5":"node_modules/create-hash/md5.js","ripemd160":"node_modules/ripemd160/index.js","sha.js":"node_modules/sha.js/index.js"}],"node_modules/browserify-sign/browser/algorithms.json":[function(require,module,exports) {
module.exports = {
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
};
},{}],"node_modules/browserify-sign/algos.js":[function(require,module,exports) {
'use strict';

module.exports = require('./browser/algorithms.json');
},{"./browser/algorithms.json":"node_modules/browserify-sign/browser/algorithms.json"}],"node_modules/pbkdf2/lib/precondition.js":[function(require,module,exports) {
var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number');
  }
  if (iterations < 0) {
    throw new TypeError('Bad iterations');
  }
  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number');
  }
  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
    /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length');
  }
};
},{}],"node_modules/pbkdf2/lib/default-encoding.js":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var defaultEncoding;
/* istanbul ignore next */
if (global.process && global.process.browser) {
  defaultEncoding = 'utf-8';
} else if (global.process && global.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else {
  defaultEncoding = 'utf-8';
}
module.exports = defaultEncoding;
},{"process":"node_modules/process/browser.js"}],"node_modules/pbkdf2/lib/to-buffer.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer;
module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing;
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding);
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer);
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
  }
};
},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/pbkdf2/lib/sync-browser.js":[function(require,module,exports) {

var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var toBuffer = require('./to-buffer');
var ZEROS = Buffer.alloc(128);
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
};
function Hmac(alg, key, saltLen) {
  var hash = getDigest(alg);
  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
  if (key.length > blocksize) {
    key = hash(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }
  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }
  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
  ipad.copy(ipad1, 0, 0, blocksize);
  this.ipad1 = ipad1;
  this.ipad2 = ipad;
  this.opad = opad;
  this.alg = alg;
  this.blocksize = blocksize;
  this.hash = hash;
  this.size = sizes[alg];
}
Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize);
  var h = this.hash(ipad);
  h.copy(this.opad, this.blocksize);
  return this.hash(this.opad);
};
function getDigest(alg) {
  function shaFunc(data) {
    return sha(alg).update(data).digest();
  }
  function rmd160Func(data) {
    return new RIPEMD160().update(data).digest();
  }
  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
  if (alg === 'md5') return md5;
  return shaFunc;
}
function pbkdf2(password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen);
  password = toBuffer(password, defaultEncoding, 'Password');
  salt = toBuffer(salt, defaultEncoding, 'Salt');
  digest = digest || 'sha1';
  var hmac = new Hmac(digest, password, salt.length);
  var DK = Buffer.allocUnsafe(keylen);
  var block1 = Buffer.allocUnsafe(salt.length + 4);
  salt.copy(block1, 0, 0, salt.length);
  var destPos = 0;
  var hLen = sizes[digest];
  var l = Math.ceil(keylen / hLen);
  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length);
    var T = hmac.run(block1, hmac.ipad1);
    var U = T;
    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2);
      for (var k = 0; k < hLen; k++) T[k] ^= U[k];
    }
    T.copy(DK, destPos);
    destPos += hLen;
  }
  return DK;
}
module.exports = pbkdf2;
},{"create-hash/md5":"node_modules/create-hash/md5.js","ripemd160":"node_modules/ripemd160/index.js","sha.js":"node_modules/sha.js/index.js","safe-buffer":"node_modules/safe-buffer/index.js","./precondition":"node_modules/pbkdf2/lib/precondition.js","./default-encoding":"node_modules/pbkdf2/lib/default-encoding.js","./to-buffer":"node_modules/pbkdf2/lib/to-buffer.js"}],"node_modules/pbkdf2/lib/async.js":[function(require,module,exports) {

var global = arguments[3];
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var sync = require('./sync');
var toBuffer = require('./to-buffer');
var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
};
var checks = [];
function checkNative(algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false);
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false);
  }
  if (checks[algo] !== undefined) {
    return checks[algo];
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
    return true;
  }).catch(function () {
    return false;
  });
  checks[algo] = prom;
  return prom;
}
var nextTick;
function getNextTick() {
  if (nextTick) {
    return nextTick;
  }
  if (global.process && global.process.nextTick) {
    nextTick = global.process.nextTick;
  } else if (global.queueMicrotask) {
    nextTick = global.queueMicrotask;
  } else if (global.setImmediate) {
    nextTick = global.setImmediate;
  } else {
    nextTick = global.setTimeout;
  }
  return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
  return subtle.importKey('raw', password, {
    name: 'PBKDF2'
  }, false, ['deriveBits']).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3);
  }).then(function (res) {
    return Buffer.from(res);
  });
}
function resolvePromise(promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out);
    });
  }, function (e) {
    getNextTick()(function () {
      callback(e);
    });
  });
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest;
    digest = undefined;
  }
  digest = digest || 'sha1';
  var algo = toBrowser[digest.toLowerCase()];
  if (!algo || typeof global.Promise !== 'function') {
    getNextTick()(function () {
      var out;
      try {
        out = sync(password, salt, iterations, keylen, digest);
      } catch (e) {
        return callback(e);
      }
      callback(null, out);
    });
    return;
  }
  checkParameters(iterations, keylen);
  password = toBuffer(password, defaultEncoding, 'Password');
  salt = toBuffer(salt, defaultEncoding, 'Salt');
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
    return sync(password, salt, iterations, keylen, digest);
  }), callback);
};
},{"safe-buffer":"node_modules/safe-buffer/index.js","./precondition":"node_modules/pbkdf2/lib/precondition.js","./default-encoding":"node_modules/pbkdf2/lib/default-encoding.js","./sync":"node_modules/pbkdf2/lib/sync-browser.js","./to-buffer":"node_modules/pbkdf2/lib/to-buffer.js"}],"node_modules/pbkdf2/browser.js":[function(require,module,exports) {
exports.pbkdf2 = require('./lib/async');
exports.pbkdf2Sync = require('./lib/sync');
},{"./lib/async":"node_modules/pbkdf2/lib/async.js","./lib/sync":"node_modules/pbkdf2/lib/sync-browser.js"}],"node_modules/des.js/lib/des/utils.js":[function(require,module,exports) {
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],"node_modules/minimalistic-assert/index.js":[function(require,module,exports) {
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],"node_modules/des.js/lib/des/cipher.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
  this.padding = options.padding !== false
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/des.js/lib/des/des.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  if (this.padding === false) {
    return false;
  }

  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  if (this.padding === false) {
    return buffer;
  }

  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js","./utils":"node_modules/des.js/lib/des/utils.js","./cipher":"node_modules/des.js/lib/des/cipher.js"}],"node_modules/des.js/lib/des/cbc.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/des.js/lib/des/ede.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js","./cipher":"node_modules/des.js/lib/des/cipher.js","./des":"node_modules/des.js/lib/des/des.js"}],"node_modules/des.js/lib/des.js":[function(require,module,exports) {
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/utils":"node_modules/des.js/lib/des/utils.js","./des/cipher":"node_modules/des.js/lib/des/cipher.js","./des/des":"node_modules/des.js/lib/des/des.js","./des/cbc":"node_modules/des.js/lib/des/cbc.js","./des/ede":"node_modules/des.js/lib/des/ede.js"}],"node_modules/browserify-des/index.js":[function(require,module,exports) {

var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":"node_modules/cipher-base/index.js","des.js":"node_modules/des.js/lib/des.js","inherits":"node_modules/inherits/inherits_browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports) {
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],"node_modules/buffer-xor/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports) {
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":"node_modules/buffer-xor/index.js"}],"node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"safe-buffer":"node_modules/safe-buffer/index.js","buffer-xor":"node_modules/buffer-xor/index.js"}],"node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"buffer-xor":"node_modules/buffer-xor/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-aes/incr32.js":[function(require,module,exports) {
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],"node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports) {

var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"buffer-xor":"node_modules/buffer-xor/index.js","safe-buffer":"node_modules/safe-buffer/index.js","../incr32":"node_modules/browserify-aes/incr32.js"}],"node_modules/browserify-aes/modes/list.json":[function(require,module,exports) {
module.exports = {
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}
;
},{}],"node_modules/browserify-aes/modes/index.js":[function(require,module,exports) {
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./ecb":"node_modules/browserify-aes/modes/ecb.js","./cbc":"node_modules/browserify-aes/modes/cbc.js","./cfb":"node_modules/browserify-aes/modes/cfb.js","./cfb8":"node_modules/browserify-aes/modes/cfb8.js","./cfb1":"node_modules/browserify-aes/modes/cfb1.js","./ofb":"node_modules/browserify-aes/modes/ofb.js","./ctr":"node_modules/browserify-aes/modes/ctr.js","./list.json":"node_modules/browserify-aes/modes/list.json"}],"node_modules/browserify-aes/aes.js":[function(require,module,exports) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/ghash.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/authCipher.js":[function(require,module,exports) {

var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":"node_modules/browserify-aes/aes.js","safe-buffer":"node_modules/safe-buffer/index.js","cipher-base":"node_modules/cipher-base/index.js","inherits":"node_modules/inherits/inherits_browser.js","./ghash":"node_modules/browserify-aes/ghash.js","buffer-xor":"node_modules/buffer-xor/index.js","./incr32":"node_modules/browserify-aes/incr32.js"}],"node_modules/browserify-aes/streamCipher.js":[function(require,module,exports) {

var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":"node_modules/browserify-aes/aes.js","safe-buffer":"node_modules/safe-buffer/index.js","cipher-base":"node_modules/cipher-base/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/evp_bytestokey/index.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"safe-buffer":"node_modules/safe-buffer/index.js","md5.js":"node_modules/md5.js/index.js"}],"node_modules/browserify-aes/encrypter.js":[function(require,module,exports) {

var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./modes":"node_modules/browserify-aes/modes/index.js","./authCipher":"node_modules/browserify-aes/authCipher.js","safe-buffer":"node_modules/safe-buffer/index.js","./streamCipher":"node_modules/browserify-aes/streamCipher.js","cipher-base":"node_modules/cipher-base/index.js","./aes":"node_modules/browserify-aes/aes.js","evp_bytestokey":"node_modules/evp_bytestokey/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/browserify-aes/decrypter.js":[function(require,module,exports) {

var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./authCipher":"node_modules/browserify-aes/authCipher.js","safe-buffer":"node_modules/safe-buffer/index.js","./modes":"node_modules/browserify-aes/modes/index.js","./streamCipher":"node_modules/browserify-aes/streamCipher.js","cipher-base":"node_modules/cipher-base/index.js","./aes":"node_modules/browserify-aes/aes.js","evp_bytestokey":"node_modules/evp_bytestokey/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/browserify-aes/browser.js":[function(require,module,exports) {
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./encrypter":"node_modules/browserify-aes/encrypter.js","./decrypter":"node_modules/browserify-aes/decrypter.js","./modes/list.json":"node_modules/browserify-aes/modes/list.json"}],"node_modules/browserify-des/modes.js":[function(require,module,exports) {
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],"node_modules/browserify-cipher/browser.js":[function(require,module,exports) {
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-des":"node_modules/browserify-des/index.js","browserify-aes/browser":"node_modules/browserify-aes/browser.js","browserify-aes/modes":"node_modules/browserify-aes/modes/index.js","browserify-des/modes":"node_modules/browserify-des/modes.js","evp_bytestokey":"node_modules/evp_bytestokey/index.js"}],"node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/miller-rabin/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/brorand/index.js":[function(require,module,exports) {
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/miller-rabin/lib/mr.js":[function(require,module,exports) {
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":"node_modules/miller-rabin/node_modules/bn.js/lib/bn.js","brorand":"node_modules/brorand/index.js"}],"node_modules/diffie-hellman/lib/generatePrime.js":[function(require,module,exports) {
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"randombytes":"node_modules/randombytes/browser.js","bn.js":"node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","miller-rabin":"node_modules/miller-rabin/lib/mr.js"}],"node_modules/diffie-hellman/lib/primes.json":[function(require,module,exports) {
module.exports = {
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
};
},{}],"node_modules/diffie-hellman/lib/dh.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

},{"bn.js":"node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js","miller-rabin":"node_modules/miller-rabin/lib/mr.js","./generatePrime":"node_modules/diffie-hellman/lib/generatePrime.js","randombytes":"node_modules/randombytes/browser.js","buffer":"node_modules/buffer/index.js"}],"node_modules/diffie-hellman/browser.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

},{"./lib/generatePrime":"node_modules/diffie-hellman/lib/generatePrime.js","./lib/primes.json":"node_modules/diffie-hellman/lib/primes.json","./lib/dh":"node_modules/diffie-hellman/lib/dh.js","buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports) {
module.exports = require('events').EventEmitter;
},{"events":"node_modules/events/events.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/buffer_list.js":[function(require,module,exports) {

'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var _require = require('buffer'),
  Buffer = _require.Buffer;
var _require2 = require('util'),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":"node_modules/buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports) {
var process = require("process");
'use strict';

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
},{"process":"node_modules/process/browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js":[function(require,module,exports) {
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError = /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);
    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }
    return NodeError;
  }(Base);
  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }
  var msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }
  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;
},{}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/state.js":[function(require,module,exports) {
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":"node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
},{"util-deprecate":"node_modules/util-deprecate/browser.js","./internal/streams/stream":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"node_modules/buffer/index.js","./internal/streams/destroy":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js","process":"node_modules/process/browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
},{"./_stream_readable":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_writable.js","inherits":"node_modules/inherits/inherits_browser.js","process":"node_modules/process/browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/end-of-stream.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":"node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/async_iterator.js":[function(require,module,exports) {
var process = require("process");
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
},{"./end-of-stream":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","process":"node_modules/process/browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/from-browser.js":[function(require,module,exports) {
module.exports = function () {
  throw new Error('Readable.from is not available in the browser');
};
},{}],"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"events":"node_modules/events/events.js","./internal/streams/stream":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"node_modules/buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js","./internal/streams/buffer_list":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/buffer_list.js","./internal/streams/destroy":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js","string_decoder/":"node_modules/string_decoder/lib/string_decoder.js","./internal/streams/async_iterator":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/async_iterator.js","./internal/streams/from":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/from-browser.js","process":"node_modules/process/browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;
var _require$codes = require('../errors').codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":"node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js","./_stream_duplex":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_transform.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/pipeline.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":"node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js","./end-of-stream":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"}],"node_modules/browserify-sign/node_modules/readable-stream/readable-browser.js":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');
},{"./lib/_stream_readable.js":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_writable.js":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_duplex.js":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_passthrough.js","./lib/internal/streams/end-of-stream.js":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","./lib/internal/streams/pipeline.js":"node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/pipeline.js"}],"node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/browserify-rsa/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js')
var randomBytes = require('randombytes')

function blind (priv) {
  var r = getr(priv)
  var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
}

function getr (priv) {
  var len = priv.modulus.byteLength()
  var r
  do {
    r = new BN(randomBytes(len))
  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
  return r
}

function crt (msg, priv) {
  var blinds = blind(priv)
  var len = priv.modulus.byteLength()
  var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
  var c1 = blinded.toRed(BN.mont(priv.prime1))
  var c2 = blinded.toRed(BN.mont(priv.prime2))
  var qinv = priv.coefficient
  var p = priv.prime1
  var q = priv.prime2
  var m1 = c1.redPow(priv.exponent1).fromRed()
  var m2 = c2.redPow(priv.exponent2).fromRed()
  var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
}
crt.getr = getr

module.exports = crt

},{"bn.js":"node_modules/bn.js/lib/bn.js","randombytes":"node_modules/randombytes/browser.js","buffer":"node_modules/buffer/index.js"}],"node_modules/elliptic/package.json":[function(require,module,exports) {
module.exports = {
  "name": "elliptic",
  "version": "6.5.4",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  }
}
;
},{}],"node_modules/elliptic/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/minimalistic-crypto-utils/lib/utils.js":[function(require,module,exports) {
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],"node_modules/elliptic/lib/elliptic/utils.js":[function(require,module,exports) {
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js","minimalistic-crypto-utils":"node_modules/minimalistic-crypto-utils/lib/utils.js"}],"node_modules/elliptic/lib/elliptic/curve/base.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/curve/short.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":"node_modules/elliptic/lib/elliptic/utils.js","bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js","./base":"node_modules/elliptic/lib/elliptic/curve/base.js"}],"node_modules/elliptic/lib/elliptic/curve/mont.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js","./base":"node_modules/elliptic/lib/elliptic/curve/base.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/curve/edwards.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":"node_modules/elliptic/lib/elliptic/utils.js","bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js","./base":"node_modules/elliptic/lib/elliptic/curve/base.js"}],"node_modules/elliptic/lib/elliptic/curve/index.js":[function(require,module,exports) {
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"node_modules/elliptic/lib/elliptic/curve/base.js","./short":"node_modules/elliptic/lib/elliptic/curve/short.js","./mont":"node_modules/elliptic/lib/elliptic/curve/mont.js","./edwards":"node_modules/elliptic/lib/elliptic/curve/edwards.js"}],"node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/hash.js/lib/hash/common.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/common.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":"node_modules/hash.js/lib/hash/utils.js"}],"node_modules/hash.js/lib/hash/sha/1.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","./common":"node_modules/hash.js/lib/hash/sha/common.js"}],"node_modules/hash.js/lib/hash/sha/256.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","./common":"node_modules/hash.js/lib/hash/sha/common.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/224.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":"node_modules/hash.js/lib/hash/utils.js","./256":"node_modules/hash.js/lib/hash/sha/256.js"}],"node_modules/hash.js/lib/hash/sha/512.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/384.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","./512":"node_modules/hash.js/lib/hash/sha/512.js"}],"node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports) {
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":"node_modules/hash.js/lib/hash/sha/1.js","./sha/224":"node_modules/hash.js/lib/hash/sha/224.js","./sha/256":"node_modules/hash.js/lib/hash/sha/256.js","./sha/384":"node_modules/hash.js/lib/hash/sha/384.js","./sha/512":"node_modules/hash.js/lib/hash/sha/512.js"}],"node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","./common":"node_modules/hash.js/lib/hash/common.js"}],"node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash.js":[function(require,module,exports) {
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"node_modules/hash.js/lib/hash/utils.js","./hash/common":"node_modules/hash.js/lib/hash/common.js","./hash/sha":"node_modules/hash.js/lib/hash/sha.js","./hash/ripemd":"node_modules/hash.js/lib/hash/ripemd.js","./hash/hmac":"node_modules/hash.js/lib/hash/hmac.js"}],"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":[function(require,module,exports) {
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],"node_modules/elliptic/lib/elliptic/curves.js":[function(require,module,exports) {
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"hash.js":"node_modules/hash.js/lib/hash.js","./curve":"node_modules/elliptic/lib/elliptic/curve/index.js","./utils":"node_modules/elliptic/lib/elliptic/utils.js","./precomputed/secp256k1":"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"}],"node_modules/hmac-drbg/lib/hmac-drbg.js":[function(require,module,exports) {
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":"node_modules/hash.js/lib/hash.js","minimalistic-crypto-utils":"node_modules/minimalistic-crypto-utils/lib/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/elliptic/lib/elliptic/ec/key.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/ec/signature.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/ec/index.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","hmac-drbg":"node_modules/hmac-drbg/lib/hmac-drbg.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js","../curves":"node_modules/elliptic/lib/elliptic/curves.js","brorand":"node_modules/brorand/index.js","./key":"node_modules/elliptic/lib/elliptic/ec/key.js","./signature":"node_modules/elliptic/lib/elliptic/ec/signature.js"}],"node_modules/elliptic/lib/elliptic/eddsa/key.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/eddsa/signature.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"bn.js":"node_modules/elliptic/node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/eddsa/index.js":[function(require,module,exports) {
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"hash.js":"node_modules/hash.js/lib/hash.js","../curves":"node_modules/elliptic/lib/elliptic/curves.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js","./key":"node_modules/elliptic/lib/elliptic/eddsa/key.js","./signature":"node_modules/elliptic/lib/elliptic/eddsa/signature.js"}],"node_modules/elliptic/lib/elliptic.js":[function(require,module,exports) {
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":"node_modules/elliptic/package.json","./elliptic/utils":"node_modules/elliptic/lib/elliptic/utils.js","brorand":"node_modules/brorand/index.js","./elliptic/curve":"node_modules/elliptic/lib/elliptic/curve/index.js","./elliptic/curves":"node_modules/elliptic/lib/elliptic/curves.js","./elliptic/ec":"node_modules/elliptic/lib/elliptic/ec/index.js","./elliptic/eddsa":"node_modules/elliptic/lib/elliptic/eddsa/index.js"}],"node_modules/asn1.js/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/safer-buffer/safer.js":[function(require,module,exports) {

var process = require("process");
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

},{"buffer":"node_modules/buffer/index.js","process":"node_modules/process/browser.js"}],"node_modules/asn1.js/lib/asn1/base/reporter.js":[function(require,module,exports) {
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/asn1.js/lib/asn1/base/buffer.js":[function(require,module,exports) {

'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"inherits":"node_modules/inherits/inherits_browser.js","../base/reporter":"node_modules/asn1.js/lib/asn1/base/reporter.js","safer-buffer":"node_modules/safer-buffer/safer.js"}],"node_modules/asn1.js/lib/asn1/base/node.js":[function(require,module,exports) {
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/reporter":"node_modules/asn1.js/lib/asn1/base/reporter.js","../base/buffer":"node_modules/asn1.js/lib/asn1/base/buffer.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/asn1.js/lib/asn1/constants/der.js":[function(require,module,exports) {
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],"node_modules/asn1.js/lib/asn1/encoders/der.js":[function(require,module,exports) {

'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"inherits":"node_modules/inherits/inherits_browser.js","safer-buffer":"node_modules/safer-buffer/safer.js","../base/node":"node_modules/asn1.js/lib/asn1/base/node.js","../constants/der":"node_modules/asn1.js/lib/asn1/constants/der.js"}],"node_modules/asn1.js/lib/asn1/encoders/pem.js":[function(require,module,exports) {
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"inherits":"node_modules/inherits/inherits_browser.js","./der":"node_modules/asn1.js/lib/asn1/encoders/der.js"}],"node_modules/asn1.js/lib/asn1/encoders/index.js":[function(require,module,exports) {
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":"node_modules/asn1.js/lib/asn1/encoders/der.js","./pem":"node_modules/asn1.js/lib/asn1/encoders/pem.js"}],"node_modules/asn1.js/lib/asn1/decoders/der.js":[function(require,module,exports) {
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"inherits":"node_modules/inherits/inherits_browser.js","bn.js":"node_modules/asn1.js/node_modules/bn.js/lib/bn.js","../base/buffer":"node_modules/asn1.js/lib/asn1/base/buffer.js","../base/node":"node_modules/asn1.js/lib/asn1/base/node.js","../constants/der":"node_modules/asn1.js/lib/asn1/constants/der.js"}],"node_modules/asn1.js/lib/asn1/decoders/pem.js":[function(require,module,exports) {

'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"inherits":"node_modules/inherits/inherits_browser.js","safer-buffer":"node_modules/safer-buffer/safer.js","./der":"node_modules/asn1.js/lib/asn1/decoders/der.js"}],"node_modules/asn1.js/lib/asn1/decoders/index.js":[function(require,module,exports) {
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":"node_modules/asn1.js/lib/asn1/decoders/der.js","./pem":"node_modules/asn1.js/lib/asn1/decoders/pem.js"}],"node_modules/asn1.js/lib/asn1/api.js":[function(require,module,exports) {
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./encoders":"node_modules/asn1.js/lib/asn1/encoders/index.js","./decoders":"node_modules/asn1.js/lib/asn1/decoders/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/asn1.js/lib/asn1/base/index.js":[function(require,module,exports) {
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./reporter":"node_modules/asn1.js/lib/asn1/base/reporter.js","./buffer":"node_modules/asn1.js/lib/asn1/base/buffer.js","./node":"node_modules/asn1.js/lib/asn1/base/node.js"}],"node_modules/asn1.js/lib/asn1/constants/index.js":[function(require,module,exports) {
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":"node_modules/asn1.js/lib/asn1/constants/der.js"}],"node_modules/asn1.js/lib/asn1.js":[function(require,module,exports) {
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"bn.js":"node_modules/asn1.js/node_modules/bn.js/lib/bn.js","./asn1/api":"node_modules/asn1.js/lib/asn1/api.js","./asn1/base":"node_modules/asn1.js/lib/asn1/base/index.js","./asn1/constants":"node_modules/asn1.js/lib/asn1/constants/index.js","./asn1/decoders":"node_modules/asn1.js/lib/asn1/decoders/index.js","./asn1/encoders":"node_modules/asn1.js/lib/asn1/encoders/index.js"}],"node_modules/parse-asn1/certificate.js":[function(require,module,exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":"node_modules/asn1.js/lib/asn1.js"}],"node_modules/parse-asn1/asn1.js":[function(require,module,exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"asn1.js":"node_modules/asn1.js/lib/asn1.js","./certificate":"node_modules/parse-asn1/certificate.js"}],"node_modules/parse-asn1/aesid.json":[function(require,module,exports) {
module.exports = {"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};
},{}],"node_modules/parse-asn1/fixProc.js":[function(require,module,exports) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"evp_bytestokey":"node_modules/evp_bytestokey/index.js","browserify-aes":"node_modules/browserify-aes/browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/parse-asn1/index.js":[function(require,module,exports) {

var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./asn1":"node_modules/parse-asn1/asn1.js","./aesid.json":"node_modules/parse-asn1/aesid.json","./fixProc":"node_modules/parse-asn1/fixProc.js","browserify-aes":"node_modules/browserify-aes/browser.js","pbkdf2":"node_modules/pbkdf2/browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-sign/browser/curves.json":[function(require,module,exports) {
module.exports = {
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
};
},{}],"node_modules/browserify-sign/browser/sign.js":[function(require,module,exports) {

'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var createHmac = require('create-hmac');
var crt = require('browserify-rsa');
var EC = require('elliptic').ec;
var BN = require('bn.js');
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
var RSA_PKCS1_PADDING = 1;
function sign(hash, key, hashType, signType, tag) {
  var priv = parseKeys(key);
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') {
      throw new Error('wrong private key type');
    }
    return ecSign(hash, priv);
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type');
    }
    return dsaSign(hash, priv, hashType);
  }
  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') {
    throw new Error('wrong private key type');
  }
  if (key.padding !== undefined && key.padding !== RSA_PKCS1_PADDING) {
    throw new Error('illegal or unsupported padding mode');
  }
  hash = Buffer.concat([tag, hash]);
  var len = priv.modulus.byteLength();
  var pad = [0, 1];
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  var out = crt(pad, priv);
  return out;
}
function ecSign(hash, priv) {
  var curveId = curves[priv.curve.join('.')];
  if (!curveId) {
    throw new Error('unknown curve ' + priv.curve.join('.'));
  }
  var curve = new EC(curveId);
  var key = curve.keyFromPrivate(priv.privateKey);
  var out = key.sign(hash);
  return Buffer.from(out.toDER());
}
function dsaSign(hash, priv, algo) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var g = priv.params.g;
  var r = new BN(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKey(x, q, hash, algo);
  while (s === false) {
    k = makeKey(q, kv, algo);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
    if (s.cmpn(0) === 0) {
      s = false;
      r = new BN(0);
    }
  }
  return toDER(r, s);
}
function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80) {
    r = [0].concat(r);
  }
  if (s[0] & 0x80) {
    s = [0].concat(s);
  }
  var total = r.length + s.length + 4;
  var res = [0x30, total, 0x02, r.length];
  res = res.concat(r, [0x02, s.length], s);
  return Buffer.from(res);
}
function getKey(x, q, hash, algo) {
  x = Buffer.from(x.toArray());
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length);
    x = Buffer.concat([zeros, x]);
  }
  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = Buffer.alloc(hlen);
  v.fill(1);
  var k = Buffer.alloc(hlen);
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  return {
    k: k,
    v: v
  };
}
function bits2int(obits, q) {
  var bits = new BN(obits);
  var shift = (obits.length << 3) - q.bitLength();
  if (shift > 0) {
    bits.ishrn(shift);
  }
  return bits;
}
function bits2octets(bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = Buffer.from(bits.toArray());
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length);
    out = Buffer.concat([zeros, out]);
  }
  return out;
}
function makeKey(q, kv, algo) {
  var t;
  var k;
  do {
    t = Buffer.alloc(0);
    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      t = Buffer.concat([t, kv.v]);
    }
    k = bits2int(t, q);
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest();
    kv.v = createHmac(algo, kv.k).update(kv.v).digest();
  } while (k.cmp(q) !== -1);
  return k;
}
function makeR(g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;
},{"safe-buffer":"node_modules/safe-buffer/index.js","create-hmac":"node_modules/create-hmac/browser.js","browserify-rsa":"node_modules/browserify-rsa/index.js","elliptic":"node_modules/elliptic/lib/elliptic.js","bn.js":"node_modules/bn.js/lib/bn.js","parse-asn1":"node_modules/parse-asn1/index.js","./curves.json":"node_modules/browserify-sign/browser/curves.json"}],"node_modules/browserify-sign/browser/verify.js":[function(require,module,exports) {

'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var BN = require('bn.js');
var EC = require('elliptic').ec;
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
function verify(sig, hash, key, signType, tag) {
  var pub = parseKeys(key);
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') {
      throw new Error('wrong public key type');
    }
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type');
    }
    return dsaVerify(sig, hash, pub);
  }
  if (signType !== 'rsa' && signType !== 'ecdsa/rsa') {
    throw new Error('wrong public key type');
  }
  hash = Buffer.concat([tag, hash]);
  var len = pub.modulus.byteLength();
  var pad = [1];
  var padNum = 0;
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff);
    padNum += 1;
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  pad = Buffer.from(pad);
  var red = BN.mont(pub.modulus);
  sig = new BN(sig).toRed(red);
  sig = sig.redPow(new BN(pub.publicExponent));
  sig = Buffer.from(sig.fromRed().toArray());
  var out = padNum < 8 ? 1 : 0;
  len = Math.min(sig.length, pad.length);
  if (sig.length !== pad.length) {
    out = 1;
  }
  i = -1;
  while (++i < len) {
    out |= sig[i] ^ pad[i];
  }
  return out === 0;
}
function ecVerify(sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')];
  if (!curveId) {
    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
  }
  var curve = new EC(curveId);
  var pubkey = pub.data.subjectPrivateKey.data;
  return curve.verify(hash, sig, pubkey);
}
function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montp = BN.mont(p);
  var w = s.invm(q);
  var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
  return v.cmp(r) === 0;
}
function checkValue(b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig');
  }
  if (b.cmp(q) >= 0) {
    throw new Error('invalid sig');
  }
}
module.exports = verify;
},{"safe-buffer":"node_modules/safe-buffer/index.js","bn.js":"node_modules/bn.js/lib/bn.js","elliptic":"node_modules/elliptic/lib/elliptic.js","parse-asn1":"node_modules/parse-asn1/index.js","./curves.json":"node_modules/browserify-sign/browser/curves.json"}],"node_modules/browserify-sign/browser/index.js":[function(require,module,exports) {

'use strict';

var Buffer = require('safe-buffer').Buffer;
var createHash = require('create-hash');
var stream = require('readable-stream');
var inherits = require('inherits');
var sign = require('./sign');
var verify = require('./verify');
var algorithms = require('./algorithms.json');
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
  algorithms[key.toLowerCase()] = algorithms[key];
});
function Sign(algorithm) {
  stream.Writable.call(this);
  var data = algorithms[algorithm];
  if (!data) {
    throw new Error('Unknown message digest');
  }
  this._hashType = data.hash;
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Sign, stream.Writable);
Sign.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};
Sign.prototype.update = function update(data, enc) {
  this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);
  return this;
};
Sign.prototype.sign = function signMethod(key, enc) {
  this.end();
  var hash = this._hash.digest();
  var sig = sign(hash, key, this._hashType, this._signType, this._tag);
  return enc ? sig.toString(enc) : sig;
};
function Verify(algorithm) {
  stream.Writable.call(this);
  var data = algorithms[algorithm];
  if (!data) {
    throw new Error('Unknown message digest');
  }
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Verify, stream.Writable);
Verify.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};
Verify.prototype.update = function update(data, enc) {
  this._hash.update(typeof data === 'string' ? Buffer.from(data, enc) : data);
  return this;
};
Verify.prototype.verify = function verifyMethod(key, sig, enc) {
  var sigBuffer = typeof sig === 'string' ? Buffer.from(sig, enc) : sig;
  this.end();
  var hash = this._hash.digest();
  return verify(sigBuffer, hash, key, this._signType, this._tag);
};
function createSign(algorithm) {
  return new Sign(algorithm);
}
function createVerify(algorithm) {
  return new Verify(algorithm);
}
module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
};
},{"safe-buffer":"node_modules/safe-buffer/index.js","create-hash":"node_modules/create-hash/browser.js","readable-stream":"node_modules/browserify-sign/node_modules/readable-stream/readable-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./sign":"node_modules/browserify-sign/browser/sign.js","./verify":"node_modules/browserify-sign/browser/verify.js","./algorithms.json":"node_modules/browserify-sign/browser/algorithms.json"}],"node_modules/create-ecdh/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/create-ecdh/browser.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

},{"elliptic":"node_modules/elliptic/lib/elliptic.js","bn.js":"node_modules/create-ecdh/node_modules/bn.js/lib/bn.js","buffer":"node_modules/buffer/index.js"}],"node_modules/public-encrypt/mgf.js":[function(require,module,exports) {

var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":"node_modules/create-hash/browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/xor.js":[function(require,module,exports) {
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],"node_modules/public-encrypt/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/public-encrypt/withPublic.js":[function(require,module,exports) {

var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":"node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/publicEncrypt.js":[function(require,module,exports) {

var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"parse-asn1":"node_modules/parse-asn1/index.js","randombytes":"node_modules/randombytes/browser.js","create-hash":"node_modules/create-hash/browser.js","./mgf":"node_modules/public-encrypt/mgf.js","./xor":"node_modules/public-encrypt/xor.js","bn.js":"node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","./withPublic":"node_modules/public-encrypt/withPublic.js","browserify-rsa":"node_modules/browserify-rsa/index.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/privateDecrypt.js":[function(require,module,exports) {

var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"parse-asn1":"node_modules/parse-asn1/index.js","./mgf":"node_modules/public-encrypt/mgf.js","./xor":"node_modules/public-encrypt/xor.js","bn.js":"node_modules/public-encrypt/node_modules/bn.js/lib/bn.js","browserify-rsa":"node_modules/browserify-rsa/index.js","create-hash":"node_modules/create-hash/browser.js","./withPublic":"node_modules/public-encrypt/withPublic.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/browser.js":[function(require,module,exports) {
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./publicEncrypt":"node_modules/public-encrypt/publicEncrypt.js","./privateDecrypt":"node_modules/public-encrypt/privateDecrypt.js"}],"node_modules/randomfill/browser.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
'use strict';

function oldBrowser() {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}
var safeBuffer = require('safe-buffer');
var randombytes = require('randombytes');
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
  if (typeof offset !== 'number' || offset !== offset) {
    // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number');
  }
  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32');
  }
  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range');
  }
}
function assertSize(size, offset, length) {
  if (typeof size !== 'number' || size !== size) {
    // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number');
  }
  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32');
  }
  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small');
  }
}
if (crypto && crypto.getRandomValues || !true) {
  exports.randomFill = randomFill;
  exports.randomFillSync = randomFillSync;
} else {
  exports.randomFill = oldBrowser;
  exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  }
  if (typeof offset === 'function') {
    cb = offset;
    offset = 0;
    size = buf.length;
  } else if (typeof size === 'function') {
    cb = size;
    size = buf.length - offset;
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function');
  }
  assertOffset(offset, buf.length);
  assertSize(size, offset, buf.length);
  return actualFill(buf, offset, size, cb);
}
function actualFill(buf, offset, size, cb) {
  if (true) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
      process.nextTick(function () {
        cb(null, buf);
      });
      return;
    }
    return buf;
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err);
      }
      bytes.copy(buf, offset);
      cb(null, buf);
    });
    return;
  }
  var bytes = randombytes(size);
  bytes.copy(buf, offset);
  return buf;
}
function randomFillSync(buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0;
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  }
  assertOffset(offset, buf.length);
  if (size === undefined) size = buf.length - offset;
  assertSize(size, offset, buf.length);
  return actualFill(buf, offset, size);
}
},{"safe-buffer":"node_modules/safe-buffer/index.js","randombytes":"node_modules/randombytes/browser.js","process":"node_modules/process/browser.js"}],"node_modules/crypto-browserify/index.js":[function(require,module,exports) {
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"randombytes":"node_modules/randombytes/browser.js","create-hash":"node_modules/create-hash/browser.js","create-hmac":"node_modules/create-hmac/browser.js","browserify-sign/algos":"node_modules/browserify-sign/algos.js","pbkdf2":"node_modules/pbkdf2/browser.js","browserify-cipher":"node_modules/browserify-cipher/browser.js","diffie-hellman":"node_modules/diffie-hellman/browser.js","browserify-sign":"node_modules/browserify-sign/browser/index.js","create-ecdh":"node_modules/create-ecdh/browser.js","public-encrypt":"node_modules/public-encrypt/browser.js","randomfill":"node_modules/randomfill/browser.js"}],"node_modules/@model-create/epanet-engine/dist/index.es6.js":[function(require,module,exports) {
var process = require("process");
var __dirname = "C:\\Users\\arvie\\Desktop\\ojt\\node_modules\\@model-create\\epanet-engine\\dist";
var Buffer = require("buffer").Buffer;
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.epanetEngine = void 0;
var Module = exports.epanetEngine = typeof Module !== "undefined" ? Module : {};
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
var arguments_ = [];
var thisProgram = "./this.program";
var quit_ = function (status, toThrow) {
  throw toThrow;
};
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === "object";
ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
ENVIRONMENT_HAS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
var scriptDirectory = "";
function locateFile(path) {
  if (Module["locateFile"]) {
    return Module["locateFile"](path, scriptDirectory);
  }
  return scriptDirectory + path;
}
var read_, readAsync, readBinary, setWindowTitle;
var nodeFS;
var nodePath;
if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + "/";
  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require("fs");
    if (!nodePath) nodePath = require("path");
    filename = nodePath["normalize"](filename);
    return nodeFS["readFileSync"](filename, binary ? null : "utf8");
  };
  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };
  if (process["argv"].length > 1) {
    thisProgram = process["argv"][1].replace(/\\/g, "/");
  }
  arguments_ = process["argv"].slice(2);
  if (typeof module !== "undefined") {
    module["exports"] = Module;
  }
  process["on"]("uncaughtException", function (ex) {
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  process["on"]("unhandledRejection", abort);
  quit_ = function (status) {
    process["exit"](status);
  };
  Module["inspect"] = function () {
    return "[Emscripten Module object]";
  };
} else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != "undefined") {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }
  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === "function") {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, "binary");
    assert(typeof data === "object");
    return data;
  };
  if (typeof scriptArgs != "undefined") {
    arguments_ = scriptArgs;
  } else if (typeof arguments != "undefined") {
    arguments_ = arguments;
  }
  if (typeof quit === "function") {
    quit_ = function (status) {
      quit(status);
    };
  }
  if (typeof print !== "undefined") {
    if (typeof console === "undefined") console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
  }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = self.location.href;
  } else if (document.currentScript) {
    scriptDirectory = document.currentScript.src;
  }
  if (scriptDirectory.indexOf("blob:") !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
  } else {
    scriptDirectory = "";
  }
  {
    read_ = function shell_read(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, false);
        xhr.send(null);
        return xhr.responseText;
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return intArrayToString(data);
        }
        throw err;
      }
    };
    if (ENVIRONMENT_IS_WORKER) {
      readBinary = function readBinary(url) {
        try {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.responseType = "arraybuffer";
          xhr.send(null);
          return new Uint8Array(xhr.response);
        } catch (err) {
          var data = tryParseAsDataURI(url);
          if (data) {
            return data;
          }
          throw err;
        }
      };
    }
    readAsync = function readAsync(url, onload, onerror) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = function xhr_onload() {
        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
          onload(xhr.response);
          return;
        }
        var data = tryParseAsDataURI(url);
        if (data) {
          onload(data.buffer);
          return;
        }
        onerror();
      };
      xhr.onerror = onerror;
      xhr.send(null);
    };
  }
  setWindowTitle = function (title) {
    document.title = title;
  };
} else {}
var out = Module["print"] || console.log.bind(console);
var err = Module["printErr"] || console.warn.bind(console);
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
moduleOverrides = null;
if (Module["arguments"]) arguments_ = Module["arguments"];
if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
if (Module["quit"]) quit_ = Module["quit"];
var STACK_ALIGN = 16;
function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR >> 2];
  var end = ret + size + 15 & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR >> 2] = end;
  return ret;
}
function getNativeTypeSize(type) {
  switch (type) {
    case "i1":
    case "i8":
      return 1;
    case "i16":
      return 2;
    case "i32":
      return 4;
    case "i64":
      return 8;
    case "float":
      return 4;
    case "double":
      return 8;
    default:
      {
        if (type[type.length - 1] === "*") {
          return 4;
        } else if (type[0] === "i") {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
          return bits / 8;
        } else {
          return 0;
        }
      }
  }
}
function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}
var jsCallStartIndex = 1;
var functionPointers = new Array(0);
var funcWrappers = {};
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module["dynCall_" + sig].apply(null, [ptr].concat(args));
  } else {
    return Module["dynCall_" + sig].call(null, ptr);
  }
}
var tempRet0 = 0;
var setTempRet0 = function (value) {
  tempRet0 = value;
};
var getTempRet0 = function () {
  return tempRet0;
};
var GLOBAL_BASE = 8;
var wasmBinary;
if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];
var noExitRuntime;
if (Module["noExitRuntime"]) noExitRuntime = Module["noExitRuntime"];
function setValue(ptr, value, type, noSafe) {
  type = type || "i8";
  if (type.charAt(type.length - 1) === "*") type = "i32";
  switch (type) {
    case "i1":
      HEAP8[ptr >> 0] = value;
      break;
    case "i8":
      HEAP8[ptr >> 0] = value;
      break;
    case "i16":
      HEAP16[ptr >> 1] = value;
      break;
    case "i32":
      HEAP32[ptr >> 2] = value;
      break;
    case "i64":
      tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
      break;
    case "float":
      HEAPF32[ptr >> 2] = value;
      break;
    case "double":
      HEAPF64[ptr >> 3] = value;
      break;
    default:
      abort("invalid type for setValue: " + type);
  }
}
function getValue(ptr, type, noSafe) {
  type = type || "i8";
  if (type.charAt(type.length - 1) === "*") type = "i32";
  switch (type) {
    case "i1":
      return HEAP8[ptr >> 0];
    case "i8":
      return HEAP8[ptr >> 0];
    case "i16":
      return HEAP16[ptr >> 1];
    case "i32":
      return HEAP32[ptr >> 2];
    case "i64":
      return HEAP32[ptr >> 2];
    case "float":
      return HEAPF32[ptr >> 2];
    case "double":
      return HEAPF64[ptr >> 3];
    default:
      abort("invalid type for getValue: " + type);
  }
  return null;
}
var ABORT = false;
var EXITSTATUS = 0;
function assert(condition, text) {
  if (!condition) {
    abort("Assertion failed: " + text);
  }
}
function getCFunc(ident) {
  var func = Module["_" + ident];
  assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
  return func;
}
function ccall(ident, returnType, argTypes, args, opts) {
  var toC = {
    "string": function (str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) {
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    "array": function (arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };
  function convertReturnValue(ret) {
    if (returnType === "string") return UTF8ToString(ret);
    if (returnType === "boolean") return Boolean(ret);
    return ret;
  }
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}
var ALLOC_NORMAL = 0;
var ALLOC_NONE = 3;
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === "number") {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === "string" ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, stackAlloc, dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[ptr >> 2] = 0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[ptr++ >> 0] = 0;
    }
    return ret;
  }
  if (singleType === "i8") {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0,
    type,
    typeSize,
    previousType;
  while (i < size) {
    var curr = slab[i];
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == "i64") type = "i32";
    setValue(ret + i, curr, type);
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}
var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = "";
    while (idx < endPtr) {
      var u0 = u8Array[idx++];
      if (!(u0 & 128)) {
        str += String.fromCharCode(u0);
        continue;
      }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 224) == 192) {
        str += String.fromCharCode((u0 & 31) << 6 | u1);
        continue;
      }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 240) == 224) {
        u0 = (u0 & 15) << 12 | u1 << 6 | u2;
      } else {
        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63;
      }
      if (u0 < 65536) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 65536;
        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
      }
    }
  }
  return str;
}
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
}
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) return 0;
  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1;
  for (var i = 0; i < str.length; ++i) {
    var u = str.charCodeAt(i);
    if (u >= 55296 && u <= 57343) {
      var u1 = str.charCodeAt(++i);
      u = 65536 + ((u & 1023) << 10) | u1 & 1023;
    }
    if (u <= 127) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 2047) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 192 | u >> 6;
      outU8Array[outIdx++] = 128 | u & 63;
    } else if (u <= 65535) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 224 | u >> 12;
      outU8Array[outIdx++] = 128 | u >> 6 & 63;
      outU8Array[outIdx++] = 128 | u & 63;
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 240 | u >> 18;
      outU8Array[outIdx++] = 128 | u >> 12 & 63;
      outU8Array[outIdx++] = 128 | u >> 6 & 63;
      outU8Array[outIdx++] = 128 | u & 63;
    }
  }
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    var u = str.charCodeAt(i);
    if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
    if (u <= 127) ++len;else if (u <= 2047) len += 2;else if (u <= 65535) len += 3;else len += 4;
  }
  return len;
}
var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;
function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[buffer++ >> 0] = str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - x % multiple;
  }
  return x;
}
var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module["HEAP8"] = HEAP8 = new Int8Array(buf);
  Module["HEAP16"] = HEAP16 = new Int16Array(buf);
  Module["HEAP32"] = HEAP32 = new Int32Array(buf);
  Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
  Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
  Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
  Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
  Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
}
var STACK_BASE = 21392,
  DYNAMIC_BASE = 5264272,
  DYNAMICTOP_PTR = 21200;
var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
if (Module["buffer"]) {
  buffer = Module["buffer"];
} else {
  buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
}
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);
HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == "function") {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === "number") {
      if (callback.arg === undefined) {
        Module["dynCall_v"](func);
      } else {
        Module["dynCall_vi"](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
  if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]];
    while (Module["preRun"].length) {
      addOnPreRun(Module["preRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function initRuntime() {
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
  TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  runtimeExited = true;
}
function postRun() {
  if (Module["postRun"]) {
    if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]];
    while (Module["postRun"].length) {
      addOnPostRun(Module["postRun"].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
var Math_abs = Math.abs;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_min = Math.min;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
  return id;
}
function addRunDependency(id) {
  runDependencies++;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
}
function removeRunDependency(id) {
  runDependencies--;
  if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback();
    }
  }
}
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
function abort(what) {
  if (Module["onAbort"]) {
    Module["onAbort"](what);
  }
  what += "";
  out(what);
  err(what);
  ABORT = true;
  EXITSTATUS = 1;
  what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
  throw what;
}
var memoryInitializer = null;
var dataURIPrefix = "data:application/octet-stream;base64,";
function isDataURI(filename) {
  return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
}
var tempDouble;
var tempI64;
__ATINIT__.push({
  func: function () {
    globalCtors();
  }
});
memoryInitializer = "data:application/octet-stream;base64,";
var tempDoublePtr = 21376;
function demangle(func) {
  return func;
}
function demangleAll(text) {
  var regex = /\b__Z[\w\d_]+/g;
  return text.replace(regex, function (x) {
    var y = demangle(x);
    return x === y ? x : y + " [" + x + "]";
  });
}
function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    try {
      throw new Error(0);
    } catch (e) {
      err = e;
    }
    if (!err.stack) {
      return "(no stack trace available)";
    }
  }
  return err.stack.toString();
}
function stackTrace() {
  var js = jsStackTrace();
  if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
  return demangleAll(js);
}
var ENV = {};
function ___buildEnvironment(environ) {
  var MAX_ENV_VALUES = 64;
  var TOTAL_ENV_SIZE = 1024;
  var poolPtr;
  var envPtr;
  if (!___buildEnvironment.called) {
    ___buildEnvironment.called = true;
    ENV["USER"] = "web_user";
    ENV["LOGNAME"] = "web_user";
    ENV["PATH"] = "/";
    ENV["PWD"] = "/";
    ENV["HOME"] = "/home/web_user";
    ENV["LANG"] = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
    ENV["_"] = thisProgram;
    poolPtr = getMemory(TOTAL_ENV_SIZE);
    envPtr = getMemory(MAX_ENV_VALUES * 4);
    HEAP32[envPtr >> 2] = poolPtr;
    HEAP32[environ >> 2] = envPtr;
  } else {
    envPtr = HEAP32[environ >> 2];
    poolPtr = HEAP32[envPtr >> 2];
  }
  var strings = [];
  var totalSize = 0;
  for (var key in ENV) {
    if (typeof ENV[key] === "string") {
      var line = key + "=" + ENV[key];
      strings.push(line);
      totalSize += line.length;
    }
  }
  if (totalSize > TOTAL_ENV_SIZE) {
    throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
  }
  var ptrSize = 4;
  for (var i = 0; i < strings.length; i++) {
    var line = strings[i];
    writeAsciiToMemory(line, poolPtr);
    HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
    poolPtr += line.length + 1;
  }
  HEAP32[envPtr + strings.length * ptrSize >> 2] = 0;
}
function _emscripten_get_now() {
  abort();
}
function _emscripten_get_now_is_monotonic() {
  return 0 || ENVIRONMENT_IS_NODE || typeof dateNow !== "undefined" || typeof performance === "object" && performance && typeof performance["now"] === "function";
}
function ___setErrNo(value) {
  if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
  return value;
}
function _clock_gettime(clk_id, tp) {
  var now;
  if (clk_id === 0) {
    now = Date.now();
  } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
    now = _emscripten_get_now();
  } else {
    ___setErrNo(28);
    return -1;
  }
  HEAP32[tp >> 2] = now / 1e3 | 0;
  HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
  return 0;
}
function ___clock_gettime(a0, a1) {
  return _clock_gettime(a0, a1);
}
function ___gxx_personality_v0() {}
function ___lock() {}
var PATH = {
  splitPath: function (filename) {
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    return splitPathRe.exec(filename).slice(1);
  },
  normalizeArray: function (parts, allowAboveRoot) {
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up; up--) {
        parts.unshift("..");
      }
    }
    return parts;
  },
  normalize: function (path) {
    var isAbsolute = path.charAt(0) === "/",
      trailingSlash = path.substr(-1) === "/";
    path = PATH.normalizeArray(path.split("/").filter(function (p) {
      return !!p;
    }), !isAbsolute).join("/");
    if (!path && !isAbsolute) {
      path = ".";
    }
    if (path && trailingSlash) {
      path += "/";
    }
    return (isAbsolute ? "/" : "") + path;
  },
  dirname: function (path) {
    var result = PATH.splitPath(path),
      root = result[0],
      dir = result[1];
    if (!root && !dir) {
      return ".";
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  },
  basename: function (path) {
    if (path === "/") return "/";
    var lastSlash = path.lastIndexOf("/");
    if (lastSlash === -1) return path;
    return path.substr(lastSlash + 1);
  },
  extname: function (path) {
    return PATH.splitPath(path)[3];
  },
  join: function () {
    var paths = Array.prototype.slice.call(arguments, 0);
    return PATH.normalize(paths.join("/"));
  },
  join2: function (l, r) {
    return PATH.normalize(l + "/" + r);
  }
};
var PATH_FS = {
  resolve: function () {
    var resolvedPath = "",
      resolvedAbsolute = false;
    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = i >= 0 ? arguments[i] : FS.cwd();
      if (typeof path !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path) {
        return "";
      }
      resolvedPath = path + "/" + resolvedPath;
      resolvedAbsolute = path.charAt(0) === "/";
    }
    resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function (p) {
      return !!p;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  },
  relative: function (from, to) {
    from = PATH_FS.resolve(from).substr(1);
    to = PATH_FS.resolve(to).substr(1);
    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== "") break;
      }
      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== "") break;
      }
      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }
    var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
};
var TTY = {
  ttys: [],
  init: function () {},
  shutdown: function () {},
  register: function (dev, ops) {
    TTY.ttys[dev] = {
      input: [],
      output: [],
      ops: ops
    };
    FS.registerDevice(dev, TTY.stream_ops);
  },
  stream_ops: {
    open: function (stream) {
      var tty = TTY.ttys[stream.node.rdev];
      if (!tty) {
        throw new FS.ErrnoError(43);
      }
      stream.tty = tty;
      stream.seekable = false;
    },
    close: function (stream) {
      stream.tty.ops.flush(stream.tty);
    },
    flush: function (stream) {
      stream.tty.ops.flush(stream.tty);
    },
    read: function (stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.get_char) {
        throw new FS.ErrnoError(60);
      }
      var bytesRead = 0;
      for (var i = 0; i < length; i++) {
        var result;
        try {
          result = stream.tty.ops.get_char(stream.tty);
        } catch (e) {
          throw new FS.ErrnoError(29);
        }
        if (result === undefined && bytesRead === 0) {
          throw new FS.ErrnoError(6);
        }
        if (result === null || result === undefined) break;
        bytesRead++;
        buffer[offset + i] = result;
      }
      if (bytesRead) {
        stream.node.timestamp = Date.now();
      }
      return bytesRead;
    },
    write: function (stream, buffer, offset, length, pos) {
      if (!stream.tty || !stream.tty.ops.put_char) {
        throw new FS.ErrnoError(60);
      }
      try {
        for (var i = 0; i < length; i++) {
          stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
        }
      } catch (e) {
        throw new FS.ErrnoError(29);
      }
      if (length) {
        stream.node.timestamp = Date.now();
      }
      return i;
    }
  },
  default_tty_ops: {
    get_char: function (tty) {
      if (!tty.input.length) {
        var result = null;
        if (ENVIRONMENT_IS_NODE) {
          var BUFSIZE = 256;
          var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
          var bytesRead = 0;
          try {
            bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
          } catch (e) {
            if (e.toString().indexOf("EOF") != -1) bytesRead = 0;else throw e;
          }
          if (bytesRead > 0) {
            result = buf.slice(0, bytesRead).toString("utf-8");
          } else {
            result = null;
          }
        } else if (typeof window != "undefined" && typeof window.prompt == "function") {
          result = window.prompt("Input: ");
          if (result !== null) {
            result += "\n";
          }
        } else if (typeof readline == "function") {
          result = readline();
          if (result !== null) {
            result += "\n";
          }
        }
        if (!result) {
          return null;
        }
        tty.input = intArrayFromString(result, true);
      }
      return tty.input.shift();
    },
    put_char: function (tty, val) {
      if (val === null || val === 10) {
        out(UTF8ArrayToString(tty.output, 0));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    flush: function (tty) {
      if (tty.output && tty.output.length > 0) {
        out(UTF8ArrayToString(tty.output, 0));
        tty.output = [];
      }
    }
  },
  default_tty1_ops: {
    put_char: function (tty, val) {
      if (val === null || val === 10) {
        err(UTF8ArrayToString(tty.output, 0));
        tty.output = [];
      } else {
        if (val != 0) tty.output.push(val);
      }
    },
    flush: function (tty) {
      if (tty.output && tty.output.length > 0) {
        err(UTF8ArrayToString(tty.output, 0));
        tty.output = [];
      }
    }
  }
};
var MEMFS = {
  ops_table: null,
  mount: function (mount) {
    return MEMFS.createNode(null, "/", 16384 | 511, 0);
  },
  createNode: function (parent, name, mode, dev) {
    if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
      throw new FS.ErrnoError(63);
    }
    if (!MEMFS.ops_table) {
      MEMFS.ops_table = {
        dir: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            lookup: MEMFS.node_ops.lookup,
            mknod: MEMFS.node_ops.mknod,
            rename: MEMFS.node_ops.rename,
            unlink: MEMFS.node_ops.unlink,
            rmdir: MEMFS.node_ops.rmdir,
            readdir: MEMFS.node_ops.readdir,
            symlink: MEMFS.node_ops.symlink
          },
          stream: {
            llseek: MEMFS.stream_ops.llseek
          }
        },
        file: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          },
          stream: {
            llseek: MEMFS.stream_ops.llseek,
            read: MEMFS.stream_ops.read,
            write: MEMFS.stream_ops.write,
            allocate: MEMFS.stream_ops.allocate,
            mmap: MEMFS.stream_ops.mmap,
            msync: MEMFS.stream_ops.msync
          }
        },
        link: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr,
            readlink: MEMFS.node_ops.readlink
          },
          stream: {}
        },
        chrdev: {
          node: {
            getattr: MEMFS.node_ops.getattr,
            setattr: MEMFS.node_ops.setattr
          },
          stream: FS.chrdev_stream_ops
        }
      };
    }
    var node = FS.createNode(parent, name, mode, dev);
    if (FS.isDir(node.mode)) {
      node.node_ops = MEMFS.ops_table.dir.node;
      node.stream_ops = MEMFS.ops_table.dir.stream;
      node.contents = {};
    } else if (FS.isFile(node.mode)) {
      node.node_ops = MEMFS.ops_table.file.node;
      node.stream_ops = MEMFS.ops_table.file.stream;
      node.usedBytes = 0;
      node.contents = null;
    } else if (FS.isLink(node.mode)) {
      node.node_ops = MEMFS.ops_table.link.node;
      node.stream_ops = MEMFS.ops_table.link.stream;
    } else if (FS.isChrdev(node.mode)) {
      node.node_ops = MEMFS.ops_table.chrdev.node;
      node.stream_ops = MEMFS.ops_table.chrdev.stream;
    }
    node.timestamp = Date.now();
    if (parent) {
      parent.contents[name] = node;
    }
    return node;
  },
  getFileDataAsRegularArray: function (node) {
    if (node.contents && node.contents.subarray) {
      var arr = [];
      for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
      return arr;
    }
    return node.contents;
  },
  getFileDataAsTypedArray: function (node) {
    if (!node.contents) return new Uint8Array();
    if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
    return new Uint8Array(node.contents);
  },
  expandFileStorage: function (node, newCapacity) {
    var prevCapacity = node.contents ? node.contents.length : 0;
    if (prevCapacity >= newCapacity) return;
    var CAPACITY_DOUBLING_MAX = 1024 * 1024;
    newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
    if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
    var oldContents = node.contents;
    node.contents = new Uint8Array(newCapacity);
    if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
    return;
  },
  resizeFileStorage: function (node, newSize) {
    if (node.usedBytes == newSize) return;
    if (newSize == 0) {
      node.contents = null;
      node.usedBytes = 0;
      return;
    }
    if (!node.contents || node.contents.subarray) {
      var oldContents = node.contents;
      node.contents = new Uint8Array(new ArrayBuffer(newSize));
      if (oldContents) {
        node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
      }
      node.usedBytes = newSize;
      return;
    }
    if (!node.contents) node.contents = [];
    if (node.contents.length > newSize) node.contents.length = newSize;else while (node.contents.length < newSize) node.contents.push(0);
    node.usedBytes = newSize;
  },
  node_ops: {
    getattr: function (node) {
      var attr = {};
      attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
      attr.ino = node.id;
      attr.mode = node.mode;
      attr.nlink = 1;
      attr.uid = 0;
      attr.gid = 0;
      attr.rdev = node.rdev;
      if (FS.isDir(node.mode)) {
        attr.size = 4096;
      } else if (FS.isFile(node.mode)) {
        attr.size = node.usedBytes;
      } else if (FS.isLink(node.mode)) {
        attr.size = node.link.length;
      } else {
        attr.size = 0;
      }
      attr.atime = new Date(node.timestamp);
      attr.mtime = new Date(node.timestamp);
      attr.ctime = new Date(node.timestamp);
      attr.blksize = 4096;
      attr.blocks = Math.ceil(attr.size / attr.blksize);
      return attr;
    },
    setattr: function (node, attr) {
      if (attr.mode !== undefined) {
        node.mode = attr.mode;
      }
      if (attr.timestamp !== undefined) {
        node.timestamp = attr.timestamp;
      }
      if (attr.size !== undefined) {
        MEMFS.resizeFileStorage(node, attr.size);
      }
    },
    lookup: function (parent, name) {
      throw FS.genericErrors[44];
    },
    mknod: function (parent, name, mode, dev) {
      return MEMFS.createNode(parent, name, mode, dev);
    },
    rename: function (old_node, new_dir, new_name) {
      if (FS.isDir(old_node.mode)) {
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {}
        if (new_node) {
          for (var i in new_node.contents) {
            throw new FS.ErrnoError(55);
          }
        }
      }
      delete old_node.parent.contents[old_node.name];
      old_node.name = new_name;
      new_dir.contents[new_name] = old_node;
      old_node.parent = new_dir;
    },
    unlink: function (parent, name) {
      delete parent.contents[name];
    },
    rmdir: function (parent, name) {
      var node = FS.lookupNode(parent, name);
      for (var i in node.contents) {
        throw new FS.ErrnoError(55);
      }
      delete parent.contents[name];
    },
    readdir: function (node) {
      var entries = [".", ".."];
      for (var key in node.contents) {
        if (!node.contents.hasOwnProperty(key)) {
          continue;
        }
        entries.push(key);
      }
      return entries;
    },
    symlink: function (parent, newname, oldpath) {
      var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
      node.link = oldpath;
      return node;
    },
    readlink: function (node) {
      if (!FS.isLink(node.mode)) {
        throw new FS.ErrnoError(28);
      }
      return node.link;
    }
  },
  stream_ops: {
    read: function (stream, buffer, offset, length, position) {
      var contents = stream.node.contents;
      if (position >= stream.node.usedBytes) return 0;
      var size = Math.min(stream.node.usedBytes - position, length);
      if (size > 8 && contents.subarray) {
        buffer.set(contents.subarray(position, position + size), offset);
      } else {
        for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
      }
      return size;
    },
    write: function (stream, buffer, offset, length, position, canOwn) {
      if (buffer.buffer === HEAP8.buffer) {
        canOwn = false;
      }
      if (!length) return 0;
      var node = stream.node;
      node.timestamp = Date.now();
      if (buffer.subarray && (!node.contents || node.contents.subarray)) {
        if (canOwn) {
          node.contents = buffer.subarray(offset, offset + length);
          node.usedBytes = length;
          return length;
        } else if (node.usedBytes === 0 && position === 0) {
          node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
          node.usedBytes = length;
          return length;
        } else if (position + length <= node.usedBytes) {
          node.contents.set(buffer.subarray(offset, offset + length), position);
          return length;
        }
      }
      MEMFS.expandFileStorage(node, position + length);
      if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position);else {
        for (var i = 0; i < length; i++) {
          node.contents[position + i] = buffer[offset + i];
        }
      }
      node.usedBytes = Math.max(node.usedBytes, position + length);
      return length;
    },
    llseek: function (stream, offset, whence) {
      var position = offset;
      if (whence === 1) {
        position += stream.position;
      } else if (whence === 2) {
        if (FS.isFile(stream.node.mode)) {
          position += stream.node.usedBytes;
        }
      }
      if (position < 0) {
        throw new FS.ErrnoError(28);
      }
      return position;
    },
    allocate: function (stream, offset, length) {
      MEMFS.expandFileStorage(stream.node, offset + length);
      stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
    },
    mmap: function (stream, buffer, offset, length, position, prot, flags) {
      if (!FS.isFile(stream.node.mode)) {
        throw new FS.ErrnoError(43);
      }
      var ptr;
      var allocated;
      var contents = stream.node.contents;
      if (!(flags & 2) && contents.buffer === buffer.buffer) {
        allocated = false;
        ptr = contents.byteOffset;
      } else {
        if (position > 0 || position + length < stream.node.usedBytes) {
          if (contents.subarray) {
            contents = contents.subarray(position, position + length);
          } else {
            contents = Array.prototype.slice.call(contents, position, position + length);
          }
        }
        allocated = true;
        var fromHeap = buffer.buffer == HEAP8.buffer;
        ptr = _malloc(length);
        if (!ptr) {
          throw new FS.ErrnoError(48);
        }
        (fromHeap ? HEAP8 : buffer).set(contents, ptr);
      }
      return {
        ptr: ptr,
        allocated: allocated
      };
    },
    msync: function (stream, buffer, offset, length, mmapFlags) {
      if (!FS.isFile(stream.node.mode)) {
        throw new FS.ErrnoError(43);
      }
      if (mmapFlags & 2) {
        return 0;
      }
      var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
      return 0;
    }
  }
};
var FS = {
  root: null,
  mounts: [],
  devices: {},
  streams: [],
  nextInode: 1,
  nameTable: null,
  currentPath: "/",
  initialized: false,
  ignorePermissions: true,
  trackingDelegate: {},
  tracking: {
    openFlags: {
      READ: 1,
      WRITE: 2
    }
  },
  ErrnoError: null,
  genericErrors: {},
  filesystems: null,
  syncFSRequests: 0,
  handleFSError: function (e) {
    if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
    return ___setErrNo(e.errno);
  },
  lookupPath: function (path, opts) {
    path = PATH_FS.resolve(FS.cwd(), path);
    opts = opts || {};
    if (!path) return {
      path: "",
      node: null
    };
    var defaults = {
      follow_mount: true,
      recurse_count: 0
    };
    for (var key in defaults) {
      if (opts[key] === undefined) {
        opts[key] = defaults[key];
      }
    }
    if (opts.recurse_count > 8) {
      throw new FS.ErrnoError(32);
    }
    var parts = PATH.normalizeArray(path.split("/").filter(function (p) {
      return !!p;
    }), false);
    var current = FS.root;
    var current_path = "/";
    for (var i = 0; i < parts.length; i++) {
      var islast = i === parts.length - 1;
      if (islast && opts.parent) {
        break;
      }
      current = FS.lookupNode(current, parts[i]);
      current_path = PATH.join2(current_path, parts[i]);
      if (FS.isMountpoint(current)) {
        if (!islast || islast && opts.follow_mount) {
          current = current.mounted.root;
        }
      }
      if (!islast || opts.follow) {
        var count = 0;
        while (FS.isLink(current.mode)) {
          var link = FS.readlink(current_path);
          current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
          var lookup = FS.lookupPath(current_path, {
            recurse_count: opts.recurse_count
          });
          current = lookup.node;
          if (count++ > 40) {
            throw new FS.ErrnoError(32);
          }
        }
      }
    }
    return {
      path: current_path,
      node: current
    };
  },
  getPath: function (node) {
    var path;
    while (true) {
      if (FS.isRoot(node)) {
        var mount = node.mount.mountpoint;
        if (!path) return mount;
        return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
      }
      path = path ? node.name + "/" + path : node.name;
      node = node.parent;
    }
  },
  hashName: function (parentid, name) {
    var hash = 0;
    for (var i = 0; i < name.length; i++) {
      hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
    }
    return (parentid + hash >>> 0) % FS.nameTable.length;
  },
  hashAddNode: function (node) {
    var hash = FS.hashName(node.parent.id, node.name);
    node.name_next = FS.nameTable[hash];
    FS.nameTable[hash] = node;
  },
  hashRemoveNode: function (node) {
    var hash = FS.hashName(node.parent.id, node.name);
    if (FS.nameTable[hash] === node) {
      FS.nameTable[hash] = node.name_next;
    } else {
      var current = FS.nameTable[hash];
      while (current) {
        if (current.name_next === node) {
          current.name_next = node.name_next;
          break;
        }
        current = current.name_next;
      }
    }
  },
  lookupNode: function (parent, name) {
    var err = FS.mayLookup(parent);
    if (err) {
      throw new FS.ErrnoError(err, parent);
    }
    var hash = FS.hashName(parent.id, name);
    for (var node = FS.nameTable[hash]; node; node = node.name_next) {
      var nodeName = node.name;
      if (node.parent.id === parent.id && nodeName === name) {
        return node;
      }
    }
    return FS.lookup(parent, name);
  },
  createNode: function (parent, name, mode, rdev) {
    if (!FS.FSNode) {
      FS.FSNode = function (parent, name, mode, rdev) {
        if (!parent) {
          parent = this;
        }
        this.parent = parent;
        this.mount = parent.mount;
        this.mounted = null;
        this.id = FS.nextInode++;
        this.name = name;
        this.mode = mode;
        this.node_ops = {};
        this.stream_ops = {};
        this.rdev = rdev;
      };
      FS.FSNode.prototype = {};
      var readMode = 292 | 73;
      var writeMode = 146;
      Object.defineProperties(FS.FSNode.prototype, {
        read: {
          get: function () {
            return (this.mode & readMode) === readMode;
          },
          set: function (val) {
            val ? this.mode |= readMode : this.mode &= ~readMode;
          }
        },
        write: {
          get: function () {
            return (this.mode & writeMode) === writeMode;
          },
          set: function (val) {
            val ? this.mode |= writeMode : this.mode &= ~writeMode;
          }
        },
        isFolder: {
          get: function () {
            return FS.isDir(this.mode);
          }
        },
        isDevice: {
          get: function () {
            return FS.isChrdev(this.mode);
          }
        }
      });
    }
    var node = new FS.FSNode(parent, name, mode, rdev);
    FS.hashAddNode(node);
    return node;
  },
  destroyNode: function (node) {
    FS.hashRemoveNode(node);
  },
  isRoot: function (node) {
    return node === node.parent;
  },
  isMountpoint: function (node) {
    return !!node.mounted;
  },
  isFile: function (mode) {
    return (mode & 61440) === 32768;
  },
  isDir: function (mode) {
    return (mode & 61440) === 16384;
  },
  isLink: function (mode) {
    return (mode & 61440) === 40960;
  },
  isChrdev: function (mode) {
    return (mode & 61440) === 8192;
  },
  isBlkdev: function (mode) {
    return (mode & 61440) === 24576;
  },
  isFIFO: function (mode) {
    return (mode & 61440) === 4096;
  },
  isSocket: function (mode) {
    return (mode & 49152) === 49152;
  },
  flagModes: {
    "r": 0,
    "rs": 1052672,
    "r+": 2,
    "w": 577,
    "wx": 705,
    "xw": 705,
    "w+": 578,
    "wx+": 706,
    "xw+": 706,
    "a": 1089,
    "ax": 1217,
    "xa": 1217,
    "a+": 1090,
    "ax+": 1218,
    "xa+": 1218
  },
  modeStringToFlags: function (str) {
    var flags = FS.flagModes[str];
    if (typeof flags === "undefined") {
      throw new Error("Unknown file open mode: " + str);
    }
    return flags;
  },
  flagsToPermissionString: function (flag) {
    var perms = ["r", "w", "rw"][flag & 3];
    if (flag & 512) {
      perms += "w";
    }
    return perms;
  },
  nodePermissions: function (node, perms) {
    if (FS.ignorePermissions) {
      return 0;
    }
    if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
      return 2;
    } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
      return 2;
    } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
      return 2;
    }
    return 0;
  },
  mayLookup: function (dir) {
    var err = FS.nodePermissions(dir, "x");
    if (err) return err;
    if (!dir.node_ops.lookup) return 2;
    return 0;
  },
  mayCreate: function (dir, name) {
    try {
      var node = FS.lookupNode(dir, name);
      return 20;
    } catch (e) {}
    return FS.nodePermissions(dir, "wx");
  },
  mayDelete: function (dir, name, isdir) {
    var node;
    try {
      node = FS.lookupNode(dir, name);
    } catch (e) {
      return e.errno;
    }
    var err = FS.nodePermissions(dir, "wx");
    if (err) {
      return err;
    }
    if (isdir) {
      if (!FS.isDir(node.mode)) {
        return 54;
      }
      if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
        return 10;
      }
    } else {
      if (FS.isDir(node.mode)) {
        return 31;
      }
    }
    return 0;
  },
  mayOpen: function (node, flags) {
    if (!node) {
      return 44;
    }
    if (FS.isLink(node.mode)) {
      return 32;
    } else if (FS.isDir(node.mode)) {
      if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
        return 31;
      }
    }
    return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
  },
  MAX_OPEN_FDS: 4096,
  nextfd: function (fd_start, fd_end) {
    fd_start = fd_start || 0;
    fd_end = fd_end || FS.MAX_OPEN_FDS;
    for (var fd = fd_start; fd <= fd_end; fd++) {
      if (!FS.streams[fd]) {
        return fd;
      }
    }
    throw new FS.ErrnoError(33);
  },
  getStream: function (fd) {
    return FS.streams[fd];
  },
  createStream: function (stream, fd_start, fd_end) {
    if (!FS.FSStream) {
      FS.FSStream = function () {};
      FS.FSStream.prototype = {};
      Object.defineProperties(FS.FSStream.prototype, {
        object: {
          get: function () {
            return this.node;
          },
          set: function (val) {
            this.node = val;
          }
        },
        isRead: {
          get: function () {
            return (this.flags & 2097155) !== 1;
          }
        },
        isWrite: {
          get: function () {
            return (this.flags & 2097155) !== 0;
          }
        },
        isAppend: {
          get: function () {
            return this.flags & 1024;
          }
        }
      });
    }
    var newStream = new FS.FSStream();
    for (var p in stream) {
      newStream[p] = stream[p];
    }
    stream = newStream;
    var fd = FS.nextfd(fd_start, fd_end);
    stream.fd = fd;
    FS.streams[fd] = stream;
    return stream;
  },
  closeStream: function (fd) {
    FS.streams[fd] = null;
  },
  chrdev_stream_ops: {
    open: function (stream) {
      var device = FS.getDevice(stream.node.rdev);
      stream.stream_ops = device.stream_ops;
      if (stream.stream_ops.open) {
        stream.stream_ops.open(stream);
      }
    },
    llseek: function () {
      throw new FS.ErrnoError(70);
    }
  },
  major: function (dev) {
    return dev >> 8;
  },
  minor: function (dev) {
    return dev & 255;
  },
  makedev: function (ma, mi) {
    return ma << 8 | mi;
  },
  registerDevice: function (dev, ops) {
    FS.devices[dev] = {
      stream_ops: ops
    };
  },
  getDevice: function (dev) {
    return FS.devices[dev];
  },
  getMounts: function (mount) {
    var mounts = [];
    var check = [mount];
    while (check.length) {
      var m = check.pop();
      mounts.push(m);
      check.push.apply(check, m.mounts);
    }
    return mounts;
  },
  syncfs: function (populate, callback) {
    if (typeof populate === "function") {
      callback = populate;
      populate = false;
    }
    FS.syncFSRequests++;
    if (FS.syncFSRequests > 1) {
      console.log("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
    }
    var mounts = FS.getMounts(FS.root.mount);
    var completed = 0;
    function doCallback(err) {
      FS.syncFSRequests--;
      return callback(err);
    }
    function done(err) {
      if (err) {
        if (!done.errored) {
          done.errored = true;
          return doCallback(err);
        }
        return;
      }
      if (++completed >= mounts.length) {
        doCallback(null);
      }
    }
    mounts.forEach(function (mount) {
      if (!mount.type.syncfs) {
        return done(null);
      }
      mount.type.syncfs(mount, populate, done);
    });
  },
  mount: function (type, opts, mountpoint) {
    var root = mountpoint === "/";
    var pseudo = !mountpoint;
    var node;
    if (root && FS.root) {
      throw new FS.ErrnoError(10);
    } else if (!root && !pseudo) {
      var lookup = FS.lookupPath(mountpoint, {
        follow_mount: false
      });
      mountpoint = lookup.path;
      node = lookup.node;
      if (FS.isMountpoint(node)) {
        throw new FS.ErrnoError(10);
      }
      if (!FS.isDir(node.mode)) {
        throw new FS.ErrnoError(54);
      }
    }
    var mount = {
      type: type,
      opts: opts,
      mountpoint: mountpoint,
      mounts: []
    };
    var mountRoot = type.mount(mount);
    mountRoot.mount = mount;
    mount.root = mountRoot;
    if (root) {
      FS.root = mountRoot;
    } else if (node) {
      node.mounted = mount;
      if (node.mount) {
        node.mount.mounts.push(mount);
      }
    }
    return mountRoot;
  },
  unmount: function (mountpoint) {
    var lookup = FS.lookupPath(mountpoint, {
      follow_mount: false
    });
    if (!FS.isMountpoint(lookup.node)) {
      throw new FS.ErrnoError(28);
    }
    var node = lookup.node;
    var mount = node.mounted;
    var mounts = FS.getMounts(mount);
    Object.keys(FS.nameTable).forEach(function (hash) {
      var current = FS.nameTable[hash];
      while (current) {
        var next = current.name_next;
        if (mounts.indexOf(current.mount) !== -1) {
          FS.destroyNode(current);
        }
        current = next;
      }
    });
    node.mounted = null;
    var idx = node.mount.mounts.indexOf(mount);
    node.mount.mounts.splice(idx, 1);
  },
  lookup: function (parent, name) {
    return parent.node_ops.lookup(parent, name);
  },
  mknod: function (path, mode, dev) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    if (!name || name === "." || name === "..") {
      throw new FS.ErrnoError(28);
    }
    var err = FS.mayCreate(parent, name);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.mknod) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.mknod(parent, name, mode, dev);
  },
  create: function (path, mode) {
    mode = mode !== undefined ? mode : 438;
    mode &= 4095;
    mode |= 32768;
    return FS.mknod(path, mode, 0);
  },
  mkdir: function (path, mode) {
    mode = mode !== undefined ? mode : 511;
    mode &= 511 | 512;
    mode |= 16384;
    return FS.mknod(path, mode, 0);
  },
  mkdirTree: function (path, mode) {
    var dirs = path.split("/");
    var d = "";
    for (var i = 0; i < dirs.length; ++i) {
      if (!dirs[i]) continue;
      d += "/" + dirs[i];
      try {
        FS.mkdir(d, mode);
      } catch (e) {
        if (e.errno != 20) throw e;
      }
    }
  },
  mkdev: function (path, mode, dev) {
    if (typeof dev === "undefined") {
      dev = mode;
      mode = 438;
    }
    mode |= 8192;
    return FS.mknod(path, mode, dev);
  },
  symlink: function (oldpath, newpath) {
    if (!PATH_FS.resolve(oldpath)) {
      throw new FS.ErrnoError(44);
    }
    var lookup = FS.lookupPath(newpath, {
      parent: true
    });
    var parent = lookup.node;
    if (!parent) {
      throw new FS.ErrnoError(44);
    }
    var newname = PATH.basename(newpath);
    var err = FS.mayCreate(parent, newname);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.symlink) {
      throw new FS.ErrnoError(63);
    }
    return parent.node_ops.symlink(parent, newname, oldpath);
  },
  rename: function (old_path, new_path) {
    var old_dirname = PATH.dirname(old_path);
    var new_dirname = PATH.dirname(new_path);
    var old_name = PATH.basename(old_path);
    var new_name = PATH.basename(new_path);
    var lookup, old_dir, new_dir;
    try {
      lookup = FS.lookupPath(old_path, {
        parent: true
      });
      old_dir = lookup.node;
      lookup = FS.lookupPath(new_path, {
        parent: true
      });
      new_dir = lookup.node;
    } catch (e) {
      throw new FS.ErrnoError(10);
    }
    if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
    if (old_dir.mount !== new_dir.mount) {
      throw new FS.ErrnoError(75);
    }
    var old_node = FS.lookupNode(old_dir, old_name);
    var relative = PATH_FS.relative(old_path, new_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(28);
    }
    relative = PATH_FS.relative(new_path, old_dirname);
    if (relative.charAt(0) !== ".") {
      throw new FS.ErrnoError(55);
    }
    var new_node;
    try {
      new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (old_node === new_node) {
      return;
    }
    var isdir = FS.isDir(old_node.mode);
    var err = FS.mayDelete(old_dir, old_name, isdir);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!old_dir.node_ops.rename) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
      throw new FS.ErrnoError(10);
    }
    if (new_dir !== old_dir) {
      err = FS.nodePermissions(old_dir, "w");
      if (err) {
        throw new FS.ErrnoError(err);
      }
    }
    try {
      if (FS.trackingDelegate["willMovePath"]) {
        FS.trackingDelegate["willMovePath"](old_path, new_path);
      }
    } catch (e) {
      console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
    }
    FS.hashRemoveNode(old_node);
    try {
      old_dir.node_ops.rename(old_node, new_dir, new_name);
    } catch (e) {
      throw e;
    } finally {
      FS.hashAddNode(old_node);
    }
    try {
      if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
    } catch (e) {
      console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
    }
  },
  rmdir: function (path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var err = FS.mayDelete(parent, name, true);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.rmdir) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    try {
      if (FS.trackingDelegate["willDeletePath"]) {
        FS.trackingDelegate["willDeletePath"](path);
      }
    } catch (e) {
      console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
    }
    parent.node_ops.rmdir(parent, name);
    FS.destroyNode(node);
    try {
      if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
    } catch (e) {
      console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
    }
  },
  readdir: function (path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    if (!node.node_ops.readdir) {
      throw new FS.ErrnoError(54);
    }
    return node.node_ops.readdir(node);
  },
  unlink: function (path) {
    var lookup = FS.lookupPath(path, {
      parent: true
    });
    var parent = lookup.node;
    var name = PATH.basename(path);
    var node = FS.lookupNode(parent, name);
    var err = FS.mayDelete(parent, name, false);
    if (err) {
      throw new FS.ErrnoError(err);
    }
    if (!parent.node_ops.unlink) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isMountpoint(node)) {
      throw new FS.ErrnoError(10);
    }
    try {
      if (FS.trackingDelegate["willDeletePath"]) {
        FS.trackingDelegate["willDeletePath"](path);
      }
    } catch (e) {
      console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
    }
    parent.node_ops.unlink(parent, name);
    FS.destroyNode(node);
    try {
      if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
    } catch (e) {
      console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
    }
  },
  readlink: function (path) {
    var lookup = FS.lookupPath(path);
    var link = lookup.node;
    if (!link) {
      throw new FS.ErrnoError(44);
    }
    if (!link.node_ops.readlink) {
      throw new FS.ErrnoError(28);
    }
    return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
  },
  stat: function (path, dontFollow) {
    var lookup = FS.lookupPath(path, {
      follow: !dontFollow
    });
    var node = lookup.node;
    if (!node) {
      throw new FS.ErrnoError(44);
    }
    if (!node.node_ops.getattr) {
      throw new FS.ErrnoError(63);
    }
    return node.node_ops.getattr(node);
  },
  lstat: function (path) {
    return FS.stat(path, true);
  },
  chmod: function (path, mode, dontFollow) {
    var node;
    if (typeof path === "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(63);
    }
    node.node_ops.setattr(node, {
      mode: mode & 4095 | node.mode & ~4095,
      timestamp: Date.now()
    });
  },
  lchmod: function (path, mode) {
    FS.chmod(path, mode, true);
  },
  fchmod: function (fd, mode) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(8);
    }
    FS.chmod(stream.node, mode);
  },
  chown: function (path, uid, gid, dontFollow) {
    var node;
    if (typeof path === "string") {
      var lookup = FS.lookupPath(path, {
        follow: !dontFollow
      });
      node = lookup.node;
    } else {
      node = path;
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(63);
    }
    node.node_ops.setattr(node, {
      timestamp: Date.now()
    });
  },
  lchown: function (path, uid, gid) {
    FS.chown(path, uid, gid, true);
  },
  fchown: function (fd, uid, gid) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(8);
    }
    FS.chown(stream.node, uid, gid);
  },
  truncate: function (path, len) {
    if (len < 0) {
      throw new FS.ErrnoError(28);
    }
    var node;
    if (typeof path === "string") {
      var lookup = FS.lookupPath(path, {
        follow: true
      });
      node = lookup.node;
    } else {
      node = path;
    }
    if (!node.node_ops.setattr) {
      throw new FS.ErrnoError(63);
    }
    if (FS.isDir(node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!FS.isFile(node.mode)) {
      throw new FS.ErrnoError(28);
    }
    var err = FS.nodePermissions(node, "w");
    if (err) {
      throw new FS.ErrnoError(err);
    }
    node.node_ops.setattr(node, {
      size: len,
      timestamp: Date.now()
    });
  },
  ftruncate: function (fd, len) {
    var stream = FS.getStream(fd);
    if (!stream) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(28);
    }
    FS.truncate(stream.node, len);
  },
  utime: function (path, atime, mtime) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    var node = lookup.node;
    node.node_ops.setattr(node, {
      timestamp: Math.max(atime, mtime)
    });
  },
  open: function (path, flags, mode, fd_start, fd_end) {
    if (path === "") {
      throw new FS.ErrnoError(44);
    }
    flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
    mode = typeof mode === "undefined" ? 438 : mode;
    if (flags & 64) {
      mode = mode & 4095 | 32768;
    } else {
      mode = 0;
    }
    var node;
    if (typeof path === "object") {
      node = path;
    } else {
      path = PATH.normalize(path);
      try {
        var lookup = FS.lookupPath(path, {
          follow: !(flags & 131072)
        });
        node = lookup.node;
      } catch (e) {}
    }
    var created = false;
    if (flags & 64) {
      if (node) {
        if (flags & 128) {
          throw new FS.ErrnoError(20);
        }
      } else {
        node = FS.mknod(path, mode, 0);
        created = true;
      }
    }
    if (!node) {
      throw new FS.ErrnoError(44);
    }
    if (FS.isChrdev(node.mode)) {
      flags &= ~512;
    }
    if (flags & 65536 && !FS.isDir(node.mode)) {
      throw new FS.ErrnoError(54);
    }
    if (!created) {
      var err = FS.mayOpen(node, flags);
      if (err) {
        throw new FS.ErrnoError(err);
      }
    }
    if (flags & 512) {
      FS.truncate(node, 0);
    }
    flags &= ~(128 | 512);
    var stream = FS.createStream({
      node: node,
      path: FS.getPath(node),
      flags: flags,
      seekable: true,
      position: 0,
      stream_ops: node.stream_ops,
      ungotten: [],
      error: false
    }, fd_start, fd_end);
    if (stream.stream_ops.open) {
      stream.stream_ops.open(stream);
    }
    if (Module["logReadFiles"] && !(flags & 1)) {
      if (!FS.readFiles) FS.readFiles = {};
      if (!(path in FS.readFiles)) {
        FS.readFiles[path] = 1;
        console.log("FS.trackingDelegate error on read file: " + path);
      }
    }
    try {
      if (FS.trackingDelegate["onOpenFile"]) {
        var trackingFlags = 0;
        if ((flags & 2097155) !== 1) {
          trackingFlags |= FS.tracking.openFlags.READ;
        }
        if ((flags & 2097155) !== 0) {
          trackingFlags |= FS.tracking.openFlags.WRITE;
        }
        FS.trackingDelegate["onOpenFile"](path, trackingFlags);
      }
    } catch (e) {
      console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
    }
    return stream;
  },
  close: function (stream) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (stream.getdents) stream.getdents = null;
    try {
      if (stream.stream_ops.close) {
        stream.stream_ops.close(stream);
      }
    } catch (e) {
      throw e;
    } finally {
      FS.closeStream(stream.fd);
    }
    stream.fd = null;
  },
  isClosed: function (stream) {
    return stream.fd === null;
  },
  llseek: function (stream, offset, whence) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (!stream.seekable || !stream.stream_ops.llseek) {
      throw new FS.ErrnoError(70);
    }
    if (whence != 0 && whence != 1 && whence != 2) {
      throw new FS.ErrnoError(28);
    }
    stream.position = stream.stream_ops.llseek(stream, offset, whence);
    stream.ungotten = [];
    return stream.position;
  },
  read: function (stream, buffer, offset, length, position) {
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.read) {
      throw new FS.ErrnoError(28);
    }
    var seeking = typeof position !== "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
    if (!seeking) stream.position += bytesRead;
    return bytesRead;
  },
  write: function (stream, buffer, offset, length, position, canOwn) {
    if (length < 0 || position < 0) {
      throw new FS.ErrnoError(28);
    }
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(8);
    }
    if (FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(31);
    }
    if (!stream.stream_ops.write) {
      throw new FS.ErrnoError(28);
    }
    if (stream.flags & 1024) {
      FS.llseek(stream, 0, 2);
    }
    var seeking = typeof position !== "undefined";
    if (!seeking) {
      position = stream.position;
    } else if (!stream.seekable) {
      throw new FS.ErrnoError(70);
    }
    var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
    if (!seeking) stream.position += bytesWritten;
    try {
      if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
    } catch (e) {
      console.log("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
    }
    return bytesWritten;
  },
  allocate: function (stream, offset, length) {
    if (FS.isClosed(stream)) {
      throw new FS.ErrnoError(8);
    }
    if (offset < 0 || length <= 0) {
      throw new FS.ErrnoError(28);
    }
    if ((stream.flags & 2097155) === 0) {
      throw new FS.ErrnoError(8);
    }
    if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
      throw new FS.ErrnoError(43);
    }
    if (!stream.stream_ops.allocate) {
      throw new FS.ErrnoError(138);
    }
    stream.stream_ops.allocate(stream, offset, length);
  },
  mmap: function (stream, buffer, offset, length, position, prot, flags) {
    if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
      throw new FS.ErrnoError(2);
    }
    if ((stream.flags & 2097155) === 1) {
      throw new FS.ErrnoError(2);
    }
    if (!stream.stream_ops.mmap) {
      throw new FS.ErrnoError(43);
    }
    return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
  },
  msync: function (stream, buffer, offset, length, mmapFlags) {
    if (!stream || !stream.stream_ops.msync) {
      return 0;
    }
    return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
  },
  munmap: function (stream) {
    return 0;
  },
  ioctl: function (stream, cmd, arg) {
    if (!stream.stream_ops.ioctl) {
      throw new FS.ErrnoError(59);
    }
    return stream.stream_ops.ioctl(stream, cmd, arg);
  },
  readFile: function (path, opts) {
    opts = opts || {};
    opts.flags = opts.flags || "r";
    opts.encoding = opts.encoding || "binary";
    if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
      throw new Error('Invalid encoding type "' + opts.encoding + '"');
    }
    var ret;
    var stream = FS.open(path, opts.flags);
    var stat = FS.stat(path);
    var length = stat.size;
    var buf = new Uint8Array(length);
    FS.read(stream, buf, 0, length, 0);
    if (opts.encoding === "utf8") {
      ret = UTF8ArrayToString(buf, 0);
    } else if (opts.encoding === "binary") {
      ret = buf;
    }
    FS.close(stream);
    return ret;
  },
  writeFile: function (path, data, opts) {
    opts = opts || {};
    opts.flags = opts.flags || "w";
    var stream = FS.open(path, opts.flags, opts.mode);
    if (typeof data === "string") {
      var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
      var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
      FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
    } else if (ArrayBuffer.isView(data)) {
      FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
    } else {
      throw new Error("Unsupported data type");
    }
    FS.close(stream);
  },
  cwd: function () {
    return FS.currentPath;
  },
  chdir: function (path) {
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    if (lookup.node === null) {
      throw new FS.ErrnoError(44);
    }
    if (!FS.isDir(lookup.node.mode)) {
      throw new FS.ErrnoError(54);
    }
    var err = FS.nodePermissions(lookup.node, "x");
    if (err) {
      throw new FS.ErrnoError(err);
    }
    FS.currentPath = lookup.path;
  },
  createDefaultDirectories: function () {
    FS.mkdir("/tmp");
    FS.mkdir("/home");
    FS.mkdir("/home/web_user");
  },
  createDefaultDevices: function () {
    FS.mkdir("/dev");
    FS.registerDevice(FS.makedev(1, 3), {
      read: function () {
        return 0;
      },
      write: function (stream, buffer, offset, length, pos) {
        return length;
      }
    });
    FS.mkdev("/dev/null", FS.makedev(1, 3));
    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
    FS.mkdev("/dev/tty", FS.makedev(5, 0));
    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
    var random_device;
    if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
      var randomBuffer = new Uint8Array(1);
      random_device = function () {
        crypto.getRandomValues(randomBuffer);
        return randomBuffer[0];
      };
    } else if (ENVIRONMENT_IS_NODE) {
      try {
        var crypto_module = require("crypto");
        random_device = function () {
          return crypto_module["randomBytes"](1)[0];
        };
      } catch (e) {}
    } else {}
    if (!random_device) {
      random_device = function () {
        abort("random_device");
      };
    }
    FS.createDevice("/dev", "random", random_device);
    FS.createDevice("/dev", "urandom", random_device);
    FS.mkdir("/dev/shm");
    FS.mkdir("/dev/shm/tmp");
  },
  createSpecialDirectories: function () {
    FS.mkdir("/proc");
    FS.mkdir("/proc/self");
    FS.mkdir("/proc/self/fd");
    FS.mount({
      mount: function () {
        var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
        node.node_ops = {
          lookup: function (parent, name) {
            var fd = +name;
            var stream = FS.getStream(fd);
            if (!stream) throw new FS.ErrnoError(8);
            var ret = {
              parent: null,
              mount: {
                mountpoint: "fake"
              },
              node_ops: {
                readlink: function () {
                  return stream.path;
                }
              }
            };
            ret.parent = ret;
            return ret;
          }
        };
        return node;
      }
    }, {}, "/proc/self/fd");
  },
  createStandardStreams: function () {
    if (Module["stdin"]) {
      FS.createDevice("/dev", "stdin", Module["stdin"]);
    } else {
      FS.symlink("/dev/tty", "/dev/stdin");
    }
    if (Module["stdout"]) {
      FS.createDevice("/dev", "stdout", null, Module["stdout"]);
    } else {
      FS.symlink("/dev/tty", "/dev/stdout");
    }
    if (Module["stderr"]) {
      FS.createDevice("/dev", "stderr", null, Module["stderr"]);
    } else {
      FS.symlink("/dev/tty1", "/dev/stderr");
    }
    var stdin = FS.open("/dev/stdin", "r");
    var stdout = FS.open("/dev/stdout", "w");
    var stderr = FS.open("/dev/stderr", "w");
  },
  ensureErrnoError: function () {
    if (FS.ErrnoError) return;
    FS.ErrnoError = function ErrnoError(errno, node) {
      this.node = node;
      this.setErrno = function (errno) {
        this.errno = errno;
      };
      this.setErrno(errno);
      this.message = "FS error";
    };
    FS.ErrnoError.prototype = new Error();
    FS.ErrnoError.prototype.constructor = FS.ErrnoError;
    [44].forEach(function (code) {
      FS.genericErrors[code] = new FS.ErrnoError(code);
      FS.genericErrors[code].stack = "<generic error, no stack>";
    });
  },
  staticInit: function () {
    FS.ensureErrnoError();
    FS.nameTable = new Array(4096);
    FS.mount(MEMFS, {}, "/");
    FS.createDefaultDirectories();
    FS.createDefaultDevices();
    FS.createSpecialDirectories();
    FS.filesystems = {
      "MEMFS": MEMFS
    };
  },
  init: function (input, output, error) {
    FS.init.initialized = true;
    FS.ensureErrnoError();
    Module["stdin"] = input || Module["stdin"];
    Module["stdout"] = output || Module["stdout"];
    Module["stderr"] = error || Module["stderr"];
    FS.createStandardStreams();
  },
  quit: function () {
    FS.init.initialized = false;
    var fflush = Module["_fflush"];
    if (fflush) fflush(0);
    for (var i = 0; i < FS.streams.length; i++) {
      var stream = FS.streams[i];
      if (!stream) {
        continue;
      }
      FS.close(stream);
    }
  },
  getMode: function (canRead, canWrite) {
    var mode = 0;
    if (canRead) mode |= 292 | 73;
    if (canWrite) mode |= 146;
    return mode;
  },
  joinPath: function (parts, forceRelative) {
    var path = PATH.join.apply(null, parts);
    if (forceRelative && path[0] == "/") path = path.substr(1);
    return path;
  },
  absolutePath: function (relative, base) {
    return PATH_FS.resolve(base, relative);
  },
  standardizePath: function (path) {
    return PATH.normalize(path);
  },
  findObject: function (path, dontResolveLastLink) {
    var ret = FS.analyzePath(path, dontResolveLastLink);
    if (ret.exists) {
      return ret.object;
    } else {
      ___setErrNo(ret.error);
      return null;
    }
  },
  analyzePath: function (path, dontResolveLastLink) {
    try {
      var lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      path = lookup.path;
    } catch (e) {}
    var ret = {
      isRoot: false,
      exists: false,
      error: 0,
      name: null,
      path: null,
      object: null,
      parentExists: false,
      parentPath: null,
      parentObject: null
    };
    try {
      var lookup = FS.lookupPath(path, {
        parent: true
      });
      ret.parentExists = true;
      ret.parentPath = lookup.path;
      ret.parentObject = lookup.node;
      ret.name = PATH.basename(path);
      lookup = FS.lookupPath(path, {
        follow: !dontResolveLastLink
      });
      ret.exists = true;
      ret.path = lookup.path;
      ret.object = lookup.node;
      ret.name = lookup.node.name;
      ret.isRoot = lookup.path === "/";
    } catch (e) {
      ret.error = e.errno;
    }
    return ret;
  },
  createFolder: function (parent, name, canRead, canWrite) {
    var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
    var mode = FS.getMode(canRead, canWrite);
    return FS.mkdir(path, mode);
  },
  createPath: function (parent, path, canRead, canWrite) {
    parent = typeof parent === "string" ? parent : FS.getPath(parent);
    var parts = path.split("/").reverse();
    while (parts.length) {
      var part = parts.pop();
      if (!part) continue;
      var current = PATH.join2(parent, part);
      try {
        FS.mkdir(current);
      } catch (e) {}
      parent = current;
    }
    return current;
  },
  createFile: function (parent, name, properties, canRead, canWrite) {
    var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
    var mode = FS.getMode(canRead, canWrite);
    return FS.create(path, mode);
  },
  createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
    var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
    var mode = FS.getMode(canRead, canWrite);
    var node = FS.create(path, mode);
    if (data) {
      if (typeof data === "string") {
        var arr = new Array(data.length);
        for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
        data = arr;
      }
      FS.chmod(node, mode | 146);
      var stream = FS.open(node, "w");
      FS.write(stream, data, 0, data.length, 0, canOwn);
      FS.close(stream);
      FS.chmod(node, mode);
    }
    return node;
  },
  createDevice: function (parent, name, input, output) {
    var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
    var mode = FS.getMode(!!input, !!output);
    if (!FS.createDevice.major) FS.createDevice.major = 64;
    var dev = FS.makedev(FS.createDevice.major++, 0);
    FS.registerDevice(dev, {
      open: function (stream) {
        stream.seekable = false;
      },
      close: function (stream) {
        if (output && output.buffer && output.buffer.length) {
          output(10);
        }
      },
      read: function (stream, buffer, offset, length, pos) {
        var bytesRead = 0;
        for (var i = 0; i < length; i++) {
          var result;
          try {
            result = input();
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (result === undefined && bytesRead === 0) {
            throw new FS.ErrnoError(6);
          }
          if (result === null || result === undefined) break;
          bytesRead++;
          buffer[offset + i] = result;
        }
        if (bytesRead) {
          stream.node.timestamp = Date.now();
        }
        return bytesRead;
      },
      write: function (stream, buffer, offset, length, pos) {
        for (var i = 0; i < length; i++) {
          try {
            output(buffer[offset + i]);
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
        if (length) {
          stream.node.timestamp = Date.now();
        }
        return i;
      }
    });
    return FS.mkdev(path, mode, dev);
  },
  createLink: function (parent, name, target, canRead, canWrite) {
    var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
    return FS.symlink(target, path);
  },
  forceLoadFile: function (obj) {
    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
    var success = true;
    if (typeof XMLHttpRequest !== "undefined") {
      throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
    } else if (read_) {
      try {
        obj.contents = intArrayFromString(read_(obj.url), true);
        obj.usedBytes = obj.contents.length;
      } catch (e) {
        success = false;
      }
    } else {
      throw new Error("Cannot load without read() or XMLHttpRequest.");
    }
    if (!success) ___setErrNo(29);
    return success;
  },
  createLazyFile: function (parent, name, url, canRead, canWrite) {
    function LazyUint8Array() {
      this.lengthKnown = false;
      this.chunks = [];
    }
    LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
      if (idx > this.length - 1 || idx < 0) {
        return undefined;
      }
      var chunkOffset = idx % this.chunkSize;
      var chunkNum = idx / this.chunkSize | 0;
      return this.getter(chunkNum)[chunkOffset];
    };
    LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
      this.getter = getter;
    };
    LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
      var xhr = new XMLHttpRequest();
      xhr.open("HEAD", url, false);
      xhr.send(null);
      if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
      var datalength = Number(xhr.getResponseHeader("Content-length"));
      var header;
      var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
      var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
      var chunkSize = 1024 * 1024;
      if (!hasByteServing) chunkSize = datalength;
      var doXHR = function (from, to) {
        if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
        if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, false);
        if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
        if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
        if (xhr.overrideMimeType) {
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }
        xhr.send(null);
        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
        if (xhr.response !== undefined) {
          return new Uint8Array(xhr.response || []);
        } else {
          return intArrayFromString(xhr.responseText || "", true);
        }
      };
      var lazyArray = this;
      lazyArray.setDataGetter(function (chunkNum) {
        var start = chunkNum * chunkSize;
        var end = (chunkNum + 1) * chunkSize - 1;
        end = Math.min(end, datalength - 1);
        if (typeof lazyArray.chunks[chunkNum] === "undefined") {
          lazyArray.chunks[chunkNum] = doXHR(start, end);
        }
        if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
        return lazyArray.chunks[chunkNum];
      });
      if (usesGzip || !datalength) {
        chunkSize = datalength = 1;
        datalength = this.getter(0).length;
        chunkSize = datalength;
        console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
      }
      this._length = datalength;
      this._chunkSize = chunkSize;
      this.lengthKnown = true;
    };
    if (typeof XMLHttpRequest !== "undefined") {
      if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
      var lazyArray = new LazyUint8Array();
      Object.defineProperties(lazyArray, {
        length: {
          get: function () {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
        },
        chunkSize: {
          get: function () {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
      });
      var properties = {
        isDevice: false,
        contents: lazyArray
      };
    } else {
      var properties = {
        isDevice: false,
        url: url
      };
    }
    var node = FS.createFile(parent, name, properties, canRead, canWrite);
    if (properties.contents) {
      node.contents = properties.contents;
    } else if (properties.url) {
      node.contents = null;
      node.url = properties.url;
    }
    Object.defineProperties(node, {
      usedBytes: {
        get: function () {
          return this.contents.length;
        }
      }
    });
    var stream_ops = {};
    var keys = Object.keys(node.stream_ops);
    keys.forEach(function (key) {
      var fn = node.stream_ops[key];
      stream_ops[key] = function forceLoadLazyFile() {
        if (!FS.forceLoadFile(node)) {
          throw new FS.ErrnoError(29);
        }
        return fn.apply(null, arguments);
      };
    });
    stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
      if (!FS.forceLoadFile(node)) {
        throw new FS.ErrnoError(29);
      }
      var contents = stream.node.contents;
      if (position >= contents.length) return 0;
      var size = Math.min(contents.length - position, length);
      if (contents.slice) {
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents[position + i];
        }
      } else {
        for (var i = 0; i < size; i++) {
          buffer[offset + i] = contents.get(position + i);
        }
      }
      return size;
    };
    node.stream_ops = stream_ops;
    return node;
  },
  createPreloadedFile: function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
    Browser.init();
    var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
    var dep = getUniqueRunDependency("cp " + fullname);
    function processData(byteArray) {
      function finish(byteArray) {
        if (preFinish) preFinish();
        if (!dontCreateFile) {
          FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
        }
        if (onload) onload();
        removeRunDependency(dep);
      }
      var handled = false;
      Module["preloadPlugins"].forEach(function (plugin) {
        if (handled) return;
        if (plugin["canHandle"](fullname)) {
          plugin["handle"](byteArray, fullname, finish, function () {
            if (onerror) onerror();
            removeRunDependency(dep);
          });
          handled = true;
        }
      });
      if (!handled) finish(byteArray);
    }
    addRunDependency(dep);
    if (typeof url == "string") {
      Browser.asyncLoad(url, function (byteArray) {
        processData(byteArray);
      }, onerror);
    } else {
      processData(url);
    }
  },
  indexedDB: function () {
    return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  },
  DB_NAME: function () {
    return "EM_FS_" + window.location.pathname;
  },
  DB_VERSION: 20,
  DB_STORE_NAME: "FILE_DATA",
  saveFilesToDB: function (paths, onload, onerror) {
    onload = onload || function () {};
    onerror = onerror || function () {};
    var indexedDB = FS.indexedDB();
    try {
      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
    } catch (e) {
      return onerror(e);
    }
    openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
      console.log("creating db");
      var db = openRequest.result;
      db.createObjectStore(FS.DB_STORE_NAME);
    };
    openRequest.onsuccess = function openRequest_onsuccess() {
      var db = openRequest.result;
      var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
      var files = transaction.objectStore(FS.DB_STORE_NAME);
      var ok = 0,
        fail = 0,
        total = paths.length;
      function finish() {
        if (fail == 0) onload();else onerror();
      }
      paths.forEach(function (path) {
        var putRequest = files.put(FS.analyzePath(path).object.contents, path);
        putRequest.onsuccess = function putRequest_onsuccess() {
          ok++;
          if (ok + fail == total) finish();
        };
        putRequest.onerror = function putRequest_onerror() {
          fail++;
          if (ok + fail == total) finish();
        };
      });
      transaction.onerror = onerror;
    };
    openRequest.onerror = onerror;
  },
  loadFilesFromDB: function (paths, onload, onerror) {
    onload = onload || function () {};
    onerror = onerror || function () {};
    var indexedDB = FS.indexedDB();
    try {
      var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
    } catch (e) {
      return onerror(e);
    }
    openRequest.onupgradeneeded = onerror;
    openRequest.onsuccess = function openRequest_onsuccess() {
      var db = openRequest.result;
      try {
        var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
      } catch (e) {
        onerror(e);
        return;
      }
      var files = transaction.objectStore(FS.DB_STORE_NAME);
      var ok = 0,
        fail = 0,
        total = paths.length;
      function finish() {
        if (fail == 0) onload();else onerror();
      }
      paths.forEach(function (path) {
        var getRequest = files.get(path);
        getRequest.onsuccess = function getRequest_onsuccess() {
          if (FS.analyzePath(path).exists) {
            FS.unlink(path);
          }
          FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
          ok++;
          if (ok + fail == total) finish();
        };
        getRequest.onerror = function getRequest_onerror() {
          fail++;
          if (ok + fail == total) finish();
        };
      });
      transaction.onerror = onerror;
    };
    openRequest.onerror = onerror;
  }
};
var SYSCALLS = {
  DEFAULT_POLLMASK: 5,
  mappings: {},
  umask: 511,
  calculateAt: function (dirfd, path) {
    if (path[0] !== "/") {
      var dir;
      if (dirfd === -100) {
        dir = FS.cwd();
      } else {
        var dirstream = FS.getStream(dirfd);
        if (!dirstream) throw new FS.ErrnoError(8);
        dir = dirstream.path;
      }
      path = PATH.join2(dir, path);
    }
    return path;
  },
  doStat: function (func, path, buf) {
    try {
      var stat = func(path);
    } catch (e) {
      if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
        return -54;
      }
      throw e;
    }
    HEAP32[buf >> 2] = stat.dev;
    HEAP32[buf + 4 >> 2] = 0;
    HEAP32[buf + 8 >> 2] = stat.ino;
    HEAP32[buf + 12 >> 2] = stat.mode;
    HEAP32[buf + 16 >> 2] = stat.nlink;
    HEAP32[buf + 20 >> 2] = stat.uid;
    HEAP32[buf + 24 >> 2] = stat.gid;
    HEAP32[buf + 28 >> 2] = stat.rdev;
    HEAP32[buf + 32 >> 2] = 0;
    tempI64 = [stat.size >>> 0, (tempDouble = stat.size, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[buf + 40 >> 2] = tempI64[0], HEAP32[buf + 44 >> 2] = tempI64[1];
    HEAP32[buf + 48 >> 2] = 4096;
    HEAP32[buf + 52 >> 2] = stat.blocks;
    HEAP32[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
    HEAP32[buf + 60 >> 2] = 0;
    HEAP32[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
    HEAP32[buf + 68 >> 2] = 0;
    HEAP32[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
    HEAP32[buf + 76 >> 2] = 0;
    tempI64 = [stat.ino >>> 0, (tempDouble = stat.ino, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[buf + 80 >> 2] = tempI64[0], HEAP32[buf + 84 >> 2] = tempI64[1];
    return 0;
  },
  doMsync: function (addr, stream, len, flags) {
    var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
    FS.msync(stream, buffer, 0, len, flags);
  },
  doMkdir: function (path, mode) {
    path = PATH.normalize(path);
    if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
    FS.mkdir(path, mode, 0);
    return 0;
  },
  doMknod: function (path, mode, dev) {
    switch (mode & 61440) {
      case 32768:
      case 8192:
      case 24576:
      case 4096:
      case 49152:
        break;
      default:
        return -28;
    }
    FS.mknod(path, mode, dev);
    return 0;
  },
  doReadlink: function (path, buf, bufsize) {
    if (bufsize <= 0) return -28;
    var ret = FS.readlink(path);
    var len = Math.min(bufsize, lengthBytesUTF8(ret));
    var endChar = HEAP8[buf + len];
    stringToUTF8(ret, buf, bufsize + 1);
    HEAP8[buf + len] = endChar;
    return len;
  },
  doAccess: function (path, amode) {
    if (amode & ~7) {
      return -28;
    }
    var node;
    var lookup = FS.lookupPath(path, {
      follow: true
    });
    node = lookup.node;
    if (!node) {
      return -44;
    }
    var perms = "";
    if (amode & 4) perms += "r";
    if (amode & 2) perms += "w";
    if (amode & 1) perms += "x";
    if (perms && FS.nodePermissions(node, perms)) {
      return -2;
    }
    return 0;
  },
  doDup: function (path, flags, suggestFD) {
    var suggest = FS.getStream(suggestFD);
    if (suggest) FS.close(suggest);
    return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
  },
  doReadv: function (stream, iov, iovcnt, offset) {
    var ret = 0;
    for (var i = 0; i < iovcnt; i++) {
      var ptr = HEAP32[iov + i * 8 >> 2];
      var len = HEAP32[iov + (i * 8 + 4) >> 2];
      var curr = FS.read(stream, HEAP8, ptr, len, offset);
      if (curr < 0) return -1;
      ret += curr;
      if (curr < len) break;
    }
    return ret;
  },
  doWritev: function (stream, iov, iovcnt, offset) {
    var ret = 0;
    for (var i = 0; i < iovcnt; i++) {
      var ptr = HEAP32[iov + i * 8 >> 2];
      var len = HEAP32[iov + (i * 8 + 4) >> 2];
      var curr = FS.write(stream, HEAP8, ptr, len, offset);
      if (curr < 0) return -1;
      ret += curr;
    }
    return ret;
  },
  varargs: 0,
  get: function (varargs) {
    SYSCALLS.varargs += 4;
    var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
    return ret;
  },
  getStr: function () {
    var ret = UTF8ToString(SYSCALLS.get());
    return ret;
  },
  getStreamFromFD: function (fd) {
    if (fd === undefined) fd = SYSCALLS.get();
    var stream = FS.getStream(fd);
    if (!stream) throw new FS.ErrnoError(8);
    return stream;
  },
  get64: function () {
    var low = SYSCALLS.get(),
      high = SYSCALLS.get();
    return low;
  },
  getZero: function () {
    SYSCALLS.get();
  }
};
function ___syscall10(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var path = SYSCALLS.getStr();
    FS.unlink(path);
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___syscall221(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(),
      cmd = SYSCALLS.get();
    switch (cmd) {
      case 0:
        {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
      case 1:
      case 2:
        return 0;
      case 3:
        return stream.flags;
      case 4:
        {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
      case 12:
        {
          var arg = SYSCALLS.get();
          var offset = 0;
          HEAP16[arg + offset >> 1] = 2;
          return 0;
        }
      case 13:
      case 14:
        return 0;
      case 16:
      case 8:
        return -28;
      case 9:
        ___setErrNo(28);
        return -1;
      default:
        {
          return -28;
        }
    }
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___syscall330(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var old = SYSCALLS.getStreamFromFD(),
      suggestFD = SYSCALLS.get(),
      flags = SYSCALLS.get();
    if (old.fd === suggestFD) return -28;
    return SYSCALLS.doDup(old.path, old.flags, suggestFD);
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___syscall40(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var path = SYSCALLS.getStr();
    FS.rmdir(path);
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___syscall5(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var pathname = SYSCALLS.getStr(),
      flags = SYSCALLS.get(),
      mode = SYSCALLS.get();
    var stream = FS.open(pathname, flags, mode);
    return stream.fd;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___syscall54(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var stream = SYSCALLS.getStreamFromFD(),
      op = SYSCALLS.get();
    switch (op) {
      case 21509:
      case 21505:
        {
          if (!stream.tty) return -59;
          return 0;
        }
      case 21510:
      case 21511:
      case 21512:
      case 21506:
      case 21507:
      case 21508:
        {
          if (!stream.tty) return -59;
          return 0;
        }
      case 21519:
        {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[argp >> 2] = 0;
          return 0;
        }
      case 21520:
        {
          if (!stream.tty) return -59;
          return -28;
        }
      case 21531:
        {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
      case 21523:
        {
          if (!stream.tty) return -59;
          return 0;
        }
      case 21524:
        {
          if (!stream.tty) return -59;
          return 0;
        }
      default:
        abort("bad ioctl syscall " + op);
    }
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___syscall63(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    var old = SYSCALLS.getStreamFromFD(),
      suggestFD = SYSCALLS.get();
    if (old.fd === suggestFD) return suggestFD;
    return SYSCALLS.doDup(old.path, old.flags, suggestFD);
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}
function ___unlock() {}
function _fd_close(fd) {
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    FS.close(stream);
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
}
function ___wasi_fd_close() {
  return _fd_close.apply(null, arguments);
}
function _fd_read(fd, iov, iovcnt, pnum) {
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = SYSCALLS.doReadv(stream, iov, iovcnt);
    HEAP32[pnum >> 2] = num;
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
}
function ___wasi_fd_read() {
  return _fd_read.apply(null, arguments);
}
function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var HIGH_OFFSET = 4294967296;
    var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
    var DOUBLE_LIMIT = 9007199254740992;
    if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
      return -61;
    }
    FS.llseek(stream, offset, whence);
    tempI64 = [stream.position >>> 0, (tempDouble = stream.position, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[newOffset >> 2] = tempI64[0], HEAP32[newOffset + 4 >> 2] = tempI64[1];
    if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
}
function ___wasi_fd_seek() {
  return _fd_seek.apply(null, arguments);
}
function _fd_write(fd, iov, iovcnt, pnum) {
  try {
    var stream = SYSCALLS.getStreamFromFD(fd);
    var num = SYSCALLS.doWritev(stream, iov, iovcnt);
    HEAP32[pnum >> 2] = num;
    return 0;
  } catch (e) {
    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
}
function ___wasi_fd_write() {
  return _fd_write.apply(null, arguments);
}
function getShiftFromSize(size) {
  switch (size) {
    case 1:
      return 0;
    case 2:
      return 1;
    case 4:
      return 2;
    case 8:
      return 3;
    default:
      throw new TypeError("Unknown type size: " + size);
  }
}
function embind_init_charCodes() {
  var codes = new Array(256);
  for (var i = 0; i < 256; ++i) {
    codes[i] = String.fromCharCode(i);
  }
  embind_charCodes = codes;
}
var embind_charCodes = undefined;
function readLatin1String(ptr) {
  var ret = "";
  var c = ptr;
  while (HEAPU8[c]) {
    ret += embind_charCodes[HEAPU8[c++]];
  }
  return ret;
}
var awaitingDependencies = {};
var registeredTypes = {};
var typeDependencies = {};
var char_0 = 48;
var char_9 = 57;
function makeLegalFunctionName(name) {
  if (undefined === name) {
    return "_unknown";
  }
  name = name.replace(/[^a-zA-Z0-9_]/g, "$");
  var f = name.charCodeAt(0);
  if (f >= char_0 && f <= char_9) {
    return "_" + name;
  } else {
    return name;
  }
}
function createNamedFunction(name, body) {
  name = makeLegalFunctionName(name);
  return new Function("body", "return function " + name + "() {\n" + '    "use strict";' + "    return body.apply(this, arguments);\n" + "};\n")(body);
}
function extendError(baseErrorType, errorName) {
  var errorClass = createNamedFunction(errorName, function (message) {
    this.name = errorName;
    this.message = message;
    var stack = new Error(message).stack;
    if (stack !== undefined) {
      this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
    }
  });
  errorClass.prototype = Object.create(baseErrorType.prototype);
  errorClass.prototype.constructor = errorClass;
  errorClass.prototype.toString = function () {
    if (this.message === undefined) {
      return this.name;
    } else {
      return this.name + ": " + this.message;
    }
  };
  return errorClass;
}
var BindingError = undefined;
function throwBindingError(message) {
  throw new BindingError(message);
}
var InternalError = undefined;
function throwInternalError(message) {
  throw new InternalError(message);
}
function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
  myTypes.forEach(function (type) {
    typeDependencies[type] = dependentTypes;
  });
  function onComplete(typeConverters) {
    var myTypeConverters = getTypeConverters(typeConverters);
    if (myTypeConverters.length !== myTypes.length) {
      throwInternalError("Mismatched type converter count");
    }
    for (var i = 0; i < myTypes.length; ++i) {
      registerType(myTypes[i], myTypeConverters[i]);
    }
  }
  var typeConverters = new Array(dependentTypes.length);
  var unregisteredTypes = [];
  var registered = 0;
  dependentTypes.forEach(function (dt, i) {
    if (registeredTypes.hasOwnProperty(dt)) {
      typeConverters[i] = registeredTypes[dt];
    } else {
      unregisteredTypes.push(dt);
      if (!awaitingDependencies.hasOwnProperty(dt)) {
        awaitingDependencies[dt] = [];
      }
      awaitingDependencies[dt].push(function () {
        typeConverters[i] = registeredTypes[dt];
        ++registered;
        if (registered === unregisteredTypes.length) {
          onComplete(typeConverters);
        }
      });
    }
  });
  if (0 === unregisteredTypes.length) {
    onComplete(typeConverters);
  }
}
function registerType(rawType, registeredInstance, options) {
  options = options || {};
  if (!("argPackAdvance" in registeredInstance)) {
    throw new TypeError("registerType registeredInstance requires argPackAdvance");
  }
  var name = registeredInstance.name;
  if (!rawType) {
    throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
  }
  if (registeredTypes.hasOwnProperty(rawType)) {
    if (options.ignoreDuplicateRegistrations) {
      return;
    } else {
      throwBindingError("Cannot register type '" + name + "' twice");
    }
  }
  registeredTypes[rawType] = registeredInstance;
  delete typeDependencies[rawType];
  if (awaitingDependencies.hasOwnProperty(rawType)) {
    var callbacks = awaitingDependencies[rawType];
    delete awaitingDependencies[rawType];
    callbacks.forEach(function (cb) {
      cb();
    });
  }
}
function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
  var shift = getShiftFromSize(size);
  name = readLatin1String(name);
  registerType(rawType, {
    name: name,
    "fromWireType": function (wt) {
      return !!wt;
    },
    "toWireType": function (destructors, o) {
      return o ? trueValue : falseValue;
    },
    "argPackAdvance": 8,
    "readValueFromPointer": function (pointer) {
      var heap;
      if (size === 1) {
        heap = HEAP8;
      } else if (size === 2) {
        heap = HEAP16;
      } else if (size === 4) {
        heap = HEAP32;
      } else {
        throw new TypeError("Unknown boolean type size: " + name);
      }
      return this["fromWireType"](heap[pointer >> shift]);
    },
    destructorFunction: null
  });
}
function ClassHandle_isAliasOf(other) {
  if (!(this instanceof ClassHandle)) {
    return false;
  }
  if (!(other instanceof ClassHandle)) {
    return false;
  }
  var leftClass = this.$$.ptrType.registeredClass;
  var left = this.$$.ptr;
  var rightClass = other.$$.ptrType.registeredClass;
  var right = other.$$.ptr;
  while (leftClass.baseClass) {
    left = leftClass.upcast(left);
    leftClass = leftClass.baseClass;
  }
  while (rightClass.baseClass) {
    right = rightClass.upcast(right);
    rightClass = rightClass.baseClass;
  }
  return leftClass === rightClass && left === right;
}
function shallowCopyInternalPointer(o) {
  return {
    count: o.count,
    deleteScheduled: o.deleteScheduled,
    preservePointerOnDelete: o.preservePointerOnDelete,
    ptr: o.ptr,
    ptrType: o.ptrType,
    smartPtr: o.smartPtr,
    smartPtrType: o.smartPtrType
  };
}
function throwInstanceAlreadyDeleted(obj) {
  function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
  }
  throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
}
var finalizationGroup = false;
function detachFinalizer(handle) {}
function runDestructor($$) {
  if ($$.smartPtr) {
    $$.smartPtrType.rawDestructor($$.smartPtr);
  } else {
    $$.ptrType.registeredClass.rawDestructor($$.ptr);
  }
}
function releaseClassHandle($$) {
  $$.count.value -= 1;
  var toDelete = 0 === $$.count.value;
  if (toDelete) {
    runDestructor($$);
  }
}
function attachFinalizer(handle) {
  if ("undefined" === typeof FinalizationGroup) {
    attachFinalizer = function (handle) {
      return handle;
    };
    return handle;
  }
  finalizationGroup = new FinalizationGroup(function (iter) {
    for (var result = iter.next(); !result.done; result = iter.next()) {
      var $$ = result.value;
      if (!$$.ptr) {
        console.warn("object already deleted: " + $$.ptr);
      } else {
        releaseClassHandle($$);
      }
    }
  });
  attachFinalizer = function (handle) {
    finalizationGroup.register(handle, handle.$$, handle.$$);
    return handle;
  };
  detachFinalizer = function (handle) {
    finalizationGroup.unregister(handle.$$);
  };
  return attachFinalizer(handle);
}
function ClassHandle_clone() {
  if (!this.$$.ptr) {
    throwInstanceAlreadyDeleted(this);
  }
  if (this.$$.preservePointerOnDelete) {
    this.$$.count.value += 1;
    return this;
  } else {
    var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
      $$: {
        value: shallowCopyInternalPointer(this.$$)
      }
    }));
    clone.$$.count.value += 1;
    clone.$$.deleteScheduled = false;
    return clone;
  }
}
function ClassHandle_delete() {
  if (!this.$$.ptr) {
    throwInstanceAlreadyDeleted(this);
  }
  if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
    throwBindingError("Object already scheduled for deletion");
  }
  detachFinalizer(this);
  releaseClassHandle(this.$$);
  if (!this.$$.preservePointerOnDelete) {
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
  }
}
function ClassHandle_isDeleted() {
  return !this.$$.ptr;
}
var delayFunction = undefined;
var deletionQueue = [];
function flushPendingDeletes() {
  while (deletionQueue.length) {
    var obj = deletionQueue.pop();
    obj.$$.deleteScheduled = false;
    obj["delete"]();
  }
}
function ClassHandle_deleteLater() {
  if (!this.$$.ptr) {
    throwInstanceAlreadyDeleted(this);
  }
  if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
    throwBindingError("Object already scheduled for deletion");
  }
  deletionQueue.push(this);
  if (deletionQueue.length === 1 && delayFunction) {
    delayFunction(flushPendingDeletes);
  }
  this.$$.deleteScheduled = true;
  return this;
}
function init_ClassHandle() {
  ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
  ClassHandle.prototype["clone"] = ClassHandle_clone;
  ClassHandle.prototype["delete"] = ClassHandle_delete;
  ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
  ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
}
function ClassHandle() {}
var registeredPointers = {};
function ensureOverloadTable(proto, methodName, humanName) {
  if (undefined === proto[methodName].overloadTable) {
    var prevFunc = proto[methodName];
    proto[methodName] = function () {
      if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
        throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
      }
      return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
    };
    proto[methodName].overloadTable = [];
    proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
  }
}
function exposePublicSymbol(name, value, numArguments) {
  if (Module.hasOwnProperty(name)) {
    if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {
      throwBindingError("Cannot register public name '" + name + "' twice");
    }
    ensureOverloadTable(Module, name, name);
    if (Module.hasOwnProperty(numArguments)) {
      throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
    }
    Module[name].overloadTable[numArguments] = value;
  } else {
    Module[name] = value;
    if (undefined !== numArguments) {
      Module[name].numArguments = numArguments;
    }
  }
}
function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
  this.name = name;
  this.constructor = constructor;
  this.instancePrototype = instancePrototype;
  this.rawDestructor = rawDestructor;
  this.baseClass = baseClass;
  this.getActualType = getActualType;
  this.upcast = upcast;
  this.downcast = downcast;
  this.pureVirtualFunctions = [];
}
function upcastPointer(ptr, ptrClass, desiredClass) {
  while (ptrClass !== desiredClass) {
    if (!ptrClass.upcast) {
      throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
    }
    ptr = ptrClass.upcast(ptr);
    ptrClass = ptrClass.baseClass;
  }
  return ptr;
}
function constNoSmartPtrRawPointerToWireType(destructors, handle) {
  if (handle === null) {
    if (this.isReference) {
      throwBindingError("null is not a valid " + this.name);
    }
    return 0;
  }
  if (!handle.$$) {
    throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
  }
  if (!handle.$$.ptr) {
    throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  return ptr;
}
function genericPointerToWireType(destructors, handle) {
  var ptr;
  if (handle === null) {
    if (this.isReference) {
      throwBindingError("null is not a valid " + this.name);
    }
    if (this.isSmartPointer) {
      ptr = this.rawConstructor();
      if (destructors !== null) {
        destructors.push(this.rawDestructor, ptr);
      }
      return ptr;
    } else {
      return 0;
    }
  }
  if (!handle.$$) {
    throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
  }
  if (!handle.$$.ptr) {
    throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
  }
  if (!this.isConst && handle.$$.ptrType.isConst) {
    throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  if (this.isSmartPointer) {
    if (undefined === handle.$$.smartPtr) {
      throwBindingError("Passing raw pointer to smart pointer is illegal");
    }
    switch (this.sharingPolicy) {
      case 0:
        if (handle.$$.smartPtrType === this) {
          ptr = handle.$$.smartPtr;
        } else {
          throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
        }
        break;
      case 1:
        ptr = handle.$$.smartPtr;
        break;
      case 2:
        if (handle.$$.smartPtrType === this) {
          ptr = handle.$$.smartPtr;
        } else {
          var clonedHandle = handle["clone"]();
          ptr = this.rawShare(ptr, __emval_register(function () {
            clonedHandle["delete"]();
          }));
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
        }
        break;
      default:
        throwBindingError("Unsupporting sharing policy");
    }
  }
  return ptr;
}
function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
  if (handle === null) {
    if (this.isReference) {
      throwBindingError("null is not a valid " + this.name);
    }
    return 0;
  }
  if (!handle.$$) {
    throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
  }
  if (!handle.$$.ptr) {
    throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
  }
  if (handle.$$.ptrType.isConst) {
    throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  return ptr;
}
function simpleReadValueFromPointer(pointer) {
  return this["fromWireType"](HEAPU32[pointer >> 2]);
}
function RegisteredPointer_getPointee(ptr) {
  if (this.rawGetPointee) {
    ptr = this.rawGetPointee(ptr);
  }
  return ptr;
}
function RegisteredPointer_destructor(ptr) {
  if (this.rawDestructor) {
    this.rawDestructor(ptr);
  }
}
function RegisteredPointer_deleteObject(handle) {
  if (handle !== null) {
    handle["delete"]();
  }
}
function downcastPointer(ptr, ptrClass, desiredClass) {
  if (ptrClass === desiredClass) {
    return ptr;
  }
  if (undefined === desiredClass.baseClass) {
    return null;
  }
  var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
  if (rv === null) {
    return null;
  }
  return desiredClass.downcast(rv);
}
function getInheritedInstanceCount() {
  return Object.keys(registeredInstances).length;
}
function getLiveInheritedInstances() {
  var rv = [];
  for (var k in registeredInstances) {
    if (registeredInstances.hasOwnProperty(k)) {
      rv.push(registeredInstances[k]);
    }
  }
  return rv;
}
function setDelayFunction(fn) {
  delayFunction = fn;
  if (deletionQueue.length && delayFunction) {
    delayFunction(flushPendingDeletes);
  }
}
function init_embind() {
  Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
  Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
  Module["flushPendingDeletes"] = flushPendingDeletes;
  Module["setDelayFunction"] = setDelayFunction;
}
var registeredInstances = {};
function getBasestPointer(class_, ptr) {
  if (ptr === undefined) {
    throwBindingError("ptr should not be undefined");
  }
  while (class_.baseClass) {
    ptr = class_.upcast(ptr);
    class_ = class_.baseClass;
  }
  return ptr;
}
function getInheritedInstance(class_, ptr) {
  ptr = getBasestPointer(class_, ptr);
  return registeredInstances[ptr];
}
function makeClassHandle(prototype, record) {
  if (!record.ptrType || !record.ptr) {
    throwInternalError("makeClassHandle requires ptr and ptrType");
  }
  var hasSmartPtrType = !!record.smartPtrType;
  var hasSmartPtr = !!record.smartPtr;
  if (hasSmartPtrType !== hasSmartPtr) {
    throwInternalError("Both smartPtrType and smartPtr must be specified");
  }
  record.count = {
    value: 1
  };
  return attachFinalizer(Object.create(prototype, {
    $$: {
      value: record
    }
  }));
}
function RegisteredPointer_fromWireType(ptr) {
  var rawPointer = this.getPointee(ptr);
  if (!rawPointer) {
    this.destructor(ptr);
    return null;
  }
  var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
  if (undefined !== registeredInstance) {
    if (0 === registeredInstance.$$.count.value) {
      registeredInstance.$$.ptr = rawPointer;
      registeredInstance.$$.smartPtr = ptr;
      return registeredInstance["clone"]();
    } else {
      var rv = registeredInstance["clone"]();
      this.destructor(ptr);
      return rv;
    }
  }
  function makeDefaultHandle() {
    if (this.isSmartPointer) {
      return makeClassHandle(this.registeredClass.instancePrototype, {
        ptrType: this.pointeeType,
        ptr: rawPointer,
        smartPtrType: this,
        smartPtr: ptr
      });
    } else {
      return makeClassHandle(this.registeredClass.instancePrototype, {
        ptrType: this,
        ptr: ptr
      });
    }
  }
  var actualType = this.registeredClass.getActualType(rawPointer);
  var registeredPointerRecord = registeredPointers[actualType];
  if (!registeredPointerRecord) {
    return makeDefaultHandle.call(this);
  }
  var toType;
  if (this.isConst) {
    toType = registeredPointerRecord.constPointerType;
  } else {
    toType = registeredPointerRecord.pointerType;
  }
  var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
  if (dp === null) {
    return makeDefaultHandle.call(this);
  }
  if (this.isSmartPointer) {
    return makeClassHandle(toType.registeredClass.instancePrototype, {
      ptrType: toType,
      ptr: dp,
      smartPtrType: this,
      smartPtr: ptr
    });
  } else {
    return makeClassHandle(toType.registeredClass.instancePrototype, {
      ptrType: toType,
      ptr: dp
    });
  }
}
function init_RegisteredPointer() {
  RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
  RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
  RegisteredPointer.prototype["argPackAdvance"] = 8;
  RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
  RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
  RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
}
function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
  this.name = name;
  this.registeredClass = registeredClass;
  this.isReference = isReference;
  this.isConst = isConst;
  this.isSmartPointer = isSmartPointer;
  this.pointeeType = pointeeType;
  this.sharingPolicy = sharingPolicy;
  this.rawGetPointee = rawGetPointee;
  this.rawConstructor = rawConstructor;
  this.rawShare = rawShare;
  this.rawDestructor = rawDestructor;
  if (!isSmartPointer && registeredClass.baseClass === undefined) {
    if (isConst) {
      this["toWireType"] = constNoSmartPtrRawPointerToWireType;
      this.destructorFunction = null;
    } else {
      this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
      this.destructorFunction = null;
    }
  } else {
    this["toWireType"] = genericPointerToWireType;
  }
}
function replacePublicSymbol(name, value, numArguments) {
  if (!Module.hasOwnProperty(name)) {
    throwInternalError("Replacing nonexistant public symbol");
  }
  if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
    Module[name].overloadTable[numArguments] = value;
  } else {
    Module[name] = value;
    Module[name].argCount = numArguments;
  }
}
function embind__requireFunction(signature, rawFunction) {
  signature = readLatin1String(signature);
  function makeDynCaller(dynCall) {
    var args = [];
    for (var i = 1; i < signature.length; ++i) {
      args.push("a" + i);
    }
    var name = "dynCall_" + signature + "_" + rawFunction;
    var body = "return function " + name + "(" + args.join(", ") + ") {\n";
    body += "    return dynCall(rawFunction" + (args.length ? ", " : "") + args.join(", ") + ");\n";
    body += "};\n";
    return new Function("dynCall", "rawFunction", body)(dynCall, rawFunction);
  }
  var fp;
  if (Module["FUNCTION_TABLE_" + signature] !== undefined) {
    fp = Module["FUNCTION_TABLE_" + signature][rawFunction];
  } else if (typeof FUNCTION_TABLE !== "undefined") {
    fp = FUNCTION_TABLE[rawFunction];
  } else {
    var dc = Module["dynCall_" + signature];
    if (dc === undefined) {
      dc = Module["dynCall_" + signature.replace(/f/g, "d")];
      if (dc === undefined) {
        throwBindingError("No dynCall invoker for signature: " + signature);
      }
    }
    fp = makeDynCaller(dc);
  }
  if (typeof fp !== "function") {
    throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
  }
  return fp;
}
var UnboundTypeError = undefined;
function getTypeName(type) {
  var ptr = ___getTypeName(type);
  var rv = readLatin1String(ptr);
  _free(ptr);
  return rv;
}
function throwUnboundTypeError(message, types) {
  var unboundTypes = [];
  var seen = {};
  function visit(type) {
    if (seen[type]) {
      return;
    }
    if (registeredTypes[type]) {
      return;
    }
    if (typeDependencies[type]) {
      typeDependencies[type].forEach(visit);
      return;
    }
    unboundTypes.push(type);
    seen[type] = true;
  }
  types.forEach(visit);
  throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
}
function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
  name = readLatin1String(name);
  getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
  if (upcast) {
    upcast = embind__requireFunction(upcastSignature, upcast);
  }
  if (downcast) {
    downcast = embind__requireFunction(downcastSignature, downcast);
  }
  rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
  var legalFunctionName = makeLegalFunctionName(name);
  exposePublicSymbol(legalFunctionName, function () {
    throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
  });
  whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) {
    base = base[0];
    var baseClass;
    var basePrototype;
    if (baseClassRawType) {
      baseClass = base.registeredClass;
      basePrototype = baseClass.instancePrototype;
    } else {
      basePrototype = ClassHandle.prototype;
    }
    var constructor = createNamedFunction(legalFunctionName, function () {
      if (Object.getPrototypeOf(this) !== instancePrototype) {
        throw new BindingError("Use 'new' to construct " + name);
      }
      if (undefined === registeredClass.constructor_body) {
        throw new BindingError(name + " has no accessible constructor");
      }
      var body = registeredClass.constructor_body[arguments.length];
      if (undefined === body) {
        throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
      }
      return body.apply(this, arguments);
    });
    var instancePrototype = Object.create(basePrototype, {
      constructor: {
        value: constructor
      }
    });
    constructor.prototype = instancePrototype;
    var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
    var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
    var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
    var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
    registeredPointers[rawType] = {
      pointerType: pointerConverter,
      constPointerType: constPointerConverter
    };
    replacePublicSymbol(legalFunctionName, constructor);
    return [referenceConverter, pointerConverter, constPointerConverter];
  });
}
function heap32VectorToArray(count, firstElement) {
  var array = [];
  for (var i = 0; i < count; i++) {
    array.push(HEAP32[(firstElement >> 2) + i]);
  }
  return array;
}
function runDestructors(destructors) {
  while (destructors.length) {
    var ptr = destructors.pop();
    var del = destructors.pop();
    del(ptr);
  }
}
function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
  assert(argCount > 0);
  var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  invoker = embind__requireFunction(invokerSignature, invoker);
  var args = [rawConstructor];
  var destructors = [];
  whenDependentTypesAreResolved([], [rawClassType], function (classType) {
    classType = classType[0];
    var humanName = "constructor " + classType.name;
    if (undefined === classType.registeredClass.constructor_body) {
      classType.registeredClass.constructor_body = [];
    }
    if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
      throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
    }
    classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
      throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
    };
    whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
      classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
        if (arguments.length !== argCount - 1) {
          throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
        }
        destructors.length = 0;
        args.length = argCount;
        for (var i = 1; i < argCount; ++i) {
          args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
        }
        var ptr = invoker.apply(null, args);
        runDestructors(destructors);
        return argTypes[0]["fromWireType"](ptr);
      };
      return [];
    });
    return [];
  });
}
function new_(constructor, argumentList) {
  if (!(constructor instanceof Function)) {
    throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
  }
  var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function () {});
  dummy.prototype = constructor.prototype;
  var obj = new dummy();
  var r = constructor.apply(obj, argumentList);
  return r instanceof Object ? r : obj;
}
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
  var argCount = argTypes.length;
  if (argCount < 2) {
    throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
  }
  var isClassMethodFunc = argTypes[1] !== null && classType !== null;
  var needsDestructorStack = false;
  for (var i = 1; i < argTypes.length; ++i) {
    if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
      needsDestructorStack = true;
      break;
    }
  }
  var returns = argTypes[0].name !== "void";
  var argsList = "";
  var argsListWired = "";
  for (var i = 0; i < argCount - 2; ++i) {
    argsList += (i !== 0 ? ", " : "") + "arg" + i;
    argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
  }
  var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" + "if (arguments.length !== " + (argCount - 2) + ") {\n" + "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" + "}\n";
  if (needsDestructorStack) {
    invokerFnBody += "var destructors = [];\n";
  }
  var dtorStack = needsDestructorStack ? "destructors" : "null";
  var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
  var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  if (isClassMethodFunc) {
    invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
  }
  for (var i = 0; i < argCount - 2; ++i) {
    invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
    args1.push("argType" + i);
    args2.push(argTypes[i + 2]);
  }
  if (isClassMethodFunc) {
    argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
  }
  invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
  if (needsDestructorStack) {
    invokerFnBody += "runDestructors(destructors);\n";
  } else {
    for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
      var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
      if (argTypes[i].destructorFunction !== null) {
        invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
        args1.push(paramName + "_dtor");
        args2.push(argTypes[i].destructorFunction);
      }
    }
  }
  if (returns) {
    invokerFnBody += "var ret = retType.fromWireType(rv);\n" + "return ret;\n";
  } else {}
  invokerFnBody += "}\n";
  args1.push(invokerFnBody);
  var invokerFunction = new_(Function, args1).apply(null, args2);
  return invokerFunction;
}
function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
  var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  methodName = readLatin1String(methodName);
  rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  whenDependentTypesAreResolved([], [rawClassType], function (classType) {
    classType = classType[0];
    var humanName = classType.name + "." + methodName;
    if (isPureVirtual) {
      classType.registeredClass.pureVirtualFunctions.push(methodName);
    }
    function unboundTypesHandler() {
      throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
    }
    var proto = classType.registeredClass.instancePrototype;
    var method = proto[methodName];
    if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
      unboundTypesHandler.argCount = argCount - 2;
      unboundTypesHandler.className = classType.name;
      proto[methodName] = unboundTypesHandler;
    } else {
      ensureOverloadTable(proto, methodName, humanName);
      proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
    }
    whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
      var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
      if (undefined === proto[methodName].overloadTable) {
        memberFunction.argCount = argCount - 2;
        proto[methodName] = memberFunction;
      } else {
        proto[methodName].overloadTable[argCount - 2] = memberFunction;
      }
      return [];
    });
    return [];
  });
}
var emval_free_list = [];
var emval_handle_array = [{}, {
  value: undefined
}, {
  value: null
}, {
  value: true
}, {
  value: false
}];
function __emval_decref(handle) {
  if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
    emval_handle_array[handle] = undefined;
    emval_free_list.push(handle);
  }
}
function count_emval_handles() {
  var count = 0;
  for (var i = 5; i < emval_handle_array.length; ++i) {
    if (emval_handle_array[i] !== undefined) {
      ++count;
    }
  }
  return count;
}
function get_first_emval() {
  for (var i = 5; i < emval_handle_array.length; ++i) {
    if (emval_handle_array[i] !== undefined) {
      return emval_handle_array[i];
    }
  }
  return null;
}
function init_emval() {
  Module["count_emval_handles"] = count_emval_handles;
  Module["get_first_emval"] = get_first_emval;
}
function __emval_register(value) {
  switch (value) {
    case undefined:
      {
        return 1;
      }
    case null:
      {
        return 2;
      }
    case true:
      {
        return 3;
      }
    case false:
      {
        return 4;
      }
    default:
      {
        var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
        emval_handle_array[handle] = {
          refcount: 1,
          value: value
        };
        return handle;
      }
  }
}
function __embind_register_emval(rawType, name) {
  name = readLatin1String(name);
  registerType(rawType, {
    name: name,
    "fromWireType": function (handle) {
      var rv = emval_handle_array[handle].value;
      __emval_decref(handle);
      return rv;
    },
    "toWireType": function (destructors, value) {
      return __emval_register(value);
    },
    "argPackAdvance": 8,
    "readValueFromPointer": simpleReadValueFromPointer,
    destructorFunction: null
  });
}
function _embind_repr(v) {
  if (v === null) {
    return "null";
  }
  var t = typeof v;
  if (t === "object" || t === "array" || t === "function") {
    return v.toString();
  } else {
    return "" + v;
  }
}
function floatReadValueFromPointer(name, shift) {
  switch (shift) {
    case 2:
      return function (pointer) {
        return this["fromWireType"](HEAPF32[pointer >> 2]);
      };
    case 3:
      return function (pointer) {
        return this["fromWireType"](HEAPF64[pointer >> 3]);
      };
    default:
      throw new TypeError("Unknown float type: " + name);
  }
}
function __embind_register_float(rawType, name, size) {
  var shift = getShiftFromSize(size);
  name = readLatin1String(name);
  registerType(rawType, {
    name: name,
    "fromWireType": function (value) {
      return value;
    },
    "toWireType": function (destructors, value) {
      if (typeof value !== "number" && typeof value !== "boolean") {
        throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
      }
      return value;
    },
    "argPackAdvance": 8,
    "readValueFromPointer": floatReadValueFromPointer(name, shift),
    destructorFunction: null
  });
}
function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
  var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  name = readLatin1String(name);
  rawInvoker = embind__requireFunction(signature, rawInvoker);
  exposePublicSymbol(name, function () {
    throwUnboundTypeError("Cannot call " + name + " due to unbound types", argTypes);
  }, argCount - 1);
  whenDependentTypesAreResolved([], argTypes, function (argTypes) {
    var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));
    replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
    return [];
  });
}
function integerReadValueFromPointer(name, shift, signed) {
  switch (shift) {
    case 0:
      return signed ? function readS8FromPointer(pointer) {
        return HEAP8[pointer];
      } : function readU8FromPointer(pointer) {
        return HEAPU8[pointer];
      };
    case 1:
      return signed ? function readS16FromPointer(pointer) {
        return HEAP16[pointer >> 1];
      } : function readU16FromPointer(pointer) {
        return HEAPU16[pointer >> 1];
      };
    case 2:
      return signed ? function readS32FromPointer(pointer) {
        return HEAP32[pointer >> 2];
      } : function readU32FromPointer(pointer) {
        return HEAPU32[pointer >> 2];
      };
    default:
      throw new TypeError("Unknown integer type: " + name);
  }
}
function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
  name = readLatin1String(name);
  if (maxRange === -1) {
    maxRange = 4294967295;
  }
  var shift = getShiftFromSize(size);
  var fromWireType = function (value) {
    return value;
  };
  if (minRange === 0) {
    var bitshift = 32 - 8 * size;
    fromWireType = function (value) {
      return value << bitshift >>> bitshift;
    };
  }
  var isUnsignedType = name.indexOf("unsigned") != -1;
  registerType(primitiveType, {
    name: name,
    "fromWireType": fromWireType,
    "toWireType": function (destructors, value) {
      if (typeof value !== "number" && typeof value !== "boolean") {
        throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
      }
      if (value < minRange || value > maxRange) {
        throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
      }
      return isUnsignedType ? value >>> 0 : value | 0;
    },
    "argPackAdvance": 8,
    "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
    destructorFunction: null
  });
}
function __embind_register_memory_view(rawType, dataTypeIndex, name) {
  var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
  var TA = typeMapping[dataTypeIndex];
  function decodeMemoryView(handle) {
    handle = handle >> 2;
    var heap = HEAPU32;
    var size = heap[handle];
    var data = heap[handle + 1];
    return new TA(heap["buffer"], data, size);
  }
  name = readLatin1String(name);
  registerType(rawType, {
    name: name,
    "fromWireType": decodeMemoryView,
    "argPackAdvance": 8,
    "readValueFromPointer": decodeMemoryView
  }, {
    ignoreDuplicateRegistrations: true
  });
}
function __embind_register_std_string(rawType, name) {
  name = readLatin1String(name);
  var stdStringIsUTF8 = name === "std::string";
  registerType(rawType, {
    name: name,
    "fromWireType": function (value) {
      var length = HEAPU32[value >> 2];
      var str;
      if (stdStringIsUTF8) {
        var endChar = HEAPU8[value + 4 + length];
        var endCharSwap = 0;
        if (endChar != 0) {
          endCharSwap = endChar;
          HEAPU8[value + 4 + length] = 0;
        }
        var decodeStartPtr = value + 4;
        for (var i = 0; i <= length; ++i) {
          var currentBytePtr = value + 4 + i;
          if (HEAPU8[currentBytePtr] == 0) {
            var stringSegment = UTF8ToString(decodeStartPtr);
            if (str === undefined) str = stringSegment;else {
              str += String.fromCharCode(0);
              str += stringSegment;
            }
            decodeStartPtr = currentBytePtr + 1;
          }
        }
        if (endCharSwap != 0) HEAPU8[value + 4 + length] = endCharSwap;
      } else {
        var a = new Array(length);
        for (var i = 0; i < length; ++i) {
          a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
        }
        str = a.join("");
      }
      _free(value);
      return str;
    },
    "toWireType": function (destructors, value) {
      if (value instanceof ArrayBuffer) {
        value = new Uint8Array(value);
      }
      var getLength;
      var valueIsOfTypeString = typeof value === "string";
      if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
        throwBindingError("Cannot pass non-string to std::string");
      }
      if (stdStringIsUTF8 && valueIsOfTypeString) {
        getLength = function () {
          return lengthBytesUTF8(value);
        };
      } else {
        getLength = function () {
          return value.length;
        };
      }
      var length = getLength();
      var ptr = _malloc(4 + length + 1);
      HEAPU32[ptr >> 2] = length;
      if (stdStringIsUTF8 && valueIsOfTypeString) {
        stringToUTF8(value, ptr + 4, length + 1);
      } else {
        if (valueIsOfTypeString) {
          for (var i = 0; i < length; ++i) {
            var charCode = value.charCodeAt(i);
            if (charCode > 255) {
              _free(ptr);
              throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
            }
            HEAPU8[ptr + 4 + i] = charCode;
          }
        } else {
          for (var i = 0; i < length; ++i) {
            HEAPU8[ptr + 4 + i] = value[i];
          }
        }
      }
      if (destructors !== null) {
        destructors.push(_free, ptr);
      }
      return ptr;
    },
    "argPackAdvance": 8,
    "readValueFromPointer": simpleReadValueFromPointer,
    destructorFunction: function (ptr) {
      _free(ptr);
    }
  });
}
function __embind_register_std_wstring(rawType, charSize, name) {
  name = readLatin1String(name);
  var getHeap, shift;
  if (charSize === 2) {
    getHeap = function () {
      return HEAPU16;
    };
    shift = 1;
  } else if (charSize === 4) {
    getHeap = function () {
      return HEAPU32;
    };
    shift = 2;
  }
  registerType(rawType, {
    name: name,
    "fromWireType": function (value) {
      var HEAP = getHeap();
      var length = HEAPU32[value >> 2];
      var a = new Array(length);
      var start = value + 4 >> shift;
      for (var i = 0; i < length; ++i) {
        a[i] = String.fromCharCode(HEAP[start + i]);
      }
      _free(value);
      return a.join("");
    },
    "toWireType": function (destructors, value) {
      var length = value.length;
      var ptr = _malloc(4 + length * charSize);
      var HEAP = getHeap();
      HEAPU32[ptr >> 2] = length;
      var start = ptr + 4 >> shift;
      for (var i = 0; i < length; ++i) {
        HEAP[start + i] = value.charCodeAt(i);
      }
      if (destructors !== null) {
        destructors.push(_free, ptr);
      }
      return ptr;
    },
    "argPackAdvance": 8,
    "readValueFromPointer": simpleReadValueFromPointer,
    destructorFunction: function (ptr) {
      _free(ptr);
    }
  });
}
function __embind_register_void(rawType, name) {
  name = readLatin1String(name);
  registerType(rawType, {
    isVoid: true,
    name: name,
    "argPackAdvance": 0,
    "fromWireType": function () {
      return undefined;
    },
    "toWireType": function (destructors, o) {
      return undefined;
    }
  });
}
function _abort() {
  abort();
}
var ___tm_current = 21232;
var ___tm_timezone = (stringToUTF8("GMT", 21280, 4), 21280);
function _tzset() {
  if (_tzset.called) return;
  _tzset.called = true;
  HEAP32[__get_timezone() >> 2] = new Date().getTimezoneOffset() * 60;
  var currentYear = new Date().getFullYear();
  var winter = new Date(currentYear, 0, 1);
  var summer = new Date(currentYear, 6, 1);
  HEAP32[__get_daylight() >> 2] = Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  function extractZone(date) {
    var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
    return match ? match[1] : "GMT";
  }
  var winterName = extractZone(winter);
  var summerName = extractZone(summer);
  var winterNamePtr = allocate(intArrayFromString(winterName), "i8", ALLOC_NORMAL);
  var summerNamePtr = allocate(intArrayFromString(summerName), "i8", ALLOC_NORMAL);
  if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
    HEAP32[__get_tzname() >> 2] = winterNamePtr;
    HEAP32[__get_tzname() + 4 >> 2] = summerNamePtr;
  } else {
    HEAP32[__get_tzname() >> 2] = summerNamePtr;
    HEAP32[__get_tzname() + 4 >> 2] = winterNamePtr;
  }
}
function _localtime_r(time, tmPtr) {
  _tzset();
  var date = new Date(HEAP32[time >> 2] * 1e3);
  HEAP32[tmPtr >> 2] = date.getSeconds();
  HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
  HEAP32[tmPtr + 8 >> 2] = date.getHours();
  HEAP32[tmPtr + 12 >> 2] = date.getDate();
  HEAP32[tmPtr + 16 >> 2] = date.getMonth();
  HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
  HEAP32[tmPtr + 24 >> 2] = date.getDay();
  var start = new Date(date.getFullYear(), 0, 1);
  var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
  HEAP32[tmPtr + 28 >> 2] = yday;
  HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
  var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
  var winterOffset = start.getTimezoneOffset();
  var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
  HEAP32[tmPtr + 32 >> 2] = dst;
  var zonePtr = HEAP32[__get_tzname() + (dst ? 4 : 0) >> 2];
  HEAP32[tmPtr + 40 >> 2] = zonePtr;
  return tmPtr;
}
function _mktime(tmPtr) {
  _tzset();
  var date = new Date(HEAP32[tmPtr + 20 >> 2] + 1900, HEAP32[tmPtr + 16 >> 2], HEAP32[tmPtr + 12 >> 2], HEAP32[tmPtr + 8 >> 2], HEAP32[tmPtr + 4 >> 2], HEAP32[tmPtr >> 2], 0);
  var dst = HEAP32[tmPtr + 32 >> 2];
  var guessedOffset = date.getTimezoneOffset();
  var start = new Date(date.getFullYear(), 0, 1);
  var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
  var winterOffset = start.getTimezoneOffset();
  var dstOffset = Math.min(winterOffset, summerOffset);
  if (dst < 0) {
    HEAP32[tmPtr + 32 >> 2] = Number(summerOffset != winterOffset && dstOffset == guessedOffset);
  } else if (dst > 0 != (dstOffset == guessedOffset)) {
    var nonDstOffset = Math.max(winterOffset, summerOffset);
    var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
    date.setTime(date.getTime() + (trueOffset - guessedOffset) * 6e4);
  }
  HEAP32[tmPtr + 24 >> 2] = date.getDay();
  var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
  HEAP32[tmPtr + 28 >> 2] = yday;
  return date.getTime() / 1e3 | 0;
}
function _asctime_r(tmPtr, buf) {
  var date = {
    tm_sec: HEAP32[tmPtr >> 2],
    tm_min: HEAP32[tmPtr + 4 >> 2],
    tm_hour: HEAP32[tmPtr + 8 >> 2],
    tm_mday: HEAP32[tmPtr + 12 >> 2],
    tm_mon: HEAP32[tmPtr + 16 >> 2],
    tm_year: HEAP32[tmPtr + 20 >> 2],
    tm_wday: HEAP32[tmPtr + 24 >> 2]
  };
  var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  var s = days[date.tm_wday] + " " + months[date.tm_mon] + (date.tm_mday < 10 ? "  " : " ") + date.tm_mday + (date.tm_hour < 10 ? " 0" : " ") + date.tm_hour + (date.tm_min < 10 ? ":0" : ":") + date.tm_min + (date.tm_sec < 10 ? ":0" : ":") + date.tm_sec + " " + (1900 + date.tm_year) + "\n";
  stringToUTF8(s, buf, 26);
  return buf;
}
function _ctime_r(time, buf) {
  var stack = stackSave();
  var rv = _asctime_r(_localtime_r(time, stackAlloc(44)), buf);
  stackRestore(stack);
  return rv;
}
function _ctime(timer) {
  return _ctime_r(timer, ___tm_current);
}
function _emscripten_get_heap_size() {
  return HEAP8.length;
}
function abortOnCannotGrowMemory(requestedSize) {
  abort("OOM");
}
function emscripten_realloc_buffer(size) {
  try {
    var newBuffer = new ArrayBuffer(size);
    if (newBuffer.byteLength != size) return;
    new Int8Array(newBuffer).set(HEAP8);
    _emscripten_replace_memory(newBuffer);
    updateGlobalBufferAndViews(newBuffer);
    return 1;
  } catch (e) {}
}
function _emscripten_resize_heap(requestedSize) {
  var oldSize = _emscripten_get_heap_size();
  var PAGE_MULTIPLE = 16777216;
  var LIMIT = 2147483648 - PAGE_MULTIPLE;
  if (requestedSize > LIMIT) {
    return false;
  }
  var MIN_TOTAL_MEMORY = 16777216;
  var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
  while (newSize < requestedSize) {
    if (newSize <= 536870912) {
      newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
    } else {
      newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
    }
  }
  var replacement = emscripten_realloc_buffer(newSize);
  if (!replacement) {
    return false;
  }
  return true;
}
function _emscripten_memcpy_big(dest, src, num) {
  HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
}
function _time(ptr) {
  var ret = Date.now() / 1e3 | 0;
  if (ptr) {
    HEAP32[ptr >> 2] = ret;
  }
  return ret;
}
if (ENVIRONMENT_IS_NODE) {
  _emscripten_get_now = function _emscripten_get_now_actual() {
    var t = process["hrtime"]();
    return t[0] * 1e3 + t[1] / 1e6;
  };
} else if (typeof dateNow !== "undefined") {
  _emscripten_get_now = dateNow;
} else if (typeof performance === "object" && performance && typeof performance["now"] === "function") {
  _emscripten_get_now = function () {
    return performance["now"]();
  };
} else {
  _emscripten_get_now = Date.now;
}
FS.staticInit();
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
embind_init_charCodes();
BindingError = Module["BindingError"] = extendError(Error, "BindingError");
InternalError = Module["InternalError"] = extendError(Error, "InternalError");
init_ClassHandle();
init_RegisteredPointer();
init_embind();
UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
init_emval();
var ASSERTIONS = false;
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 255) {
      if (ASSERTIONS) {
        assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
      }
      chr &= 255;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join("");
}
var decodeBase64 = typeof atob === "function" ? atob : function (input) {
  var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  var output = "";
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));
    chr1 = enc1 << 2 | enc2 >> 4;
    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
    chr3 = (enc3 & 3) << 6 | enc4;
    output = output + String.fromCharCode(chr1);
    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, "base64");
    } catch (_) {
      buf = new Buffer(s, "base64");
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0; i < decoded.length; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error("Converting base64 string to bytes failed.");
  }
}
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }
  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
var asmGlobalArg = {
  "Math": Math,
  "Int8Array": Int8Array,
  "Int16Array": Int16Array,
  "Int32Array": Int32Array,
  "Uint8Array": Uint8Array,
  "Uint16Array": Uint16Array,
  "Float32Array": Float32Array,
  "Float64Array": Float64Array,
  "NaN": NaN,
  Infinity: Infinity
};
var asmLibraryArg = {
  "$": _emscripten_get_now,
  "A": ___syscall63,
  "B": ___unlock,
  "C": ___wasi_fd_close,
  "D": ___wasi_fd_read,
  "E": ___wasi_fd_seek,
  "F": ___wasi_fd_write,
  "G": __embind_register_bool,
  "H": __embind_register_class,
  "I": __embind_register_class_constructor,
  "J": __embind_register_class_function,
  "K": __embind_register_emval,
  "L": __embind_register_float,
  "M": __embind_register_function,
  "N": __embind_register_integer,
  "O": __embind_register_memory_view,
  "P": __embind_register_std_string,
  "Q": __embind_register_std_wstring,
  "R": __embind_register_void,
  "S": __emval_decref,
  "T": __emval_register,
  "U": _abort,
  "V": _asctime_r,
  "W": _clock_gettime,
  "X": _ctime,
  "Y": _ctime_r,
  "Z": _embind_repr,
  "_": _emscripten_get_heap_size,
  "a": abort,
  "a$": runDestructors,
  "aA": extendError,
  "aB": floatReadValueFromPointer,
  "aC": flushPendingDeletes,
  "aD": genericPointerToWireType,
  "aE": getBasestPointer,
  "aF": getInheritedInstance,
  "aG": getInheritedInstanceCount,
  "aH": getLiveInheritedInstances,
  "aI": getShiftFromSize,
  "aJ": getTypeName,
  "aK": get_first_emval,
  "aL": heap32VectorToArray,
  "aM": init_ClassHandle,
  "aN": init_RegisteredPointer,
  "aO": init_embind,
  "aP": init_emval,
  "aQ": integerReadValueFromPointer,
  "aR": jsStackTrace,
  "aS": makeClassHandle,
  "aT": makeLegalFunctionName,
  "aU": new_,
  "aV": nonConstNoSmartPtrRawPointerToWireType,
  "aW": readLatin1String,
  "aX": registerType,
  "aY": releaseClassHandle,
  "aZ": replacePublicSymbol,
  "a_": runDestructor,
  "aa": _emscripten_get_now_is_monotonic,
  "ab": _emscripten_memcpy_big,
  "ac": _emscripten_resize_heap,
  "ad": _fd_close,
  "ae": _fd_read,
  "af": _fd_seek,
  "ag": _fd_write,
  "ah": _localtime_r,
  "ai": _mktime,
  "aj": _time,
  "ak": _tzset,
  "al": abortOnCannotGrowMemory,
  "am": attachFinalizer,
  "an": constNoSmartPtrRawPointerToWireType,
  "ao": count_emval_handles,
  "ap": craftInvokerFunction,
  "aq": createNamedFunction,
  "ar": demangle,
  "as": demangleAll,
  "at": detachFinalizer,
  "au": downcastPointer,
  "av": embind__requireFunction,
  "aw": embind_init_charCodes,
  "ax": emscripten_realloc_buffer,
  "ay": ensureOverloadTable,
  "az": exposePublicSymbol,
  "b": setTempRet0,
  "ba": setDelayFunction,
  "bb": shallowCopyInternalPointer,
  "bc": simpleReadValueFromPointer,
  "bd": stackTrace,
  "be": throwBindingError,
  "bf": throwInstanceAlreadyDeleted,
  "bg": throwInternalError,
  "bh": throwUnboundTypeError,
  "bi": upcastPointer,
  "bj": whenDependentTypesAreResolved,
  "bk": tempDoublePtr,
  "c": getTempRet0,
  "d": ClassHandle,
  "e": ClassHandle_clone,
  "f": ClassHandle_delete,
  "g": ClassHandle_deleteLater,
  "h": ClassHandle_isAliasOf,
  "i": ClassHandle_isDeleted,
  "j": RegisteredClass,
  "k": RegisteredPointer,
  "l": RegisteredPointer_deleteObject,
  "m": RegisteredPointer_destructor,
  "n": RegisteredPointer_fromWireType,
  "o": RegisteredPointer_getPointee,
  "p": ___buildEnvironment,
  "q": ___clock_gettime,
  "r": ___gxx_personality_v0,
  "s": ___lock,
  "t": ___setErrNo,
  "u": ___syscall10,
  "v": ___syscall221,
  "w": ___syscall330,
  "x": ___syscall40,
  "y": ___syscall5,
  "z": ___syscall54
}; // EMSCRIPTEN_START_ASM
var asm = ( /** @suppress {uselessCode} */function (global, env, buffer) {
  "almost asm";

  var a = new global.Int8Array(buffer),
    b = new global.Int16Array(buffer),
    c = new global.Int32Array(buffer),
    d = new global.Uint8Array(buffer),
    e = new global.Uint16Array(buffer),
    f = new global.Float32Array(buffer),
    g = new global.Float64Array(buffer),
    h = env.bk | 0,
    i = 0,
    j = 0,
    k = 0,
    l = 0,
    m = 0,
    n = 0,
    o = 0,
    p = 0.0,
    q = global.NaN,
    r = global.Infinity,
    s = global.Math.abs,
    t = global.Math.sqrt,
    u = global.Math.pow,
    v = global.Math.log,
    w = global.Math.imul,
    x = global.Math.clz32,
    y = env.a,
    z = env.b,
    A = env.c,
    B = env.d,
    C = env.e,
    D = env.f,
    E = env.g,
    F = env.h,
    G = env.i,
    H = env.j,
    I = env.k,
    J = env.l,
    K = env.m,
    L = env.n,
    M = env.o,
    N = env.p,
    O = env.q,
    P = env.r,
    Q = env.s,
    R = env.t,
    S = env.u,
    T = env.v,
    U = env.w,
    V = env.x,
    W = env.y,
    X = env.z,
    Y = env.A,
    Z = env.B,
    _ = env.C,
    $ = env.D,
    aa = env.E,
    ba = env.F,
    ca = env.G,
    da = env.H,
    ea = env.I,
    fa = env.J,
    ga = env.K,
    ha = env.L,
    ia = env.M,
    ja = env.N,
    ka = env.O,
    la = env.P,
    ma = env.Q,
    na = env.R,
    oa = env.S,
    pa = env.T,
    qa = env.U,
    ra = env.V,
    sa = env.W,
    ta = env.X,
    ua = env.Y,
    va = env.Z,
    wa = env._,
    xa = env.$,
    ya = env.aa,
    za = env.ab,
    Aa = env.ac,
    Ba = env.ad,
    Ca = env.ae,
    Da = env.af,
    Ea = env.ag,
    Fa = env.ah,
    Ga = env.ai,
    Ha = env.aj,
    Ia = env.ak,
    Ja = env.al,
    Ka = env.am,
    La = env.an,
    Ma = env.ao,
    Na = env.ap,
    Oa = env.aq,
    Pa = env.ar,
    Qa = env.as,
    Ra = env.at,
    Sa = env.au,
    Ta = env.av,
    Ua = env.aw,
    Va = env.ax,
    Wa = env.ay,
    Xa = env.az,
    Ya = env.aA,
    Za = env.aB,
    _a = env.aC,
    $a = env.aD,
    ab = env.aE,
    bb = env.aF,
    cb = env.aG,
    db = env.aH,
    eb = env.aI,
    fb = env.aJ,
    gb = env.aK,
    hb = env.aL,
    ib = env.aM,
    jb = env.aN,
    kb = env.aO,
    lb = env.aP,
    mb = env.aQ,
    nb = env.aR,
    ob = env.aS,
    pb = env.aT,
    qb = env.aU,
    rb = env.aV,
    sb = env.aW,
    tb = env.aX,
    ub = env.aY,
    vb = env.aZ,
    wb = env.a_,
    xb = env.a$,
    yb = env.ba,
    zb = env.bb,
    Ab = env.bc,
    Bb = env.bd,
    Cb = env.be,
    Db = env.bf,
    Eb = env.bg,
    Fb = env.bh,
    Gb = env.bi,
    Hb = env.bj,
    Ib = 21392,
    Jb = 5264272,
    Kb = 0.0;
  function Lb(newBuffer) {
    a = new Int8Array(newBuffer);
    d = new Uint8Array(newBuffer);
    b = new Int16Array(newBuffer);
    e = new Uint16Array(newBuffer);
    c = new Int32Array(newBuffer);
    f = new Float32Array(newBuffer);
    g = new Float64Array(newBuffer);
    buffer = newBuffer;
    return true;
  }
  // EMSCRIPTEN_START_FUNCS
  function rg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      v = 0,
      w = 0;
    if ((c[a >> 2] | 0) >= 1) {
      d = a + 44 | 0;
      e = a + 4904 | 0;
      f = a + 4936 | 0;
      b = 1;
      while (1) {
        v = c[d >> 2] | 0;
        t = v + (b * 96 | 0) + 48 | 0;
        g[t >> 3] = +g[t >> 3] / +g[e >> 3];
        v = v + (b * 96 | 0) + 64 | 0;
        g[v >> 3] = +g[v >> 3] / +g[f >> 3];
        if ((b | 0) < (c[a >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    v = a + 8 | 0;
    b = c[v >> 2] | 0;
    if ((b | 0) >= 1) {
      f = a + 44 | 0;
      h = a + 4912 | 0;
      e = 1;
      d = b;
      while (1) {
        b = c[(c[f >> 2] | 0) + (e * 96 | 0) + 56 >> 2] | 0;
        if (!b) b = d;else {
          do {
            g[b >> 3] = +g[b >> 3] / +g[h >> 3];
            b = c[b + 16 >> 2] | 0;
          } while ((b | 0) != 0);
          b = c[v >> 2] | 0;
        }
        if ((e | 0) < (b | 0)) {
          e = e + 1 | 0;
          d = b;
        } else break;
      }
    }
    r = a + 4904 | 0;
    s = a + 4928 | 0;
    j = +g[s >> 3];
    t = a + 4328 | 0;
    g[t >> 3] = +g[t >> 3] / j;
    t = a + 4336 | 0;
    g[t >> 3] = +g[t >> 3] / j;
    t = a + 4960 | 0;
    f = a + 4312 | 0;
    j = +u(+ +g[t >> 3], + +g[f >> 3]) / j;
    if ((b | 0) >= 1) {
      h = a + 44 | 0;
      e = 1;
      while (1) {
        d = (c[h >> 2] | 0) + (e * 96 | 0) + 72 | 0;
        i = +g[d >> 3];
        if (i > 0.0) {
          i = j / +u(+i, + +g[f >> 3]);
          g[d >> 3] = i;
          b = c[v >> 2] | 0;
        }
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    d = a + 4 | 0;
    if ((c[d >> 2] | 0) >= 1) {
      e = a + 52 | 0;
      f = a + 44 | 0;
      h = a + 5040 | 0;
      b = 1;
      while (1) {
        q = c[e >> 2] | 0;
        p = c[q + (b * 120 | 0) >> 2] | 0;
        o = c[f >> 2] | 0;
        m = o + (p * 96 | 0) + 48 | 0;
        n = q + (b * 120 | 0) + 32 | 0;
        g[n >> 3] = +g[m >> 3] + +g[n >> 3] / +g[r >> 3];
        n = q + (b * 120 | 0) + 16 | 0;
        g[n >> 3] = +g[m >> 3] + +g[n >> 3] / +g[r >> 3];
        n = q + (b * 120 | 0) + 24 | 0;
        g[n >> 3] = +g[m >> 3] + +g[n >> 3] / +g[r >> 3];
        n = q + (b * 120 | 0) + 8 | 0;
        i = +g[n >> 3] / +g[r >> 3];
        g[n >> 3] = i * i * 3.141592653589793 * .25;
        n = q + (b * 120 | 0) + 56 | 0;
        i = +g[n >> 3] / +g[h >> 3];
        g[n >> 3] = i;
        n = q + (b * 120 | 0) + 40 | 0;
        g[n >> 3] = +g[n >> 3] / +g[h >> 3];
        n = q + (b * 120 | 0) + 48 | 0;
        j = +g[n >> 3] / +g[h >> 3];
        g[n >> 3] = j;
        n = q + (b * 120 | 0) + 64 | 0;
        g[n >> 3] = +g[n >> 3] / 86400.0;
        g[q + (b * 120 | 0) + 72 >> 3] = i;
        g[q + (b * 120 | 0) + 80 >> 3] = +g[o + (p * 96 | 0) + 64 >> 3];
        q = q + (b * 120 | 0) + 104 | 0;
        g[q >> 3] = j * +g[q >> 3];
        if ((b | 0) < (c[d >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    f = a + 4360 | 0;
    g[f >> 3] = +g[f >> 3] / +g[t >> 3];
    f = a + 4920 | 0;
    h = a + 4368 | 0;
    g[h >> 3] = +g[h >> 3] / +g[f >> 3];
    j = +g[a + 4936 >> 3];
    h = a + 4808 | 0;
    g[h >> 3] = +g[h >> 3] / j;
    h = a + 4688 | 0;
    g[h >> 3] = +g[h >> 3] / j;
    h = a + 4792 | 0;
    g[h >> 3] = +g[h >> 3] / 86400.0;
    h = a + 4800 | 0;
    g[h >> 3] = +g[h >> 3] / 86400.0;
    h = a + 12 | 0;
    if ((c[h >> 2] | 0) >= 1) {
      k = a + 48 | 0;
      l = a + 4500 | 0;
      m = a + 4952 | 0;
      n = a + 4944 | 0;
      o = a + 56 | 0;
      p = a + 1116 | 0;
      q = a + 5024 | 0;
      e = 1;
      while (1) {
        b = c[k >> 2] | 0;
        d = c[b + (e << 7) + 104 >> 2] | 0;
        a: do if (d >>> 0 < 2) {
          if ((c[l >> 2] | 0) == 1) {
            d = b + (e << 7) + 56 | 0;
            g[d >> 3] = +g[d >> 3] / (+g[r >> 3] * 1.0e3);
          }
          d = b + (e << 7) + 40 | 0;
          j = +g[d >> 3] / +g[m >> 3];
          g[d >> 3] = j;
          d = b + (e << 7) + 48 | 0;
          g[d >> 3] = +g[d >> 3] / +g[n >> 3];
          d = b + (e << 7) + 64 | 0;
          j = j * j;
          g[d >> 3] = +g[d >> 3] * .02517 / j / j;
          d = b + (e << 7) + 72 | 0;
          g[d >> 3] = +g[d >> 3] / 86400.0;
          d = b + (e << 7) + 80 | 0;
          g[d >> 3] = +g[d >> 3] / 86400.0;
        } else {
          if ((d | 0) != 2) {
            w = b + (e << 7) + 40 | 0;
            i = +g[w >> 3] / +g[m >> 3];
            g[w >> 3] = i;
            w = b + (e << 7) + 64 | 0;
            i = i * i;
            g[w >> 3] = +g[w >> 3] * .02517 / i / i;
            b = b + (e << 7) + 56 | 0;
            i = +g[b >> 3];
            if (!(i != -1.0e10)) break;
            switch (d | 0) {
              case 6:
                {
                  g[b >> 3] = i / +g[t >> 3];
                  break a;
                }
              case 5:
              case 4:
              case 3:
                {
                  g[b >> 3] = i / +g[s >> 3];
                  break a;
                }
              default:
                break a;
            }
          }
          b = Rh(a, e) | 0;
          d = c[o >> 2] | 0;
          switch (c[d + (b << 7) + 4 >> 2] | 0) {
            case 0:
              {
                b = d + (b << 7) + 40 | 0;
                if ((c[p >> 2] | 0) != 1) break a;
                g[b >> 3] = +g[b >> 3] / +g[q >> 3];
                break a;
              }
            case 1:
              {
                w = d + (b << 7) + 32 | 0;
                g[w >> 3] = +g[w >> 3] / +g[f >> 3];
                j = +u(+ +g[t >> 3], + +g[d + (b << 7) + 48 >> 3]);
                w = d + (b << 7) + 40 | 0;
                g[w >> 3] = +g[w >> 3] * (j / +g[f >> 3]);
                break;
              }
            default:
              {}
          }
          w = d + (b << 7) + 8 | 0;
          g[w >> 3] = +g[w >> 3] / +g[t >> 3];
          w = d + (b << 7) + 16 | 0;
          g[w >> 3] = +g[w >> 3] / +g[t >> 3];
          w = d + (b << 7) + 24 | 0;
          g[w >> 3] = +g[w >> 3] / +g[f >> 3];
        } while (0);
        if ((e | 0) < (c[h >> 2] | 0)) e = e + 1 | 0;else break;
      }
    }
    l = a + 28 | 0;
    if ((c[l >> 2] | 0) < 1) return;
    m = a + 72 | 0;
    n = a + 48 | 0;
    f = a + 44 | 0;
    e = 1;
    while (1) {
      b = c[m >> 2] | 0;
      h = c[b + (e * 40 | 0) >> 2] | 0;
      b: do if (h | 0) {
        k = c[n >> 2] | 0;
        d = c[b + (e * 40 | 0) + 4 >> 2] | 0;
        if ((d | 0) > 0) {
          w = b + (e * 40 | 0) + 16 | 0;
          g[w >> 3] = +g[(c[f >> 2] | 0) + (d * 96 | 0) + 48 >> 3] + +g[w >> 3] / +g[((d | 0) > (c[v >> 2] | 0) ? r : s) >> 3];
        }
        b = b + (e * 40 | 0) + 24 | 0;
        i = +g[b >> 3];
        if (i != -1.0e10) switch (c[k + (h << 7) + 104 >> 2] | 0) {
          case 5:
          case 4:
          case 3:
            {
              g[b >> 3] = i / +g[s >> 3];
              break b;
            }
          case 6:
            {
              g[b >> 3] = i / +g[t >> 3];
              break b;
            }
          default:
            break b;
        }
      } while (0);
      if ((e | 0) < (c[l >> 2] | 0)) e = e + 1 | 0;else break;
    }
    return;
  }
  function sg(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    t = Ib;
    Ib = Ib + 1040 | 0;
    i = t;
    k = b + 92 | 0;
    n = b + 1068 | 0;
    p = b + 1076 | 0;
    q = b + 1072 | 0;
    r = b + 1080 | 0;
    s = b + 1084 | 0;
    l = b + 1088 | 0;
    m = b + 1100 | 0;
    c[m >> 2] = 0;
    j = b + 36 | 0;
    c[n >> 2] = 0;
    c[n + 4 >> 2] = 0;
    c[n + 8 >> 2] = 0;
    c[n + 12 >> 2] = 0;
    c[n + 16 >> 2] = 0;
    c[n + 20 >> 2] = 0;
    c[n + 24 >> 2] = 0;
    c[j >> 2] = -1;
    d = tg(b, 21176) | 0;
    if (d | 0) {
      s = d;
      Ib = t;
      return s | 0;
    }
    d = c[b + 64 >> 2] | 0;
    c[d + 36 >> 2] = 1;
    o = gt(1, 8) | 0;
    c[d + 40 >> 2] = o;
    g[o >> 3] = 1.0;
    o = b + 1096 | 0;
    c[o >> 2] = c[j >> 2];
    d = c[k >> 2] | 0;
    if (!d) {
      s = 0;
      Ib = t;
      return s | 0;
    }
    a: do if (!(cr(i, 1024, d) | 0)) f = 0;else {
      h = b + 40 | 0;
      d = -1;
      while (1) {
        b: do if ((d | 0) == 1) while (1) {
          d = Gr(i, 8047) | 0;
          c: do if (d | 0) switch (a[d >> 0] | 0) {
            case 59:
              break c;
            case 91:
              {
                d = ug(d, 304) | 0;
                if ((d | 0) > -1) break b;else break c;
              }
            default:
              {
                c[n >> 2] = (c[n >> 2] | 0) + 1;
                break c;
              }
          } while (0);
          if (!(cr(i, 1024, c[k >> 2] | 0) | 0)) {
            f = 0;
            break a;
          }
        } else while (1) {
          e = Gr(i, 8047) | 0;
          d: do if (e | 0) {
            switch (a[e >> 0] | 0) {
              case 59:
                break d;
              case 91:
                {
                  e = ug(e, 304) | 0;
                  if ((e | 0) > -1) {
                    d = e;
                    break b;
                  } else break d;
                }
              default:
                {}
            }
            switch (d | 0) {
              case 13:
                {
                  f = vg(b, e) | 0;
                  c[m >> 2] = c[h >> 2];
                  break;
                }
              case 3:
              case 2:
                {
                  c[p >> 2] = (c[p >> 2] | 0) + 1;
                  break d;
                }
              case 4:
                {
                  c[q >> 2] = (c[q >> 2] | 0) + 1;
                  break d;
                }
              case 5:
                {
                  c[r >> 2] = (c[r >> 2] | 0) + 1;
                  break d;
                }
              case 6:
                {
                  c[s >> 2] = (c[s >> 2] | 0) + 1;
                  break d;
                }
              case 7:
                {
                  c[l >> 2] = (c[l >> 2] | 0) + 1;
                  break d;
                }
              case 8:
                {
                  sj(k, e);
                  break d;
                }
              case 12:
                {
                  f = tg(b, e) | 0;
                  c[o >> 2] = c[j >> 2];
                  break;
                }
              default:
                break d;
            }
            if (f | 0) break a;
          } while (0);
          if (!(cr(i, 1024, c[k >> 2] | 0) | 0)) {
            f = 0;
            break a;
          }
        } while (0);
        if ((d | 0) == 28) {
          f = 0;
          break a;
        }
        if (!(cr(i, 1024, c[k >> 2] | 0) | 0)) {
          f = 0;
          break;
        }
      }
    } while (0);
    e = c[n >> 2] | 0;
    d = c[p >> 2] | 0;
    c[b + 1060 >> 2] = d + e;
    c[b + 1064 >> 2] = (c[r >> 2] | 0) + (c[q >> 2] | 0) + (c[s >> 2] | 0);
    if ((c[o >> 2] | 0) < 1) c[o >> 2] = 1;
    if (f | 0) {
      s = f;
      Ib = t;
      return s | 0;
    }
    if ((e | 0) < 1) {
      s = 223;
      Ib = t;
      return s | 0;
    } else {
      Ib = t;
      return ((d | 0) == 0 ? 224 : 0) | 0;
    }
    return 0;
  }
  function tg(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    e = a + 36 | 0;
    d = c[e >> 2] | 0;
    if ((d | 0) > 0) {
      if (!(_p(b, (c[a + 64 >> 2] | 0) + (d * 44 | 0) | 0) | 0)) {
        e = 0;
        return e | 0;
      }
      if ((Th(a, b) | 0) > 0) {
        e = 0;
        return e | 0;
      }
    }
    if ((Kq(b) | 0) >>> 0 > 31) {
      e = 252;
      return e | 0;
    }
    f = a + 64 | 0;
    a = ht(c[f >> 2] | 0, (d * 44 | 0) + 88 | 0) | 0;
    c[f >> 2] = a;
    if (!a) {
      f = 101;
      return f | 0;
    }
    f = (c[e >> 2] | 0) + 1 | 0;
    c[e >> 2] = f;
    hr(a + (f * 44 | 0) | 0, b, 31) | 0;
    c[a + (f * 44 | 0) + 32 >> 2] = 0;
    c[a + (f * 44 | 0) + 36 >> 2] = 0;
    c[a + (f * 44 | 0) + 40 >> 2] = 0;
    f = 0;
    return f | 0;
  }
  function ug(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = c[b >> 2] | 0;
    if (!e) {
      b = -1;
      return b | 0;
    }
    d = 0;
    while (1) {
      if (wg(a, e) | 0) {
        e = 5;
        break;
      }
      d = d + 1 | 0;
      e = c[b + (d << 2) >> 2] | 0;
      if (!e) {
        d = -1;
        e = 5;
        break;
      }
    }
    if ((e | 0) == 5) return d | 0;
    return 0;
  }
  function vg(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    e = a + 40 | 0;
    d = c[e >> 2] | 0;
    if ((d | 0) > 0) {
      if (!(_p(b, (c[a + 68 >> 2] | 0) + (d * 56 | 0) | 0) | 0)) {
        e = 0;
        return e | 0;
      }
      if ((Uh(a, b) | 0) > 0) {
        e = 0;
        return e | 0;
      }
    }
    if ((Kq(b) | 0) >>> 0 > 31) {
      e = 252;
      return e | 0;
    }
    f = a + 68 | 0;
    a = ht(c[f >> 2] | 0, (d * 56 | 0) + 112 | 0) | 0;
    c[f >> 2] = a;
    if (!a) {
      f = 101;
      return f | 0;
    }
    f = (c[e >> 2] | 0) + 1 | 0;
    c[e >> 2] = f;
    hr(a + (f * 56 | 0) | 0, b, 31) | 0;
    c[a + (f * 56 | 0) + 36 >> 2] = 4;
    c[a + (f * 56 | 0) + 32 >> 2] = 0;
    f = a + (f * 56 | 0) + 40 | 0;
    c[f >> 2] = 0;
    c[f + 4 >> 2] = 0;
    c[f + 8 >> 2] = 0;
    c[f + 12 >> 2] = 0;
    f = 0;
    return f | 0;
  }
  function wg(b, c) {
    b = b | 0;
    c = c | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    h = a[c >> 0] | 0;
    if (!(h << 24 >> 24)) {
      c = 0;
      return c | 0;
    }
    g = 0;
    a: while (1) {
      d = a[b + g >> 0] | 0;
      switch (d << 24 >> 24) {
        case 32:
          {
            g = g + 1 | 0;
            break;
          }
        case 0:
          {
            e = 0;
            f = 8;
            break a;
          }
        default:
          break a;
      }
    }
    if ((f | 0) == 8) return e | 0;
    f = 0;
    e = h;
    while (1) {
      if (((d + -97 & 255) < 26 ? d & -33 : d) << 24 >> 24 != ((e + -97 & 255) < 26 ? e & -33 : e) << 24 >> 24) {
        e = 0;
        f = 8;
        break;
      }
      g = g + 1 | 0;
      f = f + 1 | 0;
      e = a[c + f >> 0] | 0;
      if (!(e << 24 >> 24)) {
        e = 1;
        f = 8;
        break;
      }
      d = a[b + g >> 0] | 0;
      if (!(d << 24 >> 24)) {
        e = 0;
        f = 8;
        break;
      }
    }
    if ((f | 0) == 8) return e | 0;
    return 0;
  }
  function xg(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0;
    w = Ib;
    Ib = Ib + 2080 | 0;
    t = w + 2072 | 0;
    r = w + 1040 | 0;
    s = w;
    q = gt(40, 8) | 0;
    v = b + 1140 | 0;
    c[v >> 2] = q;
    q = (q | 0) == 0;
    d = q ? 101 : 0;
    if (q) {
      v = 101;
      Ib = w;
      return v | 0;
    }
    c[b + 1108 >> 2] = 0;
    e = b + 36 | 0;
    f = b;
    g = f + 36 | 0;
    do {
      c[f >> 2] = 0;
      f = f + 4 | 0;
    } while ((f | 0) < (g | 0));
    c[b + 1096 >> 2] = c[e >> 2];
    c[b + 1100 >> 2] = c[b + 40 >> 2];
    c[b + 1132 >> 2] = 0;
    c[b + 1136 >> 2] = 0;
    k = b + 804 | 0;
    a[k >> 0] = 0;
    l = b + 92 | 0;
    a: do if (cr(r, 1024, c[l >> 2] | 0) | 0) {
      m = b + 388 | 0;
      n = b + 548 | 0;
      o = b + 1104 | 0;
      p = b + 1112 | 0;
      q = b + 5080 | 0;
      e = 0;
      j = -1;
      b: while (1) {
        g = (j | 1 | 0) == 13;
        h = 304 + (j << 2) | 0;
        i = (j | 0) > -1;
        while (1) {
          c: do if (g) while (1) {
            Oq(s, r) | 0;
            f = yg(s, m, n) | 0;
            c[o >> 2] = f;
            c[p >> 2] = -1;
            if (f | 0) break c;
            hr(k, n, 255) | 0;
            if (!(cr(r, 1024, c[l >> 2] | 0) | 0)) break b;
          } else while (1) {
            Oq(s, r) | 0;
            f = yg(s, m, n) | 0;
            c[o >> 2] = f;
            c[p >> 2] = -1;
            if (f | 0) break c;
            if (!(cr(r, 1024, c[l >> 2] | 0) | 0)) break b;
          } while (0);
          if (g) Oq(n, k) | 0;
          a[k >> 0] = 0;
          if ((Kq(r) | 0) >>> 0 > 1023) {
            x = ci(214, q) | 0;
            f = c[h >> 2] | 0;
            c[t >> 2] = x;
            c[t + 4 >> 2] = f;
            bq(q, 8052, t);
            Ti(b, q);
            Ti(b, r);
            e = e + 1 | 0;
          }
          f = c[m >> 2] | 0;
          if ((a[f >> 0] | 0) == 91) break;
          if (!i) {
            d = 200;
            break b;
          }
          f = Ag(b, j, r) | 0;
          if ((f | 0) > 0) {
            zg(b, f, j, r);
            e = e + 1 | 0;
          }
          if ((e | 0) == 10) {
            d = 200;
            break a;
          }
          if (!(cr(r, 1024, c[l >> 2] | 0) | 0)) break b;
        }
        f = ug(f, 304) | 0;
        if ((f | 0) <= -1) {
          u = 21;
          break;
        }
        if ((f | 0) == 28) break;
        if (!(cr(r, 1024, c[l >> 2] | 0) | 0)) break;else j = f;
      }
      if ((u | 0) == 21) {
        zg(b, 201, j, r);
        e = e + 1 | 0;
      }
      if ((e | 0) <= 0) {
        if (!d) u = 28;
      } else d = 200;
    } else u = 28; while (0);
    if ((u | 0) == 28) {
      d = Bg(b) | 0;
      if (!d) d = Cg(b) | 0;
    }
    ft(c[v >> 2] | 0);
    x = d;
    Ib = w;
    return x | 0;
  }
  function yg(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    a[e >> 0] = 0;
    vt(d | 0, 0, 160) | 0;
    f = Lq(b, 59) | 0;
    if (f | 0) {
      g = f + 1 | 0;
      if (Kq(g) | 0) {
        i = Dr(g, 8131) | 0;
        i = i >>> 0 < 255 ? i : 255;
        hr(e, g, i) | 0;
        a[e + i >> 0] = 0;
      }
      a[f >> 0] = 0;
    }
    e = Kq(b) | 0;
    if (!e) {
      i = 0;
      return i | 0;
    }
    g = e;
    e = 0;
    while (1) {
      f = Dr(b, 8047) | 0;
      if ((f | 0) == (g | 0)) break;
      g = g + -1 - f | 0;
      if (!f) b = b + 1 | 0;else {
        if ((a[b >> 0] | 0) == 34) {
          b = b + 1 | 0;
          f = Dr(b, 8134) | 0;
        }
        a[b + f >> 0] = 0;
        c[d + (e << 2) >> 2] = b;
        b = b + (f + 1) | 0;
        e = e + 1 | 0;
      }
      if (!((g | 0) != 0 & (e | 0) < 40)) {
        h = 15;
        break;
      }
    }
    if ((h | 0) == 15) return e | 0;
    c[d + (e << 2) >> 2] = b;
    i = e + 1 | 0;
    return i | 0;
  }
  function zg(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    k = Ib;
    Ib = Ib + 528 | 0;
    j = k + 512 | 0;
    g = k + 256 | 0;
    h = k;
    vt(g | 0, 0, 256) | 0;
    i = c[b + 1112 >> 2] | 0;
    if ((i | 0) > -1) Oq(h, c[b + 388 + (i << 2) >> 2] | 0) | 0;else a[h >> 0] = 0;
    i = b + 5080 | 0;
    l = ci(d, g) | 0;
    g = c[304 + (e << 2) >> 2] | 0;
    c[j >> 2] = d;
    c[j + 4 >> 2] = l;
    c[j + 8 >> 2] = h;
    c[j + 12 >> 2] = g;
    bq(i, 8100, j);
    Ti(b, i);
    Ti(b, f);
    Ib = k;
    return;
  }
  function Ag(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    do switch (d | 0) {
      case 0:
        {
          g = b + 1108 | 0;
          d = c[g >> 2] | 0;
          if ((d | 0) < 3) {
            f = e + ((Kq(e) | 0) + -1) | 0;
            if ((a[f >> 0] | 0) == 10) {
              a[f >> 0] = 0;
              d = c[g >> 2] | 0;
            }
            hr(b + 5336 + (d * 80 | 0) | 0, e, 79) | 0;
            c[g >> 2] = (c[g >> 2] | 0) + 1;
            d = 0;
          } else d = 0;
          break;
        }
      case 1:
        {
          d = Ig(b) | 0;
          break;
        }
      case 3:
      case 2:
        {
          d = Kg(b) | 0;
          break;
        }
      case 4:
        {
          d = Lg(b) | 0;
          break;
        }
      case 5:
        {
          d = Mg(b) | 0;
          break;
        }
      case 6:
        {
          d = Pg(b) | 0;
          break;
        }
      case 12:
        {
          d = Qg(b) | 0;
          break;
        }
      case 13:
        {
          d = Rg(b) | 0;
          break;
        }
      case 9:
        {
          d = Ug(b) | 0;
          break;
        }
      case 7:
        {
          d = Vg(b) | 0;
          break;
        }
      case 8:
        {
          if ((xj(b) | 0) > 0) {
            Cj(b);
            d = 200;
          } else d = 0;
          break;
        }
      case 10:
        {
          d = Wg(b) | 0;
          break;
        }
      case 11:
        {
          d = Xg(b) | 0;
          break;
        }
      case 14:
        {
          d = Yg(b) | 0;
          break;
        }
      case 15:
        {
          d = $g(b) | 0;
          break;
        }
      case 26:
      case 27:
      case 25:
      case 16:
        {
          d = 0;
          break;
        }
      case 17:
        {
          d = bh(b) | 0;
          break;
        }
      case 18:
        {
          d = Zg(b) | 0;
          break;
        }
      case 19:
        {
          d = _g(b) | 0;
          break;
        }
      case 20:
        {
          d = ch(b) | 0;
          break;
        }
      case 21:
        {
          d = dh(b) | 0;
          break;
        }
      case 22:
        {
          d = eh(b) | 0;
          break;
        }
      case 23:
        {
          d = Sg(b) | 0;
          break;
        }
      case 24:
        {
          d = Tg(b) | 0;
          break;
        }
      default:
        d = 201;
    } while (0);
    return d | 0;
  }
  function Bg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    j = l;
    k = gt((c[a >> 2] | 0) + 1 | 0, 4) | 0;
    i = (k | 0) == 0;
    b = i ? 101 : 0;
    if (i) {
      k = 101;
      Ib = l;
      return k | 0;
    }
    vt(k | 0, 0, (c[a >> 2] << 2) + 4 | 0) | 0;
    f = a + 12 | 0;
    if ((c[f >> 2] | 0) >= 1) {
      e = a + 48 | 0;
      d = 1;
      while (1) {
        i = k + (c[(c[e >> 2] | 0) + (d << 7) + 32 >> 2] << 2) | 0;
        c[i >> 2] = (c[i >> 2] | 0) + 1;
        i = k + (c[(c[e >> 2] | 0) + (d << 7) + 36 >> 2] << 2) | 0;
        c[i >> 2] = (c[i >> 2] | 0) + 1;
        if ((d | 0) < (c[f >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    g = a + 8 | 0;
    e = c[g >> 2] | 0;
    if ((e | 0) >= 1) {
      h = a + 5080 | 0;
      i = a + 44 | 0;
      d = 0;
      f = 1;
      while (1) {
        if (!(c[k + (f << 2) >> 2] | 0)) {
          e = d + 1 | 0;
          n = ci(233, h) | 0;
          m = (c[i >> 2] | 0) + (f * 96 | 0) | 0;
          c[j >> 2] = n;
          c[j + 4 >> 2] = m;
          bq(h, 8083, j);
          Ti(a, h);
          if ((d | 0) > 8) {
            d = e;
            break;
          }
          d = e;
          e = c[g >> 2] | 0;
        }
        if ((f | 0) < (e | 0)) f = f + 1 | 0;else break;
      }
      b = (d | 0) > 0 ? 200 : b;
    }
    ft(k);
    n = b;
    Ib = l;
    return n | 0;
  }
  function Cg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    i = Ib;
    Ib = Ib + 272 | 0;
    g = i + 256 | 0;
    d = i;
    e = a + 20 | 0;
    if ((c[e >> 2] | 0) < 1) {
      h = 0;
      Ib = i;
      return h | 0;
    }
    b = 1;
    while (1) {
      f = Dg(a, b) | 0;
      if (f | 0) break;
      if ((b | 0) < (c[e >> 2] | 0)) b = b + 1 | 0;else {
        b = 0;
        h = 6;
        break;
      }
    }
    if ((h | 0) == 6) {
      Ib = i;
      return b | 0;
    }
    e = c[(c[a + 56 >> 2] | 0) + (b << 7) >> 2] | 0;
    h = a + 5080 | 0;
    d = ci(f, d) | 0;
    e = (c[a + 48 >> 2] | 0) + (e << 7) | 0;
    c[g >> 2] = f;
    c[g + 4 >> 2] = d;
    c[g + 8 >> 2] = e;
    bq(h, 8067, g);
    Ti(a, h);
    h = 200;
    Ib = i;
    return h | 0;
  }
  function Dg(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0.0,
      h = 0.0,
      i = 0.0,
      j = 0.0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    s = Ib;
    Ib = Ib + 32 | 0;
    e = s + 16 | 0;
    o = s + 8 | 0;
    p = s;
    r = c[a + 56 >> 2] | 0;
    d = r + (b << 7) + 4 | 0;
    switch (c[d >> 2] | 0) {
      case 0:
        {
          g[r + (b << 7) + 32 >> 3] = 0.0;
          g[r + (b << 7) + 40 >> 3] = +g[(c[a + 48 >> 2] | 0) + (c[r + (b << 7) >> 2] << 7) + 64 >> 3] * -8.814;
          g[r + (b << 7) + 48 >> 3] = -1.0;
          g[r + (b << 7) + 24 >> 3] = 1.0e10;
          g[r + (b << 7) + 16 >> 3] = 1.0e10;
          g[r + (b << 7) + 8 >> 3] = 1.0;
          r = 0;
          Ib = s;
          return r | 0;
        }
      case 3:
        {
          n = c[r + (b << 7) + 56 >> 2] | 0;
          if (!n) {
            r = 226;
            Ib = s;
            return r | 0;
          }
          l = c[a + 68 >> 2] | 0;
          c[l + (n * 56 | 0) + 36 >> 2] = 1;
          m = c[l + (n * 56 | 0) + 40 >> 2] | 0;
          a: do switch (m | 0) {
            case 1:
              {
                c[d >> 2] = 1;
                h = +g[c[l + (n * 56 | 0) + 48 >> 2] >> 3];
                k = +g[c[l + (n * 56 | 0) + 52 >> 2] >> 3];
                f = h * 2.0;
                i = 0.0;
                j = k;
                k = k * 1.33334;
                q = 15;
                break;
              }
            case 3:
              {
                a = l + (n * 56 | 0) + 48 | 0;
                if (+g[c[a >> 2] >> 3] == 0.0) {
                  c[d >> 2] = 1;
                  q = c[l + (n * 56 | 0) + 52 >> 2] | 0;
                  n = c[a >> 2] | 0;
                  f = +g[n + 16 >> 3];
                  h = +g[n + 8 >> 3];
                  i = +g[q + 16 >> 3];
                  j = +g[q + 8 >> 3];
                  k = +g[q >> 3];
                  q = 15;
                  break a;
                } else {
                  c[d >> 2] = 2;
                  q = 11;
                  break a;
                }
              }
            default:
              {
                c[d >> 2] = 2;
                if ((m | 0) > 1) q = 11;else a = l + (n * 56 | 0) + 52 | 0;
              }
          } while (0);
          b: do if ((q | 0) == 11) {
            a = l + (n * 56 | 0) + 52 | 0;
            e = c[a >> 2] | 0;
            d = 1;
            f = +g[e >> 3];
            while (1) {
              k = f;
              f = +g[e + (d << 3) >> 3];
              d = d + 1 | 0;
              if (f >= k) {
                a = 227;
                break;
              }
              if ((d | 0) >= (m | 0)) break b;
            }
            Ib = s;
            return a | 0;
          } else if ((q | 0) == 15) {
            if (!(Og(k, j, i, h, f, e, o, p) | 0)) {
              r = 227;
              Ib = s;
              return r | 0;
            }
            f = -+g[e >> 3];
            g[r + (b << 7) + 32 >> 3] = f;
            i = +g[o >> 3];
            g[r + (b << 7) + 40 >> 3] = -i;
            j = +g[p >> 3];
            g[r + (b << 7) + 48 >> 3] = j;
            g[r + (b << 7) + 8 >> 3] = h;
            j = +u(+(f / i), +(1.0 / j));
            g[r + (b << 7) + 16 >> 3] = j;
            g[r + (b << 7) + 24 >> 3] = k;
            r = 0;
            Ib = s;
            return r | 0;
          } while (0);
          q = l + (n * 56 | 0) + 48 | 0;
          k = +g[(c[q >> 2] | 0) + (m + -1 << 3) >> 3];
          g[r + (b << 7) + 16 >> 3] = k;
          g[r + (b << 7) + 8 >> 3] = (k + +g[c[q >> 2] >> 3]) * .5;
          g[r + (b << 7) + 24 >> 3] = +g[c[a >> 2] >> 3];
          r = 0;
          Ib = s;
          return r | 0;
        }
      default:
        {
          r = 0;
          Ib = s;
          return r | 0;
        }
    }
    return 0;
  }
  function Eg(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a + 80 | 0;
    if (Oh(c[e >> 2] | 0, d) | 0) {
      d = 215;
      return d | 0;
    }
    if ((Kq(d) | 0) >>> 0 > 31) {
      d = 252;
      return d | 0;
    }
    a = a + 44 | 0;
    hr((c[a >> 2] | 0) + (b * 96 | 0) | 0, d, 31) | 0;
    We(c[e >> 2] | 0, (c[a >> 2] | 0) + (b * 96 | 0) | 0, b);
    d = 0;
    return d | 0;
  }
  function Fg(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a + 84 | 0;
    if (Ph(c[e >> 2] | 0, d) | 0) {
      d = 215;
      return d | 0;
    }
    if ((Kq(d) | 0) >>> 0 > 31) {
      d = 252;
      return d | 0;
    }
    a = a + 48 | 0;
    hr((c[a >> 2] | 0) + (b << 7) | 0, d, 31) | 0;
    We(c[e >> 2] | 0, (c[a >> 2] | 0) + (b << 7) | 0, b);
    d = 0;
    return d | 0;
  }
  function Gg(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 32 | 0;
    i = k;
    c[i >> 2] = 0;
    c[i + 4 >> 2] = 0;
    c[i + 8 >> 2] = 0;
    c[i + 12 >> 2] = 0;
    c[i + 16 >> 2] = 0;
    c[i + 20 >> 2] = 0;
    b = Gr(b, 8138) | 0;
    a: do if (b) {
      f = 0;
      while (1) {
        if (!(Hg(b, i + (f << 3) | 0) | 0)) {
          e = -1.0;
          break a;
        }
        b = Gr(0, 8138) | 0;
        h = f + 1 | 0;
        if (!(h >>> 0 < 4 & (b | 0) != 0)) break;else f = h;
      }
      if (f | 0) {
        g[i >> 3] = +g[i >> 3] + +g[i + 8 >> 3] / 60.0 + +g[i + 16 >> 3] / 3600.0;
        j = 17;
        break;
      }
      if (!(a[d >> 0] | 0)) {
        e = +g[i >> 3];
        break;
      }
      if (wg(d, 8140) | 0) {
        e = +g[i >> 3] / 3600.0;
        break;
      }
      if (wg(d, 8144) | 0) {
        e = +g[i >> 3] / 60.0;
        break;
      }
      if (wg(d, 8148) | 0) {
        e = +g[i >> 3];
        break;
      }
      if (wg(d, 8152) | 0) e = +g[i >> 3] * 24.0;else j = 17;
    } else j = 17; while (0);
    do if ((j | 0) == 17) {
      if (!(a[d >> 0] | 0)) {
        e = +g[i >> 3];
        break;
      }
      if (wg(d, 8156) | 0) {
        e = +g[i >> 3];
        if (e >= 13.0) {
          e = -1.0;
          break;
        }
        if (!(e >= 12.0)) break;
        e = e + -12.0;
        break;
      }
      if ((wg(d, 8159) | 0) != 0 ? (e = +g[i >> 3], !(e >= 13.0)) : 0) {
        if (!(e >= 12.0)) e = e + 12.0;
      } else e = -1.0;
    } while (0);
    Ib = k;
    return +e;
  }
  function Hg(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0.0;
    f = Ib;
    Ib = Ib + 16 | 0;
    e = f;
    h = +zr(b, e);
    g[d >> 3] = h;
    Ib = f;
    return (a[c[e >> 2] >> 0] | 0) < 1 | 0;
  }
  function Ig(a) {
    a = a | 0;
    var b = 0.0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    k = Ib;
    Ib = Ib + 16 | 0;
    h = k + 8 | 0;
    i = k;
    f = a + 92 | 0;
    g[i >> 3] = 0.0;
    e = c[a + 1104 >> 2] | 0;
    d = c[a >> 2] | 0;
    if ((d | 0) == (c[a + 1060 >> 2] | 0)) {
      j = 200;
      Ib = k;
      return j | 0;
    }
    l = a + 8 | 0;
    j = (c[l >> 2] | 0) + 1 | 0;
    c[l >> 2] = j;
    c[a >> 2] = d + 1;
    d = Eg(a, j, c[a + 388 >> 2] | 0) | 0;
    if (d | 0) {
      l = Jg(f, 0, d) | 0;
      Ib = k;
      return l | 0;
    }
    if ((e | 0) < 2) {
      l = 201;
      Ib = k;
      return l | 0;
    }
    if (!(Hg(c[a + 392 >> 2] | 0, h) | 0)) {
      Jg(f, 1, 202) | 0;
      l = 202;
      Ib = k;
      return l | 0;
    }
    if ((e | 0) > 2) {
      if (!(Hg(c[a + 396 >> 2] | 0, i) | 0)) {
        Jg(f, 2, 202) | 0;
        l = 202;
        Ib = k;
        return l | 0;
      }
      if ((e | 0) > 3) {
        d = Th(a, c[a + 400 >> 2] | 0) | 0;
        if ((d | 0) < 0) {
          Jg(f, 3, 205) | 0;
          l = 205;
          Ib = k;
          return l | 0;
        }
      } else d = 0;
    } else d = 0;
    l = c[a + 44 >> 2] | 0;
    g[l + (j * 96 | 0) + 32 >> 3] = -1.0e10;
    g[l + (j * 96 | 0) + 40 >> 3] = -1.0e10;
    g[l + (j * 96 | 0) + 48 >> 3] = +g[h >> 3];
    f = l + (j * 96 | 0) + 60 | 0;
    h = l + (j * 96 | 0) + 92 | 0;
    c[f >> 2] = 0;
    c[f + 4 >> 2] = 0;
    c[f + 8 >> 2] = 0;
    c[f + 12 >> 2] = 0;
    c[f + 16 >> 2] = 0;
    c[f + 20 >> 2] = 0;
    c[f + 24 >> 2] = 0;
    c[f + 28 >> 2] = 0;
    f = Jh(h, a + 548 | 0, 255) | 0;
    c[h >> 2] = f;
    b = +g[i >> 3];
    if (!(Ih(l + (j * 96 | 0) | 0, b, d, 0) | 0)) {
      l = 101;
      Ib = k;
      return l | 0;
    }
    g[(c[a + 4260 >> 2] | 0) + (j << 3) >> 3] = b;
    l = 0;
    Ib = k;
    return l | 0;
  }
  function Jg(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    c[a + 1020 >> 2] = b;
    return d | 0;
  }
  function Kg(b) {
    b = b | 0;
    var d = 0,
      e = 0.0,
      f = 0,
      h = 0.0,
      i = 0.0,
      j = 0.0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0.0;
    v = Ib;
    Ib = Ib + 48 | 0;
    t = v + 40 | 0;
    m = v + 32 | 0;
    n = v + 24 | 0;
    o = v + 16 | 0;
    q = v + 8 | 0;
    p = v;
    r = b + 92 | 0;
    g[t >> 3] = 0.0;
    g[m >> 3] = 0.0;
    g[n >> 3] = 0.0;
    g[o >> 3] = 0.0;
    g[q >> 3] = 0.0;
    g[p >> 3] = 0.0;
    l = c[b + 1104 >> 2] | 0;
    u = b + 4 | 0;
    d = c[u >> 2] | 0;
    if ((d | 0) == (c[b + 1076 >> 2] | 0)) {
      u = 200;
      Ib = v;
      return u | 0;
    }
    f = c[b >> 2] | 0;
    if ((f | 0) == (c[b + 1060 >> 2] | 0)) {
      u = 200;
      Ib = v;
      return u | 0;
    }
    s = d + 1 | 0;
    c[u >> 2] = s;
    c[b >> 2] = f + 1;
    s = (c[b + 1068 >> 2] | 0) + s | 0;
    d = Eg(b, s, c[b + 388 >> 2] | 0) | 0;
    if (d | 0) {
      u = Jg(r, 0, d) | 0;
      Ib = v;
      return u | 0;
    }
    if ((l | 0) < 2) {
      u = 201;
      Ib = v;
      return u | 0;
    }
    if (!(Hg(c[b + 392 >> 2] | 0, t) | 0)) {
      Jg(r, 1, 202) | 0;
      u = 202;
      Ib = v;
      return u | 0;
    }
    if ((l | 0) < 4) {
      if ((l | 0) == 3) {
        d = Th(b, c[b + 396 >> 2] | 0) | 0;
        if ((d | 0) < 0) {
          Jg(r, 2, 205) | 0;
          u = 205;
          Ib = v;
          return u | 0;
        } else {
          l = 0;
          f = 0;
          k = 0.0;
          j = 0.0;
          i = 0.0;
          h = 0.0;
          e = 0.0;
        }
      } else {
        d = 0;
        l = 0;
        f = 0;
        k = 0.0;
        j = 0.0;
        i = 0.0;
        h = 0.0;
        e = 0.0;
      }
    } else {
      if ((l | 0) < 6) {
        u = 201;
        Ib = v;
        return u | 0;
      }
      if (!(Hg(c[b + 396 >> 2] | 0, m) | 0)) {
        Jg(r, 2, 202) | 0;
        u = 202;
        Ib = v;
        return u | 0;
      }
      if (!(Hg(c[b + 400 >> 2] | 0, n) | 0)) {
        Jg(r, 3, 202) | 0;
        u = 202;
        Ib = v;
        return u | 0;
      }
      if (!(Hg(c[b + 404 >> 2] | 0, o) | 0)) {
        Jg(r, 4, 202) | 0;
        u = 202;
        Ib = v;
        return u | 0;
      }
      if (!(Hg(c[b + 408 >> 2] | 0, p) | 0)) {
        Jg(r, 5, 202) | 0;
        u = 202;
        Ib = v;
        return u | 0;
      }
      if ((l | 0) > 6) {
        if (!(Hg(c[b + 412 >> 2] | 0, q) | 0)) {
          Jg(r, 6, 202) | 0;
          u = 202;
          Ib = v;
          return u | 0;
        }
        if ((l | 0) > 7) {
          d = c[b + 416 >> 2] | 0;
          a: do switch (a[d >> 0] | 0) {
            case 42:
            case 0:
              {
                d = 0;
                break;
              }
            default:
              {
                d = Uh(b, d) | 0;
                if (d | 0) {
                  c[(c[b + 68 >> 2] | 0) + (d * 56 | 0) + 36 >> 2] = 0;
                  break a;
                }
                Jg(r, 7, 206) | 0;
                u = 206;
                Ib = v;
                return u | 0;
              }
          } while (0);
          if ((l | 0) > 8) {
            f = c[b + 420 >> 2] | 0;
            if (!(wg(f, 8162) | 0)) {
              if (!(wg(f, 8166) | 0)) {
                Jg(r, 8, 213) | 0;
                u = 213;
                Ib = v;
                return u | 0;
              } else {
                l = d;
                f = 0;
              }
            } else {
              l = d;
              f = 1;
            }
          } else {
            l = d;
            f = 0;
          }
        } else {
          l = 0;
          f = 0;
        }
      } else {
        l = 0;
        f = 0;
      }
      j = +g[m >> 3];
      if (j < 0.0) {
        Jg(r, 2, 209) | 0;
        u = 209;
        Ib = v;
        return u | 0;
      }
      i = +g[n >> 3];
      if (i < 0.0) {
        Jg(r, 3, 209) | 0;
        u = 209;
        Ib = v;
        return u | 0;
      }
      h = +g[o >> 3];
      if (h < 0.0) {
        Jg(r, 4, 209) | 0;
        u = 209;
        Ib = v;
        return u | 0;
      }
      k = +g[p >> 3];
      if (k < 0.0) {
        Jg(r, 5, 209) | 0;
        u = 209;
        Ib = v;
        return u | 0;
      }
      e = +g[q >> 3];
      if (e < 0.0) {
        Jg(r, 6, 209) | 0;
        u = 209;
        Ib = v;
        return u | 0;
      } else d = 0;
    }
    q = c[b + 44 >> 2] | 0;
    r = c[b + 52 >> 2] | 0;
    u = c[u >> 2] | 0;
    g[q + (s * 96 | 0) + 32 >> 3] = -1.0e10;
    g[q + (s * 96 | 0) + 40 >> 3] = -1.0e10;
    c[q + (s * 96 | 0) + 80 >> 2] = 0;
    c[q + (s * 96 | 0) + 84 >> 2] = 0;
    g[q + (s * 96 | 0) + 48 >> 3] = +g[t >> 3];
    t = q + (s * 96 | 0) + 60 | 0;
    c[t >> 2] = 0;
    c[t + 4 >> 2] = 0;
    c[t + 8 >> 2] = 0;
    c[t + 12 >> 2] = 0;
    c[t + 16 >> 2] = 0;
    c[q + (s * 96 | 0) + 88 >> 2] = k == 0.0 ? 1 : 2;
    t = q + (s * 96 | 0) + 92 | 0;
    b = Jh(t, b + 548 | 0, 255) | 0;
    c[t >> 2] = b;
    c[r + (u * 120 | 0) >> 2] = s;
    g[r + (u * 120 | 0) + 32 >> 3] = j;
    g[r + (u * 120 | 0) + 16 >> 3] = i;
    g[r + (u * 120 | 0) + 24 >> 3] = h;
    g[r + (u * 120 | 0) + 8 >> 3] = k;
    c[r + (u * 120 | 0) + 88 >> 2] = d;
    g[r + (u * 120 | 0) + 64 >> 3] = -1.0e10;
    c[r + (u * 120 | 0) + 112 >> 2] = f;
    w = k * k * 3.141592653589793 * .25;
    k = e > 0.0 ? e : w * i;
    g[r + (u * 120 | 0) + 40 >> 3] = k;
    g[r + (u * 120 | 0) + 56 >> 3] = w * (j - i) + k;
    g[r + (u * 120 | 0) + 48 >> 3] = w * (h - i) + k;
    c[r + (u * 120 | 0) + 92 >> 2] = l;
    c[r + (u * 120 | 0) + 96 >> 2] = 0;
    g[r + (u * 120 | 0) + 104 >> 3] = 1.0;
    u = 0;
    Ib = v;
    return u | 0;
  }
  function Lg(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    r = Ib;
    Ib = Ib + 32 | 0;
    e = r + 24 | 0;
    f = r + 16 | 0;
    h = r + 8 | 0;
    o = r;
    p = a + 92 | 0;
    g[o >> 3] = 0.0;
    k = c[a + 1104 >> 2] | 0;
    q = a + 12 | 0;
    b = c[q >> 2] | 0;
    if ((b | 0) == (c[a + 1064 >> 2] | 0)) {
      q = 200;
      Ib = r;
      return q | 0;
    }
    n = a + 16 | 0;
    c[n >> 2] = (c[n >> 2] | 0) + 1;
    b = b + 1 | 0;
    c[q >> 2] = b;
    b = Fg(a, b, c[a + 388 >> 2] | 0) | 0;
    if (b | 0) {
      q = Jg(p, 0, b) | 0;
      Ib = r;
      return q | 0;
    }
    if ((k | 0) < 6) {
      q = 201;
      Ib = r;
      return q | 0;
    }
    b = c[a + 80 >> 2] | 0;
    n = Oh(b, c[a + 392 >> 2] | 0) | 0;
    if (!n) {
      Jg(p, 1, 203) | 0;
      q = 203;
      Ib = r;
      return q | 0;
    }
    m = Oh(b, c[a + 396 >> 2] | 0) | 0;
    if (!m) {
      Jg(p, 2, 203) | 0;
      q = 203;
      Ib = r;
      return q | 0;
    }
    if ((n | 0) == (m | 0)) {
      Jg(p, 0, 222) | 0;
      q = 222;
      Ib = r;
      return q | 0;
    }
    if (!(Hg(c[a + 400 >> 2] | 0, e) | 0)) {
      Jg(p, 3, 202) | 0;
      q = 202;
      Ib = r;
      return q | 0;
    }
    l = +g[e >> 3];
    if (l <= 0.0) {
      Jg(p, 3, 211) | 0;
      q = 211;
      Ib = r;
      return q | 0;
    }
    if (!(Hg(c[a + 404 >> 2] | 0, f) | 0)) {
      Jg(p, 4, 202) | 0;
      q = 202;
      Ib = r;
      return q | 0;
    }
    j = +g[f >> 3];
    if (j <= 0.0) {
      Jg(p, 4, 211) | 0;
      q = 211;
      Ib = r;
      return q | 0;
    }
    if (!(Hg(c[a + 408 >> 2] | 0, h) | 0)) {
      Jg(p, 5, 202) | 0;
      q = 202;
      Ib = r;
      return q | 0;
    }
    i = +g[h >> 3];
    if (i <= 0.0) Jg(p, 5, 211) | 0;
    switch (k | 0) {
      case 7:
        {
          b = c[a + 412 >> 2] | 0;
          if (!(wg(b, 8169) | 0)) {
            if (!(wg(b, 14403) | 0)) {
              if ((wg(b, 14398) | 0) == 0 ? (Hg(b, o) | 0) == 0 : 0) {
                Jg(p, 6, 202) | 0;
                q = 202;
                Ib = r;
                return q | 0;
              } else {
                b = 3;
                e = 1;
              }
            } else {
              b = 2;
              e = 1;
            }
          } else {
            b = 3;
            e = 0;
          }
          break;
        }
      case 8:
        {
          if (!(Hg(c[a + 412 >> 2] | 0, o) | 0)) {
            Jg(p, 6, 202) | 0;
            q = 202;
            Ib = r;
            return q | 0;
          }
          b = c[a + 416 >> 2] | 0;
          if (!(wg(b, 8169) | 0)) {
            if (!(wg(b, 14403) | 0)) {
              if (!(wg(b, 14398) | 0)) {
                Jg(p, 7, 213) | 0;
                q = 213;
                Ib = r;
                return q | 0;
              } else {
                b = 3;
                e = 1;
              }
            } else {
              b = 2;
              e = 1;
            }
          } else {
            b = 3;
            e = 0;
          }
          break;
        }
      default:
        {
          b = 3;
          e = 1;
        }
    }
    d = +g[o >> 3];
    if (d < 0.0) {
      Jg(p, 6, 211) | 0;
      q = 211;
      Ib = r;
      return q | 0;
    } else {
      p = c[a + 48 >> 2] | 0;
      q = c[q >> 2] | 0;
      c[p + (q << 7) + 32 >> 2] = n;
      c[p + (q << 7) + 36 >> 2] = m;
      g[p + (q << 7) + 48 >> 3] = l;
      g[p + (q << 7) + 40 >> 3] = j;
      g[p + (q << 7) + 56 >> 3] = i;
      g[p + (q << 7) + 64 >> 3] = d;
      g[p + (q << 7) + 72 >> 3] = -1.0e10;
      g[p + (q << 7) + 80 >> 3] = -1.0e10;
      c[p + (q << 7) + 104 >> 2] = e;
      c[p + (q << 7) + 108 >> 2] = b;
      c[p + (q << 7) + 116 >> 2] = 0;
      c[p + (q << 7) + 120 >> 2] = 0;
      q = p + (q << 7) + 124 | 0;
      p = Jh(q, a + 548 | 0, 255) | 0;
      c[q >> 2] = p;
      q = 0;
      Ib = r;
      return q | 0;
    }
    return 0;
  }
  function Mg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    p = Ib;
    Ib = Ib + 16 | 0;
    m = p;
    o = a + 92 | 0;
    n = c[a + 1104 >> 2] | 0;
    h = a + 12 | 0;
    d = c[h >> 2] | 0;
    if ((d | 0) == (c[a + 1064 >> 2] | 0)) {
      o = 200;
      Ib = p;
      return o | 0;
    }
    f = a + 20 | 0;
    b = c[f >> 2] | 0;
    if ((b | 0) == (c[a + 1080 >> 2] | 0)) {
      o = 200;
      Ib = p;
      return o | 0;
    }
    l = d + 1 | 0;
    c[h >> 2] = l;
    c[f >> 2] = b + 1;
    b = Fg(a, l, c[a + 388 >> 2] | 0) | 0;
    if (b | 0) {
      o = Jg(o, 0, b) | 0;
      Ib = p;
      return o | 0;
    }
    if ((n | 0) < 3) {
      o = 201;
      Ib = p;
      return o | 0;
    }
    b = c[a + 80 >> 2] | 0;
    d = Oh(b, c[a + 392 >> 2] | 0) | 0;
    if (!d) {
      Jg(o, 1, 203) | 0;
      o = 203;
      Ib = p;
      return o | 0;
    }
    b = Oh(b, c[a + 396 >> 2] | 0) | 0;
    if (!b) {
      Jg(o, 2, 203) | 0;
      o = 203;
      Ib = p;
      return o | 0;
    }
    if ((d | 0) == (b | 0)) {
      Jg(o, 0, 222) | 0;
      o = 222;
      Ib = p;
      return o | 0;
    }
    r = c[a + 48 >> 2] | 0;
    i = c[h >> 2] | 0;
    q = c[a + 56 >> 2] | 0;
    j = c[f >> 2] | 0;
    c[r + (i << 7) + 32 >> 2] = d;
    c[r + (i << 7) + 36 >> 2] = b;
    l = r + (i << 7) + 40 | 0;
    k = r + (i << 7) + 56 | 0;
    c[l >> 2] = 0;
    c[l + 4 >> 2] = 0;
    c[l + 8 >> 2] = 0;
    c[l + 12 >> 2] = 0;
    g[k >> 3] = 1.0;
    l = r + (i << 7) + 64 | 0;
    c[l >> 2] = 0;
    c[l + 4 >> 2] = 0;
    c[l + 8 >> 2] = 0;
    c[l + 12 >> 2] = 0;
    c[l + 16 >> 2] = 0;
    c[l + 20 >> 2] = 0;
    c[r + (i << 7) + 104 >> 2] = 2;
    c[r + (i << 7) + 108 >> 2] = 3;
    c[r + (i << 7) + 116 >> 2] = 0;
    c[r + (i << 7) + 120 >> 2] = 0;
    i = r + (i << 7) + 124 | 0;
    f = Jh(i, a + 548 | 0, 255) | 0;
    c[i >> 2] = f;
    c[q + (j << 7) >> 2] = c[h >> 2];
    h = q + (j << 7) + 4 | 0;
    c[h >> 2] = 3;
    i = q + (j << 7) + 56 | 0;
    j = q + (j << 7) + 64 | 0;
    c[i >> 2] = 0;
    c[i + 4 >> 2] = 0;
    c[i + 8 >> 2] = 0;
    c[i + 12 >> 2] = 0;
    c[i + 16 >> 2] = 0;
    c[i + 20 >> 2] = 0;
    if ((n | 0) < 4) {
      r = 0;
      Ib = p;
      return r | 0;
    }
    f = a + 1140 | 0;
    b = (n | 0) != 4;
    if (Hg(c[a + 400 >> 2] | 0, c[f >> 2] | 0) | 0) {
      a: do if (b) {
        d = 4;
        b = 1;
        while (1) {
          if (!(Hg(c[a + 388 + (d << 2) >> 2] | 0, (c[f >> 2] | 0) + (b << 3) | 0) | 0)) break;
          b = b + 1 | 0;
          d = d + 1 | 0;
          if ((d | 0) >= (n | 0)) break a;
        }
        Jg(o, d, 202) | 0;
        r = 202;
        Ib = p;
        return r | 0;
      } else b = 1; while (0);
      r = Ng(a, b) | 0;
      Ib = p;
      return r | 0;
    }
    if (!b) {
      r = 0;
      Ib = p;
      return r | 0;
    }
    b = 4;
    b: while (1) {
      d = c[a + 388 + (b + -1 << 2) >> 2] | 0;
      do if (!(wg(d, 14282) | 0)) {
        if (wg(d, 14236) | 0) {
          d = Uh(a, c[a + 388 + (b << 2) >> 2] | 0) | 0;
          if (!d) {
            d = 28;
            break b;
          }
          c[i >> 2] = d;
          break;
        }
        if (wg(d, 8172) | 0) {
          d = Th(a, c[a + 388 + (b << 2) >> 2] | 0) | 0;
          if ((d | 0) < 0) {
            d = 32;
            break b;
          }
          c[j >> 2] = d;
          break;
        }
        if (!(wg(d, 8177) | 0)) {
          b = 201;
          d = 41;
          break b;
        }
        if (!(Hg(c[a + 388 + (b << 2) >> 2] | 0, m) | 0)) {
          d = 36;
          break b;
        }
        e = +g[m >> 3];
        if (e < 0.0) {
          d = 38;
          break b;
        }
        g[k >> 3] = e;
      } else {
        e = +yr(c[a + 388 + (b << 2) >> 2] | 0);
        g[m >> 3] = e;
        if (e <= 0.0) {
          d = 24;
          break b;
        }
        c[h >> 2] = 0;
        g[l >> 3] = e;
      } while (0);
      b = b + 2 | 0;
      if ((b | 0) >= (n | 0)) {
        b = 0;
        d = 41;
        break;
      }
    }
    if ((d | 0) == 24) {
      Jg(o, b, 202) | 0;
      r = 202;
      Ib = p;
      return r | 0;
    } else if ((d | 0) == 28) {
      Jg(o, b, 206) | 0;
      r = 206;
      Ib = p;
      return r | 0;
    } else if ((d | 0) == 32) {
      Jg(o, b, 205) | 0;
      r = 205;
      Ib = p;
      return r | 0;
    } else if ((d | 0) == 36) {
      Jg(o, b, 202) | 0;
      r = 202;
      Ib = p;
      return r | 0;
    } else if ((d | 0) == 38) {
      Jg(o, b, 211) | 0;
      r = 211;
      Ib = p;
      return r | 0;
    } else if ((d | 0) == 41) {
      Ib = p;
      return b | 0;
    }
    return 0;
  }
  function Ng(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0.0,
      h = 0.0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    o = Ib;
    Ib = Ib + 32 | 0;
    j = o + 16 | 0;
    k = o + 8 | 0;
    l = o;
    m = c[a + 56 >> 2] | 0;
    n = c[a + 20 >> 2] | 0;
    a: do switch (b | 0) {
      case 1:
        {
          b = a + 1140 | 0;
          if (+g[c[b >> 2] >> 3] <= 0.0) {
            n = 202;
            Ib = o;
            return n | 0;
          }
          c[m + (n << 7) + 4 >> 2] = 0;
          g[(c[a + 48 >> 2] | 0) + (c[a + 12 >> 2] << 7) + 64 >> 3] = +g[c[b >> 2] >> 3];
          n = 0;
          Ib = o;
          return n | 0;
        }
      case 2:
        {
          a = c[a + 1140 >> 2] | 0;
          e = +g[a + 8 >> 3];
          i = +g[a >> 3];
          d = e * 2.0;
          f = 0.0;
          h = i;
          i = i * 1.33334;
          break;
        }
      default:
        if ((b | 0) > 4) {
          a = c[a + 1140 >> 2] | 0;
          d = +g[a + 32 >> 3];
          e = +g[a + 16 >> 3];
          f = +g[a + 24 >> 3];
          h = +g[a + 8 >> 3];
          i = +g[a >> 3];
          break a;
        } else {
          n = 202;
          Ib = o;
          return n | 0;
        }
    } while (0);
    c[m + (n << 7) + 4 >> 2] = 1;
    if (!(Og(i, h, f, e, d, j, k, l) | 0)) {
      n = 206;
      Ib = o;
      return n | 0;
    }
    d = -+g[j >> 3];
    g[m + (n << 7) + 32 >> 3] = d;
    f = +g[k >> 3];
    g[m + (n << 7) + 40 >> 3] = -f;
    h = +g[l >> 3];
    g[m + (n << 7) + 48 >> 3] = h;
    g[m + (n << 7) + 8 >> 3] = e;
    h = +u(+(d / f), +(1.0 / h));
    g[m + (n << 7) + 16 >> 3] = h;
    g[m + (n << 7) + 24 >> 3] = i;
    n = 0;
    Ib = o;
    return n | 0;
  }
  function Og(a, b, c, d, e, f, h, i) {
    a = +a;
    b = +b;
    c = +c;
    d = +d;
    e = +e;
    f = f | 0;
    h = h | 0;
    i = i | 0;
    var j = 0.0;
    if (a < 1.0e-06) {
      i = 0;
      return i | 0;
    }
    j = a - b;
    if (j < 1.0e-06) {
      i = 0;
      return i | 0;
    }
    if (b - c < 1.0e-06 | d < 1.0e-06 | e - d < 1.0e-06) {
      i = 0;
      return i | 0;
    }
    g[f >> 3] = a;
    a = +v(+((a - c) / j)) / +v(+(e / d));
    g[i >> 3] = a;
    if (a <= 0.0 | a > 20.0) {
      i = 0;
      return i | 0;
    }
    j = -j / +u(+d, +a);
    g[h >> 3] = j;
    i = !(j >= 0.0) & 1;
    return i | 0;
  }
  function Pg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    q = Ib;
    Ib = Ib + 32 | 0;
    h = q + 16 | 0;
    m = q + 8 | 0;
    n = q;
    p = a + 92 | 0;
    g[h >> 3] = 0.0;
    g[n >> 3] = 0.0;
    k = c[a + 1104 >> 2] | 0;
    o = a + 12 | 0;
    d = c[o >> 2] | 0;
    if ((d | 0) == (c[a + 1064 >> 2] | 0)) {
      p = 200;
      Ib = q;
      return p | 0;
    }
    l = a + 24 | 0;
    b = c[l >> 2] | 0;
    if ((b | 0) == (c[a + 1084 >> 2] | 0)) {
      p = 200;
      Ib = q;
      return p | 0;
    }
    c[l >> 2] = b + 1;
    b = d + 1 | 0;
    c[o >> 2] = b;
    b = Fg(a, b, c[a + 388 >> 2] | 0) | 0;
    if (b | 0) {
      p = Jg(p, 0, b) | 0;
      Ib = q;
      return p | 0;
    }
    if ((k | 0) < 6) {
      p = 201;
      Ib = q;
      return p | 0;
    }
    b = c[a + 80 >> 2] | 0;
    j = Oh(b, c[a + 392 >> 2] | 0) | 0;
    if (!j) {
      Jg(p, 1, 203) | 0;
      p = 203;
      Ib = q;
      return p | 0;
    }
    i = Oh(b, c[a + 396 >> 2] | 0) | 0;
    if (!i) {
      Jg(p, 2, 203) | 0;
      p = 203;
      Ib = q;
      return p | 0;
    }
    if ((j | 0) == (i | 0)) {
      Jg(p, 0, 222) | 0;
      p = 222;
      Ib = q;
      return p | 0;
    }
    b = c[a + 404 >> 2] | 0;
    if (!(wg(b, 8182) | 0)) {
      if (!(wg(b, 8186) | 0)) {
        if (!(wg(b, 8190) | 0)) {
          if (!(wg(b, 8194) | 0)) {
            if (!(wg(b, 8198) | 0)) {
              if (!(wg(b, 8202) | 0)) {
                Jg(p, 4, 213) | 0;
                p = 213;
                Ib = q;
                return p | 0;
              } else f = 8;
            } else f = 7;
          } else f = 6;
        } else f = 5;
      } else f = 4;
    } else f = 3;
    if (!(Hg(c[a + 400 >> 2] | 0, h) | 0)) {
      Jg(p, 3, 202) | 0;
      p = 202;
      Ib = q;
      return p | 0;
    }
    e = +g[h >> 3];
    if (e <= 0.0) {
      Jg(p, 3, 211) | 0;
      p = 211;
      Ib = q;
      return p | 0;
    }
    b = c[a + 408 >> 2] | 0;
    do if ((f | 0) != 8) {
      if (!(Hg(b, m) | 0)) {
        Jg(p, 5, 202) | 0;
        p = 202;
        Ib = q;
        return p | 0;
      } else d = 4;
    } else {
      b = Uh(a, b) | 0;
      if (b | 0) {
        g[m >> 3] = +(b | 0);
        c[(c[a + 68 >> 2] | 0) + (b * 56 | 0) + 36 >> 2] = 3;
        d = 3;
        break;
      }
      Jg(p, 5, 206) | 0;
      p = 206;
      Ib = q;
      return p | 0;
    } while (0);
    if ((k | 0) > 6 ? (Hg(c[a + 412 >> 2] | 0, n) | 0) == 0 : 0) {
      Jg(p, 6, 202) | 0;
      p = 202;
      Ib = q;
      return p | 0;
    }
    b = c[o >> 2] | 0;
    if (!(Nh(a, b, f, j, i) | 0)) {
      p = c[a + 48 >> 2] | 0;
      c[p + (b << 7) + 32 >> 2] = j;
      c[p + (b << 7) + 36 >> 2] = i;
      g[p + (b << 7) + 40 >> 3] = e;
      g[p + (b << 7) + 48 >> 3] = 0.0;
      g[p + (b << 7) + 56 >> 3] = +g[m >> 3];
      g[p + (b << 7) + 64 >> 3] = +g[n >> 3];
      n = p + (b << 7) + 72 | 0;
      c[n >> 2] = 0;
      c[n + 4 >> 2] = 0;
      c[n + 8 >> 2] = 0;
      c[n + 12 >> 2] = 0;
      c[p + (b << 7) + 104 >> 2] = f;
      c[p + (b << 7) + 108 >> 2] = d;
      c[p + (b << 7) + 116 >> 2] = 0;
      c[p + (b << 7) + 120 >> 2] = 0;
      p = p + (b << 7) + 124 | 0;
      n = Jh(p, a + 548 | 0, 255) | 0;
      c[p >> 2] = n;
      c[(c[a + 60 >> 2] | 0) + (c[l >> 2] << 2) >> 2] = c[o >> 2];
      p = 0;
      Ib = q;
      return p | 0;
    }
    b = c[a + 8 >> 2] | 0;
    if ((j | 0) > (b | 0)) {
      Jg(p, 1, 219) | 0;
      p = 219;
      Ib = q;
      return p | 0;
    }
    if ((i | 0) > (b | 0)) {
      Jg(p, 2, 219) | 0;
      p = 219;
      Ib = q;
      return p | 0;
    } else {
      Jg(p, -1, 220) | 0;
      p = 220;
      Ib = q;
      return p | 0;
    }
    return 0;
  }
  function Qg(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 16 | 0;
    j = n;
    l = b + 92 | 0;
    k = c[b + 1104 >> 2] | 0;
    if ((k | 0) < 2) {
      m = 201;
      Ib = n;
      return m | 0;
    }
    m = b + 1132 | 0;
    e = c[m >> 2] | 0;
    d = c[b + 388 >> 2] | 0;
    if (!((e | 0) != 0 ? (_p(d, e) | 0) == 0 : 0)) {
      d = Th(b, d) | 0;
      if ((d | 0) < 1) {
        Jg(l, 0, 205) | 0;
        m = 205;
        Ib = n;
        return m | 0;
      }
      i = c[b + 64 >> 2] | 0;
      e = i + (d * 44 | 0) | 0;
      d = i + (d * 44 | 0) + 32 | 0;
      if ((c[d >> 2] | 0) == 0 ? (f = b + 548 | 0, (a[f >> 0] | 0) != 0) : 0) {
        i = Jh(d, f, 255) | 0;
        c[d >> 2] = i;
      }
    }
    i = e + 36 | 0;
    h = (c[i >> 2] | 0) + -1 | 0;
    f = h + k | 0;
    c[i >> 2] = f;
    i = e + 40 | 0;
    f = ht(c[i >> 2] | 0, f << 3) | 0;
    c[i >> 2] = f;
    f = 1;
    while (1) {
      if (!(Hg(c[b + 388 + (f << 2) >> 2] | 0, j) | 0)) {
        d = 11;
        break;
      }
      g[(c[i >> 2] | 0) + (h + f << 3) >> 3] = +g[j >> 3];
      d = f + 1 | 0;
      if ((d | 0) < (k | 0)) f = d;else {
        d = 13;
        break;
      }
    }
    if ((d | 0) == 11) {
      Jg(l, f, 202) | 0;
      m = 202;
      Ib = n;
      return m | 0;
    } else if ((d | 0) == 13) {
      c[m >> 2] = e;
      m = 0;
      Ib = n;
      return m | 0;
    }
    return 0;
  }
  function Rg(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    i = l + 8 | 0;
    k = l;
    e = b + 92 | 0;
    if ((c[b + 1104 >> 2] | 0) < 3) {
      k = 201;
      Ib = l;
      return k | 0;
    }
    if (!(Hg(c[b + 392 >> 2] | 0, i) | 0)) {
      Jg(e, 1, 202) | 0;
      k = 202;
      Ib = l;
      return k | 0;
    }
    if (!(Hg(c[b + 396 >> 2] | 0, k) | 0)) {
      Jg(e, 2, 202) | 0;
      k = 202;
      Ib = l;
      return k | 0;
    }
    j = b + 1136 | 0;
    f = c[j >> 2] | 0;
    d = c[b + 388 >> 2] | 0;
    if (!((f | 0) != 0 ? (_p(d, f) | 0) == 0 : 0)) {
      d = Uh(b, d) | 0;
      if (!d) {
        Jg(e, 0, 206) | 0;
        k = 206;
        Ib = l;
        return k | 0;
      }
      e = c[b + 68 >> 2] | 0;
      f = e + (d * 56 | 0) | 0;
      d = e + (d * 56 | 0) + 32 | 0;
      if ((c[d >> 2] | 0) == 0 ? (h = b + 548 | 0, (a[h >> 0] | 0) != 0) : 0) {
        h = Jh(d, h, 255) | 0;
        c[d >> 2] = h;
      }
    }
    e = c[f + 44 >> 2] | 0;
    b = f + 40 | 0;
    d = c[b >> 2] | 0;
    do if ((e | 0) == (d | 0)) if ((_h(f, e + 10 | 0) | 0) > 0) {
      k = 101;
      Ib = l;
      return k | 0;
    } else {
      d = c[b >> 2] | 0;
      break;
    } while (0);
    g[(c[f + 48 >> 2] | 0) + (d << 3) >> 3] = +g[i >> 3];
    g[(c[f + 52 >> 2] | 0) + (c[b >> 2] << 3) >> 3] = +g[k >> 3];
    c[b >> 2] = (c[b >> 2] | 0) + 1;
    c[j >> 2] = f;
    k = 0;
    Ib = l;
    return k | 0;
  }
  function Sg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    b = h + 8 | 0;
    d = h;
    e = a + 92 | 0;
    if ((c[a + 1104 >> 2] | 0) < 3) {
      f = 201;
      Ib = h;
      return f | 0;
    }
    f = Oh(c[a + 80 >> 2] | 0, c[a + 388 >> 2] | 0) | 0;
    if (!f) {
      Jg(e, 0, 203) | 0;
      f = 203;
      Ib = h;
      return f | 0;
    }
    if (!(Hg(c[a + 392 >> 2] | 0, b) | 0)) {
      Jg(e, 1, 202) | 0;
      f = 202;
      Ib = h;
      return f | 0;
    }
    if (!(Hg(c[a + 396 >> 2] | 0, d) | 0)) {
      Jg(e, 2, 202) | 0;
      f = 202;
      Ib = h;
      return f | 0;
    } else {
      e = c[a + 44 >> 2] | 0;
      g[e + (f * 96 | 0) + 32 >> 3] = +g[b >> 3];
      g[e + (f * 96 | 0) + 40 >> 3] = +g[d >> 3];
      f = 0;
      Ib = h;
      return f | 0;
    }
    return 0;
  }
  function Tg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    b = h + 8 | 0;
    d = h;
    e = a + 92 | 0;
    if ((c[a + 1104 >> 2] | 0) < 3) {
      f = 201;
      Ib = h;
      return f | 0;
    }
    f = Ph(c[a + 84 >> 2] | 0, c[a + 388 >> 2] | 0) | 0;
    if (!f) {
      Jg(e, 0, 204) | 0;
      f = 204;
      Ib = h;
      return f | 0;
    }
    if (!(Hg(c[a + 392 >> 2] | 0, b) | 0)) {
      Jg(e, 1, 202) | 0;
      f = 202;
      Ib = h;
      return f | 0;
    }
    if (!(Hg(c[a + 396 >> 2] | 0, d) | 0)) {
      Jg(e, 2, 202) | 0;
      f = 202;
      Ib = h;
      return f | 0;
    } else {
      f = Kh((c[a + 48 >> 2] | 0) + (f << 7) | 0, +g[b >> 3], +g[d >> 3]) | 0;
      Ib = h;
      return f | 0;
    }
    return 0;
  }
  function Ug(b) {
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 16 | 0;
    k = n;
    h = b + 92 | 0;
    f = c[b + 1104 >> 2] | 0;
    if ((f | 0) < 2) {
      b = 201;
      Ib = n;
      return b | 0;
    }
    if (!(Hg(c[b + 392 >> 2] | 0, k) | 0)) {
      Jg(h, 1, 202) | 0;
      b = 202;
      Ib = n;
      return b | 0;
    }
    e = c[b + 388 >> 2] | 0;
    if (wg(e, 8206) | 0) {
      d = +g[k >> 3];
      if (!(d <= 0.0)) {
        g[b + 4344 >> 3] = d;
        b = 0;
        Ib = n;
        return b | 0;
      } else {
        Jg(h, 1, 213) | 0;
        b = 213;
        Ib = n;
        return b | 0;
      }
    }
    j = Oh(c[b + 80 >> 2] | 0, e) | 0;
    if (!j) {
      Jg(h, 0, 203) | 0;
      b = 203;
      Ib = n;
      return b | 0;
    }
    if ((j | 0) > (c[b + 8 >> 2] | 0)) {
      b = 0;
      Ib = n;
      return b | 0;
    }
    if ((f | 0) > 2) {
      e = Th(b, c[b + 396 >> 2] | 0) | 0;
      if ((e | 0) < 0) {
        Jg(h, 2, 205) | 0;
        b = 205;
        Ib = n;
        return b | 0;
      }
    } else e = 0;
    f = c[b + 44 >> 2] | 0;
    h = c[f + (j * 96 | 0) + 56 >> 2] | 0;
    if ((h | 0) != 0 ? (l = b + 4260 | 0, +g[(c[l >> 2] | 0) + (j << 3) >> 3] != -1.0e10) : 0) {
      g[h >> 3] = +g[k >> 3];
      c[h + 8 >> 2] = e;
      i = b + 548 | 0;
      if (a[i >> 0] | 0) {
        h = h + 12 | 0;
        i = Jh(h, i, 31) | 0;
        c[h >> 2] = i;
      }
      g[(c[l >> 2] | 0) + (j << 3) >> 3] = -1.0e10;
    } else m = 19;
    if ((m | 0) == 19 ? (Ih(f + (j * 96 | 0) | 0, +g[k >> 3], e, b + 548 | 0) | 0) == 0 : 0) {
      b = 101;
      Ib = n;
      return b | 0;
    }
    b = 0;
    Ib = n;
    return b | 0;
  }
  function Vg(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    o = Ib;
    Ib = Ib + 16 | 0;
    f = o + 8 | 0;
    m = o;
    l = a + 92 | 0;
    g[f >> 3] = -1.0e10;
    g[m >> 3] = 0.0;
    k = c[a + 1104 >> 2] | 0;
    if ((k | 0) < 6) {
      n = 201;
      Ib = o;
      return n | 0;
    }
    n = Ph(c[a + 84 >> 2] | 0, c[a + 392 >> 2] | 0) | 0;
    if (!n) {
      Jg(l, 1, 204) | 0;
      n = 204;
      Ib = o;
      return n | 0;
    }
    e = c[a + 48 >> 2] | 0;
    h = c[e + (n << 7) + 104 >> 2] | 0;
    if (!h) {
      Jg(l, 1, 207) | 0;
      n = 207;
      Ib = o;
      return n | 0;
    }
    b = c[a + 396 >> 2] | 0;
    a: do if (!(wg(b, 14398) | 0)) {
      if (wg(b, 14403) | 0) {
        switch (h | 0) {
          case 8:
            {
              b = 2;
              i = 17;
              break a;
            }
          case 2:
            break;
          default:
            {
              h = 2;
              j = -1.0e10;
              break a;
            }
        }
        g[f >> 3] = 0.0;
        b = 2;
        d = 0.0;
        i = 18;
        break;
      }
      if ((h | 0) == 8) {
        Jg(l, 1, 207) | 0;
        n = 207;
        Ib = o;
        return n | 0;
      }
      if (Hg(b, f) | 0) {
        b = 4;
        d = +g[f >> 3];
        i = 18;
        break;
      }
      Jg(l, 2, 202) | 0;
      n = 202;
      Ib = o;
      return n | 0;
    } else {
      switch (h | 0) {
        case 8:
          {
            b = 3;
            i = 17;
            break a;
          }
        case 2:
          break;
        default:
          {
            h = 3;
            j = -1.0e10;
            break a;
          }
      }
      g[f >> 3] = 1.0;
      b = 3;
      d = 1.0;
      i = 18;
    } while (0);
    do if ((i | 0) == 17) {
      j = +g[e + (n << 7) + 56 >> 3];
      g[f >> 3] = j;
      h = b;
    } else if ((i | 0) == 18) if ((h + -1 | 0) >>> 0 < 2 & d != -1.0e10) {
      if (!(d < 0.0)) {
        h = d == 0.0 ? 2 : 3;
        j = d;
        break;
      }
      Jg(l, 2, 211) | 0;
      n = 211;
      Ib = o;
      return n | 0;
    } else {
      h = b;
      j = d;
    } while (0);
    b = c[a + 404 >> 2] | 0;
    if (!(wg(b, 14288) | 0)) {
      if (!(wg(b, 14293) | 0)) {
        if ((k | 0) < 8) {
          n = 201;
          Ib = o;
          return n | 0;
        }
        b = Oh(c[a + 80 >> 2] | 0, c[a + 408 >> 2] | 0) | 0;
        if (!b) {
          Jg(l, 5, 203) | 0;
          n = 203;
          Ib = o;
          return n | 0;
        }
        e = c[a + 412 >> 2] | 0;
        if (!(wg(e, 14381) | 0)) {
          if (!(wg(e, 14387) | 0)) {
            Jg(l, 6, 213) | 0;
            n = 213;
            Ib = o;
            return n | 0;
          } else {
            e = b;
            f = 1;
          }
        } else {
          e = b;
          f = 0;
        }
      } else {
        e = 0;
        f = 3;
      }
    } else {
      e = 0;
      f = 2;
    }
    b: do if (((f & 255) << 6 & 255) << 24 >> 24 >> 6 << 24 >> 24 < 0) {
      switch (k | 0) {
        case 6:
          {
            b = 21176;
            break;
          }
        case 7:
          {
            b = c[a + 412 >> 2] | 0;
            break;
          }
        default:
          {
            d = 0.0;
            break b;
          }
      }
      d = +Gg(c[a + 408 >> 2] | 0, b);
      if (d < 0.0) {
        Jg(l, 5, 213) | 0;
        n = 213;
        Ib = o;
        return n | 0;
      }
    } else if (!(Hg(c[a + 416 >> 2] | 0, m) | 0)) {
      Jg(l, 7, 202) | 0;
      n = 202;
      Ib = o;
      return n | 0;
    } else d = 0.0; while (0);
    k = a + 28 | 0;
    l = c[k >> 2] | 0;
    b = l + 1 | 0;
    c[k >> 2] = b;
    if ((l | 0) >= (c[a + 1088 >> 2] | 0)) {
      n = 200;
      Ib = o;
      return n | 0;
    }
    a = c[a + 72 >> 2] | 0;
    c[a + (b * 40 | 0) >> 2] = n;
    c[a + (b * 40 | 0) + 4 >> 2] = e;
    c[a + (b * 40 | 0) + 36 >> 2] = f;
    c[a + (b * 40 | 0) + 32 >> 2] = h;
    g[a + (b * 40 | 0) + 24 >> 3] = j;
    n = ~~(d * 3600.0);
    c[a + (b * 40 | 0) + 8 >> 2] = (f | 0) == 3 ? (n | 0) % 86400 | 0 : n;
    g[a + (b * 40 | 0) + 16 >> 3] = +g[m >> 3];
    n = 0;
    Ib = o;
    return n | 0;
  }
  function Wg(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    m = Ib;
    Ib = Ib + 16 | 0;
    k = m;
    i = b + 92 | 0;
    g[k >> 3] = 0.0;
    h = c[b + 1104 >> 2] | 0;
    if ((h | 0) < 2) {
      l = 201;
      Ib = m;
      return l | 0;
    }
    l = Oh(c[b + 80 >> 2] | 0, c[b + 388 >> 2] | 0) | 0;
    if (!l) {
      Jg(i, 0, 203) | 0;
      l = 203;
      Ib = m;
      return l | 0;
    }
    d = c[b + 392 >> 2] | 0;
    if (!(wg(d, 8211) | 0)) {
      if (!(wg(d, 8218) | 0)) {
        if (!(wg(d, 8223) | 0)) {
          d = (wg(d, 8232) | 0) == 0;
          j = d ? 0 : 3;
          d = d ? 1 : 2;
        } else {
          j = 2;
          d = 2;
        }
      } else {
        j = 1;
        d = 2;
      }
    } else {
      j = 0;
      d = 2;
    }
    if (!(Hg(c[b + 388 + (d << 2) >> 2] | 0, k) | 0)) if ((d | 0) == 1) {
      Jg(i, 1, 213) | 0;
      l = 213;
      Ib = m;
      return l | 0;
    } else {
      Jg(i, d, 202) | 0;
      l = 202;
      Ib = m;
      return l | 0;
    }
    e = d + 1 | 0;
    if (((h | 0) > (e | 0) ? (f = c[b + 388 + (e << 2) >> 2] | 0, (a[f >> 0] | 0) != 0) : 0) ? (_p(f, 17161) | 0) != 0 : 0) {
      d = Th(b, f) | 0;
      if ((d | 0) < 0) {
        Jg(i, e, 205) | 0;
        l = 205;
        Ib = m;
        return l | 0;
      } else f = d;
    } else f = 0;
    e = b + 44 | 0;
    d = c[(c[e >> 2] | 0) + (l * 96 | 0) + 60 >> 2] | 0;
    if (d | 0) ft(d);
    d = et(32) | 0;
    if (!d) {
      l = 101;
      Ib = m;
      return l | 0;
    }
    g[d >> 3] = +g[k >> 3];
    c[d + 8 >> 2] = f;
    c[d + 24 >> 2] = j;
    c[(c[e >> 2] | 0) + (l * 96 | 0) + 60 >> 2] = d;
    l = 0;
    Ib = m;
    return l | 0;
  }
  function Xg(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    b = h;
    e = a + 92 | 0;
    do if ((c[a + 1104 >> 2] | 0) >= 2) {
      f = Oh(c[a + 80 >> 2] | 0, c[a + 388 >> 2] | 0) | 0;
      if (!f) {
        Jg(e, 0, 203) | 0;
        b = 203;
        break;
      }
      if ((f | 0) <= (c[a + 8 >> 2] | 0)) {
        if (!(Hg(c[a + 392 >> 2] | 0, b) | 0)) {
          Jg(e, 1, 202) | 0;
          b = 202;
          break;
        }
        d = +g[b >> 3];
        if (d < 0.0) {
          Jg(e, 1, 209) | 0;
          b = 209;
          break;
        } else {
          g[(c[a + 44 >> 2] | 0) + (f * 96 | 0) + 72 >> 3] = d;
          b = 0;
          break;
        }
      } else b = 0;
    } else b = 201; while (0);
    Ib = h;
    return b | 0;
  }
  function Yg(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    e = l;
    f = a + 92 | 0;
    k = c[a + 44 >> 2] | 0;
    if (!(c[a >> 2] | 0)) {
      Jg(f, 0, 203) | 0;
      k = 203;
      Ib = l;
      return k | 0;
    }
    b = c[a + 1104 >> 2] | 0;
    if ((b | 0) < 2) {
      k = 0;
      Ib = l;
      return k | 0;
    }
    if ((b | 0) == 2) {
      b = Oh(c[a + 80 >> 2] | 0, c[a + 388 >> 2] | 0) | 0;
      if (!b) {
        Jg(f, 0, 203) | 0;
        k = 203;
        Ib = l;
        return k | 0;
      }
      if (!(Hg(c[a + 392 >> 2] | 0, e) | 0)) {
        Jg(f, 1, 202) | 0;
        k = 202;
        Ib = l;
        return k | 0;
      }
      d = +g[e >> 3];
      if (d < 0.0) {
        Jg(f, 1, 209) | 0;
        k = 209;
        Ib = l;
        return k | 0;
      } else {
        g[k + (b * 96 | 0) + 64 >> 3] = d;
        k = 0;
        Ib = l;
        return k | 0;
      }
    }
    if (!(Hg(c[a + 396 >> 2] | 0, e) | 0)) {
      Jg(f, 2, 202) | 0;
      k = 202;
      Ib = l;
      return k | 0;
    }
    d = +g[e >> 3];
    if (d < 0.0) {
      Jg(f, 2, 209) | 0;
      k = 209;
      Ib = l;
      return k | 0;
    }
    j = a + 388 | 0;
    e = c[j >> 2] | 0;
    f = Cr(e) | 0;
    if ((f | 0) > 0 ? (h = Cr(c[a + 392 >> 2] | 0) | 0, (h | 0) > 0) : 0) {
      b = c[a >> 2] | 0;
      if ((b | 0) < 1) {
        k = 0;
        Ib = l;
        return k | 0;
      }
      e = 1;
      while (1) {
        j = Cr(k + (e * 96 | 0) | 0) | 0;
        if (!((j | 0) < (f | 0) | (j | 0) > (h | 0))) {
          g[k + (e * 96 | 0) + 64 >> 3] = d;
          b = c[a >> 2] | 0;
        }
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else {
          b = 0;
          break;
        }
      }
      Ib = l;
      return b | 0;
    }
    b = c[a >> 2] | 0;
    if ((b | 0) < 1) {
      k = 0;
      Ib = l;
      return k | 0;
    }
    i = a + 392 | 0;
    h = 1;
    f = e;
    while (1) {
      e = k + (h * 96 | 0) | 0;
      if ((_p(f, e) | 0) < 1 ? (_p(c[i >> 2] | 0, e) | 0) > -1 : 0) {
        g[k + (h * 96 | 0) + 64 >> 3] = d;
        b = c[a >> 2] | 0;
      }
      if ((h | 0) >= (b | 0)) {
        b = 0;
        break;
      }
      h = h + 1 | 0;
      f = c[j >> 2] | 0;
    }
    Ib = l;
    return b | 0;
  }
  function Zg(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    p = Ib;
    Ib = Ib + 16 | 0;
    o = p;
    h = a + 92 | 0;
    f = c[a + 1104 >> 2] | 0;
    if ((f | 0) < 3) {
      a = 0;
      Ib = p;
      return a | 0;
    }
    b = c[a + 388 >> 2] | 0;
    if (wg(b, 8242) | 0) {
      e = f + -1 | 0;
      if (!(Hg(c[a + 388 + (e << 2) >> 2] | 0, o) | 0)) {
        Jg(h, e, 202) | 0;
        a = 202;
        Ib = p;
        return a | 0;
      }
      b = c[a + 392 >> 2] | 0;
      if (wg(b, 8248) | 0) {
        g[a + 4768 >> 3] = +g[o >> 3];
        a = 0;
        Ib = p;
        return a | 0;
      }
      if (wg(b, 14333) | 0) {
        g[a + 4784 >> 3] = +g[o >> 3];
        a = 0;
        Ib = p;
        return a | 0;
      }
      if (!(wg(b, 8253) | 0)) {
        Jg(h, 1, 213) | 0;
        a = 213;
        Ib = p;
        return a | 0;
      }
      d = +g[o >> 3];
      if (d == 0.0) {
        g[a + 4776 >> 3] = 0.0;
        a = 0;
        Ib = p;
        return a | 0;
      }
      if (d == 1.0) {
        g[a + 4776 >> 3] = 1.0;
        a = 0;
        Ib = p;
        return a | 0;
      } else {
        Jg(h, e, 213) | 0;
        a = 213;
        Ib = p;
        return a | 0;
      }
    }
    if (wg(b, 8258) | 0) {
      b = f + -1 | 0;
      if (!(Hg(c[a + 388 + (b << 2) >> 2] | 0, o) | 0)) {
        Jg(h, b, 202) | 0;
        a = 202;
        Ib = p;
        return a | 0;
      } else {
        g[a + 4736 >> 3] = +g[o >> 3];
        a = 0;
        Ib = p;
        return a | 0;
      }
    }
    if (wg(b, 8263) | 0) {
      b = f + -1 | 0;
      if (!(Hg(c[a + 388 + (b << 2) >> 2] | 0, o) | 0)) {
        Jg(h, b, 202) | 0;
        a = 202;
        Ib = p;
        return a | 0;
      } else {
        g[a + 4808 >> 3] = +g[o >> 3];
        a = 0;
        Ib = p;
        return a | 0;
      }
    }
    if (wg(b, 8269) | 0) {
      b = f + -1 | 0;
      if (!(Hg(c[a + 388 + (b << 2) >> 2] | 0, o) | 0)) {
        Jg(h, b, 202) | 0;
        a = 202;
        Ib = p;
        return a | 0;
      }
      b = c[a + 392 >> 2] | 0;
      if (wg(b, 8248) | 0) {
        g[a + 4792 >> 3] = +g[o >> 3];
        a = 0;
        Ib = p;
        return a | 0;
      }
      if (!(wg(b, 8253) | 0)) {
        Jg(h, 1, 213) | 0;
        a = 213;
        Ib = p;
        return a | 0;
      } else {
        g[a + 4800 >> 3] = +g[o >> 3];
        a = 0;
        Ib = p;
        return a | 0;
      }
    }
    if (!(wg(b, 8248) | 0)) {
      if (!(wg(b, 8253) | 0)) {
        if (!(wg(b, 14333) | 0)) {
          Jg(h, 0, 213) | 0;
          a = 213;
          Ib = p;
          return a | 0;
        } else k = 3;
      } else k = 2;
    } else k = 1;
    b = f + -1 | 0;
    e = (Hg(c[a + 388 + (b << 2) >> 2] | 0, o) | 0) != 0;
    if ((k | 0) == 3) {
      if (!e) {
        Jg(h, b, 202) | 0;
        a = 202;
        Ib = p;
        return a | 0;
      }
      m = a + 392 | 0;
      h = c[m >> 2] | 0;
      if ((f | 0) == 3) {
        b = Oh(c[a + 80 >> 2] | 0, h) | 0;
        e = c[a + 8 >> 2] | 0;
        if ((b | 0) <= (e | 0)) {
          a = 0;
          Ib = p;
          return a | 0;
        }
        g[(c[a + 52 >> 2] | 0) + ((b - e | 0) * 120 | 0) + 64 >> 3] = +g[o >> 3];
        a = 0;
        Ib = p;
        return a | 0;
      }
      j = Cr(h) | 0;
      if ((j | 0) > 0 ? (l = Cr(c[a + 396 >> 2] | 0) | 0, (l | 0) > 0) : 0) {
        i = a + 8 | 0;
        e = c[i >> 2] | 0;
        b = c[a >> 2] | 0;
        if ((e | 0) >= (b | 0)) {
          a = 0;
          Ib = p;
          return a | 0;
        }
        h = a + 44 | 0;
        d = +g[o >> 3];
        f = a + 52 | 0;
        do {
          e = e + 1 | 0;
          o = Cr((c[h >> 2] | 0) + (e * 96 | 0) | 0) | 0;
          if (!((o | 0) < (j | 0) | (o | 0) > (l | 0))) {
            g[(c[f >> 2] | 0) + ((e - (c[i >> 2] | 0) | 0) * 120 | 0) + 64 >> 3] = d;
            b = c[a >> 2] | 0;
          }
        } while ((e | 0) < (b | 0));
        b = 0;
        Ib = p;
        return b | 0;
      }
      j = a + 8 | 0;
      b = c[j >> 2] | 0;
      f = c[a >> 2] | 0;
      if ((b | 0) >= (f | 0)) {
        a = 0;
        Ib = p;
        return a | 0;
      }
      k = a + 44 | 0;
      l = a + 396 | 0;
      d = +g[o >> 3];
      i = a + 52 | 0;
      while (1) {
        b = b + 1 | 0;
        e = (c[k >> 2] | 0) + (b * 96 | 0) | 0;
        if ((_p(h, e) | 0) < 1 ? (_p(c[l >> 2] | 0, e) | 0) > -1 : 0) {
          g[(c[i >> 2] | 0) + ((b - (c[j >> 2] | 0) | 0) * 120 | 0) + 64 >> 3] = d;
          e = c[a >> 2] | 0;
        } else e = f;
        if ((b | 0) >= (e | 0)) {
          b = 0;
          break;
        }
        h = c[m >> 2] | 0;
        f = e;
      }
      Ib = p;
      return b | 0;
    }
    if (!e) {
      Jg(h, b, 202) | 0;
      a = 202;
      Ib = p;
      return a | 0;
    }
    n = a + 12 | 0;
    b = c[n >> 2] | 0;
    if (!b) {
      a = 0;
      Ib = p;
      return a | 0;
    }
    m = a + 392 | 0;
    h = c[m >> 2] | 0;
    if ((f | 0) == 3) {
      e = Ph(c[a + 84 >> 2] | 0, h) | 0;
      if (!e) {
        a = 0;
        Ib = p;
        return a | 0;
      }
      d = +g[o >> 3];
      b = c[a + 48 >> 2] | 0;
      if ((k | 0) == 1) {
        g[b + (e << 7) + 72 >> 3] = d;
        a = 0;
        Ib = p;
        return a | 0;
      } else {
        g[b + (e << 7) + 80 >> 3] = d;
        a = 0;
        Ib = p;
        return a | 0;
      }
    }
    i = Cr(h) | 0;
    if ((i | 0) > 0 ? (j = Cr(c[a + 396 >> 2] | 0) | 0, (j | 0) > 0) : 0) {
      if ((b | 0) < 1) {
        a = 0;
        Ib = p;
        return a | 0;
      }
      h = a + 48 | 0;
      d = +g[o >> 3];
      if ((k | 0) == 1) {
        f = 1;
        while (1) {
          e = c[h >> 2] | 0;
          a = Cr(e + (f << 7) | 0) | 0;
          if (!((a | 0) < (i | 0) | (a | 0) > (j | 0))) {
            g[e + (f << 7) + 72 >> 3] = d;
            b = c[n >> 2] | 0;
          }
          if ((f | 0) < (b | 0)) f = f + 1 | 0;else {
            b = 0;
            break;
          }
        }
        Ib = p;
        return b | 0;
      } else {
        f = 1;
        while (1) {
          e = c[h >> 2] | 0;
          a = Cr(e + (f << 7) | 0) | 0;
          if (!((a | 0) < (i | 0) | (a | 0) > (j | 0))) {
            g[e + (f << 7) + 80 >> 3] = d;
            b = c[n >> 2] | 0;
          }
          if ((f | 0) < (b | 0)) f = f + 1 | 0;else {
            b = 0;
            break;
          }
        }
        Ib = p;
        return b | 0;
      }
    }
    if ((b | 0) < 1) {
      a = 0;
      Ib = p;
      return a | 0;
    }
    l = a + 48 | 0;
    j = a + 396 | 0;
    d = +g[o >> 3];
    if ((k | 0) == 1) {
      i = 1;
      while (1) {
        e = c[l >> 2] | 0;
        f = e + (i << 7) | 0;
        if ((_p(h, f) | 0) < 1 ? (_p(c[j >> 2] | 0, f) | 0) > -1 : 0) {
          g[e + (i << 7) + 72 >> 3] = d;
          b = c[n >> 2] | 0;
        }
        if ((i | 0) >= (b | 0)) {
          b = 0;
          break;
        }
        i = i + 1 | 0;
        h = c[m >> 2] | 0;
      }
      Ib = p;
      return b | 0;
    } else {
      i = 1;
      while (1) {
        e = c[l >> 2] | 0;
        f = e + (i << 7) | 0;
        if ((_p(h, f) | 0) < 1 ? (_p(c[j >> 2] | 0, f) | 0) > -1 : 0) {
          g[e + (i << 7) + 80 >> 3] = d;
          b = c[n >> 2] | 0;
        }
        if ((i | 0) >= (b | 0)) {
          b = 0;
          break;
        }
        i = i + 1 | 0;
        h = c[m >> 2] | 0;
      }
      Ib = p;
      return b | 0;
    }
    return 0;
  }
  function _g(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 16 | 0;
    f = k;
    b = a + 92 | 0;
    if (!(c[a >> 2] | 0)) {
      Jg(b, 0, 203) | 0;
      j = 203;
      Ib = k;
      return j | 0;
    }
    d = c[a + 1104 >> 2] | 0;
    if ((d | 0) < 2) {
      j = 0;
      Ib = k;
      return j | 0;
    }
    h = Oh(c[a + 80 >> 2] | 0, c[a + 388 >> 2] | 0) | 0;
    if (!h) {
      Jg(b, 0, 203) | 0;
      j = 203;
      Ib = k;
      return j | 0;
    }
    i = a + 8 | 0;
    if ((h | 0) <= (c[i >> 2] | 0)) {
      j = 0;
      Ib = k;
      return j | 0;
    }
    j = ug(c[a + 392 >> 2] | 0, 272) | 0;
    if ((j | 0) < 0) {
      Jg(b, 1, 213) | 0;
      j = 213;
      Ib = k;
      return j | 0;
    }
    g[f >> 3] = 1.0;
    do if ((d | 0) == 3 & (j | 0) == 1) {
      if (!(Hg(c[a + 396 >> 2] | 0, f) | 0)) {
        Jg(b, 2, 202) | 0;
        j = 202;
        Ib = k;
        return j | 0;
      } else {
        e = +g[f >> 3];
        if (!(e == 0.0)) break;
        g[f >> 3] = 1.0;
        e = 1.0;
        break;
      }
    } else e = 1.0; while (0);
    f = h - (c[i >> 2] | 0) | 0;
    b = a + 52 | 0;
    d = c[b >> 2] | 0;
    if (+g[d + (f * 120 | 0) + 8 >> 3] == 0.0) {
      j = 0;
      Ib = k;
      return j | 0;
    }
    c[d + (f * 120 | 0) + 96 >> 2] = j << 24 >> 24;
    g[(c[b >> 2] | 0) + (f * 120 | 0) + 104 >> 3] = e;
    j = 0;
    Ib = k;
    return j | 0;
  }
  function $g(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    o = Ib;
    Ib = Ib + 16 | 0;
    b = o;
    i = a + 92 | 0;
    g[b >> 3] = 0.0;
    n = a + 12 | 0;
    if (!(c[n >> 2] | 0)) {
      Jg(i, 0, 204) | 0;
      n = 204;
      Ib = o;
      return n | 0;
    }
    m = c[a + 1104 >> 2] | 0;
    f = m + -1 | 0;
    if ((m | 0) < 2) {
      n = 201;
      Ib = o;
      return n | 0;
    }
    d = c[a + 388 + (f << 2) >> 2] | 0;
    if (!(wg(d, 14398) | 0)) {
      if (!(wg(d, 14403) | 0)) {
        if (!(Hg(d, b) | 0)) {
          Jg(i, f, 202) | 0;
          n = 202;
          Ib = o;
          return n | 0;
        }
        e = +g[b >> 3];
        if (e < 0.0) {
          Jg(i, f, 211) | 0;
          n = 211;
          Ib = o;
          return n | 0;
        } else l = 4;
      } else {
        l = 2;
        e = 0.0;
      }
    } else {
      l = 3;
      e = 0.0;
    }
    m = a + 388 | 0;
    h = c[m >> 2] | 0;
    if ((f | 0) == 1) {
      d = Ph(c[a + 84 >> 2] | 0, h) | 0;
      if (!d) {
        Jg(i, 0, 204) | 0;
        n = 204;
        Ib = o;
        return n | 0;
      }
      b = c[a + 48 >> 2] | 0;
      switch (c[b + (d << 7) + 104 >> 2] | 0) {
        case 0:
          {
            Jg(i, 0, 207) | 0;
            n = 207;
            Ib = o;
            return n | 0;
          }
        case 8:
          {
            j = 15;
            break;
          }
        default:
          {}
      }
      if ((j | 0) == 15 ? l << 24 >> 24 == 4 : 0) {
        Jg(i, 0, 207) | 0;
        n = 207;
        Ib = o;
        return n | 0;
      }
      ah(b, d, l & 255, e);
      n = 0;
      Ib = o;
      return n | 0;
    }
    j = Cr(h) | 0;
    if ((j | 0) > 0 ? (k = Cr(c[a + 392 >> 2] | 0) | 0, (k | 0) > 0) : 0) {
      b = c[n >> 2] | 0;
      if ((b | 0) < 1) {
        n = 0;
        Ib = o;
        return n | 0;
      }
      i = a + 48 | 0;
      h = l & 255;
      f = 1;
      while (1) {
        d = c[i >> 2] | 0;
        m = Cr(d + (f << 7) | 0) | 0;
        if (!((m | 0) < (j | 0) | (m | 0) > (k | 0))) {
          ah(d, f, h, e);
          b = c[n >> 2] | 0;
        }
        if ((f | 0) < (b | 0)) f = f + 1 | 0;else {
          b = 0;
          break;
        }
      }
      Ib = o;
      return b | 0;
    }
    b = c[n >> 2] | 0;
    if ((b | 0) < 1) {
      n = 0;
      Ib = o;
      return n | 0;
    }
    k = a + 48 | 0;
    a = a + 392 | 0;
    j = l & 255;
    i = 1;
    while (1) {
      d = c[k >> 2] | 0;
      f = d + (i << 7) | 0;
      if ((_p(h, f) | 0) < 1 ? (_p(c[a >> 2] | 0, f) | 0) > -1 : 0) {
        ah(d, i, j, e);
        b = c[n >> 2] | 0;
      }
      if ((i | 0) >= (b | 0)) {
        b = 0;
        break;
      }
      i = i + 1 | 0;
      h = c[m >> 2] | 0;
    }
    Ib = o;
    return b | 0;
  }
  function ah(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var f = 0;
    f = c[a + (b << 7) + 104 >> 2] | 0;
    switch (f | 0) {
      case 8:
      case 1:
        {
          if ((d | 0) == 4) return;
          c[a + (b << 7) + 108 >> 2] = d;
          return;
        }
      case 2:
        {
          switch (d | 0) {
            case 4:
              {
                g[a + (b << 7) + 56 >> 3] = e;
                if (e == 0.0) d = 2;else d = 3;
                break;
              }
            case 3:
              {
                g[a + (b << 7) + 56 >> 3] = 1.0;
                d = 3;
                break;
              }
            default:
              {}
          }
          c[a + (b << 7) + 108 >> 2] = d;
          return;
        }
      default:
        {
          if (f >>> 0 <= 2) return;
          f = a + (b << 7) + 56 | 0;
          g[f >> 3] = e;
          c[a + (b << 7) + 108 >> 2] = d;
          if ((d | 0) == 4) return;
          g[f >> 3] = -1.0e10;
          return;
        }
    }
  }
  function bh(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    h = l;
    k = a + 92 | 0;
    e = c[a + 48 >> 2] | 0;
    j = c[a + 56 >> 2] | 0;
    f = c[a + 1104 >> 2] | 0;
    a: do if ((f | 0) >= 3) {
      b = c[a + 388 >> 2] | 0;
      if (wg(b, 8274) | 0) {
        if (!(Hg(c[a + 396 >> 2] | 0, h) | 0)) {
          Jg(k, 2, 202) | 0;
          b = 202;
          break;
        }
        d = +g[h >> 3];
        if (d < 0.0) {
          Jg(k, 2, 213) | 0;
          b = 213;
          break;
        } else {
          g[a + 4424 >> 3] = d;
          b = 0;
          break;
        }
      }
      do if (!(wg(b, 8269) | 0)) {
        if (!(wg(b, 14343) | 0)) {
          Jg(k, 0, 213) | 0;
          b = 213;
          break a;
        }
        if ((f | 0) < 4) {
          b = 201;
          break a;
        }
        b = Ph(c[a + 84 >> 2] | 0, c[a + 392 >> 2] | 0) | 0;
        if (!b) {
          Jg(k, 1, 216) | 0;
          b = 216;
          break a;
        }
        if ((c[e + (b << 7) + 104 >> 2] | 0) == 2) {
          i = Rh(a, b) | 0;
          break;
        } else {
          Jg(k, 1, 216) | 0;
          b = 216;
          break a;
        }
      } else i = 0; while (0);
      b = c[a + 388 + (f + -2 << 2) >> 2] | 0;
      if (wg(b, 8280) | 0) {
        b = f + -1 | 0;
        if (!(Hg(c[a + 388 + (b << 2) >> 2] | 0, h) | 0)) {
          Jg(k, b, 202) | 0;
          b = 202;
          break;
        }
        d = +g[h >> 3];
        if (d < 0.0) {
          Jg(k, b, 217) | 0;
          b = 217;
          break;
        }
        if (!i) {
          g[a + 4416 >> 3] = d;
          b = 0;
          break;
        } else {
          g[j + (i << 7) + 72 >> 3] = d;
          b = 0;
          break;
        }
      }
      if (wg(b, 8172) | 0) {
        b = f + -1 | 0;
        e = Th(a, c[a + 388 + (b << 2) >> 2] | 0) | 0;
        if ((e | 0) < 0) {
          Jg(k, b, 205) | 0;
          b = 205;
          break;
        }
        if (!i) {
          c[a + 4492 >> 2] = e;
          b = 0;
          break;
        } else {
          c[j + (i << 7) + 68 >> 2] = e;
          b = 0;
          break;
        }
      }
      if (wg(b, 8286) | 0) {
        e = f + -1 | 0;
        b = c[a + 388 + (e << 2) >> 2] | 0;
        if (i | 0) {
          b = Uh(a, b) | 0;
          if (!b) {
            Jg(k, e, 206) | 0;
            b = 206;
            break;
          } else {
            c[j + (i << 7) + 60 >> 2] = b;
            c[(c[a + 68 >> 2] | 0) + (b * 56 | 0) + 36 >> 2] = 2;
            b = 0;
            break;
          }
        }
        if (!(Hg(b, h) | 0)) {
          Jg(k, e, 202) | 0;
          b = 202;
          break;
        }
        d = +g[h >> 3];
        if (!(d <= 0.0)) {
          g[a + 4400 >> 3] = d;
          b = 0;
          break;
        } else {
          Jg(k, e, 217) | 0;
          b = 217;
          break;
        }
      } else b = 201;
    } else b = 201; while (0);
    Ib = l;
    return b | 0;
  }
  function ch(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 16 | 0;
    h = k;
    j = a + 92 | 0;
    i = c[a + 1104 >> 2] | 0;
    b = i + -1 | 0;
    if ((i | 0) < 2) {
      a = 201;
      Ib = k;
      return a | 0;
    }
    d = c[a + 388 >> 2] | 0;
    if (wg(d, 8291) | 0) {
      if (!(Hg(c[a + 388 + (b << 2) >> 2] | 0, h) | 0)) {
        Jg(j, b, 202) | 0;
        a = 202;
        Ib = k;
        return a | 0;
      }
      e = +g[h >> 3];
      if (e < 0.0 | e > 255.0) {
        Jg(j, b, 213) | 0;
        a = 213;
        Ib = k;
        return a | 0;
      } else {
        c[a + 1208 >> 2] = ~~e;
        a = 0;
        Ib = k;
        return a | 0;
      }
    }
    if (wg(d, 14267) | 0) {
      d = a + 388 + (b << 2) | 0;
      b = c[d >> 2] | 0;
      if (wg(b, 8166) | 0) {
        c[a + 1228 >> 2] = 0;
        b = c[d >> 2] | 0;
      }
      if (wg(b, 8162) | 0) {
        c[a + 1228 >> 2] = 1;
        b = c[d >> 2] | 0;
      }
      if (!(wg(b, 8296) | 0)) {
        a = 0;
        Ib = k;
        return a | 0;
      }
      c[a + 1228 >> 2] = 2;
      a = 0;
      Ib = k;
      return a | 0;
    }
    if (wg(d, 8301) | 0) {
      d = a + 388 + (b << 2) | 0;
      b = c[d >> 2] | 0;
      if (wg(b, 8166) | 0) {
        c[a + 1220 >> 2] = 0;
        b = c[d >> 2] | 0;
      }
      if (!(wg(b, 8162) | 0)) {
        a = 0;
        Ib = k;
        return a | 0;
      }
      c[a + 1220 >> 2] = 1;
      a = 0;
      Ib = k;
      return a | 0;
    }
    if (wg(d, 8306) | 0) {
      d = a + 388 + (b << 2) | 0;
      b = c[d >> 2] | 0;
      if (wg(b, 8166) | 0) {
        c[a + 1224 >> 2] = 0;
        b = c[d >> 2] | 0;
      }
      if (!(wg(b, 8162) | 0)) {
        a = 0;
        Ib = k;
        return a | 0;
      }
      c[a + 1224 >> 2] = 1;
      a = 0;
      Ib = k;
      return a | 0;
    }
    if (wg(d, 8311) | 0) {
      d = a + 388 + (b << 2) | 0;
      b = c[d >> 2] | 0;
      if (wg(b, 8166) | 0) {
        c[a + 1232 >> 2] = 0;
        b = c[d >> 2] | 0;
      }
      if (!(wg(b, 8162) | 0)) {
        a = 0;
        Ib = k;
        return a | 0;
      }
      c[a + 1232 >> 2] = 1;
      a = 0;
      Ib = k;
      return a | 0;
    }
    if (wg(d, 14354) | 0) {
      b = c[a + 388 + (b << 2) >> 2] | 0;
      if (wg(b, 8316) | 0) {
        c[a + 1236 >> 2] = 0;
        a = 0;
        Ib = k;
        return a | 0;
      }
      if (wg(b, 8321) | 0) {
        c[a + 1236 >> 2] = 1;
        a = 0;
        Ib = k;
        return a | 0;
      }
      if (!(c[a >> 2] | 0)) {
        Jg(j, 1, 203) | 0;
        a = 203;
        Ib = k;
        return a | 0;
      }
      h = a + 44 | 0;
      f = a + 80 | 0;
      b = 1;
      while (1) {
        d = Oh(c[f >> 2] | 0, c[a + 388 + (b << 2) >> 2] | 0) | 0;
        if (!d) {
          f = 39;
          break;
        }
        c[(c[h >> 2] | 0) + (d * 96 | 0) + 80 >> 2] = 1;
        b = b + 1 | 0;
        if ((b | 0) >= (i | 0)) {
          f = 41;
          break;
        }
      }
      if ((f | 0) == 39) {
        Jg(j, b, 203) | 0;
        a = 203;
        Ib = k;
        return a | 0;
      } else if ((f | 0) == 41) {
        c[a + 1236 >> 2] = 2;
        a = 0;
        Ib = k;
        return a | 0;
      }
    }
    if (wg(d, 14359) | 0) {
      b = c[a + 388 + (b << 2) >> 2] | 0;
      if (wg(b, 8316) | 0) {
        c[a + 1240 >> 2] = 0;
        a = 0;
        Ib = k;
        return a | 0;
      }
      if (wg(b, 8321) | 0) {
        c[a + 1240 >> 2] = 1;
        a = 0;
        Ib = k;
        return a | 0;
      }
      if (!(c[a + 12 >> 2] | 0)) {
        Jg(j, 1, 204) | 0;
        a = 204;
        Ib = k;
        return a | 0;
      }
      h = a + 48 | 0;
      f = a + 84 | 0;
      b = 1;
      while (1) {
        d = Ph(c[f >> 2] | 0, c[a + 388 + (b << 2) >> 2] | 0) | 0;
        if (!d) {
          f = 51;
          break;
        }
        c[(c[h >> 2] | 0) + (d << 7) + 116 >> 2] = 1;
        b = b + 1 | 0;
        if ((b | 0) >= (i | 0)) {
          f = 53;
          break;
        }
      }
      if ((f | 0) == 51) {
        Jg(j, b, 204) | 0;
        a = 204;
        Ib = k;
        return a | 0;
      } else if ((f | 0) == 53) {
        c[a + 1240 >> 2] = 2;
        a = 0;
        Ib = k;
        return a | 0;
      }
    }
    do if (!(xh(d, 8325) | 0)) {
      b = ug(d, 432) | 0;
      if ((b | 0) > -1) {
        if ((b | 0) <= 14) {
          d = b;
          break;
        }
        Jg(j, 0, 213) | 0;
        a = 213;
        Ib = k;
        return a | 0;
      }
      if (!(wg(d, 8339) | 0)) {
        a = 201;
        Ib = k;
        return a | 0;
      }
      hr(a + 1529 | 0, c[a + 392 >> 2] | 0, 259) | 0;
      a = 0;
      Ib = k;
      return a | 0;
    } else d = 9; while (0);
    b = c[a + 392 >> 2] | 0;
    if (wg(b, 8162) | 0) {
      c[a + 1816 + (d * 88 | 0) + 64 >> 2] = 1;
      a = 0;
      Ib = k;
      return a | 0;
    }
    if (wg(b, 8166) | 0) {
      c[a + 1816 + (d * 88 | 0) + 64 >> 2] = 0;
      a = 0;
      Ib = k;
      return a | 0;
    }
    if ((i | 0) < 3) {
      a = 201;
      Ib = k;
      return a | 0;
    }
    if (!(wg(b, 14381) | 0)) {
      if (!(wg(b, 14387) | 0)) {
        if (!(wg(b, 8334) | 0)) {
          Jg(j, 1, 213) | 0;
          a = 213;
          Ib = k;
          return a | 0;
        } else b = 2;
      } else b = 1;
    } else b = 0;
    if (!(Hg(c[a + 396 >> 2] | 0, h) | 0)) {
      Jg(j, 2, 202) | 0;
      a = 202;
      Ib = k;
      return a | 0;
    }
    if ((b | 0) == 2) {
      c[a + 1816 + (d * 88 | 0) + 64 >> 2] = 1;
      e = +g[h >> 3];
      c[a + 1816 + (d * 88 | 0) + 68 >> 2] = ~~(e + (e >= 0.0 ? .5 : -.5));
      a = 0;
      Ib = k;
      return a | 0;
    } else {
      g[a + 1816 + (d * 88 | 0) + 72 + (b << 3) >> 3] = +g[h >> 3];
      a = 0;
      Ib = k;
      return a | 0;
    }
    return 0;
  }
  function dh(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    i = l;
    k = a + 92 | 0;
    f = c[a + 1104 >> 2] | 0;
    e = f + -1 | 0;
    do if ((f | 0) >= 2) {
      j = a + 388 | 0;
      m = (wg(c[j >> 2] | 0, 8344) | 0) == 0;
      h = a + 388 + (e << 2) | 0;
      b = c[h >> 2] | 0;
      if (!m) {
        if (wg(b, 8316) | 0) {
          c[a + 1216 >> 2] = 0;
          b = 0;
          break;
        }
        if (wg(b, 8166) | 0) {
          c[a + 1216 >> 2] = 0;
          b = 0;
          break;
        }
        if (wg(b, 8349) | 0) {
          c[a + 1216 >> 2] = 1;
          b = 0;
          break;
        }
        if (wg(b, 8357) | 0) {
          c[a + 1216 >> 2] = 2;
          b = 0;
          break;
        }
        if (wg(b, 8365) | 0) {
          c[a + 1216 >> 2] = 3;
          b = 0;
          break;
        }
        if (!(wg(b, 8373) | 0)) {
          Jg(k, e, 213) | 0;
          b = 213;
          break;
        } else {
          c[a + 1216 >> 2] = 4;
          b = 0;
          break;
        }
      }
      if (!(Hg(b, i) | 0)) {
        d = +Gg(c[h >> 2] | 0, 21176);
        g[i >> 3] = d;
        if (d < 0.0) {
          b = f + -2 | 0;
          d = +Gg(c[a + 388 + (b << 2) >> 2] | 0, c[h >> 2] | 0);
          g[i >> 3] = d;
          if (d < 0.0) {
            Jg(k, b, 213) | 0;
            b = 213;
            break;
          }
        }
      } else d = +g[i >> 3];
      e = ~~(d * 3600.0 + .5);
      b = c[j >> 2] | 0;
      if (wg(b, 8379) | 0) {
        c[a + 1192 >> 2] = e;
        b = 0;
        break;
      }
      if (wg(b, 8384) | 0) {
        c[a + 1148 >> 2] = e;
        b = 0;
        break;
      }
      if (wg(b, 8389) | 0) {
        c[a + 1180 >> 2] = e;
        b = 0;
        break;
      }
      if (wg(b, 14199) | 0) {
        c[a + 1188 >> 2] = e;
        b = 0;
        break;
      }
      if (!(wg(b, 8394) | 0)) {
        if (wg(b, 8172) | 0) {
          b = c[a + 392 >> 2] | 0;
          if (wg(b, 14288) | 0) {
            c[a + 1152 >> 2] = e;
            b = 0;
            break;
          }
          if (!(wg(b, 8399) | 0)) {
            Jg(k, 1, 213) | 0;
            b = 213;
            break;
          } else {
            c[a + 1156 >> 2] = e;
            b = 0;
            break;
          }
        }
        if (!(wg(b, 8404) | 0)) if (!(wg(b, 8399) | 0)) {
          Jg(k, 0, 213) | 0;
          b = 213;
          break;
        } else {
          c[a + 1144 >> 2] = (e | 0) % 86400 | 0;
          b = 0;
          break;
        }
        b = c[a + 392 >> 2] | 0;
        if (wg(b, 14288) | 0) {
          c[a + 1160 >> 2] = e;
          b = 0;
          break;
        }
        if (!(wg(b, 8399) | 0)) {
          Jg(k, 1, 213) | 0;
          b = 213;
          break;
        } else {
          c[a + 1164 >> 2] = e;
          b = 0;
          break;
        }
      } else b = 0;
    } else b = 201; while (0);
    Ib = l;
    return b | 0;
  }
  function eh(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = (c[a + 1104 >> 2] | 0) + -1 | 0;
    d = fh(a, b) | 0;
    if ((d | 0) > -1) return d | 0;
    d = gh(a, b) | 0;
    return d | 0;
  }
  function fh(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    g = b + 4600 | 0;
    j = b + 92 | 0;
    if ((d | 0) < 0) {
      b = 201;
      return b | 0;
    }
    h = b + 388 | 0;
    e = c[h >> 2] | 0;
    if (wg(e, 8521) | 0) {
      if ((d | 0) < 1) {
        b = 0;
        return b | 0;
      }
      e = c[b + 392 >> 2] | 0;
      if (wg(e, 8526) | 0) {
        c[b + 1120 >> 2] = 0;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8530) | 0) {
        c[b + 1120 >> 2] = 1;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8534) | 0) {
        c[b + 1120 >> 2] = 4;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8538) | 0) {
        c[b + 1120 >> 2] = 2;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8542) | 0) {
        c[b + 1120 >> 2] = 3;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8547) | 0) {
        c[b + 1120 >> 2] = 5;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8551) | 0) {
        c[b + 1120 >> 2] = 6;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8555) | 0) {
        c[b + 1120 >> 2] = 8;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8559) | 0) {
        c[b + 1120 >> 2] = 9;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8563) | 0) {
        c[b + 1120 >> 2] = 7;
        b = 0;
        return b | 0;
      }
      if (!(wg(e, 8567) | 0)) {
        Jg(j, 1, 213) | 0;
        b = 213;
        return b | 0;
      } else {
        c[b + 1120 >> 2] = 5;
        b = 0;
        return b | 0;
      }
    }
    if (wg(e, 14253) | 0) {
      if ((d | 0) < 1) {
        b = 0;
        return b | 0;
      }
      e = c[b + 392 >> 2] | 0;
      if (wg(e, 8570) | 0) {
        b = -1;
        return b | 0;
      }
      if (wg(e, 8574) | 0) {
        c[b + 1124 >> 2] = 0;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8578) | 0) {
        c[b + 1124 >> 2] = 1;
        b = 0;
        return b | 0;
      }
      if (!(wg(e, 8582) | 0)) {
        Jg(j, 1, 213) | 0;
        b = 213;
        return b | 0;
      } else {
        c[b + 1124 >> 2] = 2;
        b = 0;
        return b | 0;
      }
    }
    if (wg(e, 8589) | 0) {
      if ((d | 0) < 1) {
        b = 0;
        return b | 0;
      }
      e = c[b + 392 >> 2] | 0;
      if (wg(e, 8595) | 0) {
        c[b + 4500 >> 2] = 0;
        b = 0;
        return b | 0;
      }
      if (wg(e, 8599) | 0) {
        c[b + 4500 >> 2] = 1;
        b = 0;
        return b | 0;
      }
      if (!(wg(e, 8603) | 0)) {
        Jg(j, 1, 213) | 0;
        b = 213;
        return b | 0;
      } else {
        c[b + 4500 >> 2] = 2;
        b = 0;
        return b | 0;
      }
    }
    if (wg(e, 8384) | 0) {
      if ((d | 0) < 2) {
        b = 0;
        return b | 0;
      }
      e = c[b + 392 >> 2] | 0;
      if (!(wg(e, 8607) | 0)) {
        if (!(wg(e, 8611) | 0)) {
          Jg(j, 1, 213) | 0;
          b = 213;
          return b | 0;
        } else e = 1;
      } else e = 0;
      c[b + 4188 >> 2] = e;
      hr(b + 3664 | 0, c[b + 396 >> 2] | 0, 259) | 0;
      b = 0;
      return b | 0;
    }
    if (wg(e, 8389) | 0) {
      if ((d | 0) < 1) {
        b = 0;
        return b | 0;
      }
      f = c[b + 392 >> 2] | 0;
      if (wg(f, 8316) | 0) {
        c[g >> 2] = 0;
        b = 0;
        return b | 0;
      }
      if (wg(f, 8616) | 0) {
        c[g >> 2] = 1;
        b = 0;
        return b | 0;
      }
      if (!(wg(f, 8621) | 0)) {
        if (!(wg(f, 8625) | 0)) {
          c[g >> 2] = 1;
          hr(b + 4624 | 0, f, 31) | 0;
          if ((d | 0) > 1) hr(b + 4656 | 0, c[b + 396 >> 2] | 0, 31) | 0;
          e = c[g >> 2] | 0;
          if ((e | 0) == 3) {
            e = c[h >> 2] | 0;
            i = 66;
          }
        } else {
          c[g >> 2] = 3;
          i = 66;
        }
        do if ((i | 0) == 66) {
          a[e >> 0] = 0;
          if ((d | 0) < 2) {
            b = 201;
            return b | 0;
          }
          e = b + 396 | 0;
          Oq(c[h >> 2] | 0, c[e >> 2] | 0) | 0;
          i = Oh(c[b + 80 >> 2] | 0, c[e >> 2] | 0) | 0;
          c[b + 4616 >> 2] = i;
          if (i | 0) {
            hr(b + 4624 | 0, 8631, 31) | 0;
            hr(b + 4656 | 0, c[e >> 2] | 0, 31) | 0;
            e = c[g >> 2] | 0;
            break;
          }
          Jg(j, 2, 212) | 0;
          b = 212;
          return b | 0;
        } while (0);
        if ((e | 0) != 2) {
          b = 0;
          return b | 0;
        }
      } else c[g >> 2] = 2;
      hr(b + 4624 | 0, 8621, 31) | 0;
      hr(b + 4656 | 0, 8638, 31) | 0;
      b = 0;
      return b | 0;
    }
    if (wg(e, 8642) | 0) {
      if ((d | 0) < 1) {
        b = 0;
        return b | 0;
      }
      hr(b + 5576 | 0, c[b + 392 >> 2] | 0, 259) | 0;
      b = 0;
      return b | 0;
    }
    if (wg(e, 8646) | 0) {
      b = 0;
      return b | 0;
    }
    if (wg(e, 8651) | 0) {
      if ((d | 0) < 1) {
        b = 0;
        return b | 0;
      }
      e = c[b + 392 >> 2] | 0;
      if (wg(e, 8656) | 0) {
        c[b + 4512 >> 2] = -1;
        b = 0;
        return b | 0;
      }
      if (!(wg(e, 8661) | 0)) {
        Jg(j, 1, 213) | 0;
        b = 213;
        return b | 0;
      }
      if ((d | 0) > 1) {
        j = Br(c[b + 396 >> 2] | 0) | 0;
        c[b + 4512 >> 2] = j;
        b = 0;
        return b | 0;
      } else {
        c[b + 4512 >> 2] = 0;
        b = 0;
        return b | 0;
      }
    }
    if (wg(e, 8172) | 0) {
      if ((d | 0) < 1) {
        b = 0;
        return b | 0;
      }
      hr(b + 96 | 0, c[b + 392 >> 2] | 0, 31) | 0;
      b = 0;
      return b | 0;
    }
    if (!(wg(e, 14229) | 0)) {
      b = -1;
      return b | 0;
    }
    if ((d | 0) < 2) {
      b = 0;
      return b | 0;
    }
    if (!(wg(c[b + 392 >> 2] | 0, 8666) | 0)) {
      b = -1;
      return b | 0;
    }
    e = ug(c[b + 396 >> 2] | 0, 3464) | 0;
    if ((e | 0) < 0) {
      Jg(j, 2, 213) | 0;
      b = 213;
      return b | 0;
    } else {
      c[b + 4496 >> 2] = e;
      b = 0;
      return b | 0;
    }
    return 0;
  }
  function gh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 16 | 0;
    f = k;
    j = a + 92 | 0;
    h = c[a + 388 >> 2] | 0;
    do if (!(wg(h, 8409) | 0)) {
      if (((((((wg(h, 8414) | 0) == 0 ? (wg(h, 8419) | 0) == 0 : 0) ? (wg(h, 14229) | 0) == 0 : 0) ? (wg(h, 8394) | 0) == 0 : 0) ? (wg(h, 8424) | 0) == 0 : 0) ? (wg(h, 14253) | 0) == 0 : 0) ? (wg(h, 8334) | 0) == 0 : 0) i = 1;else i = 2;
      if ((i | 0) <= (b | 0)) {
        if (!(Hg(c[a + 388 + (i << 2) >> 2] | 0, f) | 0)) {
          Jg(j, i, 202) | 0;
          b = 202;
          break;
        }
        if (wg(h, 8428) | 0) {
          d = +g[f >> 3];
          if (d < 0.0) {
            Jg(j, i, 213) | 0;
            b = 213;
            break;
          } else {
            g[a + 4688 >> 3] = d;
            b = 0;
            break;
          }
        }
        if (wg(h, 8434) | 0) {
          d = +g[f >> 3];
          if (d < 0.0) {
            Jg(j, i, 213) | 0;
            b = 213;
            break;
          } else {
            g[a + 4696 >> 3] = d;
            b = 0;
            break;
          }
        }
        if (wg(h, 8439) | 0) {
          g[a + 4376 >> 3] = +g[f >> 3];
          b = 0;
          break;
        }
        if (wg(h, 8449) | 0) {
          d = +g[f >> 3];
          if (d < 0.0) {
            Jg(j, i, 213) | 0;
            b = 213;
            break;
          } else {
            g[a + 4360 >> 3] = d;
            b = 0;
            break;
          }
        }
        if (wg(h, 8460) | 0) {
          d = +g[f >> 3];
          if (d < 0.0) {
            Jg(j, i, 213) | 0;
            b = 213;
            break;
          } else {
            g[a + 4368 >> 3] = d;
            b = 0;
            break;
          }
        }
        if (wg(h, 8394) | 0) {
          d = +g[f >> 3];
          if (d < 0.0) {
            Jg(j, i, 213) | 0;
            b = 213;
            break;
          }
          b = a + 4336 | 0;
          e = +g[b >> 3];
          if (!(e == .1)) {
            if (e - d < .1) {
              Jg(j, i, 208) | 0;
              b = 208;
              break;
            }
          } else g[b >> 3] = d + .1;
          g[a + 4328 >> 3] = d;
          b = 0;
          break;
        }
        if (wg(h, 8424) | 0) {
          d = +g[f >> 3];
          if (d < 0.0) {
            Jg(j, i, 213) | 0;
            b = 213;
            break;
          }
          if (d - +g[a + 4328 >> 3] < .1) {
            Jg(j, i, 208) | 0;
            b = 208;
            break;
          } else {
            g[a + 4336 >> 3] = d;
            b = 0;
            break;
          }
        }
        b = (wg(h, 14253) | 0) == 0;
        d = +g[f >> 3];
        if (!b) if (d < 0.0) {
          Jg(j, i, 213) | 0;
          b = 213;
          break;
        } else {
          g[a + 4320 >> 3] = d;
          b = 0;
          break;
        }
        if (d <= 0.0) {
          Jg(j, i, 213) | 0;
          b = 213;
          break;
        }
        if (wg(h, 8470) | 0) {
          g[a + 4384 >> 3] = d;
          b = 0;
          break;
        }
        if (wg(h, 8414) | 0) {
          g[a + 4392 >> 3] = d;
          b = 0;
          break;
        }
        if (wg(h, 8475) | 0) {
          c[a + 4508 >> 2] = ~~d;
          b = 0;
          break;
        }
        if (wg(h, 8481) | 0) {
          e = d >= 1.0e-05 ? d : 1.0e-05;
          e = e <= .1 ? e : .1;
          g[f >> 3] = e;
          g[a + 4352 >> 3] = e;
          b = 0;
          break;
        }
        if (wg(h, 8486) | 0) {
          g[a + 4280 >> 3] = d;
          b = 0;
          break;
        }
        if (wg(h, 8491) | 0) {
          g[a + 4288 >> 3] = d;
          b = 0;
          break;
        }
        if (wg(h, 8496) | 0) {
          if (d >= 1.0) {
            b = 213;
            break;
          }
          g[a + 4296 >> 3] = d;
          b = 0;
          break;
        }
        if (wg(h, 8502) | 0) {
          c[a + 4516 >> 2] = ~~d;
          b = 0;
          break;
        }
        if (wg(h, 8512) | 0) {
          c[a + 4520 >> 2] = ~~d;
          b = 0;
          break;
        }
        if (wg(h, 8419) | 0) {
          g[a + 4312 >> 3] = 1.0 / d;
          b = 0;
          break;
        }
        if (!(wg(h, 14229) | 0)) {
          b = 201;
          break;
        }
        g[a + 4344 >> 3] = d;
        b = 0;
      } else b = 0;
    } else b = 0; while (0);
    Ib = k;
    return b | 0;
  }
  function hh(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    return Sq(a + 4 | 0, 4, b, c) | 0;
  }
  function ih(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    return pr(a + 4 | 0, b, c) | 0;
  }
  function jh(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    n = c[a + 4216 >> 2] | 0;
    l = c[a >> 2] | 0;
    o = a + 12 | 0;
    k = c[o >> 2] | 0;
    l = (l | 0) < (k | 0) ? k : l;
    l = (l | 0) > 13 ? l + 1 | 0 : 15;
    k = gt(l, 4) | 0;
    l = gt(l, 4) | 0;
    j = (k | 0) == 0 | (l | 0) == 0;
    m = j ? 101 : 0;
    if (j) {
      o = 101;
      ft(k);
      ft(l);
      return o | 0;
    }
    c[k >> 2] = 516114521;
    i = k + 4 | 0;
    c[i >> 2] = 20012;
    c[k + 8 >> 2] = c[a >> 2];
    j = a + 4 | 0;
    c[k + 12 >> 2] = c[j >> 2];
    c[k + 16 >> 2] = c[o >> 2];
    c[k + 20 >> 2] = c[a + 20 >> 2];
    c[k + 24 >> 2] = c[a + 24 >> 2];
    c[k + 28 >> 2] = c[a + 4600 >> 2];
    c[k + 32 >> 2] = c[a + 4616 >> 2];
    c[k + 36 >> 2] = c[a + 1120 >> 2];
    c[k + 40 >> 2] = c[a + 1124 >> 2];
    c[k + 44 >> 2] = c[a + 1216 >> 2];
    c[k + 48 >> 2] = c[a + 1164 >> 2];
    c[k + 52 >> 2] = c[a + 1160 >> 2];
    c[k + 56 >> 2] = c[a + 1192 >> 2];
    Sq(k, 4, 15, n) | 0;
    Sq(a + 5336 | 0, 1, 80, n) | 0;
    Sq(a + 5416 | 0, 1, 80, n) | 0;
    Sq(a + 5496 | 0, 1, 80, n) | 0;
    Sq(a + 128 | 0, 1, 260, n) | 0;
    Sq(a + 1529 | 0, 1, 260, n) | 0;
    Sq(a + 4624 | 0, 1, 32, n) | 0;
    Sq(a + 2200 | 0, 1, 32, n) | 0;
    if ((c[a >> 2] | 0) >= 1) {
      e = a + 44 | 0;
      b = 1;
      while (1) {
        Sq((c[e >> 2] | 0) + (b * 96 | 0) | 0, 32, 1, n) | 0;
        if ((b | 0) < (c[a >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    b = c[o >> 2] | 0;
    if ((b | 0) >= 1) {
      h = a + 48 | 0;
      e = 1;
      while (1) {
        Sq((c[h >> 2] | 0) + (e << 7) | 0, 32, 1, n) | 0;
        b = c[o >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
      if ((b | 0) >= 1) {
        e = 1;
        while (1) {
          c[k + (e << 2) >> 2] = c[(c[h >> 2] | 0) + (e << 7) + 32 >> 2];
          b = c[o >> 2] | 0;
          if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
        }
      }
    }
    Sq(i, 4, b, n) | 0;
    b = c[o >> 2] | 0;
    if ((b | 0) >= 1) {
      h = a + 48 | 0;
      e = 1;
      while (1) {
        c[k + (e << 2) >> 2] = c[(c[h >> 2] | 0) + (e << 7) + 36 >> 2];
        b = c[o >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    Sq(i, 4, b, n) | 0;
    b = c[o >> 2] | 0;
    if ((b | 0) >= 1) {
      h = a + 48 | 0;
      e = 1;
      while (1) {
        c[k + (e << 2) >> 2] = c[(c[h >> 2] | 0) + (e << 7) + 104 >> 2];
        b = c[o >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    Sq(i, 4, b, n) | 0;
    b = c[j >> 2] | 0;
    if ((b | 0) >= 1) {
      h = a + 52 | 0;
      e = 1;
      while (1) {
        c[k + (e << 2) >> 2] = c[(c[h >> 2] | 0) + (e * 120 | 0) >> 2];
        b = c[j >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    Sq(i, 4, b, n) | 0;
    b = c[j >> 2] | 0;
    if ((b | 0) >= 1) {
      h = a + 52 | 0;
      e = 1;
      while (1) {
        f[l + (e << 2) >> 2] = +g[(c[h >> 2] | 0) + (e * 120 | 0) + 8 >> 3];
        b = c[j >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    hh(l, b, n) | 0;
    b = c[a >> 2] | 0;
    if ((b | 0) >= 1) {
      h = a + 44 | 0;
      i = a + 4904 | 0;
      e = 1;
      while (1) {
        f[l + (e << 2) >> 2] = +g[(c[h >> 2] | 0) + (e * 96 | 0) + 48 >> 3] * +g[i >> 3];
        b = c[a >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    hh(l, b, n) | 0;
    b = c[o >> 2] | 0;
    if ((b | 0) >= 1) {
      h = a + 48 | 0;
      i = a + 4904 | 0;
      e = 1;
      while (1) {
        f[l + (e << 2) >> 2] = +g[(c[h >> 2] | 0) + (e << 7) + 48 >> 3] * +g[i >> 3];
        b = c[o >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    hh(l, b, n) | 0;
    b = c[o >> 2] | 0;
    if ((b | 0) >= 1) {
      i = a + 48 | 0;
      h = a + 4952 | 0;
      e = 1;
      while (1) {
        b = c[i >> 2] | 0;
        if ((c[b + (e << 7) + 104 >> 2] | 0) == 2) d = 0.0;else d = +g[b + (e << 7) + 40 >> 3] * +g[h >> 3];
        f[l + (e << 2) >> 2] = d;
        b = c[o >> 2] | 0;
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    n = hh(l, b, n) | 0;
    o = n >>> 0 < (c[o >> 2] | 0) >>> 0 ? 308 : m;
    ft(k);
    ft(l);
    return o | 0;
  }
  function kh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 16 | 0;
    d = n;
    l = c[a + 4220 >> 2] | 0;
    k = c[a >> 2] | 0;
    m = a + 12 | 0;
    j = c[m >> 2] | 0;
    k = gt(((k | 0) < (j | 0) ? j : k) + 1 | 0, 4) | 0;
    if (!k) {
      m = 101;
      Ib = n;
      return m | 0;
    }
    c[d >> 2] = c[b >> 2];
    Sq(d, 4, 1, l) | 0;
    b = c[a >> 2] | 0;
    if ((b | 0) >= 1) {
      e = a + 4260 | 0;
      d = 1;
      while (1) {
        f[k + (d << 2) >> 2] = +g[(c[e >> 2] | 0) + (d << 3) >> 3];
        b = c[a >> 2] | 0;
        if ((d | 0) < (b | 0)) d = d + 1 | 0;else break;
      }
    }
    j = k + 4 | 0;
    Sq(j, 4, b, l) | 0;
    b = c[a >> 2] | 0;
    if ((b | 0) >= 1) {
      e = a + 4256 | 0;
      d = 1;
      while (1) {
        f[k + (d << 2) >> 2] = +g[(c[e >> 2] | 0) + (d << 3) >> 3];
        b = c[a >> 2] | 0;
        if ((d | 0) < (b | 0)) d = d + 1 | 0;else break;
      }
    }
    Sq(j, 4, b, l) | 0;
    b = c[m >> 2] | 0;
    if ((b | 0) >= 1) {
      e = a + 4536 | 0;
      i = a + 4272 | 0;
      d = 1;
      while (1) {
        if ((c[(c[e >> 2] | 0) + (d << 2) >> 2] | 0) >>> 0 < 3) h = 0.0;else h = +g[(c[i >> 2] | 0) + (d << 3) >> 3];
        f[k + (d << 2) >> 2] = h;
        b = c[m >> 2] | 0;
        if ((d | 0) < (b | 0)) d = d + 1 | 0;else break;
      }
    }
    Sq(j, 4, b, l) | 0;
    b = c[m >> 2] | 0;
    if ((b | 0) >= 1) {
      e = a + 4536 | 0;
      d = 1;
      while (1) {
        f[k + (d << 2) >> 2] = +((c[(c[e >> 2] | 0) + (d << 2) >> 2] | 0) >>> 0);
        b = c[m >> 2] | 0;
        if ((d | 0) < (b | 0)) d = d + 1 | 0;else break;
      }
    }
    Sq(j, 4, b, l) | 0;
    b = c[m >> 2] | 0;
    if ((b | 0) >= 1) {
      e = a + 4276 | 0;
      d = 1;
      while (1) {
        f[k + (d << 2) >> 2] = +g[(c[e >> 2] | 0) + (d << 3) >> 3];
        b = c[m >> 2] | 0;
        if ((d | 0) < (b | 0)) d = d + 1 | 0;else break;
      }
    }
    a = Sq(j, 4, b, l) | 0;
    m = a >>> 0 < (c[m >> 2] | 0) >>> 0 ? 308 : 0;
    ft(k);
    ar(l) | 0;
    Ib = n;
    return m | 0;
  }
  function lh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = b;
    b = a + 4220 | 0;
    a = (Sq(e, 4, 1, c[b >> 2] | 0) | 0) == 0;
    if (!(c[e >> 2] | 0)) or(26, c[b >> 2] | 0);
    ar(c[b >> 2] | 0) | 0;
    Ib = d;
    return (a ? 308 : 0) | 0;
  }
  function mh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      h = 0.0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0.0,
      z = 0,
      A = 0.0,
      B = 0,
      C = 0,
      D = 0.0,
      E = 0,
      F = 0.0;
    C = Ib;
    Ib = Ib + 32 | 0;
    p = C + 24 | 0;
    x = C;
    z = c[a + 4216 >> 2] | 0;
    A = +(c[a + 1192 >> 2] | 0) / 3600.0;
    B = a + 20 | 0;
    a: do if ((c[B >> 2] | 0) >= 1) {
      q = a + 56 | 0;
      r = a + 1116 | 0;
      s = x + 4 | 0;
      t = x + 8 | 0;
      u = x + 12 | 0;
      v = x + 16 | 0;
      w = x + 20 | 0;
      y = 24.0 / A;
      if (A == 0.0) {
        b = 1;
        while (1) {
          m = c[q >> 2] | 0;
          k = m + (b << 7) + 120 | 0;
          l = +g[k >> 3] * 24.0;
          g[k >> 3] = l;
          k = m + (b << 7) + 80 | 0;
          e = +g[k >> 3] * 100.0;
          g[k >> 3] = e;
          k = m + (b << 7) + 88 | 0;
          h = +g[k >> 3] * 100.0;
          g[k >> 3] = h;
          k = m + (b << 7) + 96 | 0;
          i = +g[k >> 3] * ((c[r >> 2] | 0) == 1 ? .0098095765009633 : 37.13350162236269);
          g[k >> 3] = i;
          f[x >> 2] = e;
          f[s >> 2] = h;
          f[t >> 2] = i;
          f[u >> 2] = +g[m + (b << 7) + 104 >> 3];
          f[v >> 2] = +g[m + (b << 7) + 112 >> 3];
          f[w >> 2] = l;
          c[p >> 2] = c[m + (b << 7) >> 2];
          if (!(Sq(p, 4, 1, z) | 0)) {
            b = 308;
            d = 16;
            break;
          }
          if ((Sq(x, 4, 6, z) | 0) >>> 0 < 6) {
            b = 308;
            d = 16;
            break;
          }
          if ((b | 0) < (c[B >> 2] | 0)) b = b + 1 | 0;else {
            n = x;
            o = x;
            break a;
          }
        }
        if ((d | 0) == 16) {
          Ib = C;
          return b | 0;
        }
      }
      d = 1;
      while (1) {
        j = c[q >> 2] | 0;
        k = j + (d << 7) + 80 | 0;
        e = +g[k >> 3];
        l = e / A;
        g[k >> 3] = l;
        m = j + (d << 7) + 88 | 0;
        h = +g[m >> 3];
        if (e > 0.0) {
          h = h / e;
          g[m >> 3] = h;
          b = j + (d << 7) + 96 | 0;
          D = +g[b >> 3] / e;
          g[b >> 3] = D;
          E = j + (d << 7) + 104 | 0;
          i = +g[E >> 3] / e;
          g[E >> 3] = i;
          e = D;
        } else {
          E = j + (d << 7) + 96 | 0;
          b = E;
          e = +g[E >> 3];
          i = +g[j + (d << 7) + 104 >> 3];
        }
        E = j + (d << 7) + 120 | 0;
        D = y * +g[E >> 3];
        g[E >> 3] = D;
        F = l * 100.0;
        g[k >> 3] = F;
        h = h * 100.0;
        g[m >> 3] = h;
        l = e * ((c[r >> 2] | 0) == 1 ? .0098095765009633 : 37.13350162236269);
        g[b >> 3] = l;
        f[x >> 2] = F;
        f[s >> 2] = h;
        f[t >> 2] = l;
        f[u >> 2] = i;
        f[v >> 2] = +g[j + (d << 7) + 112 >> 3];
        f[w >> 2] = D;
        c[p >> 2] = c[j + (d << 7) >> 2];
        if (!(Sq(p, 4, 1, z) | 0)) {
          b = 308;
          d = 16;
          break;
        }
        if ((Sq(x, 4, 6, z) | 0) >>> 0 < 6) {
          b = 308;
          d = 16;
          break;
        }
        if ((d | 0) < (c[B >> 2] | 0)) d = d + 1 | 0;else {
          n = x;
          o = x;
          break a;
        }
      }
      if ((d | 0) == 16) {
        Ib = C;
        return b | 0;
      }
    } else {
      n = x;
      o = x;
    } while (0);
    E = a + 4432 | 0;
    F = +g[E >> 3] * +g[a + 4424 >> 3];
    g[E >> 3] = F;
    f[n >> 2] = F;
    E = (Sq(o, 4, 1, z) | 0) == 0;
    E = E ? 308 : 0;
    Ib = C;
    return E | 0;
  }
  function nh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    e = l;
    i = c[a + 4220 >> 2] | 0;
    k = c[a >> 2] | 0;
    j = a + 12 | 0;
    h = c[j >> 2] | 0;
    k = gt(((k | 0) < (h | 0) ? h : k) + 1 | 0, 4) | 0;
    if (!k) {
      k = 0;
      Ib = l;
      return k | 0;
    }
    d = (pr(e, 1, i) | 0) != 0 & 1;
    c[b >> 2] = c[e >> 2];
    h = ih(k, c[a >> 2] | 0, i) | 0;
    b = c[a >> 2] | 0;
    if (h >>> 0 >= b >>> 0) {
      if ((b | 0) >= 1) {
        h = a + 4260 | 0;
        e = 1;
        while (1) {
          g[(c[h >> 2] | 0) + (e << 3) >> 3] = +f[k + (e << 2) >> 2];
          b = c[a >> 2] | 0;
          if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
        }
      }
    } else d = 0;
    h = ih(k, b, i) | 0;
    b = c[a >> 2] | 0;
    if (h >>> 0 >= b >>> 0) {
      if ((b | 0) >= 1) {
        e = a + 4256 | 0;
        b = 1;
        while (1) {
          g[(c[e >> 2] | 0) + (b << 3) >> 3] = +f[k + (b << 2) >> 2];
          if ((b | 0) < (c[a >> 2] | 0)) b = b + 1 | 0;else break;
        }
      }
    } else d = 0;
    h = ih(k, c[j >> 2] | 0, i) | 0;
    b = c[j >> 2] | 0;
    if (h >>> 0 >= b >>> 0) {
      if ((b | 0) >= 1) {
        h = a + 4272 | 0;
        e = 1;
        while (1) {
          g[(c[h >> 2] | 0) + (e << 3) >> 3] = +f[k + (e << 2) >> 2];
          b = c[j >> 2] | 0;
          if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
        }
      }
    } else d = 0;
    h = ih(k, b, i) | 0;
    b = c[j >> 2] | 0;
    if (h >>> 0 >= b >>> 0) {
      if ((b | 0) >= 1) {
        h = a + 4536 | 0;
        e = 1;
        while (1) {
          c[(c[h >> 2] | 0) + (e << 2) >> 2] = ~~+f[k + (e << 2) >> 2] << 24 >> 24;
          b = c[j >> 2] | 0;
          if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
        }
      }
    } else d = 0;
    i = ih(k, b, i) | 0;
    b = c[j >> 2] | 0;
    if (i >>> 0 >= b >>> 0) {
      if ((b | 0) >= 1) {
        e = a + 4276 | 0;
        b = 1;
        while (1) {
          g[(c[e >> 2] | 0) + (b << 3) >> 3] = +f[k + (b << 2) >> 2];
          if ((b | 0) < (c[j >> 2] | 0)) b = b + 1 | 0;else break;
        }
      }
    } else d = 0;
    ft(k);
    k = d;
    Ib = l;
    return k | 0;
  }
  function oh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    d = e;
    if (!(pr(d, 1, a) | 0)) a = 0;else {
      c[b >> 2] = c[d >> 2];
      a = 1;
    }
    Ib = e;
    return a | 0;
  }
  function ph(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    d = c[a >> 2] | 0;
    b = c[a + 12 >> 2] | 0;
    d = gt(((d | 0) < (b | 0) ? b : d) + 1 | 0, 4) | 0;
    if (!d) {
      d = 101;
      return d | 0;
    }
    b = qh(a, 1, d, +g[a + 4912 >> 3]) | 0;
    if ((b | 0) <= 100) {
      b = qh(a, 2, d, +g[a + 4920 >> 3]) | 0;
      if ((b | 0) <= 100) {
        b = qh(a, 3, d, +g[a + 4928 >> 3]) | 0;
        if ((b | 0) <= 100) {
          b = qh(a, 4, d, +g[a + 4936 >> 3]) | 0;
          if ((b | 0) <= 100) {
            b = rh(a, 7, d, +g[a + 4960 >> 3]) | 0;
            if ((b | 0) <= 100) {
              b = rh(a, 8, d, +g[a + 4968 >> 3]) | 0;
              if ((b | 0) <= 100) {
                b = rh(a, 9, d, +g[a + 4976 >> 3]) | 0;
                if ((b | 0) <= 100) {
                  b = rh(a, 10, d, +g[a + 4984 >> 3]) | 0;
                  if ((b | 0) <= 100) {
                    b = rh(a, 11, d, +g[a + 4992 >> 3]) | 0;
                    if ((b | 0) <= 100) {
                      b = rh(a, 12, d, +g[a + 5e3 >> 3]) | 0;
                      if ((b | 0) <= 100) {
                        b = rh(a, 13, d, +g[a + 5008 >> 3]) | 0;
                        if ((b | 0) <= 100) b = rh(a, 14, d, +g[a + 5016 >> 3]) | 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    ft(d);
    d = b;
    return d | 0;
  }
  function qh(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var h = 0,
      i = 0,
      j = 0,
      k = 0;
    j = a + 4256 | 0;
    k = c[a + 4224 >> 2] | 0;
    switch (b | 0) {
      case 1:
        {
          b = c[a >> 2] | 0;
          if ((b | 0) < 1) h = a;else {
            i = a + 4260 | 0;
            h = 1;
            while (1) {
              f[d + (h << 2) >> 2] = +g[(c[i >> 2] | 0) + (h << 3) >> 3] * e;
              b = c[a >> 2] | 0;
              if ((h | 0) < (b | 0)) h = h + 1 | 0;else {
                h = a;
                break;
              }
            }
          }
          break;
        }
      case 2:
        {
          b = c[a >> 2] | 0;
          if ((b | 0) < 1) h = a;else {
            h = 1;
            while (1) {
              f[d + (h << 2) >> 2] = +g[(c[j >> 2] | 0) + (h << 3) >> 3] * e;
              b = c[a >> 2] | 0;
              if ((h | 0) < (b | 0)) h = h + 1 | 0;else {
                h = a;
                break;
              }
            }
          }
          break;
        }
      case 3:
        {
          b = c[a >> 2] | 0;
          if ((b | 0) < 1) h = a;else {
            i = a + 44 | 0;
            h = 1;
            while (1) {
              f[d + (h << 2) >> 2] = (+g[(c[j >> 2] | 0) + (h << 3) >> 3] - +g[(c[i >> 2] | 0) + (h * 96 | 0) + 48 >> 3]) * e;
              b = c[a >> 2] | 0;
              if ((h | 0) < (b | 0)) h = h + 1 | 0;else {
                h = a;
                break;
              }
            }
          }
          break;
        }
      case 4:
        {
          b = c[a >> 2] | 0;
          if ((b | 0) < 1) h = a;else {
            i = a + 4824 | 0;
            h = 1;
            while (1) {
              f[d + (h << 2) >> 2] = +g[(c[i >> 2] | 0) + (h << 3) >> 3] * e;
              b = c[a >> 2] | 0;
              if ((h | 0) < (b | 0)) h = h + 1 | 0;else {
                h = a;
                break;
              }
            }
          }
          break;
        }
      default:
        {
          h = a;
          b = c[a >> 2] | 0;
        }
    }
    k = hh(d, b, k) | 0;
    return (k >>> 0 < (c[h >> 2] | 0) >>> 0 ? 308 : 0) | 0;
  }
  function rh(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var h = 0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0.0,
      n = 0,
      o = 0;
    n = a + 4256 | 0;
    o = c[a + 4224 >> 2] | 0;
    a: do switch (b | 0) {
      case 7:
        {
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            a = a + 4272 | 0;
            h = 1;
            while (1) {
              f[d + (h << 2) >> 2] = +g[(c[a >> 2] | 0) + (h << 3) >> 3] * e;
              if ((h | 0) < (c[b >> 2] | 0)) h = h + 1 | 0;else break;
            }
          }
          break;
        }
      case 8:
        {
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            k = a + 48 | 0;
            j = a + 4272 | 0;
            a = 1;
            while (1) {
              h = c[k >> 2] | 0;
              if ((c[h + (a << 7) + 104 >> 2] | 0) == 2) i = 0.0;else {
                m = +g[(c[j >> 2] | 0) + (a << 3) >> 3];
                i = +g[h + (a << 7) + 40 >> 3];
                i = (m < 0.0 ? -m : m) / (i * i * 3.141592653589793 * .25) * e;
              }
              f[d + (a << 2) >> 2] = i;
              if ((a | 0) < (c[b >> 2] | 0)) a = a + 1 | 0;else break;
            }
          }
          break;
        }
      case 9:
        {
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            l = a + 4536 | 0;
            k = a + 48 | 0;
            j = 1;
            while (1) {
              do if ((c[(c[l >> 2] | 0) + (j << 2) >> 2] | 0) >>> 0 < 3) i = 0.0;else {
                a = c[n >> 2] | 0;
                h = c[k >> 2] | 0;
                i = +g[a + (c[h + (j << 7) + 32 >> 2] << 3) >> 3] - +g[a + (c[h + (j << 7) + 36 >> 2] << 3) >> 3];
                a = c[h + (j << 7) + 104 >> 2] | 0;
                m = i < 0.0 ? -i : i;
                if ((a | 0) != 2) if (a >>> 0 < 2) {
                  i = m * 1.0e3 / +g[h + (j << 7) + 48 >> 3];
                  break;
                } else i = m;
                i = i * e;
              } while (0);
              f[d + (j << 2) >> 2] = i;
              if ((j | 0) < (c[b >> 2] | 0)) j = j + 1 | 0;else break;
            }
          }
          break;
        }
      case 10:
        {
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            h = 1;
            while (1) {
              m = +oi(a, h) * e;
              f[d + (h << 2) >> 2] = m;
              if ((h | 0) < (c[b >> 2] | 0)) h = h + 1 | 0;else break;
            }
          }
          break;
        }
      case 11:
        {
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            a = a + 4536 | 0;
            h = 1;
            while (1) {
              f[d + (h << 2) >> 2] = +((c[(c[a >> 2] | 0) + (h << 2) >> 2] | 0) >>> 0);
              if ((h | 0) < (c[b >> 2] | 0)) h = h + 1 | 0;else break;
            }
          }
          break;
        }
      case 12:
        {
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            j = a + 4276 | 0;
            k = a + 48 | 0;
            l = a + 4928 | 0;
            a = a + 4960 | 0;
            h = 1;
            while (1) {
              i = +g[(c[j >> 2] | 0) + (h << 3) >> 3];
              b: do if (i != -1.0e10) switch (c[(c[k >> 2] | 0) + (h << 7) + 104 >> 2] | 0) {
                case 1:
                case 0:
                  break b;
                case 2:
                  break b;
                case 5:
                case 4:
                case 3:
                  {
                    i = i * +g[l >> 3];
                    break b;
                  }
                case 6:
                  {
                    i = i * +g[a >> 3];
                    break b;
                  }
                case 7:
                  break b;
                default:
                  {
                    i = 0.0;
                    break b;
                  }
              } else i = 0.0; while (0);
              f[d + (h << 2) >> 2] = i;
              if ((h | 0) < (c[b >> 2] | 0)) h = h + 1 | 0;else break;
            }
          }
          break;
        }
      case 13:
        {
          if (!(c[a + 4600 >> 2] | 0)) {
            b = a + 12 | 0;
            vt(d | 0, 0, (c[b >> 2] << 2) + 4 | 0) | 0;
            break a;
          }
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            a = a + 4828 | 0;
            h = 1;
            while (1) {
              f[d + (h << 2) >> 2] = +g[(c[a >> 2] | 0) + (h << 3) >> 3] * e;
              if ((h | 0) < (c[b >> 2] | 0)) h = h + 1 | 0;else break;
            }
          }
          break;
        }
      case 14:
        {
          b = a + 12 | 0;
          if ((c[b >> 2] | 0) >= 1) {
            k = a + 48 | 0;
            j = a + 4272 | 0;
            a = 1;
            while (1) {
              h = c[k >> 2] | 0;
              if ((c[h + (a << 7) + 104 >> 2] | 0) >>> 0 < 2 ? (m = +g[(c[j >> 2] | 0) + (a << 3) >> 3], (m < 0.0 ? -m : m) > 1.0e-06) : 0) {
                l = c[n >> 2] | 0;
                i = +g[l + (c[h + (a << 7) + 32 >> 2] << 3) >> 3] - +g[l + (c[h + (a << 7) + 36 >> 2] << 3) >> 3];
                i = +u(+ +g[h + (a << 7) + 40 >> 3], 5.0) * ((i < 0.0 ? -i : i) * 39.725);
                i = i / +g[h + (a << 7) + 48 >> 3] / (m * m);
              } else i = 0.0;
              f[d + (a << 2) >> 2] = i;
              if ((a | 0) < (c[b >> 2] | 0)) a = a + 1 | 0;else break;
            }
          }
          break;
        }
      default:
        b = a + 12 | 0;
    } while (0);
    o = hh(d, c[b >> 2] | 0, o) | 0;
    return (o >>> 0 < (c[b >> 2] | 0) >>> 0 ? 308 : 0) | 0;
  }
  function sh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0;
    f = a + 4216 | 0;
    h = c[f >> 2] | 0;
    if ((c[a + 1216 >> 2] | 0) != 0 ? (e = a + 4224 | 0, (c[e >> 2] | 0) != 0) : 0) {
      d = c[a >> 2] | 0;
      b = c[a + 12 >> 2] | 0;
      d = gt(((d | 0) < (b | 0) ? b : d) + 1 | 0, 4) | 0;
      if (!d) {
        a = 101;
        return a | 0;
      }
      b = th(a, d, 2) | 0;
      if ((b | 0) <= 100) {
        b = th(a, d, 3) | 0;
        if (!b) {
          c[a + 1204 >> 2] = 1;
          b = 0;
        }
      }
      $q(c[e >> 2] | 0);
      c[e >> 2] = 0;
      ft(d);
    } else b = 0;
    if ((h | 0) == 0 | (b | 0) > 100) {
      a = b;
      return a | 0;
    }
    b = uh(c[a + 1192 >> 2] | 0, c[f >> 2] | 0, +g[a + 4704 >> 3], +g[a + 4712 >> 3], +g[a + 4720 >> 3], +g[a + 4728 >> 3]) | 0;
    if ((b | 0) > 100) {
      a = b;
      return a | 0;
    }
    a = vh(a) | 0;
    return a | 0;
  }
  function th(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0;
    Q = c[a + 4216 >> 2] | 0;
    R = (d | 0) == 2;
    e = c[a >> 2] | 0;
    if (R) {
      N = e;
      O = 1;
      P = 4;
      h = (c[a + 12 >> 2] << 3) + (e * 3 | 0) | 0;
      K = 0;
    } else {
      h = c[a + 12 >> 2] | 0;
      N = h;
      O = 7;
      P = 14;
      h = (h * 7 | 0) + (e << 2) | 0;
      K = e << 4;
    }
    B = h << 2;
    C = N + 1 | 0;
    L = gt(C, 4) | 0;
    M = gt(C, 4) | 0;
    if ((L | 0) == 0 | (M | 0) == 0) {
      R = 101;
      ft(L);
      ft(M);
      return R | 0;
    }
    if (O >>> 0 > P >>> 0) {
      R = 0;
      ft(L);
      ft(M);
      return R | 0;
    }
    D = a + 1216 | 0;
    E = C << 2;
    F = a + 4224 | 0;
    G = N << 2;
    H = a + 1204 | 0;
    I = (N | 0) < 1;
    J = (d | 0) == 3;
    s = (d | 0) != 3;
    t = a + 4912 | 0;
    u = a + 4260 | 0;
    v = a + 4920 | 0;
    x = a + 4256 | 0;
    y = a + 4936 | 0;
    z = a + 4824 | 0;
    A = a + 4960 | 0;
    m = a + 4272 | 0;
    n = L + 4 | 0;
    o = b + 4 | 0;
    p = (C | 0) == 2;
    e = 0;
    q = O;
    while (1) {
      if ((c[D >> 2] | 0) != 1) {
        if (!I) {
          h = 1;
          do {
            f[L + (h << 2) >> 2] = 1.0e10;
            f[M + (h << 2) >> 2] = -1.0e10;
            h = h + 1 | 0;
          } while ((h | 0) != (C | 0));
        }
      } else vt(L | 0, 0, E | 0) | 0;
      dr(c[F >> 2] | 0, (w(G, q - O | 0) | 0) + K | 0, 0);
      h = c[H >> 2] | 0;
      if ((h | 0) >= 1) {
        k = (q | 0) == 7;
        l = (q | 0) == 11;
        a = 1;
        while (1) {
          ih(b, N, c[F >> 2] | 0) | 0;
          a: do if (!I) {
            if (!J) {
              h = 1;
              while (1) {
                i = +f[b + (h << 2) >> 2];
                d = L + (h << 2) | 0;
                j = +f[d >> 2];
                if ((c[D >> 2] | 0) == 1) f[d >> 2] = i + j;else {
                  f[d >> 2] = j <= i ? j : i;
                  d = M + (h << 2) | 0;
                  j = +f[d >> 2];
                  f[d >> 2] = j >= i ? j : i;
                }
                h = h + 1 | 0;
                if ((h | 0) == (C | 0)) break a;
              }
            }
            if (k) {
              h = 1;
              do {
                i = +f[b + (h << 2) >> 2];
                i = i < 0.0 ? -i : i;
                d = L + (h << 2) | 0;
                j = +f[d >> 2];
                if ((c[D >> 2] | 0) == 1) f[d >> 2] = i + j;else {
                  f[d >> 2] = j <= i ? j : i;
                  d = M + (h << 2) | 0;
                  j = +f[d >> 2];
                  f[d >> 2] = j >= i ? j : i;
                }
                h = h + 1 | 0;
              } while ((h | 0) != (C | 0));
            } else {
              h = 1;
              do {
                j = +f[b + (h << 2) >> 2];
                j = l ? !(j >= 3.0) ? 0.0 : 1.0 : j;
                d = L + (h << 2) | 0;
                i = +f[d >> 2];
                if ((c[D >> 2] | 0) == 1) f[d >> 2] = j + i;else {
                  f[d >> 2] = i <= j ? i : j;
                  d = M + (h << 2) | 0;
                  i = +f[d >> 2];
                  f[d >> 2] = i >= j ? i : j;
                }
                h = h + 1 | 0;
              } while ((h | 0) != (C | 0));
            }
          } while (0);
          h = c[H >> 2] | 0;
          if ((a | 0) < (h | 0)) {
            dr(c[F >> 2] | 0, B, 1);
            h = c[H >> 2] | 0;
          }
          if ((a | 0) < (h | 0)) a = a + 1 | 0;else break;
        }
      }
      switch (c[D >> 2] | 0) {
        case 1:
          {
            if (!I) {
              f[o >> 2] = +f[n >> 2] / +(h | 0);
              if (p) r = 49;else {
                h = 2;
                do {
                  f[b + (h << 2) >> 2] = +f[L + (h << 2) >> 2] / +(c[H >> 2] | 0);
                  h = h + 1 | 0;
                } while ((h | 0) != (C | 0));
                r = 49;
              }
            }
            break;
          }
        case 2:
          {
            if (!I) {
              h = 1;
              do {
                c[b + (h << 2) >> 2] = c[L + (h << 2) >> 2];
                h = h + 1 | 0;
              } while ((h | 0) != (C | 0));
              r = 49;
            }
            break;
          }
        case 3:
          {
            if (!I) {
              h = 1;
              do {
                c[b + (h << 2) >> 2] = c[M + (h << 2) >> 2];
                h = h + 1 | 0;
              } while ((h | 0) != (C | 0));
              r = 49;
            }
            break;
          }
        case 4:
          {
            if (!I) {
              h = 1;
              do {
                f[b + (h << 2) >> 2] = +f[M + (h << 2) >> 2] - +f[L + (h << 2) >> 2];
                h = h + 1 | 0;
              } while ((h | 0) != (C | 0));
              r = 49;
            }
            break;
          }
        default:
          r = 49;
      }
      if ((r | 0) == 49 ? (r = 0, !((q | 0) != 11 | s | I)) : 0) {
        h = 1;
        do {
          l = b + (h << 2) | 0;
          f[l >> 2] = +f[l >> 2] < .5 ? 2.0 : 3.0;
          h = h + 1 | 0;
        } while ((h | 0) != (C | 0));
      }
      l = (hh(b, N, Q) | 0) >>> 0 < N >>> 0;
      e = l ? 308 : e;
      b: do if (!R) {
        if (!((q | 0) != 7 | I)) {
          h = 1;
          do {
            g[(c[m >> 2] | 0) + (h << 3) >> 3] = +f[b + (h << 2) >> 2] / +g[A >> 3];
            h = h + 1 | 0;
          } while ((h | 0) != (C | 0));
        }
      } else switch (q & 2147483647 | 0) {
        case 1:
          {
            if (I) break b;
            h = 1;
            do {
              g[(c[u >> 2] | 0) + (h << 3) >> 3] = +f[b + (h << 2) >> 2] / +g[t >> 3];
              h = h + 1 | 0;
            } while ((h | 0) != (C | 0));
            break;
          }
        case 2:
          {
            if (I) break b;
            h = 1;
            do {
              g[(c[x >> 2] | 0) + (h << 3) >> 3] = +f[b + (h << 2) >> 2] / +g[v >> 3];
              h = h + 1 | 0;
            } while ((h | 0) != (C | 0));
            break;
          }
        case 4:
          {
            if (I) break b;
            h = 1;
            do {
              g[(c[z >> 2] | 0) + (h << 3) >> 3] = +f[b + (h << 2) >> 2] / +g[y >> 3];
              h = h + 1 | 0;
            } while ((h | 0) != (C | 0));
            break;
          }
        default:
          break b;
      } while (0);
      if (q >>> 0 < P >>> 0) q = q + 1 | 0;else break;
    }
    ft(L);
    ft(M);
    return e | 0;
  }
  function uh(a, b, c, d, e, g) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = +d;
    e = +e;
    g = +g;
    var h = 0,
      i = 0,
      j = 0.0;
    h = Ib;
    Ib = Ib + 16 | 0;
    i = h;
    j = (a | 0) > 0 ? +(a | 0) / 3600.0 : 1.0;
    f[i >> 2] = c / j;
    f[i + 4 >> 2] = d / j;
    f[i + 8 >> 2] = e / j;
    f[i + 12 >> 2] = g / j;
    b = (Sq(i, 4, 4, b) | 0) >>> 0 < 4;
    Ib = h;
    return (b ? 308 : 0) | 0;
  }
  function vh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    b = Ib;
    Ib = Ib + 16 | 0;
    e = b;
    d = c[a + 4216 >> 2] | 0;
    c[e >> 2] = c[a + 1204 >> 2];
    f = (Sq(e, 4, 1, d) | 0) == 0;
    c[e >> 2] = c[a + 5076 >> 2];
    a = f | (Sq(e, 4, 1, d) | 0) == 0;
    c[e >> 2] = 516114521;
    a = a | (Sq(e, 4, 1, d) | 0) == 0;
    Ib = b;
    return (a ? 308 : 0) | 0;
  }
  function wh(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0;
    i = b + 92 | 0;
    c[i >> 2] = 0;
    j = b + 1200 | 0;
    c[j >> 2] = 0;
    c[b + 4216 >> 2] = 0;
    c[b + 4220 >> 2] = 0;
    c[b + 4224 >> 2] = 0;
    hr(b + 128 | 0, d, 259) | 0;
    hr(b + 1269 | 0, e, 259) | 0;
    g = b + 3924 | 0;
    hr(g, f, 259) | 0;
    h = b + 4184 | 0;
    if (!(a[f >> 0] | 0)) {
      c[h >> 2] = 2;
      Oq(g, b + 6096 | 0) | 0;
    } else c[h >> 2] = 1;
    g = (a[d >> 0] | 0) == 0;
    if (!g) {
      if (xh(d, e) | 0) {
        j = 301;
        return j | 0;
      }
      if (xh(d, f) | 0) {
        j = 301;
        return j | 0;
      }
    }
    if (a[f >> 0] | 0 ? xh(e, f) | 0 : 0) {
      j = 301;
      return j | 0;
    }
    if (!g ? (f = Vq(d, 8672) | 0, c[i >> 2] = f, (f | 0) == 0) : 0) {
      j = 302;
      return j | 0;
    }
    if (a[e >> 0] | 0) {
      i = Vq(e, 10976) | 0;
      c[j >> 2] = i;
      if (!i) {
        j = 303;
        return j | 0;
      }
    } else c[j >> 2] = 2712;
    Si(b);
    j = 0;
    return j | 0;
  }
  function xh(b, c) {
    b = b | 0;
    c = c | 0;
    var d = 0,
      e = 0,
      f = 0;
    e = a[b >> 0] | 0;
    f = a[c >> 0] | 0;
    if (((e + -97 & 255) < 26 ? e & -33 : e) << 24 >> 24 != ((f + -97 & 255) < 26 ? f & -33 : f) << 24 >> 24) {
      f = 0;
      return f | 0;
    }
    d = 0;
    while (1) {
      d = d + 1 | 0;
      e = a[b + d >> 0] | 0;
      f = a[c + d >> 0] | 0;
      if (!((e | f) << 24 >> 24)) {
        d = 1;
        b = 5;
        break;
      }
      if (((e + -97 & 255) < 26 ? e & -33 : e) << 24 >> 24 != ((f + -97 & 255) < 26 ? f & -33 : f) << 24 >> 24) {
        d = 0;
        b = 5;
        break;
      }
    }
    if ((b | 0) == 5) return d | 0;
    return 0;
  }
  function yh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    p = Ib;
    Ib = Ib + 32 | 0;
    f = p;
    j = p + 28 | 0;
    k = p + 24 | 0;
    l = c[a >> 2] | 0;
    m = c[a + 4 >> 2] | 0;
    n = c[a + 12 >> 2] | 0;
    g = c[a + 24 >> 2] | 0;
    h = c[a + 20 >> 2] | 0;
    b = a + 3664 | 0;
    i = a + 4220 | 0;
    d = c[i >> 2] | 0;
    e = a + 4188 | 0;
    do if (d | 0) if ((c[e >> 2] | 0) == 2) {
      o = 0;
      Ib = p;
      return o | 0;
    } else {
      $q(d);
      c[i >> 2] = 0;
      break;
    } while (0);
    c[i >> 2] = 0;
    switch (c[e >> 2] | 0) {
      case 2:
        {
          Oq(b, a + 5836 | 0) | 0;
          b = Vq(b, 8675) | 0;
          break;
        }
      case 1:
        {
          b = Vq(b, 8675) | 0;
          break;
        }
      case 0:
        {
          b = Vq(b, 12467) | 0;
          break;
        }
      default:
        {
          o = 305;
          Ib = p;
          return o | 0;
        }
    }
    c[i >> 2] = b;
    if (!b) {
      o = 305;
      Ib = p;
      return o | 0;
    }
    if (c[e >> 2] | 0) {
      c[j >> 2] = 516114521;
      c[k >> 2] = 201;
      c[f >> 2] = l;
      c[f + 4 >> 2] = n;
      c[f + 8 >> 2] = m;
      c[f + 12 >> 2] = h;
      c[f + 16 >> 2] = g;
      c[f + 20 >> 2] = c[a + 1192 >> 2];
      Sq(j, 4, 1, b) | 0;
      Sq(k, 4, 1, c[i >> 2] | 0) | 0;
      Sq(f, 4, 6, c[i >> 2] | 0) | 0;
      if (!(c[e >> 2] | 0)) {
        d = j;
        b = c[i >> 2] | 0;
        o = 13;
      }
    } else {
      d = j;
      o = 13;
    }
    do if ((o | 0) == 13) {
      pr(d, 1, b) | 0;
      if ((c[j >> 2] | 0) != 516114521) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      pr(k, 1, c[i >> 2] | 0) | 0;
      if ((c[k >> 2] | 0) != 201) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      if ((pr(f, 6, c[i >> 2] | 0) | 0) >>> 0 < 6) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      if ((c[f >> 2] | 0) != (l | 0)) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      if ((c[f + 4 >> 2] | 0) != (n | 0)) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      if ((c[f + 8 >> 2] | 0) != (m | 0)) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      if ((c[f + 12 >> 2] | 0) != (h | 0)) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      if ((c[f + 16 >> 2] | 0) != (g | 0)) {
        o = 306;
        Ib = p;
        return o | 0;
      }
      if ((c[f + 20 >> 2] | 0) == (c[a + 1192 >> 2] | 0)) {
        c[a + 4192 >> 2] = 1;
        break;
      } else {
        o = 306;
        Ib = p;
        return o | 0;
      }
    } while (0);
    o = sr(c[i >> 2] | 0) | 0;
    c[a + 4204 >> 2] = o;
    o = 0;
    Ib = p;
    return o | 0;
  }
  function zh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    Ah(a);
    b = Vq(a + 3924 | 0, 8675) | 0;
    d = a + 4216 | 0;
    c[d >> 2] = b;
    if (!b) {
      d = 304;
      return d | 0;
    }
    b = jh(a) | 0;
    e = sr(c[d >> 2] | 0) | 0;
    c[a + 4208 >> 2] = e;
    if ((b | 0) <= 100) b = mh(a) | 0;
    e = sr(c[d >> 2] | 0) | 0;
    c[a + 4212 >> 2] = e;
    if (b | 0) {
      e = b;
      return e | 0;
    }
    if (c[a + 1216 >> 2] | 0) {
      e = Vq(a + 6356 | 0, 8675) | 0;
      c[a + 4224 >> 2] = e;
      return ((e | 0) == 0 ? 304 : 0) | 0;
    }
    c[a + 4224 >> 2] = c[d >> 2];
    e = 0;
    return e | 0;
  }
  function Ah(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    e = a + 4224 | 0;
    b = c[e >> 2] | 0;
    d = a + 4216 | 0;
    a = c[d >> 2] | 0;
    if (!((b | 0) == 0 | (b | 0) == (a | 0))) {
      $q(b);
      c[e >> 2] = 0;
      b = 0;
      a = c[d >> 2] | 0;
    }
    if (!a) return;
    if ((a | 0) == (b | 0)) c[e >> 2] = 0;
    $q(a);
    c[d >> 2] = 0;
    return;
  }
  function Bh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    c[a + 4260 >> 2] = 0;
    c[a + 4256 >> 2] = 0;
    c[a + 4272 >> 2] = 0;
    d = a + 4536 | 0;
    c[a + 4276 >> 2] = 0;
    c[a + 4480 >> 2] = 0;
    c[a + 4484 >> 2] = 0;
    c[a + 4488 >> 2] = 0;
    c[a + 4824 >> 2] = 0;
    c[a + 4828 >> 2] = 0;
    c[a + 88 >> 2] = 0;
    c[a + 80 >> 2] = 0;
    c[a + 84 >> 2] = 0;
    b = a + 4564 | 0;
    e = a;
    f = e + 76 | 0;
    do {
      c[e >> 2] = 0;
      e = e + 4 | 0;
    } while ((e | 0) < (f | 0));
    c[d >> 2] = 0;
    c[d + 4 >> 2] = 0;
    c[d + 8 >> 2] = 0;
    c[d + 12 >> 2] = 0;
    c[d + 16 >> 2] = 0;
    c[b >> 2] = 0;
    c[b + 4 >> 2] = 0;
    c[b + 8 >> 2] = 0;
    c[b + 12 >> 2] = 0;
    c[b + 16 >> 2] = 0;
    c[b + 20 >> 2] = 0;
    rj(a);
    return;
  }
  function Ch(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    h = Ve() | 0;
    i = a + 80 | 0;
    c[i >> 2] = h;
    h = Ve() | 0;
    c[a + 84 >> 2] = h;
    if ((h | 0) == 0 | (c[i >> 2] | 0) == 0) {
      a = 101;
      return a | 0;
    }
    i = a + 1060 | 0;
    e = (c[i >> 2] | 0) + 1 | 0;
    g = gt(e, 96) | 0;
    h = a + 44 | 0;
    c[h >> 2] = g;
    g = gt(e, 8) | 0;
    b = a + 4260 | 0;
    c[b >> 2] = g;
    g = gt(e, 8) | 0;
    d = a + 4256 | 0;
    c[d >> 2] = g;
    e = gt(e, 8) | 0;
    c[a + 4824 >> 2] = e;
    if (!(c[h >> 2] | 0)) {
      a = 101;
      return a | 0;
    }
    if (!(c[b >> 2] | 0)) {
      a = 101;
      return a | 0;
    }
    if ((c[d >> 2] | 0) == 0 | (e | 0) == 0) {
      a = 101;
      return a | 0;
    }
    f = a + 1064 | 0;
    e = (c[f >> 2] | 0) + 1 | 0;
    j = gt(e, 128) | 0;
    g = a + 48 | 0;
    c[g >> 2] = j;
    j = gt(e, 8) | 0;
    b = a + 4272 | 0;
    c[b >> 2] = j;
    j = gt(e, 8) | 0;
    d = a + 4276 | 0;
    c[d >> 2] = j;
    e = gt(e, 4) | 0;
    c[a + 4536 >> 2] = e;
    if (!(c[g >> 2] | 0)) {
      j = 101;
      return j | 0;
    }
    if (!(c[b >> 2] | 0)) {
      j = 101;
      return j | 0;
    }
    if ((c[d >> 2] | 0) == 0 | (e | 0) == 0) {
      j = 101;
      return j | 0;
    }
    e = gt((c[a + 1076 >> 2] | 0) + 1 | 0, 120) | 0;
    j = a + 52 | 0;
    c[j >> 2] = e;
    e = gt((c[a + 1080 >> 2] | 0) + 1 | 0, 128) | 0;
    b = a + 56 | 0;
    c[b >> 2] = e;
    e = gt((c[a + 1084 >> 2] | 0) + 1 | 0, 4) | 0;
    d = a + 60 | 0;
    c[d >> 2] = e;
    e = gt((c[a + 1088 >> 2] | 0) + 1 | 0, 40) | 0;
    c[a + 72 >> 2] = e;
    if (!(c[j >> 2] | 0)) {
      j = 101;
      return j | 0;
    }
    if (!(c[b >> 2] | 0)) {
      j = 101;
      return j | 0;
    }
    if ((c[d >> 2] | 0) == 0 | (e | 0) == 0) {
      j = 101;
      return j | 0;
    }
    if ((c[i >> 2] | 0) >= 0) {
      b = 0;
      while (1) {
        c[(c[h >> 2] | 0) + (b * 96 | 0) + 56 >> 2] = 0;
        c[(c[h >> 2] | 0) + (b * 96 | 0) + 60 >> 2] = 0;
        c[(c[h >> 2] | 0) + (b * 96 | 0) + 92 >> 2] = 0;
        if ((b | 0) < (c[i >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    if ((c[f >> 2] | 0) >= 0) {
      b = 0;
      while (1) {
        c[(c[g >> 2] | 0) + (b << 7) + 112 >> 2] = 0;
        c[(c[g >> 2] | 0) + (b << 7) + 124 >> 2] = 0;
        if ((b | 0) < (c[f >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    j = vj(a) | 0;
    return j | 0;
  }
  function Dh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    ft(c[a + 4260 >> 2] | 0);
    ft(c[a + 4256 >> 2] | 0);
    ft(c[a + 4272 >> 2] | 0);
    ft(c[a + 4276 >> 2] | 0);
    ft(c[a + 4536 >> 2] | 0);
    ft(c[a + 4824 >> 2] | 0);
    Eh(a);
    e = a + 44 | 0;
    b = c[e >> 2] | 0;
    if (b | 0) {
      if ((c[a >> 2] | 0) >= 1) {
        d = 1;
        while (1) {
          Fh(b + (d * 96 | 0) | 0);
          ft(c[(c[e >> 2] | 0) + (d * 96 | 0) + 60 >> 2] | 0);
          ft(c[(c[e >> 2] | 0) + (d * 96 | 0) + 92 >> 2] | 0);
          b = c[e >> 2] | 0;
          if ((d | 0) < (c[a >> 2] | 0)) d = d + 1 | 0;else break;
        }
      }
      ft(b);
    }
    d = a + 48 | 0;
    b = c[d >> 2] | 0;
    if ((b | 0) != 0 ? (f = a + 12 | 0, (c[f >> 2] | 0) >= 1) : 0) {
      Gh(b + 128 | 0);
      ft(c[(c[d >> 2] | 0) + 252 >> 2] | 0);
      if ((c[f >> 2] | 0) > 1) {
        b = 1;
        do {
          b = b + 1 | 0;
          Gh((c[d >> 2] | 0) + (b << 7) | 0);
          ft(c[(c[d >> 2] | 0) + (b << 7) + 124 >> 2] | 0);
        } while ((b | 0) < (c[f >> 2] | 0));
      }
      b = c[d >> 2] | 0;
    }
    ft(b);
    ft(c[a + 52 >> 2] | 0);
    ft(c[a + 56 >> 2] | 0);
    ft(c[a + 60 >> 2] | 0);
    ft(c[a + 72 >> 2] | 0);
    e = a + 64 | 0;
    b = c[e >> 2] | 0;
    if (b | 0) {
      f = a + 36 | 0;
      if ((c[f >> 2] | 0) >= 0) {
        d = 0;
        while (1) {
          ft(c[b + (d * 44 | 0) + 40 >> 2] | 0);
          ft(c[(c[e >> 2] | 0) + (d * 44 | 0) + 32 >> 2] | 0);
          b = c[e >> 2] | 0;
          if ((d | 0) < (c[f >> 2] | 0)) d = d + 1 | 0;else break;
        }
      }
      ft(b);
    }
    e = a + 68 | 0;
    b = c[e >> 2] | 0;
    if (b | 0) {
      f = a + 40 | 0;
      if ((c[f >> 2] | 0) >= 1) {
        d = 1;
        while (1) {
          ft(c[b + (d * 56 | 0) + 48 >> 2] | 0);
          ft(c[(c[e >> 2] | 0) + (d * 56 | 0) + 52 >> 2] | 0);
          ft(c[(c[e >> 2] | 0) + (d * 56 | 0) + 32 >> 2] | 0);
          b = c[e >> 2] | 0;
          if ((d | 0) < (c[f >> 2] | 0)) d = d + 1 | 0;else break;
        }
      }
      ft(b);
    }
    wj(a);
    b = c[a + 80 >> 2] | 0;
    if (b | 0) _e(b);
    b = c[a + 84 >> 2] | 0;
    if (!b) return;
    _e(b);
    return;
  }
  function Eh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    g = a + 88 | 0;
    b = c[g >> 2] | 0;
    if (!b) return;
    d = c[a >> 2] | 0;
    if ((d | 0) >= 0) {
      f = 0;
      while (1) {
        e = c[b + (f << 2) >> 2] | 0;
        if (e) {
          do {
            c[b + (f << 2) >> 2] = c[e + 8 >> 2];
            ft(e);
            b = c[g >> 2] | 0;
            e = c[b + (f << 2) >> 2] | 0;
          } while ((e | 0) != 0);
          d = c[a >> 2] | 0;
        }
        if ((f | 0) < (d | 0)) f = f + 1 | 0;else break;
      }
    }
    ft(b);
    c[g >> 2] = 0;
    return;
  }
  function Fh(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = a + 56 | 0;
    a = c[b >> 2] | 0;
    if (!a) {
      c[b >> 2] = 0;
      return;
    }
    do {
      d = a;
      a = c[a + 16 >> 2] | 0;
      ft(c[d + 12 >> 2] | 0);
      ft(d);
    } while ((a | 0) != 0);
    c[b >> 2] = 0;
    return;
  }
  function Gh(a) {
    a = a | 0;
    var b = 0;
    a = a + 112 | 0;
    b = c[a >> 2] | 0;
    if (!b) return;
    ft(c[b >> 2] | 0);
    ft(c[(c[a >> 2] | 0) + 4 >> 2] | 0);
    ft(c[a >> 2] | 0);
    c[a >> 2] = 0;
    return;
  }
  function Hh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    if ((b | 0) < 1) {
      b = 0;
      return b | 0;
    }
    if ((a | 0) == 0 | (b | 0) == 1) {
      b = a;
      return b | 0;
    }
    d = 1;
    do {
      d = d + 1 | 0;
      a = c[a + 16 >> 2] | 0;
    } while (!((a | 0) == 0 | (d | 0) == (b | 0)));
    return a | 0;
  }
  function Ih(b, d, e, f) {
    b = b | 0;
    d = +d;
    e = e | 0;
    f = f | 0;
    var h = 0;
    h = et(24) | 0;
    if (!h) {
      h = 0;
      return h | 0;
    }
    g[h >> 3] = d;
    c[h + 8 >> 2] = e;
    e = h + 12 | 0;
    c[e >> 2] = 0;
    if (f | 0 ? a[f >> 0] | 0 : 0) Jh(e, f, 31) | 0;
    c[h + 16 >> 2] = 0;
    e = b + 56 | 0;
    b = c[e >> 2] | 0;
    if (b) do {
      e = b + 16 | 0;
      b = c[e >> 2] | 0;
    } while ((b | 0) != 0);
    c[e >> 2] = h;
    h = 1;
    return h | 0;
  }
  function Jh(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    if (!b) e = 0;else e = Kq(b) | 0;
    f = e >>> 0 > d >>> 0 ? d : e;
    e = c[a >> 2] | 0;
    if (!f) {
      ft(e);
      c[a >> 2] = 0;
      b = 0;
      return b | 0;
    }
    if (!e) d = 0;else d = Kq(e) | 0;
    g = f + 1 | 0;
    if (f >>> 0 > d >>> 0) {
      e = ht(e, g) | 0;
      c[a >> 2] = e;
    }
    hr(e, b, g) | 0;
    b = c[a >> 2] | 0;
    return b | 0;
  }
  function Kh(a, b, d) {
    a = a | 0;
    b = +b;
    d = +d;
    var e = 0,
      f = 0,
      h = 0;
    e = a + 112 | 0;
    a = c[e >> 2] | 0;
    do if (!a) {
      a = et(16) | 0;
      if (!a) {
        h = 101;
        return h | 0;
      } else {
        c[a + 8 >> 2] = 0;
        h = a + 12 | 0;
        c[h >> 2] = 5;
        f = gt(5, 8) | 0;
        c[a >> 2] = f;
        h = gt(c[h >> 2] | 0, 8) | 0;
        c[a + 4 >> 2] = h;
        c[e >> 2] = a;
        break;
      }
    } while (0);
    h = a + 8 | 0;
    e = a + 12 | 0;
    f = c[e >> 2] | 0;
    if ((c[h >> 2] | 0) >= (f | 0)) {
      f = f + 5 | 0;
      c[e >> 2] = f;
      f = ht(c[a >> 2] | 0, f << 3) | 0;
      c[a >> 2] = f;
      f = a + 4 | 0;
      e = ht(c[f >> 2] | 0, c[e >> 2] << 3) | 0;
      c[f >> 2] = e;
    }
    e = c[a >> 2] | 0;
    if (!e) {
      h = 101;
      return h | 0;
    }
    a = a + 4 | 0;
    if (!(c[a >> 2] | 0)) {
      h = 101;
      return h | 0;
    }
    f = c[h >> 2] | 0;
    g[e + (f << 3) >> 3] = b;
    g[(c[a >> 2] | 0) + (f << 3) >> 3] = d;
    c[h >> 2] = (c[h >> 2] | 0) + 1;
    h = 0;
    return h | 0;
  }
  function Lh(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    Eh(a);
    b = gt((c[a >> 2] | 0) + 1 | 0, 4) | 0;
    i = a + 88 | 0;
    c[i >> 2] = b;
    if (!b) {
      j = 101;
      return j | 0;
    }
    if ((c[a >> 2] | 0) >= 0 ? (c[b >> 2] = 0, (c[a >> 2] | 0) > 0) : 0) {
      b = 0;
      do {
        b = b + 1 | 0;
        c[(c[i >> 2] | 0) + (b << 2) >> 2] = 0;
      } while ((b | 0) < (c[a >> 2] | 0));
    }
    e = a + 12 | 0;
    if ((c[e >> 2] | 0) < 1) {
      j = 0;
      return j | 0;
    }
    f = a + 48 | 0;
    d = 1;
    while (1) {
      h = c[f >> 2] | 0;
      g = c[h + (d << 7) + 32 >> 2] | 0;
      h = c[h + (d << 7) + 36 >> 2] | 0;
      b = et(12) | 0;
      if (!b) break;
      c[b >> 2] = h;
      c[b + 4 >> 2] = d;
      c[b + 8 >> 2] = c[(c[i >> 2] | 0) + (g << 2) >> 2];
      c[(c[i >> 2] | 0) + (g << 2) >> 2] = b;
      b = et(12) | 0;
      if (!b) break;
      c[b >> 2] = g;
      c[b + 4 >> 2] = d;
      c[b + 8 >> 2] = c[(c[i >> 2] | 0) + (h << 2) >> 2];
      c[(c[i >> 2] | 0) + (h << 2) >> 2] = b;
      if ((d | 0) < (c[e >> 2] | 0)) d = d + 1 | 0;else {
        b = 0;
        j = 12;
        break;
      }
    }
    if ((j | 0) == 12) return b | 0;
    Eh(a);
    j = 101;
    return j | 0;
  }
  function Mh(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    g = c[a + 28 >> 2] | 0;
    a: do if ((g | 0) >= 1) {
      e = a + 72 | 0;
      switch (b | 0) {
        case 0:
          {
            f = c[e >> 2] | 0;
            e = 1;
            while (1) {
              if ((c[f + (e * 40 | 0) + 4 >> 2] | 0) == (d | 0)) {
                e = 1;
                break;
              }
              if ((e | 0) < (g | 0)) e = e + 1 | 0;else break a;
            }
            return e | 0;
          }
        case 1:
          {
            f = c[e >> 2] | 0;
            e = 1;
            while (1) {
              if ((c[f + (e * 40 | 0) >> 2] | 0) == (d | 0)) {
                e = 1;
                break;
              }
              if ((e | 0) < (g | 0)) e = e + 1 | 0;else break a;
            }
            return e | 0;
          }
        default:
          break a;
      }
    } while (0);
    i = c[a + 32 >> 2] | 0;
    if ((i | 0) < 1) {
      d = 0;
      return d | 0;
    }
    h = (b | 0) == 0 ? 6 : 7;
    g = c[a + 76 >> 2] | 0;
    if ((b | 0) != 1) {
      f = 1;
      b: while (1) {
        e = c[g + (f * 56 | 0) + 40 >> 2] | 0;
        if (e | 0) do {
          if ((h | 0) == (c[e + 4 >> 2] | 0) ? (c[e + 8 >> 2] | 0) == (d | 0) : 0) {
            e = 1;
            f = 33;
            break b;
          }
          e = c[e + 32 >> 2] | 0;
        } while ((e | 0) != 0);
        if ((f | 0) < (i | 0)) f = f + 1 | 0;else {
          e = 0;
          f = 33;
          break;
        }
      }
      if ((f | 0) == 33) return e | 0;
    }
    f = 1;
    c: while (1) {
      e = c[g + (f * 56 | 0) + 40 >> 2] | 0;
      if (e | 0) do {
        if ((h | 0) == (c[e + 4 >> 2] | 0) ? (c[e + 8 >> 2] | 0) == (d | 0) : 0) {
          e = 1;
          f = 33;
          break c;
        }
        e = c[e + 32 >> 2] | 0;
      } while ((e | 0) != 0);
      e = c[g + (f * 56 | 0) + 44 >> 2] | 0;
      if (e | 0) do {
        if ((c[e >> 2] | 0) == (d | 0)) {
          e = 1;
          f = 33;
          break c;
        }
        e = c[e + 16 >> 2] | 0;
      } while ((e | 0) != 0);
      e = c[g + (f * 56 | 0) + 48 >> 2] | 0;
      if (e | 0) do {
        if ((c[e >> 2] | 0) == (d | 0)) {
          e = 1;
          f = 33;
          break c;
        }
        e = c[e + 16 >> 2] | 0;
      } while ((e | 0) != 0);
      if ((f | 0) < (i | 0)) f = f + 1 | 0;else {
        e = 0;
        f = 33;
        break;
      }
    }
    if ((f | 0) == 33) return e | 0;
    return 0;
  }
  function Nh(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    g = (d | 0) == 3;
    o = (d | 0) == 4;
    p = (d | 0) == 6;
    switch (d | 0) {
      case 3:
      case 4:
      case 6:
        break;
      default:
        {
          p = 0;
          return p | 0;
        }
    }
    n = c[a + 8 >> 2] | 0;
    if ((n | 0) < (e | 0) | (n | 0) < (f | 0)) {
      p = 219;
      return p | 0;
    }
    m = c[a + 24 >> 2] | 0;
    if ((m | 0) < 1) {
      p = 0;
      return p | 0;
    }
    n = c[a + 60 >> 2] | 0;
    l = a + 48 | 0;
    if (!g) {
      j = 1;
      while (1) {
        d = c[n + (j << 2) >> 2] | 0;
        if ((d | 0) != (b | 0)) {
          g = c[l >> 2] | 0;
          k = c[g + (d << 7) + 32 >> 2] | 0;
          a = c[g + (d << 7) + 36 >> 2] | 0;
          g = c[g + (d << 7) + 104 >> 2] | 0;
          h = (g | 0) == 3;
          i = (g | 0) == 4;
          if (o & i ? (k | 0) == (e | 0) | (k | 0) == (f | 0) | (a | 0) == (e | 0) : 0) {
            d = 220;
            a = 22;
            break;
          }
          d = (a | 0) == (e | 0);
          if (d & (o & h)) {
            d = 220;
            a = 22;
            break;
          }
          if (d & (p & h) | (d & (o & (g | 0) == 6) | (k | 0) == (f | 0) & (p & i))) {
            d = 220;
            a = 22;
            break;
          }
        }
        if ((j | 0) < (m | 0)) j = j + 1 | 0;else {
          d = 0;
          a = 22;
          break;
        }
      }
      if ((a | 0) == 22) return d | 0;
    }
    j = 1;
    while (1) {
      d = c[n + (j << 2) >> 2] | 0;
      if ((d | 0) != (b | 0)) {
        h = c[l >> 2] | 0;
        a = c[h + (d << 7) + 32 >> 2] | 0;
        g = c[h + (d << 7) + 36 >> 2] | 0;
        h = c[h + (d << 7) + 104 >> 2] | 0;
        i = (h | 0) == 3;
        if (i) {
          if ((a | 0) == (f | 0) | ((g | 0) == (f | 0) | (g | 0) == (e | 0))) {
            d = 220;
            a = 22;
            break;
          } else {
            g = 0;
            a = 0;
            d = 0;
          }
        } else {
          d = (h | 0) == 4;
          if (o & d) if ((a | 0) == (e | 0) | (a | 0) == (f | 0) | (g | 0) == (e | 0)) {
            d = 220;
            a = 22;
            break;
          } else d = 1;
          a = (a | 0) == (f | 0);
          if (a & d) {
            d = 220;
            a = 22;
            break;
          }
          g = (g | 0) == (e | 0);
        }
        k = (h | 0) == 6;
        if (g & (p & i) | (g & (o & k) | a & k | a & (p & d))) {
          d = 220;
          a = 22;
          break;
        }
      }
      if ((j | 0) < (m | 0)) j = j + 1 | 0;else {
        d = 0;
        a = 22;
        break;
      }
    }
    if ((a | 0) == 22) return d | 0;
    return 0;
  }
  function Oh(a, b) {
    a = a | 0;
    b = b | 0;
    return Ze(a, b) | 0;
  }
  function Ph(a, b) {
    a = a | 0;
    b = b | 0;
    return Ze(a, b) | 0;
  }
  function Qh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = c[a + 4 >> 2] | 0;
    if ((e | 0) < 1) {
      e = 0;
      return e | 0;
    }
    d = c[a + 52 >> 2] | 0;
    a = 1;
    while (1) {
      if ((c[d + (a * 120 | 0) >> 2] | 0) == (b | 0)) {
        d = 5;
        break;
      }
      if ((a | 0) < (e | 0)) a = a + 1 | 0;else {
        a = 0;
        d = 5;
        break;
      }
    }
    if ((d | 0) == 5) return a | 0;
    return 0;
  }
  function Rh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = c[a + 20 >> 2] | 0;
    if ((e | 0) < 1) {
      e = 0;
      return e | 0;
    }
    d = c[a + 56 >> 2] | 0;
    a = 1;
    while (1) {
      if ((c[d + (a << 7) >> 2] | 0) == (b | 0)) {
        d = 5;
        break;
      }
      if ((a | 0) < (e | 0)) a = a + 1 | 0;else {
        a = 0;
        d = 5;
        break;
      }
    }
    if ((d | 0) == 5) return a | 0;
    return 0;
  }
  function Sh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = c[a + 24 >> 2] | 0;
    if ((e | 0) < 1) {
      e = 0;
      return e | 0;
    }
    d = c[a + 60 >> 2] | 0;
    a = 1;
    while (1) {
      if ((c[d + (a << 2) >> 2] | 0) == (b | 0)) {
        d = 5;
        break;
      }
      if ((a | 0) < (e | 0)) a = a + 1 | 0;else {
        a = 0;
        d = 5;
        break;
      }
    }
    if ((d | 0) == 5) return a | 0;
    return 0;
  }
  function Th(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = c[a + 36 >> 2] | 0;
    if ((e | 0) < 0) {
      e = -1;
      return e | 0;
    }
    d = c[a + 64 >> 2] | 0;
    a = 0;
    while (1) {
      if (!(_p(b, d + (a * 44 | 0) | 0) | 0)) {
        d = 5;
        break;
      }
      if ((a | 0) < (e | 0)) a = a + 1 | 0;else {
        a = -1;
        d = 5;
        break;
      }
    }
    if ((d | 0) == 5) return a | 0;
    return 0;
  }
  function Uh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = c[a + 40 >> 2] | 0;
    if ((e | 0) < 1) {
      e = 0;
      return e | 0;
    }
    d = c[a + 68 >> 2] | 0;
    a = 1;
    while (1) {
      if (!(_p(b, d + (a * 56 | 0) | 0) | 0)) {
        d = 5;
        break;
      }
      if ((a | 0) < (e | 0)) a = a + 1 | 0;else {
        a = 0;
        d = 5;
        break;
      }
    }
    if ((d | 0) == 5) return a | 0;
    return 0;
  }
  function Vh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    d = c[a >> 2] | 0;
    do if ((d | 0) != (b | 0)) {
      if ((d | 0) > (b | 0)) {
        b = d + -1 | 0;
        break;
      } else return;
    } else b = 0; while (0);
    c[a >> 2] = b;
    return;
  }
  function Wh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    if ((c[a >> 2] | 0) >= 1) {
      g = a + 44 | 0;
      f = 1;
      while (1) {
        e = c[g >> 2] | 0;
        d = c[e + (f * 96 | 0) + 56 >> 2] | 0;
        if (!d) d = e;else {
          do {
            Vh(d + 8 | 0, b);
            d = c[d + 16 >> 2] | 0;
          } while ((d | 0) != 0);
          d = c[g >> 2] | 0;
        }
        d = c[d + (f * 96 | 0) + 60 >> 2] | 0;
        if (d | 0) Vh(d + 8 | 0, b);
        if ((f | 0) < (c[a >> 2] | 0)) f = f + 1 | 0;else break;
      }
    }
    e = a + 4 | 0;
    if ((c[e >> 2] | 0) >= 1) {
      f = a + 52 | 0;
      d = 1;
      while (1) {
        Vh((c[f >> 2] | 0) + (d * 120 | 0) + 88 | 0, b);
        if ((d | 0) < (c[e >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    f = a + 20 | 0;
    if ((c[f >> 2] | 0) < 1) return;
    e = a + 56 | 0;
    d = 1;
    while (1) {
      Vh((c[e >> 2] | 0) + (d << 7) + 64 | 0, b);
      Vh((c[e >> 2] | 0) + (d << 7) + 68 | 0, b);
      if ((d | 0) < (c[f >> 2] | 0)) d = d + 1 | 0;else break;
    }
    return;
  }
  function Xh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    d = c[a >> 2] | 0;
    do if ((d | 0) != (b | 0)) {
      if ((d | 0) > (b | 0)) {
        b = d + -1 | 0;
        break;
      } else return;
    } else b = 0; while (0);
    c[a >> 2] = b;
    return;
  }
  function Yh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    k = l;
    e = a + 4 | 0;
    if ((c[e >> 2] | 0) >= 1) {
      f = a + 52 | 0;
      d = 1;
      while (1) {
        Xh((c[f >> 2] | 0) + (d * 120 | 0) + 92 | 0, b);
        if ((d | 0) < (c[e >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    e = a + 20 | 0;
    if ((c[e >> 2] | 0) >= 1) {
      f = a + 56 | 0;
      d = 1;
      while (1) {
        Xh((c[f >> 2] | 0) + (d << 7) + 56 | 0, b);
        Xh((c[f >> 2] | 0) + (d << 7) + 60 | 0, b);
        if ((d | 0) < (c[e >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    i = a + 24 | 0;
    d = c[i >> 2] | 0;
    if ((d | 0) < 1) {
      Ib = l;
      return;
    }
    j = a + 60 | 0;
    h = a + 48 | 0;
    a = 1;
    while (1) {
      e = c[(c[j >> 2] | 0) + (a << 2) >> 2] | 0;
      f = c[h >> 2] | 0;
      if ((c[f + (e << 7) + 104 >> 2] | 0) == 8) {
        c[k >> 2] = ~~+g[f + (e << 7) + 56 >> 3];
        Xh(k, b);
        g[(c[h >> 2] | 0) + (e << 7) + 56 >> 3] = +(c[k >> 2] | 0);
        d = c[i >> 2] | 0;
      }
      if ((a | 0) < (d | 0)) a = a + 1 | 0;else break;
    }
    Ib = l;
    return;
  }
  function Zh(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0.0;
    i = a + 20 | 0;
    e = c[i >> 2] | 0;
    if ((e | 0) < 1) {
      l = 0;
      return l | 0;
    }
    j = a + 56 | 0;
    k = a + 4920 | 0;
    l = a + 4960 | 0;
    d = 0;
    h = 1;
    while (1) {
      f = c[j >> 2] | 0;
      if ((c[f + (h << 7) + 56 >> 2] | 0) == (b | 0)) {
        e = f + (h << 7) + 4 | 0;
        c[e >> 2] = 3;
        d = Dg(a, b) | 0;
        if ((d | 0) > 0) {
          e = 9;
          break;
        }
        if ((c[e >> 2] | 0) == 1) {
          e = f + (h << 7) + 32 | 0;
          g[e >> 3] = +g[e >> 3] / +g[k >> 3];
          m = +u(+ +g[l >> 3], + +g[f + (h << 7) + 48 >> 3]);
          e = f + (h << 7) + 40 | 0;
          g[e >> 3] = +g[e >> 3] * (m / +g[k >> 3]);
        }
        e = f + (h << 7) + 8 | 0;
        g[e >> 3] = +g[e >> 3] / +g[l >> 3];
        e = f + (h << 7) + 16 | 0;
        g[e >> 3] = +g[e >> 3] / +g[l >> 3];
        e = f + (h << 7) + 24 | 0;
        g[e >> 3] = +g[e >> 3] / +g[k >> 3];
        e = c[i >> 2] | 0;
      }
      if ((h | 0) < (e | 0)) h = h + 1 | 0;else {
        e = 9;
        break;
      }
    }
    if ((e | 0) == 9) return d | 0;
    return 0;
  }
  function _h(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    f = a + 44 | 0;
    if ((c[f >> 2] | 0) >= (b | 0)) {
      h = 0;
      return h | 0;
    }
    g = a + 48 | 0;
    e = b << 3;
    h = ht(c[g >> 2] | 0, e) | 0;
    if (!h) {
      h = 101;
      return h | 0;
    }
    d = a + 52 | 0;
    a = ht(c[d >> 2] | 0, e) | 0;
    if (!a) {
      ft(h);
      h = 101;
      return h | 0;
    } else {
      c[g >> 2] = h;
      c[d >> 2] = a;
      c[f >> 2] = b;
      h = 0;
      return h | 0;
    }
    return 0;
  }
  function $h(b) {
    b = b | 0;
    if (((Kq(b) | 0) + -1 | 0) >>> 0 > 30) return 0;
    if (!(Fr(b) | 0)) return (a[b >> 0] | 0) != 34 | 0;else return 0;
    return 0;
  }
  function ai(b) {
    b = b | 0;
    var c = 0,
      d = 0,
      e = 0;
    c = b;
    d = 8682;
    e = c + 9 | 0;
    do {
      a[c >> 0] = a[d >> 0] | 0;
      c = c + 1 | 0;
      d = d + 1 | 0;
    } while ((c | 0) < (e | 0));
    c = Xq(Ir(b) | 0, 10974) | 0;
    if (!c) {
      a[b >> 0] = 0;
      vr(b);
      return;
    } else {
      $q(c);
      vr(b);
      return;
    }
  }
  function bi(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    var e = 0.0,
      f = 0,
      h = 0.0,
      i = 0,
      j = 0.0;
    i = a + -1 | 0;
    if (+g[b >> 3] >= d) {
      d = +g[c >> 3];
      return +d;
    }
    a: do if ((a | 0) > 1) {
      f = 1;
      while (1) {
        j = +g[b + (f << 3) >> 3];
        if (j >= d) break;
        f = f + 1 | 0;
        if ((f | 0) >= (a | 0)) break a;
      }
      a = f + -1 | 0;
      h = j - +g[b + (a << 3) >> 3];
      e = +g[c + (f << 3) >> 3];
      if ((h < 0.0 ? -h : h) < 1.0e-06) {
        d = e;
        return +d;
      }
      d = e - (j - d) * (e - +g[c + (a << 3) >> 3]) / h;
      return +d;
    } while (0);
    d = +g[c + (i << 3) >> 3];
    return +d;
  }
  function ci(b, c) {
    b = b | 0;
    c = c | 0;
    var d = 0,
      e = 0;
    do switch (b | 0) {
      case 0:
        {
          a[c >> 0] = a[8691] | 0;
          a[c + 1 >> 0] = a[8692] | 0;
          a[c + 2 >> 0] = a[8693] | 0;
          return c | 0;
        }
      case 101:
        {
          b = c;
          d = 8694;
          e = b + 30 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 102:
        {
          b = c;
          d = 8724;
          e = b + 26 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 103:
        {
          b = c;
          d = 8750;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 104:
        {
          b = c;
          d = 8778;
          e = b + 41 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 105:
        {
          b = c;
          d = 8819;
          e = b + 32 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 106:
        {
          b = c;
          d = 8851;
          e = b + 30 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 107:
        {
          b = c;
          d = 8881;
          e = b + 39 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 108:
        {
          b = c;
          d = 8920;
          e = b + 59 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 110:
        {
          b = c;
          d = 8979;
          e = b + 41 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 120:
        {
          b = c;
          d = 9020;
          e = b + 47 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 200:
        {
          b = c;
          d = 9067;
          e = b + 33 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 201:
        {
          b = c;
          d = 9100;
          e = b + 13 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 202:
        {
          b = c;
          d = 9113;
          e = b + 22 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 203:
        {
          b = c;
          d = 9135;
          e = b + 15 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 204:
        {
          b = c;
          d = 9150;
          e = b + 15 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 205:
        {
          b = c;
          d = 9165;
          e = b + 23 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 206:
        {
          b = c;
          d = 9188;
          e = b + 16 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 207:
        {
          b = c;
          d = 9204;
          e = b + 31 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 208:
        {
          b = c;
          d = 9235;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 209:
        {
          b = c;
          d = 9263;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 211:
        {
          b = c;
          d = 9291;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 212:
        {
          b = c;
          d = 9319;
          e = b + 21 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 213:
        {
          b = c;
          d = 9340;
          e = b + 21 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 214:
        {
          b = c;
          d = 9361;
          e = b + 34 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 215:
        {
          b = c;
          d = 9395;
          e = b + 19 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 216:
        {
          b = c;
          d = 9414;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 217:
        {
          b = c;
          d = 9442;
          e = b + 25 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 219:
        {
          b = c;
          d = 9467;
          e = b + 38 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 220:
        {
          b = c;
          d = 9505;
          e = b + 42 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 221:
        {
          b = c;
          d = 9547;
          e = b + 45 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 222:
        {
          b = c;
          d = 9592;
          e = b + 34 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 223:
        {
          b = c;
          d = 9626;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 224:
        {
          b = c;
          d = 9654;
          e = b + 34 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 225:
        {
          b = c;
          d = 9688;
          e = b + 36 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 226:
        {
          b = c;
          d = 9724;
          e = b + 39 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 227:
        {
          b = c;
          d = 9763;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 230:
        {
          b = c;
          d = 9791;
          e = b + 33 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 233:
        {
          b = c;
          d = 9824;
          e = b + 29 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 240:
        {
          b = c;
          d = 9853;
          e = b + 19 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 241:
        {
          b = c;
          d = 9872;
          e = b + 20 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 250:
        {
          b = c;
          d = 9892;
          e = b + 15 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 251:
        {
          b = c;
          d = 9907;
          e = b + 23 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 252:
        {
          b = c;
          d = 9930;
          e = b + 16 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 253:
        {
          b = c;
          d = 9946;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 254:
        {
          b = c;
          d = 9974;
          e = b + 25 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 255:
        {
          b = c;
          d = 9999;
          e = b + 20 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 257:
        {
          b = c;
          d = 10019;
          e = b + 17 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 258:
        {
          b = c;
          d = 10036;
          e = b + 24 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 259:
        {
          b = c;
          d = 10060;
          e = b + 62 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 260:
        {
          b = c;
          d = 10122;
          e = b + 48 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 261:
        {
          b = c;
          d = 10170;
          e = b + 56 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 262:
        {
          b = c;
          d = 10226;
          e = b + 59 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 301:
        {
          b = c;
          d = 10285;
          e = b + 21 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 302:
        {
          b = c;
          d = 10306;
          e = b + 23 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 303:
        {
          b = c;
          d = 10329;
          e = b + 24 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 304:
        {
          b = c;
          d = 10353;
          e = b + 31 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 305:
        {
          b = c;
          d = 10384;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 306:
        {
          b = c;
          d = 10412;
          e = b + 44 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 307:
        {
          b = c;
          d = 10456;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 308:
        {
          b = c;
          d = 10484;
          e = b + 28 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      case 309:
        {
          b = c;
          d = 10512;
          e = b + 35 | 0;
          do {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
          } while ((b | 0) < (e | 0));
          return c | 0;
        }
      default:
        {
          a[c >> 0] = 0;
          return c | 0;
        }
    } while (0);
    return 0;
  }
  function di(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    f = Ib;
    Ib = Ib + 272 | 0;
    e = f + 256 | 0;
    d = f;
    vt(d | 0, 0, 256) | 0;
    if ((b | 0) == 309) {
      Ib = f;
      return;
    }
    if (!(c[a + 1200 >> 2] | 0)) {
      Ib = f;
      return;
    }
    if (!((b | 0) > 100 & (c[a + 1224 >> 2] | 0) != 0)) {
      Ib = f;
      return;
    }
    g = a + 5080 | 0;
    d = ci(b, d) | 0;
    c[e >> 2] = b;
    c[e + 4 >> 2] = d;
    bq(g, 10547, e);
    Ti(a, g);
    Ib = f;
    return;
  }
  function ei(a, b) {
    a = a | 0;
    b = b | 0;
    var c = 0,
      d = 0;
    d = Ib;
    Ib = Ib + 256 | 0;
    c = d;
    if (!a) {
      Ib = d;
      return;
    }
    hr(c, b, 255) | 0;
    tc[a & 15](c);
    Ib = d;
    return;
  }
  function fi(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    if (!(c[a + 4600 >> 2] | 0)) {
      a = 0;
      return a | 0;
    }
    if ((c[a + 88 >> 2] | 0) == 0 ? (b = Lh(a) | 0, b | 0) : 0) {
      a = b;
      return a | 0;
    }
    c[a + 4612 >> 2] = 0;
    h = qk() | 0;
    c[a + 4832 >> 2] = h;
    g = a + 12 | 0;
    i = (c[g >> 2] | 0) + 1 | 0;
    d = gt(i, 4) | 0;
    b = a + 4848 | 0;
    c[b >> 2] = d;
    i = gt(i, 8) | 0;
    d = a + 4828 | 0;
    c[d >> 2] = i;
    g = (c[g >> 2] | 0) + 1 + (c[a + 4 >> 2] | 0) | 0;
    i = gt(g, 4) | 0;
    e = a + 4840 | 0;
    c[e >> 2] = i;
    i = gt(g, 4) | 0;
    f = a + 4844 | 0;
    c[f >> 2] = i;
    g = gt(g, 4) | 0;
    c[a + 4620 >> 2] = g;
    if (!h) {
      i = 101;
      return i | 0;
    }
    if (!(c[b >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    if (!(c[d >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    if (!(c[e >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    if (!(c[f >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    i = (g | 0) == 0 ? 101 : 0;
    return i | 0;
  }
  function gi(a) {
    a = a | 0;
    var b = 0.0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0;
    if (!(c[a + 4524 >> 2] | 0)) dr(c[a + 4220 >> 2] | 0, c[a + 4204 >> 2] | 0, 0);
    c[a + 1184 >> 2] = 0;
    c[a + 1172 >> 2] = 0;
    c[a + 1168 >> 2] = c[a + 1164 >> 2];
    c[a + 1204 >> 2] = 0;
    i = a + 4600 | 0;
    d = c[i >> 2] | 0;
    if ((c[a >> 2] | 0) >= 1) {
      f = a + 4824 | 0;
      h = a + 44 | 0;
      e = 1;
      while (1) {
        if ((d | 0) == 3) b = 0.0;else b = +g[(c[h >> 2] | 0) + (e * 96 | 0) + 64 >> 3];
        g[(c[f >> 2] | 0) + (e << 3) >> 3] = b;
        d = c[(c[h >> 2] | 0) + (e * 96 | 0) + 60 >> 2] | 0;
        if (d | 0) g[d + 16 >> 3] = 0.0;
        d = c[i >> 2] | 0;
        if ((e | 0) < (c[a >> 2] | 0)) e = e + 1 | 0;else break;
      }
    }
    if (!d) return;
    h = a + 4 | 0;
    if ((c[h >> 2] | 0) >= 1) {
      e = a + 4824 | 0;
      f = a + 52 | 0;
      d = 1;
      while (1) {
        j = c[f >> 2] | 0;
        g[j + (d * 120 | 0) + 80 >> 3] = +g[(c[e >> 2] | 0) + (c[j + (d * 120 | 0) >> 2] << 3) >> 3];
        if ((d | 0) < (c[h >> 2] | 0)) d = d + 1 | 0;else break;
      }
      d = c[i >> 2] | 0;
    }
    if ((d | 0) == 3) g[(c[a + 4824 >> 2] | 0) + (c[a + 4616 >> 2] << 3) >> 3] = 100.0;
    b = +g[a + 4696 >> 3];
    if (b > 0.0) b = +g[a + 4384 >> 3] / b;else b = 0.0;
    g[a + 4744 >> 3] = b;
    b = +si(+g[a + 4768 >> 3]);
    g[a + 4752 >> 3] = b;
    b = +si(+g[a + 4784 >> 3]);
    g[a + 4760 >> 3] = b;
    e = (ri(a) | 0) << 24 >> 24;
    c[a + 4608 >> 2] = e;
    c[a + 4836 >> 2] = 0;
    uk(c[a + 4832 >> 2] | 0);
    Pi(a);
    e = a + 12 | 0;
    if ((c[e >> 2] | 0) >= 1) {
      f = a + 4848 | 0;
      d = 1;
      while (1) {
        c[(c[f >> 2] | 0) + (d << 2) >> 2] = 0;
        if ((d | 0) < (c[e >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    d = a + 4704 | 0;
    c[d >> 2] = 0;
    c[d + 4 >> 2] = 0;
    c[d + 8 >> 2] = 0;
    c[d + 12 >> 2] = 0;
    c[d + 16 >> 2] = 0;
    c[d + 20 >> 2] = 0;
    c[d + 24 >> 2] = 0;
    c[d + 28 >> 2] = 0;
    b = +hi(a);
    g[a + 4856 >> 3] = b;
    d = a + 4864 | 0;
    e = d + 40 | 0;
    do {
      c[d >> 2] = 0;
      d = d + 4 | 0;
    } while ((d | 0) < (e | 0));
    return;
  }
  function hi(a) {
    a = a | 0;
    var b = 0.0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = c[a + 12 >> 2] | 0;
    if ((k | 0) < 1) b = 0.0;else {
      f = c[a + 4840 >> 2] | 0;
      b = 0.0;
      e = 1;
      while (1) {
        d = c[f + (e << 2) >> 2] | 0;
        if (d) do {
          b = b + +g[d + 8 >> 3] * +g[d >> 3];
          d = c[d + 16 >> 2] | 0;
        } while ((d | 0) != 0);
        if ((e | 0) == (k | 0)) break;else e = e + 1 | 0;
      }
    }
    h = c[a + 4 >> 2] | 0;
    if ((h | 0) < 1) return +b;
    i = c[a + 52 >> 2] | 0;
    f = a + 4840 | 0;
    e = 1;
    while (1) {
      if (!(+g[i + (e * 120 | 0) + 8 >> 3] == 0.0) ? (j = c[(c[f >> 2] | 0) + (e + k << 2) >> 2] | 0, (j | 0) != 0) : 0) {
        d = j;
        do {
          b = b + +g[d + 8 >> 3] * +g[d >> 3];
          d = c[d + 16 >> 2] | 0;
        } while ((d | 0) != 0);
      }
      if ((e | 0) == (h | 0)) break;else e = e + 1 | 0;
    }
    return +b;
  }
  function ii(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 16 | 0;
    d = k + 4 | 0;
    j = k;
    c[d >> 2] = 0;
    c[j >> 2] = 0;
    h = a + 1184 | 0;
    c[b >> 2] = c[h >> 2];
    b = c[h >> 2] | 0;
    i = a + 1172 | 0;
    if ((b | 0) != (c[i >> 2] | 0)) {
      j = 0;
      Ib = k;
      return j | 0;
    }
    g = a + 4524 | 0;
    do if (!(c[g >> 2] | 0)) {
      if (!(nh(a, d) | 0)) {
        j = 307;
        Ib = k;
        return j | 0;
      }
      if (!(oh(c[a + 4220 >> 2] | 0, j) | 0)) {
        j = 307;
        Ib = k;
        return j | 0;
      } else {
        f = c[d >> 2] | 0;
        c[i >> 2] = f;
        b = f;
        break;
      }
    } else f = 0; while (0);
    e = a + 1168 | 0;
    d = c[e >> 2] | 0;
    do if ((b | 0) >= (d | 0)) {
      if (!(c[a + 4200 >> 2] | 0)) {
        c[e >> 2] = d + (c[a + 1160 >> 2] | 0);
        break;
      }
      b = ph(a) | 0;
      d = a + 1204 | 0;
      c[d >> 2] = (c[d >> 2] | 0) + 1;
      c[e >> 2] = (c[e >> 2] | 0) + (c[a + 1160 >> 2] | 0);
      if (b | 0) {
        j = b;
        Ib = k;
        return j | 0;
      }
    } while (0);
    b = c[a + 4600 >> 2] | 0;
    if ((b | 0) != 0 ? (c[h >> 2] | 0) < (c[a + 1192 >> 2] | 0) : 0) {
      if (!((b | 0) == 2 | (c[a + 4608 >> 2] | 0) == 0)) ti(a);
      if ((ji(a) | 0) == 1) b = Ni(a) | 0;else b = 0;
    } else b = 0;
    if (c[g >> 2] | 0) {
      j = b;
      Ib = k;
      return j | 0;
    }
    c[i >> 2] = (c[j >> 2] | 0) + f;
    j = b;
    Ib = k;
    return j | 0;
  }
  function ji(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    j = a + 12 | 0;
    if ((c[j >> 2] | 0) < 1) {
      m = 0;
      return m | 0;
    }
    k = a + 4848 | 0;
    l = a + 4536 | 0;
    m = a + 4272 | 0;
    b = 0;
    i = 1;
    while (1) {
      e = (c[k >> 2] | 0) + (i << 2) | 0;
      h = c[e >> 2] | 0;
      if ((c[(c[l >> 2] | 0) + (i << 2) >> 2] | 0) >>> 0 < 3) d = 0.0;else d = +g[(c[m >> 2] | 0) + (i << 3) >> 3];
      f = +s(+d) < 1.1140050486708806e-05;
      f = f ? 0 : d < 0.0 ? -1 : 1;
      if ((w(f, h) | 0) < 0) {
        Qi(a, i);
        e = (c[k >> 2] | 0) + (i << 2) | 0;
      }
      b = (f | 0) == (h | 0) ? b : 1;
      c[e >> 2] = f;
      if ((i | 0) < (c[j >> 2] | 0)) i = i + 1 | 0;else break;
    }
    return b | 0;
  }
  function ki(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    c[b >> 2] = 0;
    d = c[a + 1172 >> 2] | 0;
    do if ((d | 0) <= (c[a + 1192 >> 2] | 0)) {
      j = a + 1184 | 0;
      f = d - (c[j >> 2] | 0) | 0;
      e = a + 4600 | 0;
      if ((c[e >> 2] | 0) != 0 & (f | 0) > 0) {
        g = a + 4612 | 0;
        if (!(c[g >> 2] | 0)) {
          h = a + 1180 | 0;
          d = 0;
          do {
            i = c[h >> 2] | 0;
            k = f - d | 0;
            i = (i | 0) > (k | 0) ? k : i;
            d = i + d | 0;
            Gi(a, i);
            i = (c[g >> 2] | 0) == 0;
          } while ((f | 0) > (d | 0) & i);
          if (i) {
            d = j;
            break;
          }
        }
        li(a);
        c[j >> 2] = (c[j >> 2] | 0) + f;
        k = 101;
        return k | 0;
      } else d = j;
    } else {
      f = 0;
      e = a + 4600 | 0;
      d = a + 1184 | 0;
    } while (0);
    li(a);
    c[b >> 2] = f;
    c[d >> 2] = (c[d >> 2] | 0) + f;
    if (c[b >> 2] | 0) {
      k = 0;
      return k | 0;
    }
    if (c[e >> 2] | 0 ? c[a + 1228 >> 2] | 0 : 0) gj(a);
    if (!(c[a + 4200 >> 2] | 0)) {
      k = 0;
      return k | 0;
    }
    k = sh(a) | 0;
    return k | 0;
  }
  function li(a) {
    a = a | 0;
    var b = 0.0,
      d = 0.0,
      e = 0.0,
      f = 0;
    if ((c[a + 4600 >> 2] | 0) != 0 ? (d = +hi(a), g[a + 4888 >> 3] = d, b = +g[a + 4856 >> 3] + +g[a + 4864 >> 3], d = d + +g[a + 4872 >> 3], e = +g[a + 4880 >> 3], f = e > 0.0, b = f ? b : b - e, !(b == 0.0)) : 0) b = (f ? d + e : d) / b;else b = 1.0;
    g[a + 4896 >> 3] = b;
    return;
  }
  function mi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    o = Ib;
    Ib = Ib + 16 | 0;
    i = o;
    j = a + 1172 | 0;
    m = a + 1184 | 0;
    n = a + 4600 | 0;
    k = a + 4612 | 0;
    l = a + 4524 | 0;
    h = c[a + 1180 >> 2] | 0;
    d = c[m >> 2] | 0;
    while (1) {
      f = (c[j >> 2] | 0) - d | 0;
      e = (c[n >> 2] | 0) == 0;
      if ((f | 0) < (h | 0)) {
        if (!e) {
          Gi(a, f);
          d = c[m >> 2] | 0;
        }
        c[m >> 2] = d + f;
        if (c[l >> 2] | 0) {
          d = 0;
          break;
        }
        g = ii(a, i) | 0;
        e = f;
        f = g;
        g = c[i >> 2] | 0;
      } else {
        if (!e) {
          Gi(a, h);
          d = c[m >> 2] | 0;
        }
        e = h;
        f = 0;
        g = d + h | 0;
      }
      c[m >> 2] = g;
      h = h - e | 0;
      d = (c[k >> 2] | 0) == 0 ? f : 101;
      if (!((h | 0) > 0 & (d | 0) == 0)) break;else d = g;
    }
    li(a);
    m = (c[a + 1192 >> 2] | 0) - (c[m >> 2] | 0) | 0;
    c[b >> 2] = m;
    if (m | d | 0) {
      n = d;
      Ib = o;
      return n | 0;
    }
    if (c[n >> 2] | 0 ? c[a + 1228 >> 2] | 0 : 0) gj(a);
    if (!(c[a + 4200 >> 2] | 0)) {
      n = 0;
      Ib = o;
      return n | 0;
    }
    n = sh(a) | 0;
    Ib = o;
    return n | 0;
  }
  function ni(a) {
    a = a | 0;
    var b = 0;
    if (!(c[a + 4600 >> 2] | 0)) return;
    b = c[a + 4832 >> 2] | 0;
    if (b | 0) sk(b);
    b = a + 4840 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    b = a + 4844 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    b = a + 4828 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    b = a + 4848 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    b = a + 4620 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    return;
  }
  function oi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0.0,
      f = 0.0,
      h = 0,
      i = 0.0;
    if (!(c[a + 4600 >> 2] | 0)) {
      f = 0.0;
      return +f;
    }
    d = c[a + 4840 >> 2] | 0;
    if (d | 0 ? (h = c[d + (b << 2) >> 2] | 0, h | 0) : 0) {
      e = 0.0;
      f = 0.0;
      d = h;
      do {
        i = +g[d >> 3];
        f = f + i;
        e = e + i * +g[d + 8 >> 3];
        d = c[d + 16 >> 2] | 0;
      } while ((d | 0) != 0);
      if (f > 0.0) {
        i = e / f;
        return +i;
      }
    }
    h = c[a + 4824 >> 2] | 0;
    a = c[a + 48 >> 2] | 0;
    i = (+g[h + (c[a + (b << 7) + 32 >> 2] << 3) >> 3] + +g[h + (c[a + (b << 7) + 36 >> 2] << 3) >> 3]) * .5;
    return +i;
  }
  function pi(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = e | 0;
    var f = 0.0,
      h = 0.0,
      i = 0.0,
      j = 0,
      k = 0;
    if ((c[a + 4600 >> 2] | 0) != 1) {
      d = 0.0;
      return +d;
    }
    j = c[a + 44 >> 2] | 0;
    k = c[j + (b * 96 | 0) + 60 >> 2] | 0;
    if (!k) {
      d = 0.0;
      return +d;
    }
    if (+g[k >> 3] == 0.0) {
      d = 0.0;
      return +d;
    }
    i = +(e | 0);
    if (d / i <= 1.1140050486708806e-05) {
      d = 0.0;
      return +d;
    }
    h = +qi(a, k);
    switch (c[k + 24 >> 2] | 0) {
      case 0:
        {
          if (!(c[j + (b * 96 | 0) + 88 >> 2] | 0)) {
            f = +g[(c[a + 4260 >> 2] | 0) + (b << 3) >> 3];
            if (f < 0.0) h = -(h * f * i) / d;else h = 0.0;
          }
          break;
        }
      case 1:
        {
          h = h * i / d;
          break;
        }
      case 2:
        {
          h = h - +g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3];
          h = h >= 0.0 ? h : 0.0;
          break;
        }
      default:
        {}
    }
    f = h * d;
    k = k + 16 | 0;
    g[k >> 3] = +g[k >> 3] + f;
    if ((c[a + 1172 >> 2] | 0) < (c[a + 1164 >> 2] | 0)) {
      d = h;
      return +d;
    }
    k = a + 4728 | 0;
    g[k >> 3] = f + +g[k >> 3];
    d = h;
    return +d;
  }
  function qi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0;
    if ((c[b + 24 >> 2] | 0) == 1) d = 60.0;else d = +g[a + 4936 >> 3];
    d = +g[b >> 3] / d;
    b = c[b + 8 >> 2] | 0;
    if (!b) return +d;
    e = c[a + 64 >> 2] | 0;
    d = d * +g[(c[e + (b * 44 | 0) + 40 >> 2] | 0) + (((((c[a + 1156 >> 2] | 0) + (c[a + 1184 >> 2] | 0) | 0) / (c[a + 1152 >> 2] | 0) | 0 | 0) % (c[e + (b * 44 | 0) + 36 >> 2] | 0) | 0) << 3) >> 3];
    return +d;
  }
  function ri(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    switch (c[a + 4600 >> 2] | 0) {
      case 2:
        {
          a = 1;
          return a | 0;
        }
      case 3:
        {
          a = 0;
          return a | 0;
        }
      default:
        {
          d = c[a + 12 >> 2] | 0;
          a: do if ((d | 0) >= 1) {
            e = c[a + 48 >> 2] | 0;
            b = 1;
            while (1) {
              if ((c[e + (b << 7) + 104 >> 2] | 0) >>> 0 < 2) {
                if (+g[e + (b << 7) + 72 >> 3] != 0.0) {
                  b = 1;
                  d = 13;
                  break;
                }
                if (+g[e + (b << 7) + 80 >> 3] != 0.0) {
                  b = 1;
                  d = 13;
                  break;
                }
              }
              if ((b | 0) < (d | 0)) b = b + 1 | 0;else break a;
            }
            if ((d | 0) == 13) return b | 0;
          } while (0);
          e = c[a + 4 >> 2] | 0;
          if ((e | 0) < 1) {
            a = 0;
            return a | 0;
          }
          d = c[a + 52 >> 2] | 0;
          b = 1;
          while (1) {
            if (+g[d + (b * 120 | 0) + 64 >> 3] != 0.0) {
              b = 1;
              d = 13;
              break;
            }
            if ((b | 0) < (e | 0)) b = b + 1 | 0;else {
              b = 0;
              d = 13;
              break;
            }
          }
          if ((d | 0) == 13) return b | 0;
        }
    }
    return 0;
  }
  function si(a) {
    a = +a;
    var b = 0.0;
    b = a < 0.0 ? 0.0 : a;
    a = 1.0 / +u(28.317, +(b + -1.0));
    return +(b == 1.0 ? 1.0 : a);
  }
  function ti(a) {
    a = a | 0;
    var b = 0.0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0;
    e = a + 12 | 0;
    if ((c[e >> 2] | 0) < 1) return;
    f = a + 48 | 0;
    h = a + 4828 | 0;
    d = 1;
    while (1) {
      i = c[f >> 2] | 0;
      b = +g[i + (d << 7) + 80 >> 3];
      if (b != 0.0) b = +ui(a, d);
      g[i + (d << 7) + 96 >> 3] = b;
      g[(c[h >> 2] | 0) + (d << 3) >> 3] = 0.0;
      if ((d | 0) < (c[e >> 2] | 0)) d = d + 1 | 0;else break;
    }
    return;
  }
  function ui(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0,
      h = 0.0;
    f = c[a + 48 >> 2] | 0;
    h = +g[f + (b << 7) + 40 >> 3];
    e = +g[a + 4744 >> 3];
    if (e == 0.0) {
      if (+g[a + 4776 >> 3] == 0.0) {
        h = 1.0e10;
        return +h;
      }
      h = 4.0 / h * +g[f + (b << 7) + 80 >> 3] / +g[a + 4904 >> 3];
      return +h;
    }
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) d = 0.0;else d = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    d = h * (+s(+d) / (h * (h * 3.141592653589793) * .25));
    d = d / +g[a + 4384 >> 3];
    do if (!(d < 1.0)) {
      if (!(d >= 2300.0)) {
        d = e * (d * (h / +g[f + (b << 7) + 48 >> 3]));
        d = d * .0668 / (+u(+d, .667) * .04 + 1.0) + 3.65;
        break;
      } else {
        d = +u(+e, .333) * (+u(+d, .88) * .0149);
        break;
      }
    } else d = 2.0; while (0);
    d = d * +g[a + 4696 >> 3] / h;
    if (+g[a + 4776 >> 3] == 0.0) {
      h = d;
      return +h;
    }
    e = +g[f + (b << 7) + 80 >> 3] / +g[a + 4904 >> 3];
    h = d * (4.0 / h * e) / (d + +s(+e));
    return +h;
  }
  function vi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0.0,
      h = 0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0.0,
      r = 0.0;
    l = a + 12 | 0;
    e = c[l >> 2] | 0;
    if ((e | 0) < 1) return;
    m = a + 48 | 0;
    n = a + 4840 | 0;
    o = a + 4880 | 0;
    p = a + 4600 | 0;
    q = +(b | 0);
    k = a + 4828 | 0;
    j = 1;
    while (1) {
      if ((c[(c[m >> 2] | 0) + (j << 7) + 104 >> 2] | 0) == 1) {
        e = c[(c[n >> 2] | 0) + (j << 2) >> 2] | 0;
        if (e) {
          d = 0.0;
          f = 0.0;
          do {
            h = e + 8 | 0;
            i = +g[h >> 3];
            r = +wi(a, j, i, +g[e >> 3], b);
            g[h >> 3] = r;
            g[o >> 3] = +g[o >> 3] + (i - r) * +g[e >> 3];
            if ((c[p >> 2] | 0) == 1) {
              r = +s(+(+g[h >> 3] - i));
              i = +g[e >> 3];
              f = f + i;
              d = d + i * r;
            }
            e = c[e + 16 >> 2] | 0;
          } while ((e | 0) != 0);
          if (f > 0.0) d = d / f / q * 86400.0;else d = 0.0;
        } else d = 0.0;
        g[(c[k >> 2] | 0) + (j << 3) >> 3] = d;
        e = c[l >> 2] | 0;
      }
      if ((j | 0) < (e | 0)) j = j + 1 | 0;else break;
    }
    return;
  }
  function wi(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = f | 0;
    var h = 0.0,
      i = 0.0,
      j = 0,
      k = 0.0;
    if ((c[a + 4600 >> 2] | 0) == 2) {
      e = +(f | 0) / 3600.0;
      e = e + d;
      a = e <= 0.0;
      e = a ? 0.0 : e;
      return +e;
    }
    j = c[a + 48 >> 2] | 0;
    i = +xi(a, d, +g[j + (b << 7) + 72 >> 3], +g[a + 4768 >> 3]);
    i = i * +g[a + 4752 >> 3];
    h = +(f | 0);
    i = i * h;
    h = +yi(a, d, +g[j + (b << 7) + 40 >> 3], +g[j + (b << 7) + 80 >> 3], +g[j + (b << 7) + 96 >> 3]) * h;
    if ((c[a + 1172 >> 2] | 0) >= (c[a + 1164 >> 2] | 0)) {
      k = +s(+i) * e;
      j = a + 4704 | 0;
      g[j >> 3] = k + +g[j >> 3];
      e = +s(+h) * e;
      j = a + 4712 | 0;
      g[j >> 3] = e + +g[j >> 3];
    }
    k = i + h;
    k = k + d;
    j = k <= 0.0;
    k = j ? 0.0 : k;
    return +k;
  }
  function xi(a, b, c, d) {
    a = a | 0;
    b = +b;
    c = +c;
    d = +d;
    var e = 0.0,
      f = 0.0;
    do if (!(d == 0.0)) {
      e = +g[a + 4808 >> 3];
      if (d < 0.0) {
        e = (c < 0.0 ? -1.0 : 1.0) * b + e;
        a = +s(+e) < 1.0e-06;
        e = b / (a ? e < 0.0 ? -1.0e-06 : 1.0e-06 : e);
        break;
      }
      f = (c < 0.0 ? -1.0 : 1.0) * (e - b);
      e = e == 0.0 ? b : f <= 0.0 ? 0.0 : f;
      if (!(d == 1.0)) if (d == 2.0) {
        e = e * b;
        break;
      } else {
        e = +u(+(b <= 0.0 ? 0.0 : b), +(d + -1.0)) * e;
        break;
      }
    } else e = 1.0; while (0);
    return +((e < 0.0 ? 0.0 : e) * c);
  }
  function yi(a, b, c, d, e) {
    a = a | 0;
    b = +b;
    c = +c;
    d = +d;
    e = +e;
    if (c == 0.0 | d == 0.0) {
      e = 0.0;
      return +e;
    }
    if (+g[a + 4776 >> 3] == 0.0) {
      b = (d < 0.0 ? -1.0 : 1.0) * b * e;
      e = +g[a + 4904 >> 3];
      e = e * e * d;
      a = +s(+b) < +s(+e);
      e = (a ? b : e) * 4.0 / c;
      return +e;
    } else {
      e = b * e;
      return +e;
    }
    return 0.0;
  }
  function zi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0,
      o = 0.0,
      p = 0;
    i = a + 4 | 0;
    d = c[i >> 2] | 0;
    if ((d | 0) < 1) return;
    j = a + 52 | 0;
    k = a + 12 | 0;
    l = a + 4840 | 0;
    m = a + 4880 | 0;
    h = 1;
    while (1) {
      e = c[j >> 2] | 0;
      if (!(+g[e + (h * 120 | 0) + 8 >> 3] == 0.0) ? (f = c[(c[l >> 2] | 0) + ((c[k >> 2] | 0) + h << 2) >> 2] | 0, (f | 0) != 0) : 0) {
        e = e + (h * 120 | 0) + 64 | 0;
        d = f;
        do {
          p = d + 8 | 0;
          o = +g[p >> 3];
          n = +Ai(a, o, +g[d >> 3], +g[e >> 3], b);
          g[p >> 3] = n;
          g[m >> 3] = +g[m >> 3] + (o - n) * +g[d >> 3];
          d = c[d + 16 >> 2] | 0;
        } while ((d | 0) != 0);
        d = c[i >> 2] | 0;
      }
      if ((h | 0) < (d | 0)) h = h + 1 | 0;else break;
    }
    return;
  }
  function Ai(a, b, d, e, f) {
    a = a | 0;
    b = +b;
    d = +d;
    e = +e;
    f = f | 0;
    if ((c[a + 4600 >> 2] | 0) != 2) {
      e = +xi(a, b, e, +g[a + 4784 >> 3]);
      e = e * +g[a + 4760 >> 3] * +(f | 0);
      f = a + 4720 | 0;
      if ((c[a + 1172 >> 2] | 0) >= (c[a + 1164 >> 2] | 0)) {
        d = +s(+e) * d;
        g[f >> 3] = d + +g[f >> 3];
      }
    } else e = +(f | 0) / 3600.0;
    b = e + b;
    return +(b <= 0.0 ? 0.0 : b);
  }
  function Bi(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    var h = 0,
      i = 0;
    i = b - (c[a + 8 >> 2] | 0) | 0;
    f = d - f;
    h = a + 52 | 0;
    b = c[h >> 2] | 0;
    switch (c[b + (i * 120 | 0) + 96 >> 2] | 0) {
      case 0:
        {
          Ci(c[a + 12 >> 2] | 0, b, c[a + 4840 >> 2] | 0, i, d, e, f);
          break;
        }
      case 1:
        {
          Di(a, i, d, e, f);
          break;
        }
      case 2:
        {
          Ei(a, i, d, e, f);
          break;
        }
      case 3:
        {
          Fi(a, i, d, e, f);
          break;
        }
      default:
        {}
    }
    return + +g[(c[h >> 2] | 0) + (i * 120 | 0) + 80 >> 3];
  }
  function Ci(a, b, d, e, f, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    h = +h;
    i = +i;
    var j = 0.0,
      k = 0.0;
    d = c[d + (e + a << 2) >> 2] | 0;
    if (!d) return;
    k = +g[d >> 3];
    j = k + f;
    a = d + 8 | 0;
    f = +g[a >> 3];
    if (j > 0.0) {
      f = (k * f + h) / j;
      g[a >> 3] = f;
    }
    i = k + i;
    g[d >> 3] = i <= 0.0 ? 0.0 : i;
    g[b + (e * 120 | 0) + 80 >> 3] = f;
    return;
  }
  function Di(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    var h = 0.0,
      i = 0.0,
      j = 0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    o = c[a + 52 >> 2] | 0;
    m = (c[a + 12 >> 2] | 0) + b | 0;
    n = c[(c[a + 4844 >> 2] | 0) + (m << 2) >> 2] | 0;
    m = c[(c[a + 4840 >> 2] | 0) + (m << 2) >> 2] | 0;
    if ((n | 0) == 0 | (m | 0) == 0) return;
    k = +g[o + (b * 120 | 0) + 104 >> 3];
    l = f > 0.0;
    do if (l) {
      h = +g[n >> 3];
      i = h + f - k;
      i = i <= 0.0 ? 0.0 : i;
      if (d > 0.0) {
        j = n + 8 | 0;
        g[j >> 3] = (h * +g[j >> 3] + e) / (h + d);
      }
      if (i > 0.0) {
        a = m + 8 | 0;
        e = +g[m >> 3];
        g[a >> 3] = (+g[a >> 3] * e + i * +g[n + 8 >> 3]) / (i + e);
        a = n;
        j = 12;
      } else {
        a = n;
        j = 12;
      }
    } else {
      if (!(f < 0.0)) {
        a = n;
        j = 16;
        break;
      }
      i = +g[m >> 3];
      h = -f;
      h = i > 0.0 ? i <= h ? i : h : 0.0;
      if (h + d > 0.0) {
        a = n + 8 | 0;
        i = +g[n >> 3];
        g[a >> 3] = (+g[a >> 3] * i + e + h * +g[m + 8 >> 3]) / (h + (i + d));
        i = h;
        a = n;
        j = 12;
        break;
      } else {
        i = h;
        a = n;
        j = 12;
        break;
      }
    } while (0);
    do if ((j | 0) == 12) if (i > 0.0) {
      g[a >> 3] = k;
      h = +g[m >> 3];
      if (l) {
        g[m >> 3] = i + h;
        break;
      } else {
        f = h - i;
        g[m >> 3] = f <= 0.0 ? 0.0 : f;
        break;
      }
    } else j = 16; while (0);
    if ((j | 0) == 16) {
      f = +g[a >> 3] + f;
      f = f <= k ? f : k;
      g[a >> 3] = f <= 0.0 ? 0.0 : f;
      g[m >> 3] = 0.0;
    }
    g[o + (b * 120 | 0) + 80 >> 3] = +g[n + 8 >> 3];
    return;
  }
  function Ei(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    var h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    q = c[a + 52 >> 2] | 0;
    p = (c[a + 12 >> 2] | 0) + b | 0;
    n = a + 4844 | 0;
    h = c[(c[n >> 2] | 0) + (p << 2) >> 2] | 0;
    if (!h) return;
    o = a + 4840 | 0;
    if (!(c[(c[o >> 2] | 0) + (p << 2) >> 2] | 0)) return;
    do if (d > 0.0) {
      e = e / d;
      j = +s(+(+g[h + 8 >> 3] - e));
      if (j < +g[a + 4688 >> 3]) {
        g[h >> 3] = +g[h >> 3] + d;
        break;
      } else {
        Li(a, p, d, e);
        break;
      }
    } while (0);
    f = d - f;
    if (f > 0.0) {
      m = a + 4836 | 0;
      d = 0.0;
      e = 0.0;
      do {
        k = (c[o >> 2] | 0) + (p << 2) | 0;
        l = c[k >> 2] | 0;
        if (!l) break;
        i = +g[l >> 3];
        j = (l | 0) == (c[(c[n >> 2] | 0) + (p << 2) >> 2] | 0) ? f : i <= f ? i : f;
        e = e + j;
        d = d + +g[l + 8 >> 3] * j;
        f = f - j;
        if (!(!(j >= i) | !(f >= 0.0))) {
          h = l + 16 | 0;
          a = c[h >> 2] | 0;
          if (a | 0) {
            c[k >> 2] = a;
            c[h >> 2] = c[m >> 2];
            c[m >> 2] = l;
          }
        } else g[l >> 3] = i - j;
      } while (f > 0.0);
      if (e > 0.0) {
        g[q + (b * 120 | 0) + 80 >> 3] = d / e;
        return;
      }
    }
    h = c[(c[o >> 2] | 0) + (p << 2) >> 2] | 0;
    if (!h) {
      g[q + (b * 120 | 0) + 80 >> 3] = 0.0;
      return;
    } else {
      g[q + (b * 120 | 0) + 80 >> 3] = +g[h + 8 >> 3];
      return;
    }
  }
  function Fi(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    var h = 0.0,
      i = 0.0,
      j = 0,
      k = 0.0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      t = 0;
    t = (c[a + 12 >> 2] | 0) + b | 0;
    p = a + 4844 | 0;
    j = c[(c[p >> 2] | 0) + (t << 2) >> 2] | 0;
    if (!j) return;
    q = a + 4840 | 0;
    if (!(c[(c[q >> 2] | 0) + (t << 2) >> 2] | 0)) return;
    h = d > 0.0 ? e / d : 0.0;
    r = (c[a + 52 >> 2] | 0) + (b * 120 | 0) + 80 | 0;
    g[r >> 3] = +g[j + 8 >> 3];
    b = c[(c[p >> 2] | 0) + (t << 2) >> 2] | 0;
    if (f > 0.0) {
      e = +s(+(+g[b + 8 >> 3] - h));
      if (e < +g[a + 4688 >> 3]) g[b >> 3] = +g[b >> 3] + f;else Li(a, t, f, h);
      g[r >> 3] = +g[(c[(c[p >> 2] | 0) + (t << 2) >> 2] | 0) + 8 >> 3];
      return;
    }
    if (!(f < 0.0)) return;
    Qi(a, t);
    a: do if (f < -0.0) {
      o = a + 4836 | 0;
      i = 0.0;
      h = 0.0;
      l = -f;
      do {
        m = (c[q >> 2] | 0) + (t << 2) | 0;
        n = c[m >> 2] | 0;
        if (!n) break a;
        f = +g[n >> 3];
        k = (n | 0) == (c[(c[p >> 2] | 0) + (t << 2) >> 2] | 0) ? l : f <= l ? f : l;
        h = h + k;
        i = i + +g[n + 8 >> 3] * k;
        l = l - k;
        if (!(!(k >= f) | !(l >= 0.0))) {
          b = n + 16 | 0;
          j = c[b >> 2] | 0;
          if (j | 0) {
            c[m >> 2] = j;
            c[b >> 2] = c[o >> 2];
            c[o >> 2] = n;
          }
        } else g[n >> 3] = f - k;
      } while (l > 0.0);
    } else {
      i = 0.0;
      h = 0.0;
    } while (0);
    Qi(a, t);
    g[r >> 3] = (i + e) / (h + d);
    return;
  }
  function Gi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0,
      h = 0.0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0.0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0;
    x = Ib;
    Ib = Ib + 16 | 0;
    t = x + 8 | 0;
    v = x;
    if (c[a + 4608 >> 2] | 0) {
      vi(a, b);
      zi(a, b);
    }
    if ((c[a >> 2] | 0) < 1) {
      Ib = x;
      return;
    }
    w = a + 4620 | 0;
    k = a + 88 | 0;
    l = a + 44 | 0;
    m = a + 48 | 0;
    n = a + 4848 | 0;
    o = a + 4536 | 0;
    p = a + 4272 | 0;
    q = a + 4260 | 0;
    r = +(b | 0);
    j = 1;
    while (1) {
      u = c[(c[w >> 2] | 0) + (j << 2) >> 2] | 0;
      g[t >> 3] = 0.0;
      g[v >> 3] = 0.0;
      e = c[(c[k >> 2] | 0) + (u << 2) >> 2] | 0;
      if (!e) d = 0.0;else {
        d = 0.0;
        do {
          f = c[e + 4 >> 2] | 0;
          y = c[m >> 2] | 0;
          if ((c[((c[(c[n >> 2] | 0) + (f << 2) >> 2] | 0) < 0 ? y + (f << 7) + 32 | 0 : y + (f << 7) + 36 | 0) >> 2] | 0) == (u | 0)) Hi(a, f, b, t, v);else {
            if ((c[(c[o >> 2] | 0) + (f << 2) >> 2] | 0) >>> 0 < 3) h = 0.0;else h = +g[(c[p >> 2] | 0) + (f << 3) >> 3];
            d = d + +s(+h);
          }
          e = c[e + 8 >> 2] | 0;
        } while ((e | 0) != 0);
      }
      if (!(c[(c[l >> 2] | 0) + (u * 96 | 0) + 88 >> 2] | 0)) {
        i = +g[(c[q >> 2] | 0) + (u << 3) >> 3];
        d = d + (i <= 0.0 ? 0.0 : i);
      }
      d = d * r;
      h = +g[v >> 3];
      i = +Ii(a, u, +g[t >> 3], h, d, b);
      e = c[(c[k >> 2] | 0) + (u << 2) >> 2] | 0;
      if (e | 0) do {
        f = c[e + 4 >> 2] | 0;
        y = c[m >> 2] | 0;
        if ((c[((c[(c[n >> 2] | 0) + (f << 2) >> 2] | 0) < 0 ? y + (f << 7) + 36 | 0 : y + (f << 7) + 32 | 0) >> 2] | 0) == (u | 0)) Ji(a, f, i, b);
        e = c[e + 8 >> 2] | 0;
      } while ((e | 0) != 0);
      Ki(a, u, h, d, b);
      if ((j | 0) < (c[a >> 2] | 0)) j = j + 1 | 0;else break;
    }
    Ib = x;
    return;
  }
  function Hi(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0.0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) h = 0.0;else h = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    h = +s(+h) * +(d | 0);
    l = a + 4840 | 0;
    if (!(h > 0.0)) return;
    m = a + 4844 | 0;
    k = a + 4836 | 0;
    while (1) {
      a = c[(c[l >> 2] | 0) + (b << 2) >> 2] | 0;
      if (!a) {
        d = 12;
        break;
      }
      j = +g[a >> 3];
      j = j <= h ? j : h;
      g[e >> 3] = +g[e >> 3] + j;
      g[f >> 3] = +g[f >> 3] + j * +g[a + 8 >> 3];
      h = h - j;
      i = +g[a >> 3];
      if (!(h >= 0.0) | !(j >= i)) g[a >> 3] = i - j;else {
        d = a + 16 | 0;
        c[(c[l >> 2] | 0) + (b << 2) >> 2] = c[d >> 2];
        if (!(c[(c[l >> 2] | 0) + (b << 2) >> 2] | 0)) c[(c[m >> 2] | 0) + (b << 2) >> 2] = 0;
        c[d >> 2] = c[k >> 2];
        c[k >> 2] = a;
      }
      if (!(h > 0.0)) {
        d = 12;
        break;
      }
    }
    if ((d | 0) == 12) return;
  }
  function Ii(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    h = h | 0;
    var i = 0,
      j = 0,
      k = 0.0;
    j = a + 44 | 0;
    a: do switch (c[(c[j >> 2] | 0) + (b * 96 | 0) + 88 >> 2] | 0) {
      case 0:
        {
          k = +g[(c[a + 4260 >> 2] | 0) + (b << 3) >> 3];
          d = d - (k >= 0.0 ? 0.0 : k) * +(h | 0);
          if (d > 0.0) {
            g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3] = e / d;
            break a;
          }
          if (c[a + 4608 >> 2] | 0) {
            k = +Mi(a, b);
            g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3] = k;
          }
          break;
        }
      case 2:
        {
          k = +Bi(a, b, d, e, f);
          g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3] = k;
          break;
        }
      default:
        {}
    } while (0);
    i = a + 4816 | 0;
    g[i >> 3] = 0.0;
    if ((c[a + 4600 >> 2] | 0) == 3) {
      if ((c[a + 4616 >> 2] | 0) == (b | 0)) {
        h = a + 4824 | 0;
        a = (c[h >> 2] | 0) + (b << 3) | 0;
        if ((c[(c[j >> 2] | 0) + (b * 96 | 0) + 88 >> 2] | 0) == 1) d = 100.0;else {
          d = 100.0 - +g[a >> 3];
          d = d >= 0.0 ? d : 0.0;
        }
        g[i >> 3] = d;
        g[a >> 3] = 100.0;
      } else h = a + 4824 | 0;
      k = +g[(c[h >> 2] | 0) + (b << 3) >> 3];
      return +k;
    }
    d = +pi(a, b, f, h);
    g[i >> 3] = d;
    if (d == 0.0) {
      k = +g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3];
      return +k;
    }
    switch (c[(c[j >> 2] | 0) + (b * 96 | 0) + 88 >> 2] | 0) {
      case 0:
        {
          j = a + 4824 | 0;
          i = (c[j >> 2] | 0) + (b << 3) | 0;
          g[i >> 3] = d + +g[i >> 3];
          k = +g[(c[j >> 2] | 0) + (b << 3) >> 3];
          return +k;
        }
      case 2:
        {
          k = d + +g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3];
          return +k;
        }
      case 1:
        {
          g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3] = d;
          k = +g[i >> 3];
          return +k;
        }
      default:
        {
          k = +g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3];
          return +k;
        }
    }
    return 0.0;
  }
  function Ji(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = e | 0;
    var f = 0.0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0.0;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) f = 0.0;else f = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    f = +s(+f) * +(e | 0);
    if (f == 0.0) return;
    e = c[(c[a + 4844 >> 2] | 0) + (b << 2) >> 2] | 0;
    if (!e) {
      Li(a, b, f, d);
      return;
    }
    h = e + 8 | 0;
    i = +g[h >> 3];
    j = +s(+(i - d));
    if (j < +g[a + 4688 >> 3]) {
      k = +g[e >> 3];
      j = f + k;
      g[h >> 3] = (f * d + i * k) / j;
      g[e >> 3] = j;
      return;
    } else {
      Li(a, b, f, d);
      return;
    }
  }
  function Ki(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = f | 0;
    var h = 0.0;
    a: do switch (c[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 88 >> 2] | 0) {
      case 0:
        {
          d = +g[(c[a + 4260 >> 2] | 0) + (b << 3) >> 3];
          h = +g[a + 4816 >> 3] * e;
          d = +g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3] * ((d <= 0.0 ? 0.0 : d) * +(f | 0));
          break;
        }
      case 1:
        {
          h = +g[a + 4816 >> 3];
          if (h > 0.0) {
            h = h * e;
            break a;
          } else {
            h = +g[(c[a + 4824 >> 2] | 0) + (b << 3) >> 3] * e;
            break a;
          }
        }
      case 2:
        {
          h = +g[a + 4816 >> 3] * e;
          d = 0.0;
          break;
        }
      default:
        {
          h = 0.0;
          d = 0.0;
        }
    } while (0);
    b = a + 4872 | 0;
    g[b >> 3] = d + +g[b >> 3];
    a = a + 4864 | 0;
    g[a >> 3] = h + +g[a >> 3];
    return;
  }
  function Li(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    var f = 0,
      h = 0,
      i = 0,
      j = 0;
    f = a + 4836 | 0;
    h = c[f >> 2] | 0;
    do if (!h) {
      f = vk(c[a + 4832 >> 2] | 0) | 0;
      if (f | 0) {
        i = f;
        f = f + 16 | 0;
        break;
      }
      c[a + 4612 >> 2] = 1;
      return;
    } else {
      j = h + 16 | 0;
      c[f >> 2] = c[j >> 2];
      i = h;
      f = j;
    } while (0);
    g[i >> 3] = d;
    g[i + 8 >> 3] = e;
    c[f >> 2] = 0;
    f = (c[a + 4840 >> 2] | 0) + (b << 2) | 0;
    if (!(c[f >> 2] | 0)) c[f >> 2] = i;
    h = a + 4844 | 0;
    f = (c[h >> 2] | 0) + (b << 2) | 0;
    a = c[f >> 2] | 0;
    if (a) {
      c[a + 16 >> 2] = i;
      f = (c[h >> 2] | 0) + (b << 2) | 0;
    }
    c[f >> 2] = i;
    return;
  }
  function Mi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    d = c[(c[a + 88 >> 2] | 0) + (b << 2) >> 2] | 0;
    if (!d) return 0.0;
    j = c[a + 4848 >> 2] | 0;
    k = c[a + 48 >> 2] | 0;
    i = a + 4840 | 0;
    h = a + 4844 | 0;
    e = 0.0;
    a = 0;
    do {
      f = c[d + 4 >> 2] | 0;
      l = c[j + (f << 2) >> 2] | 0;
      if (!((l | 0) > -1 ? (c[k + (f << 7) + 36 >> 2] | 0) == (b | 0) : 0) ? !((l | 0) < 0 ? (c[k + (f << 7) + 32 >> 2] | 0) == (b | 0) : 0) : 0) {
        f = c[(c[h >> 2] | 0) + (f << 2) >> 2] | 0;
        if (f) {
          e = e + +g[f + 8 >> 3];
          a = a + 1 | 0;
        }
      } else {
        f = c[(c[i >> 2] | 0) + (f << 2) >> 2] | 0;
        if (f) {
          e = e + +g[f + 8 >> 3];
          a = a + 1 | 0;
        }
      }
      d = c[d + 8 >> 2] | 0;
    } while ((d | 0) != 0);
    return +((a | 0) > 0 ? e / +(a | 0) : e);
  }
  function Ni(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    r = gt((c[a >> 2] | 0) + 1 | 0, 4) | 0;
    s = gt((c[a >> 2] | 0) + 1 | 0, 4) | 0;
    if (!((r | 0) != 0 & (s | 0) != 0)) {
      q = 101;
      o = 0;
      p = c[a >> 2] | 0;
      p = (o | 0) < (p | 0);
      q = p ? 120 : q;
      ft(r);
      ft(s);
      return q | 0;
    }
    g = a + 12 | 0;
    b = c[g >> 2] | 0;
    a: do if ((b | 0) >= 1) {
      e = a + 4848 | 0;
      f = a + 48 | 0;
      d = 1;
      while (1) {
        switch (c[(c[e >> 2] | 0) + (d << 2) >> 2] | 0) {
          case 1:
            {
              b = (c[f >> 2] | 0) + (d << 7) + 36 | 0;
              h = 8;
              break;
            }
          case -1:
            {
              b = (c[f >> 2] | 0) + (d << 7) + 32 | 0;
              h = 8;
              break;
            }
          default:
            {}
        }
        if ((h | 0) == 8) {
          h = 0;
          b = r + (c[b >> 2] << 2) | 0;
          c[b >> 2] = (c[b >> 2] | 0) + 1;
          b = c[g >> 2] | 0;
        }
        if ((d | 0) < (b | 0)) d = d + 1 | 0;else break a;
      }
    } while (0);
    b = c[a >> 2] | 0;
    if ((b | 0) < 1) {
      q = 0;
      o = 0;
      p = b;
      p = (o | 0) < (p | 0);
      q = p ? 120 : q;
      ft(r);
      ft(s);
      return q | 0;
    }
    f = 1;
    e = 0;
    while (1) {
      d = e + 1 | 0;
      if (!(c[r + (f << 2) >> 2] | 0)) {
        c[s + (d << 2) >> 2] = f;
        e = d;
        b = c[a >> 2] | 0;
      }
      if ((f | 0) < (b | 0)) f = f + 1 | 0;else break;
    }
    if ((b | 0) <= 0) {
      q = 0;
      o = 0;
      p = b;
      p = (o | 0) < (p | 0);
      q = p ? 120 : q;
      ft(r);
      ft(s);
      return q | 0;
    }
    i = a + 4620 | 0;
    j = a + 88 | 0;
    k = a + 4848 | 0;
    l = a + 48 | 0;
    m = s + 4 | 0;
    d = 0;
    while (1) {
      if (!e) {
        e = Oi(a, d, r) | 0;
        if (!e) {
          e = 0;
          h = 30;
          break;
        }
        c[r + (e << 2) >> 2] = 0;
        c[m >> 2] = e;
        b = 1;
        h = e;
      } else {
        b = e;
        h = c[s + (e << 2) >> 2] | 0;
      }
      e = b + -1 | 0;
      d = d + 1 | 0;
      c[(c[i >> 2] | 0) + (d << 2) >> 2] = h;
      b = c[(c[j >> 2] | 0) + (h << 2) >> 2] | 0;
      if (b) do {
        f = c[b + 4 >> 2] | 0;
        g = c[(c[k >> 2] | 0) + (f << 2) >> 2] | 0;
        if ((((g | 0) != 0 ? (n = c[l >> 2] | 0, n = c[((g | 0) < 0 ? n + (f << 7) + 32 | 0 : n + (f << 7) + 36 | 0) >> 2] | 0, (n | 0) != (h | 0)) : 0) ? (o = r + (n << 2) | 0, p = c[o >> 2] | 0, (p | 0) > 0) : 0) ? (g = p + -1 | 0, c[o >> 2] = g, q = e + 1 | 0, (g | 0) == 0) : 0) {
          c[s + (q << 2) >> 2] = n;
          e = q;
        }
        b = c[b + 8 >> 2] | 0;
      } while ((b | 0) != 0);
      b = c[a >> 2] | 0;
      if ((d | 0) >= (b | 0)) {
        e = 0;
        h = 30;
        break;
      }
    }
    if ((h | 0) == 30) {
      q = (d | 0) < (b | 0);
      q = q ? 120 : e;
      ft(r);
      ft(s);
      return q | 0;
    }
    return 0;
  }
  function Oi(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0;
    a: do if ((b | 0) > 0) {
      g = c[a + 4620 >> 2] | 0;
      h = c[a + 88 >> 2] | 0;
      f = b;
      b: while (1) {
        b = c[h + (c[g + (f << 2) >> 2] << 2) >> 2] | 0;
        if (b | 0) {
          e = b;
          do {
            b = c[e >> 2] | 0;
            if ((c[d + (b << 2) >> 2] | 0) > 0) break b;
            e = c[e + 8 >> 2] | 0;
          } while ((e | 0) != 0);
        }
        if ((f | 0) > 1) f = f + -1 | 0;else break a;
      }
      return b | 0;
    } while (0);
    e = c[a >> 2] | 0;
    if ((e | 0) < 1) {
      d = 0;
      return d | 0;
    }
    b = 1;
    while (1) {
      if ((c[d + (b << 2) >> 2] | 0) > 0) {
        e = 12;
        break;
      }
      if ((b | 0) < (e | 0)) b = b + 1 | 0;else {
        b = 0;
        e = 12;
        break;
      }
    }
    if ((e | 0) == 12) return b | 0;
    return 0;
  }
  function Pi(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0.0,
      m = 0.0,
      n = 0,
      o = 0,
      p = 0.0;
    k = a + 12 | 0;
    if ((c[k >> 2] | 0) >= 1) {
      e = a + 4840 | 0;
      f = a + 4844 | 0;
      h = a + 48 | 0;
      i = a + 4824 | 0;
      b = 1;
      while (1) {
        c[(c[e >> 2] | 0) + (b << 2) >> 2] = 0;
        c[(c[f >> 2] | 0) + (b << 2) >> 2] = 0;
        d = c[h >> 2] | 0;
        if ((c[d + (b << 7) + 104 >> 2] | 0) == 1) {
          p = +g[d + (b << 7) + 40 >> 3];
          Li(a, b, +g[d + (b << 7) + 48 >> 3] * .785398 * (p * p), +g[(c[i >> 2] | 0) + (c[d + (b << 7) + 36 >> 2] << 3) >> 3]);
        }
        if ((b | 0) < (c[k >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    d = a + 4 | 0;
    if ((c[d >> 2] | 0) < 1) return;
    e = a + 52 | 0;
    f = a + 44 | 0;
    h = a + 4840 | 0;
    i = a + 4844 | 0;
    b = 1;
    while (1) {
      j = c[e >> 2] | 0;
      if (!(+g[j + (b * 120 | 0) + 8 >> 3] == 0.0) ? (l = +g[(c[f >> 2] | 0) + ((c[j + (b * 120 | 0) >> 2] | 0) * 96 | 0) + 64 >> 3], m = +g[j + (b * 120 | 0) + 56 >> 3], n = (c[k >> 2] | 0) + b | 0, c[(c[h >> 2] | 0) + (n << 2) >> 2] = 0, c[(c[i >> 2] | 0) + (n << 2) >> 2] = 0, Li(a, n, m, l), o = c[e >> 2] | 0, (c[o + (b * 120 | 0) + 96 >> 2] | 0) == 1) : 0) {
        p = m - +g[o + (b * 120 | 0) + 104 >> 3];
        p = p <= 0.0 ? 0.0 : p;
        g[c[(c[h >> 2] | 0) + (n << 2) >> 2] >> 3] = p;
        Li(a, n, m - p, l);
      }
      if ((b | 0) < (c[d >> 2] | 0)) b = b + 1 | 0;else break;
    }
    return;
  }
  function Qi(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = (c[a + 4840 >> 2] | 0) + (b << 2) | 0;
    d = c[e >> 2] | 0;
    a = a + 4844 | 0;
    c[e >> 2] = c[(c[a >> 2] | 0) + (b << 2) >> 2];
    c[(c[a >> 2] | 0) + (b << 2) >> 2] = d;
    if (!d) return;
    a = 0;
    while (1) {
      e = d + 16 | 0;
      b = c[e >> 2] | 0;
      c[e >> 2] = a;
      if (!b) break;else {
        a = d;
        d = b;
      }
    }
    return;
  }
  function Ri(a) {
    a = a | 0;
    var b = 0;
    b = c[a + 1200 >> 2] | 0;
    if (!b) {
      b = 0;
      return b | 0;
    }
    if (!(qr(a + 1269 | 0, b) | 0)) {
      b = 303;
      return b | 0;
    }
    Si(a);
    b = 0;
    return b | 0;
  }
  function Si(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    b = Ib;
    Ib = Ib + 96 | 0;
    e = b + 80 | 0;
    d = b;
    f = b + 88 | 0;
    Ha(f | 0) | 0;
    g = a + 1789 | 0;
    Oq(g, ta(f | 0) | 0) | 0;
    c[a + 1252 >> 2] = 1;
    c[a + 1248 >> 2] = 2;
    f = a + 1200 | 0;
    Sq(10560, 44, 1, c[f >> 2] | 0) | 0;
    Rq(g, c[f >> 2] | 0) | 0;
    Ti(a, 10605);
    Ti(a, 10672);
    Ti(a, 10739);
    Ti(a, 10806);
    c[e >> 2] = 2;
    c[e + 4 >> 2] = 2;
    bq(d, 10873, e);
    Ti(a, d);
    Ti(a, 10605);
    Ti(a, 21176);
    Ib = b;
    return;
  }
  function Ti(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    i = Ib;
    Ib = Ib + 16 | 0;
    h = i + 8 | 0;
    g = i;
    e = a + 1200 | 0;
    d = c[e >> 2] | 0;
    if (!d) {
      Ib = i;
      return;
    }
    if ((c[a + 1212 >> 2] | 0) != 0 ? (f = a + 1248 | 0, (c[f >> 2] | 0) == (c[a + 1208 >> 2] | 0)) : 0) {
      k = a + 1252 | 0;
      j = (c[k >> 2] | 0) + 1 | 0;
      c[k >> 2] = j;
      c[g >> 2] = j;
      c[g + 4 >> 2] = a + 5336;
      if ((er(d, 10942, g) | 0) < 0) c[a + 1244 >> 2] = 1;
      c[f >> 2] = 3;
      d = c[e >> 2] | 0;
    }
    c[h >> 2] = b;
    if ((er(d, 10968, h) | 0) < 0) c[a + 1244 >> 2] = 1;
    k = a + 1248 | 0;
    c[k >> 2] = (c[k >> 2] | 0) + 1;
    Ib = i;
    return;
  }
  function Ui(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = a + 1200 | 0;
    if (!(c[e >> 2] | 0)) {
      e = 0;
      return e | 0;
    }
    d = Vq(b, 17097) | 0;
    if (!d) {
      e = 303;
      return e | 0;
    }
    $q(c[e >> 2] | 0);
    a = a + 1269 | 0;
    b = Vq(a, 10974) | 0;
    c[e >> 2] = b;
    if (!b) $q(d);else {
      b = lr(b) | 0;
      if ((b | 0) != -1) do {
        or(b, d);
        b = lr(c[e >> 2] | 0) | 0;
      } while ((b | 0) != -1);
      $q(c[e >> 2] | 0);
      $q(d);
    }
    d = Vq(a, 17103) | 0;
    c[e >> 2] = d;
    e = (d | 0) == 0 ? 303 : 0;
    return e | 0;
  }
  function Vi(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    f = b + 1200 | 0;
    j = b + 1244 | 0;
    c[j >> 2] = 0;
    g = b + 1212 | 0;
    h = c[g >> 2] | 0;
    e = b + 1529 | 0;
    if (((h | 0) != 0 ? (Kq(e) | 0) == 0 : 0) ? (c[f >> 2] | 0) != 0 : 0) {
      if (c[b + 1232 >> 2] | 0) Wi(b);
      d = Xi(b) | 0;
    } else i = 7;
    do if ((i | 0) == 7) if (!(a[e >> 0] | 0)) d = 0;else {
      if ((xh(e, b + 128 | 0) | 0) == 0 ? (xh(e, b + 1269 | 0) | 0) == 0 : 0) {
        d = c[f >> 2] | 0;
        i = Vq(e, 10976) | 0;
        c[f >> 2] = i;
        if (!i) {
          c[f >> 2] = d;
          c[g >> 2] = h;
          d = 303;
          break;
        }
        c[g >> 2] = 1;
        Si(b);
        if (c[b + 1220 >> 2] | 0) Yi(b);
        if (c[b + 1232 >> 2] | 0) Wi(b);
        i = Xi(b) | 0;
        $q(c[f >> 2] | 0);
        c[f >> 2] = d;
        c[g >> 2] = h;
        d = i;
        break;
      }
      if (c[b + 1232 >> 2] | 0) Wi(b);
      d = Xi(b) | 0;
    } while (0);
    if (!(c[j >> 2] | 0)) return d | 0;
    di(b, 309);
    return d | 0;
  }
  function Wi(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0.0,
      t = 0.0,
      u = 0.0,
      v = 0.0,
      w = 0.0;
    r = Ib;
    Ib = Ib + 1120 | 0;
    p = r + 1104 | 0;
    q = r + 1088 | 0;
    o = r + 1032 | 0;
    b = r;
    k = a + 20 | 0;
    if (!(c[k >> 2] | 0)) {
      Ib = r;
      return;
    }
    Ti(a, 17159);
    aj(a, 1, 0);
    if ((c[k >> 2] | 0) < 1) d = 0.0;else {
      l = a + 56 | 0;
      m = a + 1248 | 0;
      n = a + 1208 | 0;
      i = a + 48 | 0;
      d = 0.0;
      h = 1;
      while (1) {
        j = c[l >> 2] | 0;
        f = j + (h << 7) + 120 | 0;
        e = +g[f >> 3];
        d = d + e;
        if ((c[m >> 2] | 0) == (c[n >> 2] | 0)) {
          aj(a, 1, 1);
          e = +g[f >> 3];
        }
        w = +g[j + (h << 7) + 80 >> 3];
        v = +g[j + (h << 7) + 88 >> 3];
        u = +g[j + (h << 7) + 96 >> 3];
        t = +g[j + (h << 7) + 104 >> 3];
        s = +g[j + (h << 7) + 112 >> 3];
        c[o >> 2] = (c[i >> 2] | 0) + (c[j + (h << 7) >> 2] << 7);
        g[o + 8 >> 3] = w;
        g[o + 16 >> 3] = v;
        g[o + 24 >> 3] = u;
        g[o + 32 >> 3] = t;
        g[o + 40 >> 3] = s;
        g[o + 48 >> 3] = e;
        bq(b, 12833, o);
        Ti(a, b);
        if ((h | 0) < (c[k >> 2] | 0)) h = h + 1 | 0;else break;
      }
    }
    cj(b, 63);
    Ti(a, b);
    n = a + 4432 | 0;
    o = a + 4424 | 0;
    w = +g[n >> 3] * +g[o >> 3];
    c[q >> 2] = 21176;
    g[q + 8 >> 3] = w;
    bq(b, 12875, q);
    Ti(a, b);
    w = d + +g[n >> 3] * +g[o >> 3];
    c[p >> 2] = 21176;
    g[p + 8 >> 3] = w;
    bq(b, 12901, p);
    Ti(a, b);
    Ti(a, 17159);
    Ib = r;
    return;
  }
  function Xi(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0;
    b = c[a + 4216 >> 2] | 0;
    k = a + 1236 | 0;
    if ((c[k >> 2] | 0) == 0 ? (c[a + 1240 >> 2] | 0) == 0 : 0) {
      u = 0;
      return u | 0;
    }
    h = (c[a + 2232 >> 2] | 0) + ((c[a + 2144 >> 2] | 0) + ((c[a + 2056 >> 2] | 0) + ((c[a + 1968 >> 2] | 0) + (c[a + 1880 >> 2] | 0)))) | 0;
    e = (c[a + 3112 >> 2] | 0) + ((c[a + 3024 >> 2] | 0) + ((c[a + 2936 >> 2] | 0) + ((c[a + 2848 >> 2] | 0) + ((c[a + 2760 >> 2] | 0) + ((c[a + 2672 >> 2] | 0) + ((c[a + 2584 >> 2] | 0) + ((c[a + 2496 >> 2] | 0) + ((c[a + 2408 >> 2] | 0) + (c[a + 2320 >> 2] | 0))))))))) | 0;
    if (!(e | h)) {
      u = 0;
      return u | 0;
    }
    if (!b) {
      b = Vq(a + 3924 | 0, 12467) | 0;
      if (!b) {
        u = 106;
        return u | 0;
      }
    }
    d = c[a >> 2] | 0;
    l = a + 12 | 0;
    m = c[l >> 2] | 0;
    d = ((d | 0) < (m | 0) ? m : d) + 1 | 0;
    m = gt(8, 4) | 0;
    if (!m) {
      u = 101;
      return u | 0;
    }
    g = gt(d, 4) | 0;
    c[m >> 2] = g;
    j = gt(d, 4) | 0;
    n = m + 4 | 0;
    c[n >> 2] = j;
    f = gt(d, 4) | 0;
    o = m + 8 | 0;
    c[o >> 2] = f;
    v = gt(d, 4) | 0;
    p = m + 12 | 0;
    c[p >> 2] = v;
    w = gt(d, 4) | 0;
    q = m + 16 | 0;
    c[q >> 2] = w;
    x = gt(d, 4) | 0;
    r = m + 20 | 0;
    c[r >> 2] = x;
    y = gt(d, 4) | 0;
    s = m + 24 | 0;
    c[s >> 2] = y;
    d = gt(d, 4) | 0;
    i = m + 28 | 0;
    c[i >> 2] = d;
    g = (d | 0) == 0 | ((y | 0) == 0 | ((x | 0) == 0 | ((w | 0) == 0 | ((v | 0) == 0 | ((f | 0) == 0 | ((j | 0) == 0 | (g | 0) == 0))))));
    j = g ? 101 : 0;
    a: do if (!g ? (dr(b, c[a + 4212 >> 2] | 0, 0), u = a + 1172 | 0, c[u >> 2] = c[a + 1164 >> 2], t = a + 1204 | 0, (c[t >> 2] | 0) >= 1) : 0) {
      e = (e | 0) > 0;
      f = a + 1240 | 0;
      g = a + 1160 | 0;
      if ((h | 0) > 0) {
        d = 1;
        while (1) {
          pr((c[m >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          pr((c[n >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          pr((c[o >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          pr((c[p >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          if ((c[k >> 2] | 0) > 0) _i(a, m);
          pr((c[m >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[n >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[o >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[p >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[q >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[r >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[s >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[i >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          if (e ? (c[f >> 2] | 0) > 0 : 0) $i(a, m);
          c[u >> 2] = (c[u >> 2] | 0) + (c[g >> 2] | 0);
          if ((d | 0) < (c[t >> 2] | 0)) d = d + 1 | 0;else break;
        }
      } else {
        if (!e) {
          d = 1;
          while (1) {
            pr((c[m >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
            pr((c[n >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
            pr((c[o >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
            pr((c[p >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
            pr((c[m >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            pr((c[n >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            pr((c[o >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            pr((c[p >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            pr((c[q >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            pr((c[r >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            pr((c[s >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            pr((c[i >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
            c[u >> 2] = (c[u >> 2] | 0) + (c[g >> 2] | 0);
            if ((d | 0) < (c[t >> 2] | 0)) d = d + 1 | 0;else break a;
          }
        }
        d = 1;
        while (1) {
          pr((c[m >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          pr((c[n >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          pr((c[o >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          pr((c[p >> 2] | 0) + 4 | 0, c[a >> 2] | 0, b) | 0;
          pr((c[m >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[n >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[o >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[p >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[q >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[r >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[s >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          pr((c[i >> 2] | 0) + 4 | 0, c[l >> 2] | 0, b) | 0;
          if ((c[f >> 2] | 0) > 0) $i(a, m);
          c[u >> 2] = (c[u >> 2] | 0) + (c[g >> 2] | 0);
          if ((d | 0) < (c[t >> 2] | 0)) d = d + 1 | 0;else break;
        }
      }
    } while (0);
    $q(b);
    ft(c[m >> 2] | 0);
    ft(c[n >> 2] | 0);
    ft(c[o >> 2] | 0);
    ft(c[p >> 2] | 0);
    ft(c[q >> 2] | 0);
    ft(c[r >> 2] | 0);
    ft(c[s >> 2] | 0);
    ft(c[i >> 2] | 0);
    ft(m);
    y = j;
    return y | 0;
  }
  function Yi(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0;
    M = Ib;
    Ib = Ib + 1312 | 0;
    k = M + 1304 | 0;
    j = M + 1296 | 0;
    h = M + 1288 | 0;
    f = M + 1280 | 0;
    L = M + 1264 | 0;
    K = M + 1256 | 0;
    J = M + 1248 | 0;
    I = M + 1240 | 0;
    H = M + 1232 | 0;
    G = M + 1216 | 0;
    F = M + 1208 | 0;
    C = M + 1200 | 0;
    B = M + 1192 | 0;
    A = M + 1184 | 0;
    z = M + 1176 | 0;
    y = M + 1168 | 0;
    x = M + 1160 | 0;
    w = M + 1152 | 0;
    v = M + 1136 | 0;
    u = M + 1120 | 0;
    t = M + 1112 | 0;
    s = M + 1096 | 0;
    p = M + 1088 | 0;
    o = M + 1080 | 0;
    n = M + 1072 | 0;
    m = M + 1064 | 0;
    r = M + 1056 | 0;
    q = M + 1048 | 0;
    l = M + 1040 | 0;
    e = M + 1032 | 0;
    E = M;
    d = b + 5336 | 0;
    if (Kq(d) | 0) {
      c[e >> 2] = d;
      bq(E, 10979, e);
      Ti(b, E);
    }
    d = b + 5416 | 0;
    if (Kq(d) | 0) {
      c[f >> 2] = d;
      bq(E, 10979, f);
      Ti(b, E);
    }
    d = b + 5496 | 0;
    if (Kq(d) | 0) {
      c[h >> 2] = d;
      bq(E, 10979, h);
      Ti(b, E);
    }
    Ti(b, 17159);
    c[j >> 2] = b + 128;
    bq(E, 10986, j);
    Ti(b, E);
    c[k >> 2] = c[b + 8 >> 2];
    bq(E, 11029, k);
    Ti(b, E);
    j = b + 4 | 0;
    f = c[j >> 2] | 0;
    if ((f | 0) < 1) d = 0;else {
      h = c[b + 52 >> 2] | 0;
      d = 0;
      e = 1;
      while (1) {
        d = d + (+g[h + (e * 120 | 0) + 8 >> 3] == 0.0 & 1) | 0;
        if ((e | 0) == (f | 0)) break;else e = e + 1 | 0;
      }
    }
    c[l >> 2] = d;
    bq(E, 11073, l);
    Ti(b, E);
    c[q >> 2] = (c[j >> 2] | 0) - d;
    bq(E, 11117, q);
    Ti(b, E);
    c[r >> 2] = c[b + 16 >> 2];
    bq(E, 11161, r);
    Ti(b, E);
    c[m >> 2] = c[b + 20 >> 2];
    bq(E, 11205, m);
    Ti(b, E);
    c[n >> 2] = c[b + 24 >> 2];
    bq(E, 11249, n);
    Ti(b, E);
    c[o >> 2] = c[3440 + (c[b + 4500 >> 2] << 2) >> 2];
    bq(E, 11293, o);
    Ti(b, E);
    c[p >> 2] = c[3464 + (c[b + 4496 >> 2] << 2) >> 2];
    bq(E, 11336, p);
    Ti(b, E);
    k = b + 5032 | 0;
    l = b + 3256 | 0;
    g[s >> 3] = +g[k >> 3] * +(c[b + 1148 >> 2] | 0);
    c[s + 8 >> 2] = l;
    bq(E, 11379, s);
    Ti(b, E);
    g[t >> 3] = +g[b + 4352 >> 3];
    bq(E, 11428, t);
    Ti(b, E);
    i = +g[b + 4368 >> 3];
    if (i > 0.0) {
      g[u >> 3] = i * +g[b + 4920 >> 3];
      c[u + 8 >> 2] = b + 2024;
      bq(E, 11474, u);
      Ti(b, E);
    }
    i = +g[b + 4360 >> 3];
    if (i > 0.0) {
      g[v >> 3] = i * +g[b + 4960 >> 3];
      c[v + 8 >> 2] = b + 2464;
      bq(E, 11523, v);
      Ti(b, E);
    }
    c[w >> 2] = c[b + 4516 >> 2];
    bq(E, 11572, w);
    Ti(b, E);
    c[x >> 2] = c[b + 4520 >> 2];
    bq(E, 11616, x);
    Ti(b, E);
    g[y >> 3] = +g[b + 4376 >> 3];
    bq(E, 11660, y);
    Ti(b, E);
    c[z >> 2] = c[b + 4508 >> 2];
    bq(E, 11706, z);
    Ti(b, E);
    j = b + 4600 | 0;
    d = c[j >> 2] | 0;
    h = b + 1192 | 0;
    a: do if ((d | 0) != 0 ? (c[h >> 2] | 0) != 0 : 0) switch (d | 0) {
      case 1:
        {
          c[A >> 2] = b + 4624;
          bq(E, 11795, A);
          break a;
        }
      case 3:
        {
          c[B >> 2] = (c[b + 44 >> 2] | 0) + ((c[b + 4616 >> 2] | 0) * 96 | 0);
          bq(E, 11838, B);
          break a;
        }
      case 2:
        {
          c[C >> 2] = 11897;
          tr(E, C);
          break a;
        }
      default:
        break a;
    } else D = 12; while (0);
    if ((D | 0) == 12) {
      d = E;
      e = 11750;
      f = d + 45 | 0;
      do {
        a[d >> 0] = a[e >> 0] | 0;
        d = d + 1 | 0;
        e = e + 1 | 0;
      } while ((d | 0) < (f | 0));
    }
    Ti(b, E);
    if (c[j >> 2] | 0 ? (c[h >> 2] | 0) > 0 : 0) {
      g[F >> 3] = +(c[b + 1180 >> 2] | 0) / 60.0;
      bq(E, 11941, F);
      Ti(b, E);
      g[G >> 3] = +g[b + 4688 >> 3] * +g[b + 4936 >> 3];
      c[G + 8 >> 2] = b + 2200;
      bq(E, 11991, G);
      Ti(b, E);
    }
    g[H >> 3] = +g[b + 4392 >> 3];
    bq(E, 12040, H);
    Ti(b, E);
    g[I >> 3] = +g[b + 4384 >> 3] / .000011;
    bq(E, 12086, I);
    Ti(b, E);
    g[J >> 3] = +g[b + 4696 >> 3] / 1.3e-08;
    bq(E, 12132, J);
    Ti(b, E);
    g[K >> 3] = +g[b + 4344 >> 3];
    bq(E, 12178, K);
    Ti(b, E);
    g[L >> 3] = +g[k >> 3] * +(c[h >> 2] | 0);
    c[L + 8 >> 2] = l;
    bq(E, 12224, L);
    Ti(b, E);
    if (!(c[b + 1212 >> 2] | 0)) {
      Ti(b, 17159);
      Ib = M;
      return;
    }
    d = E;
    e = 12273;
    f = d + 24 | 0;
    do {
      a[d >> 0] = a[e >> 0] | 0;
      d = d + 1 | 0;
      e = e + 1 | 0;
    } while ((d | 0) < (f | 0));
    Ti(b, E);
    e = b + 1236 | 0;
    d = c[e >> 2] | 0;
    if (!d) {
      Ti(b, 12297);
      d = c[e >> 2] | 0;
    }
    if ((d | 0) == 1) {
      Ti(b, 12313);
      d = c[e >> 2] | 0;
    }
    if ((d | 0) == 2) Ti(b, 12330);
    Zi(b, 1, 4);
    e = b + 1240 | 0;
    d = c[e >> 2] | 0;
    if (!d) {
      Ti(b, 12352);
      d = c[e >> 2] | 0;
    }
    if ((d | 0) == 1) {
      Ti(b, 12368);
      d = c[e >> 2] | 0;
    }
    if ((d | 0) == 2) Ti(b, 12385);
    Zi(b, 6, 9);
    Ti(b, 17159);
    Ib = M;
    return;
  }
  function Zi(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 48 | 0;
    j = k + 24 | 0;
    i = k;
    if ((b | 0) > (d | 0)) {
      Ib = k;
      return;
    }
    h = a + 5080 | 0;
    while (1) {
      f = a + 1816 + (b * 88 | 0) | 0;
      e = +g[a + 1816 + (b * 88 | 0) + 72 >> 3];
      if (e < 1.0e10) {
        c[i >> 2] = f;
        g[i + 8 >> 3] = e;
        c[i + 16 >> 2] = a + 1816 + (b * 88 | 0) + 32;
        bq(h, 12407, i);
        Ti(a, h);
      }
      e = +g[a + 1816 + (b * 88 | 0) + 80 >> 3];
      if (e > -1.0e10) {
        c[j >> 2] = f;
        g[j + 8 >> 3] = e;
        c[j + 16 >> 2] = a + 1816 + (b * 88 | 0) + 32;
        bq(h, 12437, j);
        Ti(a, h);
      }
      if ((b | 0) < (d | 0)) b = b + 1 | 0;else break;
    }
    Ib = k;
    return;
  }
  function _i(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0.0,
      l = 0.0,
      m = 0.0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0,
      S = 0,
      T = 0,
      U = 0,
      V = 0,
      W = 0,
      X = 0,
      Y = 0,
      Z = 0,
      _ = 0,
      $ = 0;
    $ = Ib;
    Ib = Ib + 1360 | 0;
    Y = $ + 1344 | 0;
    X = $ + 1328 | 0;
    W = $ + 1320 | 0;
    V = $ + 1304 | 0;
    U = $ + 1296 | 0;
    T = $ + 1280 | 0;
    S = $ + 1272 | 0;
    _ = $ + 1256 | 0;
    Z = $ + 1240 | 0;
    R = $ + 1232 | 0;
    Q = $ + 1224 | 0;
    z = $ + 192 | 0;
    K = $ + 176 | 0;
    M = $;
    N = b + 1200 | 0;
    aj(b, 2, 0);
    e = c[b >> 2] | 0;
    if ((e | 0) < 1) {
      Ti(b, 17159);
      Ib = $;
      return;
    }
    O = b + 44 | 0;
    P = b + 4904 | 0;
    o = b + 1236 | 0;
    p = b + 1248 | 0;
    q = b + 1208 | 0;
    r = b + 8 | 0;
    t = M + 8 | 0;
    u = d + 4 | 0;
    v = M + 16 | 0;
    w = d + 8 | 0;
    x = M + 24 | 0;
    y = d + 12 | 0;
    A = M + 32 | 0;
    B = b + 1880 | 0;
    C = b + 1968 | 0;
    D = b + 1884 | 0;
    E = b + 2056 | 0;
    F = b + 1972 | 0;
    G = b + 2144 | 0;
    H = b + 2060 | 0;
    I = b + 2232 | 0;
    J = b + 2148 | 0;
    L = b + 2236 | 0;
    n = 1;
    while (1) {
      h = c[O >> 2] | 0;
      i = +g[h + (n * 96 | 0) + 48 >> 3] * +g[P >> 3];
      g[M >> 3] = i;
      j = +f[(c[d >> 2] | 0) + (n << 2) >> 2];
      g[t >> 3] = j;
      k = +f[(c[u >> 2] | 0) + (n << 2) >> 2];
      g[v >> 3] = k;
      l = +f[(c[w >> 2] | 0) + (n << 2) >> 2];
      g[x >> 3] = l;
      m = +f[(c[y >> 2] | 0) + (n << 2) >> 2];
      g[A >> 3] = m;
      if (!((c[o >> 2] | 0) != 1 ? (c[h + (n * 96 | 0) + 80 >> 2] | 0) == 0 : 0)) if (bj(N, M, 0, 4) | 0) {
        if ((c[p >> 2] | 0) == (c[q >> 2] | 0)) aj(b, 2, 1);
        c[Q >> 2] = h + (n * 96 | 0);
        bq(z, 12470, Q);
        if ((c[B >> 2] | 0) == 1) {
          if (+s(+i) > 1.0e6) {
            g[R >> 3] = i;
            bq(K, 12481, R);
          } else {
            c[Z >> 2] = c[D >> 2];
            g[Z + 8 >> 3] = i;
            bq(K, 12488, Z);
          }
          kr(z, K) | 0;
        }
        if ((c[C >> 2] | 0) == 1) {
          if (+s(+j) > 1.0e6) {
            g[S >> 3] = j;
            bq(K, 12481, S);
          } else {
            c[_ >> 2] = c[F >> 2];
            g[_ + 8 >> 3] = j;
            bq(K, 12488, _);
          }
          kr(z, K) | 0;
        }
        if ((c[E >> 2] | 0) == 1) {
          if (+s(+k) > 1.0e6) {
            g[U >> 3] = k;
            bq(K, 12481, U);
          } else {
            c[T >> 2] = c[H >> 2];
            g[T + 8 >> 3] = k;
            bq(K, 12488, T);
          }
          kr(z, K) | 0;
        }
        if ((c[G >> 2] | 0) == 1) {
          if (+s(+l) > 1.0e6) {
            g[W >> 3] = l;
            bq(K, 12481, W);
          } else {
            c[V >> 2] = c[J >> 2];
            g[V + 8 >> 3] = l;
            bq(K, 12488, V);
          }
          kr(z, K) | 0;
        }
        if ((c[I >> 2] | 0) == 1) {
          if (+s(+m) > 1.0e6) {
            g[Y >> 3] = m;
            bq(K, 12481, Y);
          } else {
            c[X >> 2] = c[L >> 2];
            g[X + 8 >> 3] = m;
            bq(K, 12488, X);
          }
          kr(z, K) | 0;
        }
        if ((n | 0) > (c[r >> 2] | 0)) {
          h = z + (Kq(z) | 0) | 0;
          a[h >> 0] = a[12495] | 0;
          a[h + 1 >> 0] = a[12496] | 0;
          a[h + 2 >> 0] = a[12497] | 0;
          h = 3416 + ((ej(b, n) | 0) << 2) | 0;
          kr(z, c[h >> 2] | 0) | 0;
        }
        Ti(b, z);
        e = c[b >> 2] | 0;
      }
      if ((n | 0) < (e | 0)) n = n + 1 | 0;else break;
    }
    Ti(b, 17159);
    Ib = $;
    return;
  }
  function $i(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0;
    Q = Ib;
    Ib = Ib + 1264 | 0;
    P = Q + 1248 | 0;
    O = Q + 1240 | 0;
    N = Q + 1232 | 0;
    M = Q + 1224 | 0;
    t = Q + 192 | 0;
    E = Q + 176 | 0;
    I = Q;
    J = b + 1200 | 0;
    K = c[b + 48 >> 2] | 0;
    aj(b, 3, 0);
    L = b + 12 | 0;
    e = c[L >> 2] | 0;
    if ((e | 0) < 1) {
      Ti(b, 17159);
      Ib = Q;
      return;
    }
    j = b + 4944 | 0;
    k = I + 40 | 0;
    l = b + 4952 | 0;
    m = I + 48 | 0;
    n = b + 1240 | 0;
    o = b + 1248 | 0;
    p = b + 1208 | 0;
    q = I + 56 | 0;
    r = d + 4 | 0;
    u = I + 64 | 0;
    v = d + 8 | 0;
    w = I + 72 | 0;
    x = d + 12 | 0;
    y = I + 80 | 0;
    z = d + 16 | 0;
    A = I + 88 | 0;
    B = d + 20 | 0;
    C = I + 96 | 0;
    D = d + 24 | 0;
    F = I + 104 | 0;
    G = d + 28 | 0;
    H = I + 112 | 0;
    i = 1;
    while (1) {
      g[k >> 3] = +g[K + (i << 7) + 48 >> 3] * +g[j >> 3];
      g[m >> 3] = +g[K + (i << 7) + 40 >> 3] * +g[l >> 3];
      g[q >> 3] = +f[(c[d >> 2] | 0) + (i << 2) >> 2];
      g[u >> 3] = +f[(c[r >> 2] | 0) + (i << 2) >> 2];
      g[w >> 3] = +f[(c[v >> 2] | 0) + (i << 2) >> 2];
      g[y >> 3] = +f[(c[x >> 2] | 0) + (i << 2) >> 2];
      g[A >> 3] = +f[(c[z >> 2] | 0) + (i << 2) >> 2];
      g[C >> 3] = +f[(c[B >> 2] | 0) + (i << 2) >> 2];
      g[F >> 3] = +f[(c[D >> 2] | 0) + (i << 2) >> 2];
      g[H >> 3] = +f[(c[G >> 2] | 0) + (i << 2) >> 2];
      if (!((c[n >> 2] | 0) != 1 ? (c[K + (i << 7) + 116 >> 2] | 0) == 0 : 0)) if (bj(J, I, 6, 14) | 0) {
        if ((c[o >> 2] | 0) == (c[p >> 2] | 0)) aj(b, 3, 1);
        c[M >> 2] = K + (i << 7);
        bq(t, 12470, M);
        e = 5;
        do {
          if ((c[b + 1816 + (e * 88 | 0) + 64 >> 2] | 0) == 1) {
            h = +g[I + (e << 3) >> 3];
            do if ((e | 0) != 11) {
              if (+s(+h) > 1.0e6) {
                g[O >> 3] = h;
                bq(E, 12481, O);
                break;
              } else {
                c[P >> 2] = c[b + 1816 + (e * 88 | 0) + 68 >> 2];
                g[P + 8 >> 3] = h;
                bq(E, 12488, P);
                break;
              }
            } else {
              c[N >> 2] = c[64 + ((!(h <= 2.0) ? h == 4.0 ? 4 : 3 : 2) << 2) >> 2];
              bq(E, 12476, N);
            } while (0);
            kr(t, E) | 0;
          }
          e = e + 1 | 0;
        } while ((e | 0) != 15);
        e = c[K + (i << 7) + 104 >> 2] | 0;
        if ((e | 0) > 1) {
          R = t + (Kq(t) | 0) | 0;
          a[R >> 0] = a[12495] | 0;
          a[R + 1 >> 0] = a[12496] | 0;
          a[R + 2 >> 0] = a[12497] | 0;
          kr(t, c[16 + (e << 2) >> 2] | 0) | 0;
        }
        Ti(b, t);
        e = c[L >> 2] | 0;
      }
      if ((i | 0) < (e | 0)) i = i + 1 | 0;else break;
    }
    Ti(b, 17159);
    Ib = Q;
    return;
  }
  function aj(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0,
      S = 0,
      T = 0,
      U = 0,
      V = 0,
      W = 0,
      X = 0,
      Y = 0,
      Z = 0,
      _ = 0,
      $ = 0,
      aa = 0;
    _ = Ib;
    Ib = Ib + 4480 | 0;
    G = _ + 4472 | 0;
    F = _ + 4464 | 0;
    C = _ + 4456 | 0;
    B = _ + 4448 | 0;
    x = _ + 4440 | 0;
    w = _ + 4432 | 0;
    V = _ + 4424 | 0;
    W = _ + 4416 | 0;
    U = _ + 4408 | 0;
    T = _ + 4400 | 0;
    S = _ + 4392 | 0;
    R = _ + 4384 | 0;
    Q = _ + 4376 | 0;
    P = _ + 4368 | 0;
    O = _ + 4360 | 0;
    N = _ + 4352 | 0;
    M = _ + 4344 | 0;
    L = _ + 4336 | 0;
    I = _ + 4328 | 0;
    H = _ + 4320 | 0;
    E = _ + 4312 | 0;
    D = _ + 4304 | 0;
    z = _ + 4296 | 0;
    y = _ + 4288 | 0;
    v = _ + 4280 | 0;
    u = _ + 4272 | 0;
    t = _ + 4264 | 0;
    s = _ + 4256 | 0;
    k = _ + 4248 | 0;
    j = _ + 4240 | 0;
    i = _ + 4232 | 0;
    K = _ + 4224 | 0;
    J = _ + 4216 | 0;
    r = _ + 4208 | 0;
    q = _ + 4200 | 0;
    p = _ + 4192 | 0;
    o = _ + 4184 | 0;
    m = _ + 4176 | 0;
    l = _ + 4168 | 0;
    h = _ + 4160 | 0;
    n = _ + 4152 | 0;
    A = _ + 3120 | 0;
    X = _ + 2080 | 0;
    Y = _ + 1040 | 0;
    Z = _;
    if (c[b + 1212 >> 2] | 0 ? (f = b + 1248 | 0, aa = c[f >> 2] | 0, g = b + 1208 | 0, $ = c[g >> 2] | 0, (aa + 11 | 0) > ($ | 0) & (aa | 0) < ($ | 0)) : 0) do Ti(b, 17159); while ((c[f >> 2] | 0) < (c[g >> 2] | 0));
    Ti(b, 17159);
    switch (d | 0) {
      case 0:
        {
          d = A;
          g = 12498;
          h = d + 18 | 0;
          do {
            a[d >> 0] = a[g >> 0] | 0;
            d = d + 1 | 0;
            g = g + 1 | 0;
          } while ((d | 0) < (h | 0));
          if (e | 0) {
            d = A + (Kq(A) | 0) | 0;
            g = 12516;
            h = d + 13 | 0;
            do {
              a[d >> 0] = a[g >> 0] | 0;
              d = d + 1 | 0;
              g = g + 1 | 0;
            } while ((d | 0) < (h | 0));
          }
          Ti(b, A);
          cj(A, 70);
          Ti(b, A);
          Ib = _;
          return;
        }
      case 1:
        {
          if ((c[b + 1116 >> 2] | 0) == 1) {
            a[X >> 0] = a[12529] | 0;
            a[X + 1 >> 0] = a[12530] | 0;
            a[X + 2 >> 0] = a[12531] | 0;
            a[X + 3 >> 0] = a[12532] | 0;
            a[X + 4 >> 0] = a[12533] | 0;
            a[X + 5 >> 0] = a[12534] | 0;
          } else {
            a[X >> 0] = a[12535] | 0;
            a[X + 1 >> 0] = a[12536] | 0;
            a[X + 2 >> 0] = a[12537] | 0;
            a[X + 3 >> 0] = a[12538] | 0;
            a[X + 4 >> 0] = a[12539] | 0;
            a[X + 5 >> 0] = a[12540] | 0;
          }
          d = A;
          g = 12541;
          h = d + 14 | 0;
          do {
            a[d >> 0] = a[g >> 0] | 0;
            d = d + 1 | 0;
            g = g + 1 | 0;
          } while ((d | 0) < (h | 0));
          if (e | 0) {
            d = A + (Kq(A) | 0) | 0;
            g = 12516;
            h = d + 13 | 0;
            do {
              a[d >> 0] = a[g >> 0] | 0;
              d = d + 1 | 0;
              g = g + 1 | 0;
            } while ((d | 0) < (h | 0));
          }
          Ti(b, A);
          cj(A, 63);
          Ti(b, A);
          d = A;
          g = 12555;
          h = d + 64 | 0;
          do {
            a[d >> 0] = a[g >> 0] | 0;
            d = d + 1 | 0;
            g = g + 1 | 0;
          } while ((d | 0) < (h | 0));
          Ti(b, A);
          c[n >> 2] = X;
          bq(A, 12619, n);
          Ti(b, A);
          cj(A, 63);
          Ti(b, A);
          Ib = _;
          return;
        }
      case 2:
        {
          d = c[b + 1216 >> 2] | 0;
          a: do switch (d | 0) {
            case 4:
              {
                c[h >> 2] = 12697;
                bq(A, 12680, h);
                f = A;
                break;
              }
            case 0:
              if (!(c[b + 1192 >> 2] | 0)) {
                d = A;
                g = 12710;
                h = d + 14 | 0;
                do {
                  a[d >> 0] = a[g >> 0] | 0;
                  d = d + 1 | 0;
                  g = g + 1 | 0;
                } while ((d | 0) < (h | 0));
                f = A;
                break a;
              } else {
                f = dj(b + 1256 | 0, c[b + 1172 >> 2] | 0) | 0;
                c[m >> 2] = f;
                bq(A, 12724, m);
                f = A;
                break a;
              }
            default:
              {
                c[l >> 2] = c[240 + (d << 2) >> 2];
                bq(A, 12680, l);
                f = A;
              }
          } while (0);
          if (e | 0) {
            d = A + (Kq(f) | 0) | 0;
            g = 12516;
            h = d + 13 | 0;
            do {
              a[d >> 0] = a[g >> 0] | 0;
              d = d + 1 | 0;
              g = g + 1 | 0;
            } while ((d | 0) < (h | 0));
          }
          Ti(b, f);
          c[o >> 2] = 21176;
          bq(Y, 12748, o);
          a[f >> 0] = a[12753] | 0;
          a[f + 1 >> 0] = a[12754] | 0;
          a[f + 2 >> 0] = a[12755] | 0;
          a[f + 3 >> 0] = a[12756] | 0;
          a[f + 4 >> 0] = a[12757] | 0;
          c[p >> 2] = f;
          bq(Z, 12470, p);
          if ((c[b + 1880 >> 2] | 0) == 1) {
            c[q >> 2] = b + 1816;
            bq(f, 12476, q);
            kr(Y, f) | 0;
            c[r >> 2] = b + 1848;
            bq(f, 12476, r);
            kr(Z, f) | 0;
            d = 25;
          } else d = 15;
          if ((c[b + 1968 >> 2] | 0) == 1) {
            c[w >> 2] = b + 1904;
            bq(f, 12476, w);
            kr(Y, f) | 0;
            c[x >> 2] = b + 1936;
            bq(f, 12476, x);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2056 >> 2] | 0) == 1) {
            c[B >> 2] = b + 1992;
            bq(f, 12476, B);
            kr(Y, f) | 0;
            c[C >> 2] = b + 2024;
            bq(f, 12476, C);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2144 >> 2] | 0) == 1) {
            c[F >> 2] = b + 2080;
            bq(f, 12476, F);
            kr(Y, f) | 0;
            c[G >> 2] = b + 2112;
            bq(f, 12476, G);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2232 >> 2] | 0) == 1) {
            c[J >> 2] = b + 4624;
            bq(f, 12476, J);
            kr(Y, f) | 0;
            c[K >> 2] = b + 4656;
            bq(f, 12476, K);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          cj(X, d);
          Ti(b, X);
          Ti(b, Y);
          Ti(b, Z);
          Ti(b, X);
          Ib = _;
          return;
        }
      case 3:
        {
          d = c[b + 1216 >> 2] | 0;
          b: do switch (d | 0) {
            case 4:
              {
                c[i >> 2] = 12697;
                bq(A, 12758, i);
                f = A;
                break;
              }
            case 0:
              if (!(c[b + 1192 >> 2] | 0)) {
                d = A;
                g = 12775;
                h = d + 14 | 0;
                do {
                  a[d >> 0] = a[g >> 0] | 0;
                  d = d + 1 | 0;
                  g = g + 1 | 0;
                } while ((d | 0) < (h | 0));
                f = A;
                break b;
              } else {
                f = dj(b + 1256 | 0, c[b + 1172 >> 2] | 0) | 0;
                c[k >> 2] = f;
                bq(A, 12789, k);
                f = A;
                break b;
              }
            default:
              {
                c[j >> 2] = c[240 + (d << 2) >> 2];
                bq(A, 12758, j);
                f = A;
              }
          } while (0);
          if (e | 0) {
            d = A + (Kq(f) | 0) | 0;
            g = 12516;
            h = d + 13 | 0;
            do {
              a[d >> 0] = a[g >> 0] | 0;
              d = d + 1 | 0;
              g = g + 1 | 0;
            } while ((d | 0) < (h | 0));
          }
          Ti(b, f);
          c[s >> 2] = 21176;
          bq(Y, 12748, s);
          a[f >> 0] = a[12813] | 0;
          a[f + 1 >> 0] = a[12814] | 0;
          a[f + 2 >> 0] = a[12815] | 0;
          a[f + 3 >> 0] = a[12816] | 0;
          a[f + 4 >> 0] = a[12817] | 0;
          c[t >> 2] = f;
          bq(Z, 12470, t);
          if ((c[b + 2320 >> 2] | 0) == 1) {
            c[u >> 2] = b + 2256;
            bq(f, 12476, u);
            kr(Y, f) | 0;
            c[v >> 2] = b + 2288;
            bq(f, 12476, v);
            kr(Z, f) | 0;
            d = 25;
          } else d = 15;
          if ((c[b + 2408 >> 2] | 0) == 1) {
            c[y >> 2] = b + 2344;
            bq(f, 12476, y);
            kr(Y, f) | 0;
            c[z >> 2] = b + 2376;
            bq(f, 12476, z);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2496 >> 2] | 0) == 1) {
            c[D >> 2] = b + 2432;
            bq(f, 12476, D);
            kr(Y, f) | 0;
            c[E >> 2] = b + 2464;
            bq(f, 12476, E);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2584 >> 2] | 0) == 1) {
            c[H >> 2] = b + 2520;
            bq(f, 12476, H);
            kr(Y, f) | 0;
            c[I >> 2] = b + 2552;
            bq(f, 12476, I);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2672 >> 2] | 0) == 1) {
            c[L >> 2] = b + 2608;
            bq(f, 12476, L);
            kr(Y, f) | 0;
            c[M >> 2] = b + 2640;
            bq(f, 12476, M);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2760 >> 2] | 0) == 1) {
            c[N >> 2] = b + 2696;
            bq(f, 12476, N);
            kr(Y, f) | 0;
            c[O >> 2] = b + 2728;
            bq(f, 12476, O);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2848 >> 2] | 0) == 1) {
            c[P >> 2] = b + 2784;
            bq(f, 12476, P);
            kr(Y, f) | 0;
            c[Q >> 2] = b + 2816;
            bq(f, 12476, Q);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 2936 >> 2] | 0) == 1) {
            c[R >> 2] = b + 2872;
            bq(f, 12476, R);
            kr(Y, f) | 0;
            c[S >> 2] = b + 2904;
            bq(f, 12476, S);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 3024 >> 2] | 0) == 1) {
            c[T >> 2] = b + 2960;
            bq(f, 12476, T);
            kr(Y, f) | 0;
            c[U >> 2] = b + 2992;
            bq(f, 12476, U);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          if ((c[b + 3112 >> 2] | 0) == 1) {
            c[W >> 2] = b + 3048;
            bq(f, 12476, W);
            kr(Y, f) | 0;
            c[V >> 2] = b + 3080;
            bq(f, 12476, V);
            kr(Z, f) | 0;
            d = d + 10 | 0;
          }
          cj(X, d);
          Ti(b, X);
          Ti(b, Y);
          Ti(b, Z);
          Ti(b, X);
          Ib = _;
          return;
        }
      default:
        {
          Ib = _;
          return;
        }
    }
  }
  function bj(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var e = 0.0;
    if ((c | 0) > (d | 0)) {
      d = 1;
      return d | 0;
    }
    while (1) {
      e = +g[b + (c << 3) >> 3];
      if (e > +g[a + 616 + (c * 88 | 0) + 72 >> 3]) {
        c = 0;
        a = 6;
        break;
      }
      if (e < +g[a + 616 + (c * 88 | 0) + 80 >> 3]) {
        c = 0;
        a = 6;
        break;
      }
      if ((c | 0) < (d | 0)) c = c + 1 | 0;else {
        c = 1;
        a = 6;
        break;
      }
    }
    if ((a | 0) == 6) return c | 0;
    return 0;
  }
  function cj(b, c) {
    b = b | 0;
    c = c | 0;
    var d = 0;
    d = c + 1 | 0;
    if ((c | 0) >= 0) vt(b | 0, 45, d | 0) | 0;
    a[b + d >> 0] = 0;
    return;
  }
  function dj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    g = (b | 0) / 3600 | 0;
    b = (w(g, -3600) | 0) + b | 0;
    f = (b | 0) / 60 | 0;
    b = b + (w(f, -60) | 0) | 0;
    c[e >> 2] = g;
    c[e + 4 >> 2] = f;
    c[e + 8 >> 2] = b;
    bq(a, 12818, e);
    Ib = d;
    return a | 0;
  }
  function ej(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    d = c[a + 8 >> 2] | 0;
    if ((d | 0) >= (b | 0)) {
      d = 0;
      return d | 0;
    }
    d = +g[(c[a + 52 >> 2] | 0) + ((b - d | 0) * 120 | 0) + 8 >> 3] == 0.0 ? 1 : 2;
    return d | 0;
  }
  function fj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    var e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0;
    D = Ib;
    Ib = Ib + 1184 | 0;
    C = D + 1144 | 0;
    B = D + 1128 | 0;
    v = D + 1112 | 0;
    u = D + 1080 | 0;
    i = D + 1064 | 0;
    j = D + 1056 | 0;
    f = D + 1040 | 0;
    e = D + 1032 | 0;
    x = D;
    y = D + 1164 | 0;
    s = a + 52 | 0;
    t = c[s >> 2] | 0;
    z = a + 48 | 0;
    A = c[z >> 2] | 0;
    w = a + 1172 | 0;
    Oq(y, dj(a + 1256 | 0, c[w >> 2] | 0) | 0) | 0;
    if ((b | 0) > 0) {
      if (!(+g[a + 4352 >> 3] >= d)) {
        c[f >> 2] = y;
        c[f + 4 >> 2] = b;
        g[f + 8 >> 3] = d;
        bq(x, 12959, f);
      } else {
        c[e >> 2] = y;
        c[e + 4 >> 2] = b;
        bq(x, 12927, e);
      }
      Ti(a, x);
      if ((c[a + 4496 >> 2] | 0) == 1 ? (h = c[a + 4532 >> 2] | 0, (h | 0) > 0) : 0) {
        d = +g[a + 4464 >> 3];
        if ((h | 0) == 1) {
          g[j >> 3] = d;
          bq(x, 13015, j);
        } else {
          c[i >> 2] = h;
          g[i + 8 >> 3] = d;
          bq(x, 13078, i);
        }
        Ti(a, x);
      }
    }
    l = a + 4 | 0;
    b = c[l >> 2] | 0;
    if ((b | 0) < 1) i = a + 12 | 0;else {
      m = a + 4260 | 0;
      n = a + 4540 | 0;
      i = a + 12 | 0;
      o = a + 44 | 0;
      p = a + 4256 | 0;
      q = a + 4920 | 0;
      r = a + 2024 | 0;
      k = 1;
      while (1) {
        j = c[(c[s >> 2] | 0) + (k * 120 | 0) >> 2] | 0;
        d = +g[(c[m >> 2] | 0) + (j << 3) >> 3];
        h = d < 0.0;
        e = (h ? -d : d) < .001;
        do if (h | e) h = e ? 2 : 9;else {
          if (!(d > 0.0)) {
            h = c[(c[n >> 2] | 0) + ((c[i >> 2] | 0) + k << 2) >> 2] | 0;
            break;
          }
          if (+g[t + (k * 120 | 0) + 8 >> 3] > 0.0 ? (d = +g[(c[p >> 2] | 0) + (j << 3) >> 3] - +g[t + (k * 120 | 0) + 24 >> 3], (d < 0.0 ? -d : d) < .001) : 0) {
            h = 10;
            break;
          }
          h = 8;
        } while (0);
        if ((h | 0) != (c[(c[n >> 2] | 0) + ((c[i >> 2] | 0) + k << 2) >> 2] | 0)) {
          b = c[o >> 2] | 0;
          e = b + (j * 96 | 0) | 0;
          f = c[64 + (h << 2) >> 2] | 0;
          if (+g[t + (k * 120 | 0) + 8 >> 3] > 0.0) {
            d = (+g[(c[p >> 2] | 0) + (j << 3) >> 3] - +g[b + (j * 96 | 0) + 48 >> 3]) * +g[q >> 3];
            c[u >> 2] = y;
            c[u + 4 >> 2] = e;
            c[u + 8 >> 2] = f;
            g[u + 16 >> 3] = d;
            c[u + 24 >> 2] = r;
            Nq(x, 1024, 13141, u);
          } else {
            c[v >> 2] = y;
            c[v + 4 >> 2] = e;
            c[v + 8 >> 2] = f;
            Nq(x, 1024, 13173, v);
          }
          Ti(a, x);
          c[(c[n >> 2] | 0) + ((c[i >> 2] | 0) + k << 2) >> 2] = h;
          b = c[l >> 2] | 0;
        }
        if ((k | 0) < (b | 0)) k = k + 1 | 0;else break;
      }
    }
    b = c[i >> 2] | 0;
    if ((b | 0) < 1) {
      Ti(a, 17159);
      Ib = D;
      return;
    }
    j = a + 4536 | 0;
    k = a + 4540 | 0;
    h = 1;
    while (1) {
      f = c[(c[j >> 2] | 0) + (h << 2) >> 2] | 0;
      e = c[(c[k >> 2] | 0) + (h << 2) >> 2] | 0;
      if ((f | 0) != (e | 0)) {
        if (!(c[w >> 2] | 0)) {
          u = c[z >> 2] | 0;
          t = c[16 + (c[u + (h << 7) + 104 >> 2] << 2) >> 2] | 0;
          v = c[64 + (f << 2) >> 2] | 0;
          c[B >> 2] = y;
          c[B + 4 >> 2] = t;
          c[B + 8 >> 2] = u + (h << 7);
          c[B + 12 >> 2] = v;
          bq(x, 13198, B);
        } else {
          s = c[16 + (c[A + (h << 7) + 104 >> 2] << 2) >> 2] | 0;
          t = (c[z >> 2] | 0) + (h << 7) | 0;
          u = c[64 + (e << 2) >> 2] | 0;
          v = c[64 + (f << 2) >> 2] | 0;
          c[C >> 2] = y;
          c[C + 4 >> 2] = s;
          c[C + 8 >> 2] = t;
          c[C + 12 >> 2] = u;
          c[C + 16 >> 2] = v;
          bq(x, 13213, C);
        }
        Ti(a, x);
        c[(c[k >> 2] | 0) + (h << 2) >> 2] = c[(c[j >> 2] | 0) + (h << 2) >> 2];
        b = c[i >> 2] | 0;
      }
      if ((h | 0) < (b | 0)) h = h + 1 | 0;else break;
    }
    Ti(a, 17159);
    Ib = D;
    return;
  }
  function gj(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    o = Ib;
    Ib = Ib + 336 | 0;
    k = o + 320 | 0;
    j = o + 312 | 0;
    i = o + 304 | 0;
    h = o + 296 | 0;
    n = o + 288 | 0;
    m = o + 280 | 0;
    l = o + 272 | 0;
    f = o + 264 | 0;
    e = o + 256 | 0;
    d = o;
    switch (c[a + 4600 >> 2] | 0) {
      case 3:
        {
          b = 1;
          break;
        }
      case 2:
        {
          b = 3;
          break;
        }
      default:
        {
          b = a + 4656 | 0;
          if (!(wg(b, 13247) | 0)) {
            b = (wg(b, 13250) | 0) == 0;
            b = b ? 0 : 2;
          } else b = 1;
        }
    }
    c[e >> 2] = c[528 + (b << 2) >> 2];
    Nq(d, 255, 13253, e);
    Ti(a, d);
    Nq(d, 255, 13282, f);
    Ti(a, d);
    g[l >> 3] = +g[a + 4856 >> 3];
    Nq(d, 255, 13315, l);
    Ti(a, d);
    g[m >> 3] = +g[a + 4864 >> 3];
    Nq(d, 255, 13341, m);
    Ti(a, d);
    g[n >> 3] = +g[a + 4872 >> 3];
    Nq(d, 255, 13367, n);
    Ti(a, d);
    g[h >> 3] = +g[a + 4880 >> 3];
    Nq(d, 255, 13393, h);
    Ti(a, d);
    g[i >> 3] = +g[a + 4888 >> 3];
    Nq(d, 255, 13419, i);
    Ti(a, d);
    g[j >> 3] = +g[a + 4896 >> 3];
    Nq(d, 255, 13445, j);
    Ti(a, d);
    Nq(d, 255, 13471, k);
    Ti(a, d);
    Ib = o;
    return;
  }
  function hj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    var e = 0,
      f = 0,
      h = 0,
      i = 0;
    i = Ib;
    Ib = Ib + 32 | 0;
    h = i + 8 | 0;
    f = i;
    e = a + 5080 | 0;
    if (!b) {
      h = dj(a + 1256 | 0, c[a + 1172 >> 2] | 0) | 0;
      c[f >> 2] = h;
      bq(e, 13524, f);
      Ti(a, e);
      Ib = i;
      return;
    } else {
      c[h >> 2] = b;
      g[h + 8 >> 3] = d;
      bq(e, 13554, h);
      Ti(a, e);
      Ib = i;
      return;
    }
  }
  function ij(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    m = Ib;
    Ib = Ib + 32 | 0;
    i = m + 16 | 0;
    j = m;
    l = c[a + 48 >> 2] | 0;
    if (d << 24 >> 24 != e << 24 >> 24) {
      f = d << 24 >> 24 == 4 ? 4 : d << 24 >> 24 < 3 ? 2 : 3;
      d = e << 24 >> 24 == 4 ? 4 : e << 24 >> 24 < 3 ? 2 : 3;
      if ((f | 0) == (d | 0)) {
        Ib = m;
        return;
      }
      k = a + 5080 | 0;
      e = c[64 + (f << 2) >> 2] | 0;
      j = c[64 + (d << 2) >> 2] | 0;
      c[i >> 2] = c[16 + (c[l + (b << 7) + 104 >> 2] << 2) >> 2];
      c[i + 4 >> 2] = l + (b << 7);
      c[i + 8 >> 2] = e;
      c[i + 12 >> 2] = j;
      bq(k, 13649, i);
      Ti(a, k);
      Ib = m;
      return;
    }
    h = +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
    f = c[l + (b << 7) + 104 >> 2] | 0;
    switch (f | 0) {
      case 5:
      case 4:
      case 3:
        {
          d = a + 4928 | 0;
          k = 5;
          break;
        }
      case 6:
        {
          d = a + 4960 | 0;
          k = 5;
          break;
        }
      default:
        {}
    }
    if ((k | 0) == 5) h = h * +g[d >> 3];
    k = a + 5080 | 0;
    c[j >> 2] = c[16 + (f << 2) >> 2];
    c[j + 4 >> 2] = l + (b << 7);
    g[j + 8 >> 3] = h;
    bq(k, 13606, j);
    Ti(a, k);
    Ib = m;
    return;
  }
  function jj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    i = Ib;
    Ib = Ib + 48 | 0;
    h = i + 24 | 0;
    g = i;
    e = c[a + 48 >> 2] | 0;
    f = c[a + 72 >> 2] | 0;
    switch (c[f + (d * 40 | 0) + 36 >> 2] | 0) {
      case 1:
      case 0:
        {
          j = c[a + 44 >> 2] | 0;
          f = c[f + (d * 40 | 0) + 4 >> 2] | 0;
          h = a + 5080 | 0;
          l = dj(a + 1256 | 0, c[a + 1172 >> 2] | 0) | 0;
          k = c[16 + (c[e + (b << 7) + 104 >> 2] << 2) >> 2] | 0;
          d = 3416 + ((ej(a, f) | 0) << 2) | 0;
          d = c[d >> 2] | 0;
          c[g >> 2] = l;
          c[g + 4 >> 2] = k;
          c[g + 8 >> 2] = e + (b << 7);
          c[g + 12 >> 2] = d;
          c[g + 16 >> 2] = j + (f * 96 | 0);
          bq(h, 13690, g);
          b = h;
          break;
        }
      case 3:
      case 2:
        {
          l = a + 5080 | 0;
          j = dj(a + 1256 | 0, c[a + 1172 >> 2] | 0) | 0;
          k = c[16 + (c[e + (b << 7) + 104 >> 2] << 2) >> 2] | 0;
          c[h >> 2] = j;
          c[h + 4 >> 2] = k;
          c[h + 8 >> 2] = e + (b << 7);
          bq(l, 13727, h);
          b = l;
          break;
        }
      default:
        {
          Ib = i;
          return;
        }
    }
    Ti(a, b);
    Ib = i;
    return;
  }
  function kj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    g = e;
    h = c[a + 48 >> 2] | 0;
    f = a + 5080 | 0;
    j = dj(a + 1256 | 0, c[a + 1172 >> 2] | 0) | 0;
    i = c[16 + (c[h + (b << 7) + 104 >> 2] << 2) >> 2] | 0;
    c[g >> 2] = j;
    c[g + 4 >> 2] = i;
    c[g + 8 >> 2] = h + (b << 7);
    c[g + 12 >> 2] = d;
    bq(f, 13764, g);
    Ti(a, f);
    Ib = e;
    return;
  }
  function lj(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = +e;
    var f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0.0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0;
    B = Ib;
    Ib = Ib + 64 | 0;
    z = B + 48 | 0;
    x = B + 32 | 0;
    v = B + 16 | 0;
    o = B + 8 | 0;
    h = B;
    y = b + 4508 | 0;
    if ((c[y >> 2] | 0) < (d | 0) ? +g[b + 4352 >> 3] >= e : 0) {
      f = b + 5080 | 0;
      w = dj(b + 1256 | 0, c[b + 1172 >> 2] | 0) | 0;
      c[h >> 2] = w;
      bq(f, 13795, h);
      if (!(c[b + 1224 >> 2] | 0)) h = 2;else {
        Ti(b, f);
        h = 2;
      }
    } else h = 0;
    if ((c[b + 4496 >> 2] | 0) == 0 ? (m = b + 4532 | 0, c[m >> 2] = 0, n = c[b + 8 >> 2] | 0, (n | 0) >= 1) : 0) {
      l = b + 4260 | 0;
      j = c[b + 44 >> 2] | 0;
      k = c[b + 4256 >> 2] | 0;
      i = 1;
      f = 0;
      while (1) {
        if (+g[k + (i << 3) >> 3] < +g[j + (i * 96 | 0) + 48 >> 3] ? +g[(c[l >> 2] | 0) + (i << 3) >> 3] > 0.0 : 0) {
          f = f + 1 | 0;
          c[m >> 2] = f;
        }
        if ((i | 0) == (n | 0)) break;else i = i + 1 | 0;
      }
      if ((f | 0) > 0) if (!(c[b + 1224 >> 2] | 0)) h = 6;else {
        h = b + 5080 | 0;
        w = dj(b + 1256 | 0, c[b + 1172 >> 2] | 0) | 0;
        c[o >> 2] = w;
        bq(h, 13863, o);
        Ti(b, h);
        h = 6;
      }
    }
    m = b + 24 | 0;
    f = c[m >> 2] | 0;
    if ((f | 0) >= 1) {
      n = b + 60 | 0;
      o = b + 48 | 0;
      q = b + 4536 | 0;
      r = b + 1224 | 0;
      s = b + 5080 | 0;
      t = b + 1256 | 0;
      u = b + 1172 | 0;
      l = 1;
      while (1) {
        i = c[(c[n >> 2] | 0) + (l << 2) >> 2] | 0;
        j = c[o >> 2] | 0;
        k = c[(c[q >> 2] | 0) + (i << 2) >> 2] | 0;
        if (k >>> 0 > 5) if (!(c[r >> 2] | 0)) h = 5;else {
          w = c[16 + (c[j + (i << 7) + 104 >> 2] << 2) >> 2] | 0;
          f = c[64 + (k << 2) >> 2] | 0;
          h = dj(t, c[u >> 2] | 0) | 0;
          c[v >> 2] = w;
          c[v + 4 >> 2] = j + (i << 7);
          c[v + 8 >> 2] = f;
          c[v + 12 >> 2] = h;
          bq(s, 13902, v);
          Ti(b, s);
          h = 5;
          f = c[m >> 2] | 0;
        }
        if ((l | 0) < (f | 0)) l = l + 1 | 0;else break;
      }
    }
    m = b + 20 | 0;
    f = c[m >> 2] | 0;
    if ((f | 0) >= 1) {
      n = b + 56 | 0;
      o = b + 4536 | 0;
      q = b + 4272 | 0;
      r = b + 4276 | 0;
      s = b + 1224 | 0;
      t = b + 5080 | 0;
      u = b + 48 | 0;
      v = b + 1256 | 0;
      w = b + 1172 | 0;
      l = 1;
      k = f;
      while (1) {
        i = c[n >> 2] | 0;
        j = c[i + (l << 7) >> 2] | 0;
        f = c[(c[o >> 2] | 0) + (j << 2) >> 2] | 0;
        if (f >>> 0 > 2) {
          p = +g[(c[q >> 2] | 0) + (j << 3) >> 3];
          if (p < 0.0) {
            f = 0;
            A = 26;
          } else {
            f = p > +g[(c[r >> 2] | 0) + (j << 3) >> 3] * +g[i + (l << 7) + 16 >> 3] ? 5 : f;
            A = 25;
          }
        } else A = 25;
        if ((A | 0) == 25) {
          A = 0;
          switch (f | 0) {
            case 0:
            case 5:
              {
                A = 26;
                break;
              }
            default:
              f = k;
          }
        }
        if ((A | 0) == 26) {
          A = 0;
          if (!(c[s >> 2] | 0)) {
            h = 4;
            f = k;
          } else {
            k = (c[u >> 2] | 0) + (j << 7) | 0;
            f = c[64 + (f << 2) >> 2] | 0;
            h = dj(v, c[w >> 2] | 0) | 0;
            c[x >> 2] = k;
            c[x + 4 >> 2] = f;
            c[x + 8 >> 2] = h;
            bq(t, 13931, x);
            Ti(b, t);
            h = 4;
            f = c[m >> 2] | 0;
          }
        }
        if ((l | 0) < (f | 0)) {
          l = l + 1 | 0;
          k = f;
        } else break;
      }
    }
    if ((c[y >> 2] | 0) < (d | 0) ? +g[b + 4352 >> 3] < e : 0) {
      h = b + 1224 | 0;
      if (!(c[h >> 2] | 0)) f = 1;else {
        k = b + 5080 | 0;
        y = dj(b + 1256 | 0, c[b + 1172 >> 2] | 0) | 0;
        c[z >> 2] = y;
        bq(k, 13962, z);
        if ((c[b + 4512 >> 2] | 0) == -1) {
          f = (Kq(k) | 0) + (b + 5080) | 0;
          i = 14e3;
          j = f + 19 | 0;
          do {
            a[f >> 0] = a[i >> 0] | 0;
            f = f + 1 | 0;
            i = i + 1 | 0;
          } while ((f | 0) < (j | 0));
        }
        Ti(b, k);
        f = 1;
      }
    } else A = 35;
    do if ((A | 0) == 35) {
      f = h << 24 >> 24;
      if (h << 24 >> 24 > 0) {
        h = b + 1224 | 0;
        break;
      } else {
        b = f;
        Ib = B;
        return b | 0;
      }
    } while (0);
    mj(b);
    c[b + 5076 >> 2] = f;
    if (!(c[h >> 2] | 0)) {
      b = f;
      Ib = B;
      return b | 0;
    }
    Ti(b, 17159);
    b = f;
    Ib = B;
    return b | 0;
  }
  function mj(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0;
    u = Ib;
    Ib = Ib + 16 | 0;
    t = u + 8 | 0;
    s = u;
    q = gt((c[b >> 2] | 0) + 1 | 0, 4) | 0;
    r = gt((c[b >> 2] | 0) + 1 | 0, 1) | 0;
    if ((q | 0) == 0 | (r | 0) == 0) {
      ft(q);
      ft(r);
      Ib = u;
      return;
    }
    f = b + 4 | 0;
    d = c[f >> 2] | 0;
    p = b + 8 | 0;
    if ((d | 0) >= 1) {
      e = 1;
      while (1) {
        d = (c[p >> 2] | 0) + e | 0;
        c[q + (e << 2) >> 2] = d;
        a[r + d >> 0] = 1;
        d = c[f >> 2] | 0;
        if ((e | 0) < (d | 0)) e = e + 1 | 0;else break;
      }
    }
    e = c[p >> 2] | 0;
    if ((e | 0) >= 1) {
      i = b + 4260 | 0;
      h = 1;
      while (1) {
        f = d + 1 | 0;
        if (+g[(c[i >> 2] | 0) + (h << 3) >> 3] < 0.0) {
          c[q + (f << 2) >> 2] = h;
          a[r + h >> 0] = 1;
          d = f;
          e = c[p >> 2] | 0;
        }
        if ((h | 0) < (e | 0)) h = h + 1 | 0;else break;
      }
    }
    nj(b, d, q, r);
    d = c[p >> 2] | 0;
    if ((d | 0) >= 1) {
      j = b + 44 | 0;
      k = b + 4260 | 0;
      l = b + 1224 | 0;
      m = b + 5080 | 0;
      n = b + 1172 | 0;
      o = b + 1256 | 0;
      h = 0;
      e = 0;
      i = 1;
      while (1) {
        f = c[j >> 2] | 0;
        if ((a[r + i >> 0] | 0) == 0 ? +g[(c[k >> 2] | 0) + (i << 3) >> 3] != 0.0 : 0) {
          h = e + 1 | 0;
          if ((e | 0) < 10 ? (c[l >> 2] | 0) != 0 : 0) {
            e = dj(o, c[n >> 2] | 0) | 0;
            c[s >> 2] = f + (i * 96 | 0);
            c[s + 4 >> 2] = e;
            bq(m, 14019, s);
            Ti(b, m);
            f = i;
            e = h;
            d = c[p >> 2] | 0;
          } else {
            f = i;
            e = h;
          }
        } else f = h;
        if ((i | 0) < (d | 0)) {
          h = f;
          i = i + 1 | 0;
        } else break;
      }
      if ((e | 0) > 0 ? c[l >> 2] | 0 : 0) {
        if ((e | 0) > 10) {
          s = dj(o, c[n >> 2] | 0) | 0;
          c[t >> 2] = e + -10;
          c[t + 4 >> 2] = s;
          bq(m, 14059, t);
          Ti(b, m);
        }
        oj(b, f, r);
      }
    }
    ft(q);
    ft(r);
    Ib = u;
    return;
  }
  function nj(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    if ((d | 0) < 1) return;
    m = b + 88 | 0;
    n = b + 48 | 0;
    l = b + 4536 | 0;
    k = 1;
    b = d;
    while (1) {
      d = c[(c[m >> 2] | 0) + (c[e + (k << 2) >> 2] << 2) >> 2] | 0;
      if (d) do {
        h = c[d + 4 >> 2] | 0;
        i = c[d >> 2] | 0;
        j = f + i | 0;
        a: do if (!(a[j >> 0] | 0)) {
          g = c[n >> 2] | 0;
          switch (c[g + (h << 7) + 104 >> 2] | 0) {
            case 4:
            case 3:
            case 0:
              {
                if ((i | 0) == (c[g + (h << 7) + 32 >> 2] | 0)) break a;
                break;
              }
            default:
              {}
          }
          g = b + 1 | 0;
          if ((c[(c[l >> 2] | 0) + (h << 2) >> 2] | 0) >>> 0 > 2) {
            a[j >> 0] = 1;
            c[e + (g << 2) >> 2] = i;
            b = g;
          }
        } while (0);
        d = c[d + 8 >> 2] | 0;
      } while ((d | 0) != 0);
      if ((k | 0) < (b | 0)) k = k + 1 | 0;else break;
    }
    return;
  }
  function oj(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    i = Ib;
    Ib = Ib + 16 | 0;
    g = i;
    a[e + d >> 0] = 2;
    d = c[(c[b + 88 >> 2] | 0) + (d << 2) >> 2] | 0;
    if (!d) {
      Ib = i;
      return;
    }
    a: while (1) {
      f = c[d >> 2] | 0;
      switch (a[e + f >> 0] | 0) {
        case 1:
          break a;
        case 2:
          break;
        default:
          oj(b, f, e);
      }
      d = c[d + 8 >> 2] | 0;
      if (!d) {
        h = 7;
        break;
      }
    }
    if ((h | 0) == 7) {
      Ib = i;
      return;
    }
    h = b + 5080 | 0;
    c[g >> 2] = (c[b + 48 >> 2] | 0) + (c[d + 4 >> 2] << 7);
    bq(h, 14111, g);
    Ti(b, h);
    Ib = i;
    return;
  }
  function pj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    d = e;
    if (!(c[a + 1224 >> 2] | 0)) {
      fj(a, 0, 0.0);
      mj(a);
      Ib = e;
      return;
    }
    g = c[a + 44 >> 2] | 0;
    f = a + 5080 | 0;
    h = dj(a + 1256 | 0, c[a + 1172 >> 2] | 0) | 0;
    c[d >> 2] = h;
    c[d + 4 >> 2] = g + (b * 96 | 0);
    bq(f, 14159, d);
    Ti(a, f);
    fj(a, 0, 0.0);
    mj(a);
    Ib = e;
    return;
  }
  function qj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    f = d;
    g = d + 4 | 0;
    Ha(g | 0) | 0;
    e = a + 5080 | 0;
    g = ta(g | 0) | 0;
    c[f >> 2] = g;
    bq(e, b, f);
    Ti(a, e);
    Ib = d;
    return;
  }
  function rj(a) {
    a = a | 0;
    c[a + 4232 >> 2] = 6;
    c[a + 4244 >> 2] = 0;
    c[a + 4248 >> 2] = 0;
    c[a + 4252 >> 2] = 0;
    c[a + 4228 >> 2] = 0;
    c[a + 76 >> 2] = 0;
    return;
  }
  function sj(a, b) {
    a = a | 0;
    b = b | 0;
    if (!(wg(b, 14199) | 0)) return;
    b = a + 1e3 | 0;
    c[b >> 2] = (c[b >> 2] | 0) + 1;
    return;
  }
  function tj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    uj(a, b);
    g = a + 32 | 0;
    d = c[g >> 2] | 0;
    f = a + 76 | 0;
    a = c[f >> 2] | 0;
    if ((d | 0) > (b | 0)) do {
      e = a + (b * 56 | 0) | 0;
      b = b + 1 | 0;
      d = a + (b * 56 | 0) | 0;
      a = e + 56 | 0;
      do {
        c[e >> 2] = c[d >> 2];
        e = e + 4 | 0;
        d = d + 4 | 0;
      } while ((e | 0) < (a | 0));
      d = c[g >> 2] | 0;
      a = c[f >> 2] | 0;
    } while ((b | 0) < (d | 0));
    c[a + (d * 56 | 0) + 40 >> 2] = 0;
    c[a + (d * 56 | 0) + 44 >> 2] = 0;
    c[a + (d * 56 | 0) + 48 >> 2] = 0;
    c[g >> 2] = (c[g >> 2] | 0) + -1;
    return;
  }
  function uj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    e = a + 76 | 0;
    a = c[e >> 2] | 0;
    d = c[a + (b * 56 | 0) + 40 >> 2] | 0;
    if (d) {
      a = d;
      do {
        d = a;
        a = c[a + 32 >> 2] | 0;
        ft(d);
      } while ((a | 0) != 0);
      a = c[e >> 2] | 0;
    }
    d = c[a + (b * 56 | 0) + 44 >> 2] | 0;
    if (d) {
      a = d;
      do {
        d = a;
        a = c[a + 16 >> 2] | 0;
        ft(d);
      } while ((a | 0) != 0);
      a = c[e >> 2] | 0;
    }
    a = c[a + (b * 56 | 0) + 48 >> 2] | 0;
    if (!a) return;
    do {
      b = a;
      a = c[a + 16 >> 2] | 0;
      ft(b);
    } while ((a | 0) != 0);
    return;
  }
  function vj(a) {
    a = a | 0;
    var b = 0;
    b = gt((c[a + 1092 >> 2] | 0) + 1 | 0, 56) | 0;
    c[a + 76 >> 2] = b;
    return ((b | 0) == 0 ? 101 : 0) | 0;
  }
  function wj(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    e = a + 76 | 0;
    b = c[e >> 2] | 0;
    if (!b) return;
    d = a + 32 | 0;
    if ((c[d >> 2] | 0) >= 1) {
      b = 1;
      while (1) {
        uj(a, b);
        if ((b | 0) < (c[d >> 2] | 0)) b = b + 1 | 0;else break;
      }
      b = c[e >> 2] | 0;
    }
    ft(b);
    c[e >> 2] = 0;
    return;
  }
  function xj(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    d = a + 4232 | 0;
    b = c[d >> 2] | 0;
    if ((b | 0) == 7) {
      e = 0;
      return e | 0;
    }
    a: do switch (ug(c[a + 388 >> 2] | 0, 544) | 0) {
      case 6:
        {
          if ((b & -2 | 0) == 4) {
            c[d >> 2] = 6;
            b = Bj(a) | 0;
            e = 18;
          } else b = 221;
          break;
        }
      case 0:
        {
          if ((c[a + 1104 >> 2] | 0) == 2) {
            e = a + 32 | 0;
            c[e >> 2] = (c[e >> 2] | 0) + 1;
            yj(a);
            c[d >> 2] = 0;
            c[a + 4236 >> 2] = 0;
            e = 0;
            return e | 0;
          } else b = 201;
          break;
        }
      case 1:
        {
          if (!b) {
            c[d >> 2] = 1;
            b = zj(a, 2) | 0;
            e = 18;
          } else b = 221;
          break;
        }
      case 2:
        switch (b | 0) {
          case 1:
            {
              b = zj(a, 2) | 0;
              e = 18;
              break a;
            }
          case 5:
          case 4:
            {
              b = Aj(a) | 0;
              e = 18;
              break a;
            }
          default:
            {
              b = 221;
              break a;
            }
        }
      case 3:
        {
          if ((b | 0) == 1) {
            b = zj(a, 3) | 0;
            e = 18;
          } else b = 221;
          break;
        }
      case 4:
        {
          if ((b | 0) == 1) {
            c[d >> 2] = 4;
            b = Aj(a) | 0;
            e = 18;
          } else b = 221;
          break;
        }
      case 5:
        {
          if ((b | 0) == 4) {
            c[d >> 2] = 5;
            b = Aj(a) | 0;
            e = 18;
          } else b = 221;
          break;
        }
      default:
        b = 201;
    } while (0);
    if ((e | 0) == 18) if (!b) {
      e = 0;
      return e | 0;
    }
    c[d >> 2] = 7;
    c[a + 4236 >> 2] = b;
    e = 200;
    return e | 0;
  }
  function yj(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    d = c[a + 76 >> 2] | 0;
    b = c[a + 32 >> 2] | 0;
    hr(d + (b * 56 | 0) | 0, c[a + 392 >> 2] | 0, 31) | 0;
    b = d + (b * 56 | 0) + 32 | 0;
    c[b >> 2] = 0;
    c[b + 4 >> 2] = 0;
    c[b + 8 >> 2] = 0;
    c[b + 12 >> 2] = 0;
    c[b + 16 >> 2] = 0;
    c[a + 4244 >> 2] = 0;
    c[a + 4248 >> 2] = 0;
    c[a + 4252 >> 2] = 0;
    return;
  }
  function zj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0.0;
    l = Ib;
    Ib = Ib + 16 | 0;
    k = l;
    f = c[a + 1104 >> 2] | 0;
    if ((f + -5 | 0) >>> 0 >= 2) {
      a = 201;
      Ib = l;
      return a | 0;
    }
    e = ug(c[a + 392 >> 2] | 0, 640) | 0;
    a: do if ((e | 0) == 8) {
      d = ug(c[a + 396 >> 2] | 0, 576) | 0;
      switch (d | 0) {
        case 0:
        case 9:
        case 10:
          {
            j = 8;
            i = 0;
            e = 3;
            break a;
          }
        default:
          d = 201;
      }
      Ib = l;
      return d | 0;
    } else {
      d = ug(c[a + 400 >> 2] | 0, 576) | 0;
      if ((d | 0) < 0) {
        a = 201;
        Ib = l;
        return a | 0;
      }
      switch (e | 0) {
        case 2:
        case 1:
        case 0:
        case 6:
          {
            e = Oh(c[a + 80 >> 2] | 0, c[a + 396 >> 2] | 0) | 0;
            if (!e) {
              a = 203;
              Ib = l;
              return a | 0;
            }
            switch (d | 0) {
              case 4:
              case 3:
              case 2:
              case 1:
              case 0:
                {
                  j = 6;
                  i = e;
                  e = 4;
                  break a;
                }
              case 12:
              case 11:
                break;
              default:
                {
                  a = 201;
                  Ib = l;
                  return a | 0;
                }
            }
            if ((e | 0) > (c[a + 8 >> 2] | 0)) {
              j = 6;
              i = e;
              e = 4;
              break a;
            } else d = 201;
            Ib = l;
            return d | 0;
          }
        case 5:
        case 4:
        case 3:
        case 7:
          {
            e = Ph(c[a + 84 >> 2] | 0, c[a + 396 >> 2] | 0) | 0;
            if (!e) {
              a = 204;
              Ib = l;
              return a | 0;
            }
            if ((d + -5 | 0) >>> 0 < 3) {
              j = 7;
              i = e;
              e = 4;
              break a;
            } else d = 201;
            Ib = l;
            return d | 0;
          }
        default:
          {
            a = 201;
            Ib = l;
            return a | 0;
          }
      }
    } while (0);
    e = ug(c[a + 388 + (e << 2) >> 2] | 0, 688) | 0;
    if ((e | 0) < 0) {
      a = 201;
      Ib = l;
      return a | 0;
    }
    switch (e | 0) {
      case 6:
        {
          h = 0;
          break;
        }
      case 7:
        {
          h = 1;
          break;
        }
      case 8:
        {
          h = 4;
          break;
        }
      case 9:
        {
          h = 5;
          break;
        }
      default:
        h = e;
    }
    g[k >> 3] = -1.0e10;
    if ((d + -9 | 0) >>> 0 < 2) {
      if ((f | 0) == 6) e = c[a + 408 >> 2] | 0;else e = 21176;
      m = +Gg(c[a + 404 >> 2] | 0, e) * 3600.0;
      g[k >> 3] = m;
      if (m < 0.0) {
        a = 202;
        Ib = l;
        return a | 0;
      } else e = 0;
    } else {
      f = c[a + 388 + (f + -1 << 2) >> 2] | 0;
      e = ug(f, 736) | 0;
      if ((e | 0) <= 0) {
        if (!(Hg(f, k) | 0)) {
          a = 202;
          Ib = l;
          return a | 0;
        }
        if ((d + -11 | 0) >>> 0 < 2) {
          g[k >> 3] = +g[k >> 3] * 3600.0;
          e = 0;
        } else e = 0;
      }
    }
    f = et(40) | 0;
    if (!f) {
      a = 101;
      Ib = l;
      return a | 0;
    }
    c[f + 4 >> 2] = j;
    c[f + 8 >> 2] = i;
    c[f + 12 >> 2] = d;
    c[f + 16 >> 2] = h;
    c[f >> 2] = b;
    c[f + 20 >> 2] = e;
    g[f + 24 >> 3] = +g[k >> 3];
    c[f + 32 >> 2] = 0;
    e = a + 4244 | 0;
    d = c[e >> 2] | 0;
    if (!d) d = (c[a + 76 >> 2] | 0) + ((c[a + 32 >> 2] | 0) * 56 | 0) + 40 | 0;else d = d + 32 | 0;
    c[d >> 2] = f;
    c[e >> 2] = f;
    a = 0;
    Ib = l;
    return a | 0;
  }
  function Aj(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0;
    j = Ib;
    Ib = Ib + 16 | 0;
    f = j;
    if ((c[a + 1104 >> 2] | 0) != 6) {
      a = 201;
      Ib = j;
      return a | 0;
    }
    i = Ph(c[a + 84 >> 2] | 0, c[a + 396 >> 2] | 0) | 0;
    if (!i) {
      a = 204;
      Ib = j;
      return a | 0;
    }
    h = a + 48 | 0;
    if (!(c[(c[h >> 2] | 0) + (i << 7) + 104 >> 2] | 0)) {
      a = 207;
      Ib = j;
      return a | 0;
    }
    g[f >> 3] = -1.0e10;
    d = c[a + 408 >> 2] | 0;
    b = ug(d, 736) | 0;
    a: do if ((b | 0) <= 0) {
      d = (Hg(d, f) | 0) == 0;
      e = +g[f >> 3];
      if (d | e < 0.0) {
        a = 202;
        Ib = j;
        return a | 0;
      }
      if (e != -1.0e10) switch (c[(c[h >> 2] | 0) + (i << 7) + 104 >> 2] | 0) {
        case 1:
          {
            g[f >> 3] = -1.0e10;
            b = e == 0.0 ? 2 : 1;
            e = -1.0e10;
            break a;
          }
        case 8:
          {
            a = 202;
            Ib = j;
            return a | 0;
          }
        default:
          {
            b = -1;
            break a;
          }
      } else {
        b = -1;
        e = -1.0e10;
      }
    } else e = -1.0e10; while (0);
    f = et(24) | 0;
    if (!f) {
      a = 101;
      Ib = j;
      return a | 0;
    }
    c[f >> 2] = i;
    c[f + 4 >> 2] = b;
    g[f + 8 >> 3] = e;
    i = (c[a + 4232 >> 2] | 0) == 4;
    c[f + 16 >> 2] = 0;
    if (i) {
      b = a + 4248 | 0;
      d = c[b >> 2] | 0;
      if (!d) c[(c[a + 76 >> 2] | 0) + ((c[a + 32 >> 2] | 0) * 56 | 0) + 44 >> 2] = f;else c[d + 16 >> 2] = f;
      c[b >> 2] = f;
      a = 0;
      Ib = j;
      return a | 0;
    } else {
      d = a + 4252 | 0;
      b = c[d >> 2] | 0;
      if (!b) b = (c[a + 76 >> 2] | 0) + ((c[a + 32 >> 2] | 0) * 56 | 0) + 48 | 0;else b = b + 16 | 0;
      c[b >> 2] = f;
      c[d >> 2] = f;
      a = 0;
      Ib = j;
      return a | 0;
    }
    return 0;
  }
  function Bj(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    b = d;
    if (!(Hg(c[a + 392 >> 2] | 0, b) | 0)) {
      b = 202;
      Ib = d;
      return b | 0;
    }
    g[(c[a + 76 >> 2] | 0) + ((c[a + 32 >> 2] | 0) * 56 | 0) + 32 >> 3] = +g[b >> 3];
    b = 0;
    Ib = d;
    return b | 0;
  }
  function Cj(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 1312 | 0;
    i = k + 1296 | 0;
    g = k + 1040 | 0;
    j = k;
    h = b + 388 | 0;
    switch (c[b + 4236 >> 2] | 0) {
      case 201:
        {
          d = j;
          e = 14417;
          f = d + 52 | 0;
          do {
            a[d >> 0] = a[e >> 0] | 0;
            d = d + 1 | 0;
            e = e + 1 | 0;
          } while ((d | 0) < (f | 0));
          break;
        }
      case 202:
        {
          d = j;
          e = 14469;
          f = d + 61 | 0;
          do {
            a[d >> 0] = a[e >> 0] | 0;
            d = d + 1 | 0;
            e = e + 1 | 0;
          } while ((d | 0) < (f | 0));
          break;
        }
      case 203:
        {
          d = j;
          e = 14530;
          f = d + 54 | 0;
          do {
            a[d >> 0] = a[e >> 0] | 0;
            d = d + 1 | 0;
            e = e + 1 | 0;
          } while ((d | 0) < (f | 0));
          break;
        }
      case 204:
        {
          d = j;
          e = 14584;
          f = d + 54 | 0;
          do {
            a[d >> 0] = a[e >> 0] | 0;
            d = d + 1 | 0;
            e = e + 1 | 0;
          } while ((d | 0) < (f | 0));
          break;
        }
      case 207:
        {
          d = j;
          e = 14638;
          f = d + 63 | 0;
          do {
            a[d >> 0] = a[e >> 0] | 0;
            d = d + 1 | 0;
            e = e + 1 | 0;
          } while ((d | 0) < (f | 0));
          break;
        }
      case 221:
        {
          d = j;
          e = 14701;
          f = d + 57 | 0;
          do {
            a[d >> 0] = a[e >> 0] | 0;
            d = d + 1 | 0;
            e = e + 1 | 0;
          } while ((d | 0) < (f | 0));
          break;
        }
      default:
        {
          Ib = k;
          return;
        }
    }
    d = b + 32 | 0;
    if ((c[d >> 2] | 0) > 0) {
      hr(g, 14758, 255) | 0;
      f = g + (Kq(g) | 0) | 0;
      a[f >> 0] = 32;
      a[f + 1 >> 0] = 0;
      Er(g, (c[b + 76 >> 2] | 0) + ((c[d >> 2] | 0) * 56 | 0) | 0, 255) | 0;
    } else hr(g, 14763, 255) | 0;
    e = b + 5080 | 0;
    c[i >> 2] = j;
    Nq(e, 255, 16759, i);
    Er(e, g, 255) | 0;
    i = (Kq(e) | 0) + (b + 5080) | 0;
    a[i >> 0] = 58;
    a[i + 1 >> 0] = 0;
    Ti(b, e);
    Oq(j, c[h >> 2] | 0) | 0;
    e = b + 1104 | 0;
    if ((c[e >> 2] | 0) > 1) {
      d = 1;
      do {
        i = j + (Kq(j) | 0) | 0;
        a[i >> 0] = 32;
        a[i + 1 >> 0] = 0;
        Er(j, c[b + 388 + (d << 2) >> 2] | 0, 1024) | 0;
        d = d + 1 | 0;
      } while ((d | 0) < (c[e >> 2] | 0));
    }
    Ti(b, j);
    Ib = k;
    return;
  }
  function Dj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    n = a + 32 | 0;
    e = c[n >> 2] | 0;
    if ((e | 0) <= 0) return;
    o = a + 76 | 0;
    i = (b | 0) == 7;
    if (i) while (1) {
      h = c[o >> 2] | 0;
      f = c[h + (e * 56 | 0) + 40 >> 2] | 0;
      if (!f) f = 0;else {
        g = f;
        do {
          if ((c[g + 4 >> 2] | 0) == 7) f = (c[g + 8 >> 2] | 0) == (d | 0) & 1;else f = 0;
          g = c[g + 32 >> 2] | 0;
        } while ((f | 0) == 0 & (g | 0) != 0);
      }
      g = c[h + (e * 56 | 0) + 44 >> 2] | 0;
      if ((f | 0) == 0 & (g | 0) != 0) {
        do {
          f = (c[g >> 2] | 0) == (d | 0);
          g = c[g + 16 >> 2] | 0;
        } while ((g | 0) != 0 & (f ^ 1));
        f = f & 1;
      }
      g = c[h + (e * 56 | 0) + 48 >> 2] | 0;
      if ((f | 0) == 0 & (g | 0) != 0) {
        f = g;
        do {
          g = (c[f >> 2] | 0) == (d | 0);
          f = c[f + 16 >> 2] | 0;
        } while ((f | 0) != 0 & (g ^ 1));
        f = g & 1;
      }
      if (f | 0) tj(a, e);
      if ((e | 0) > 1) e = e + -1 | 0;else break;
    } else while (1) {
      f = c[(c[o >> 2] | 0) + (e * 56 | 0) + 40 >> 2] | 0;
      if (f | 0) {
        do {
          if ((c[f + 4 >> 2] | 0) == (b | 0)) g = (c[f + 8 >> 2] | 0) == (d | 0) & 1;else g = 0;
          f = c[f + 32 >> 2] | 0;
          g = (g | 0) == 0;
        } while (g & (f | 0) != 0);
        if (!g) tj(a, e);
      }
      if ((e | 0) > 1) e = e + -1 | 0;else break;
    }
    f = c[n >> 2] | 0;
    if ((f | 0) < 1) return;
    if (!i) {
      g = 1;
      while (1) {
        e = c[(c[o >> 2] | 0) + (g * 56 | 0) + 40 >> 2] | 0;
        if (!e) e = f;else {
          do {
            if ((c[e + 4 >> 2] | 0) == (b | 0) ? (j = e + 8 | 0, k = c[j >> 2] | 0, (k | 0) > (d | 0)) : 0) c[j >> 2] = k + -1;
            e = c[e + 32 >> 2] | 0;
          } while ((e | 0) != 0);
          e = c[n >> 2] | 0;
        }
        if ((g | 0) < (e | 0)) {
          g = g + 1 | 0;
          f = e;
        } else break;
      }
      return;
    }
    g = 1;
    while (1) {
      f = c[o >> 2] | 0;
      e = c[f + (g * 56 | 0) + 40 >> 2] | 0;
      if (!e) e = f;else {
        do {
          if ((c[e + 4 >> 2] | 0) == 7 ? (l = e + 8 | 0, m = c[l >> 2] | 0, (m | 0) > (d | 0)) : 0) c[l >> 2] = m + -1;
          e = c[e + 32 >> 2] | 0;
        } while ((e | 0) != 0);
        e = c[o >> 2] | 0;
      }
      f = c[e + (g * 56 | 0) + 44 >> 2] | 0;
      if (f) {
        do {
          e = c[f >> 2] | 0;
          if ((e | 0) > (d | 0)) c[f >> 2] = e + -1;
          f = c[f + 16 >> 2] | 0;
        } while ((f | 0) != 0);
        e = c[o >> 2] | 0;
      }
      e = c[e + (g * 56 | 0) + 48 >> 2] | 0;
      if (e | 0) do {
        f = c[e >> 2] | 0;
        if ((f | 0) > (d | 0)) c[e >> 2] = f + -1;
        e = c[e + 16 >> 2] | 0;
      } while ((e | 0) != 0);
      if ((g | 0) < (c[n >> 2] | 0)) g = g + 1 | 0;else break;
    }
    return;
  }
  function Ej(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    h = c[a + 8 >> 2] | 0;
    i = a + 32 | 0;
    b = c[i >> 2] | 0;
    if ((b | 0) < 1) return;
    e = a + 76 | 0;
    d = 1;
    while (1) {
      a = c[(c[e >> 2] | 0) + (d * 56 | 0) + 40 >> 2] | 0;
      if (!a) a = b;else {
        do {
          if ((c[a + 4 >> 2] | 0) == 6 ? (f = a + 8 | 0, g = c[f >> 2] | 0, (g | 0) > (h | 0)) : 0) c[f >> 2] = g + 1;
          a = c[a + 32 >> 2] | 0;
        } while ((a | 0) != 0);
        a = c[i >> 2] | 0;
      }
      if ((d | 0) < (a | 0)) {
        d = d + 1 | 0;
        b = a;
      } else break;
    }
    return;
  }
  function Fj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    a: do if (!a) a = 0;else {
      d = 0;
      while (1) {
        d = d + 1 | 0;
        if ((d | 0) == (b | 0)) break a;
        a = c[a + 32 >> 2] | 0;
        if (!a) {
          a = 0;
          break;
        }
      }
    } while (0);
    return a | 0;
  }
  function Gj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    a: do if (!a) a = 0;else {
      d = 0;
      while (1) {
        d = d + 1 | 0;
        if ((d | 0) == (b | 0)) break a;
        a = c[a + 16 >> 2] | 0;
        if (!a) {
          a = 0;
          break;
        }
      }
    } while (0);
    return a | 0;
  }
  function xc() {
    Bk();
    ss();
    ws();
  }
  function yc(a) {
    a = a | 0;
    var b = 0;
    b = Ib;
    Ib = Ib + a | 0;
    Ib = Ib + 15 & -16;
    return b | 0;
  }
  function zc() {
    return Ib | 0;
  }
  function Ac(a) {
    a = a | 0;
    Ib = a;
  }
  function Bc(a, b) {
    a = a | 0;
    b = b | 0;
    Ib = a;
    Jb = b;
  }
  function Cc(a) {
    a = a | 0;
    var b = 0;
    b = gt(1, 6624) | 0;
    if (!b) return;
    ai(b + 5836 | 0);
    ai(b + 6096 | 0);
    ai(b + 6356 | 0);
    c[a >> 2] = b;
    return;
  }
  function Dc(a) {
    a = a | 0;
    if (!a) return;
    if (c[a + 5072 >> 2] | 0) Ec(a);
    vr(a + 5836 | 0);
    vr(a + 6096 | 0);
    vr(a + 6356 | 0);
    ft(a);
    return;
  }
  function Ec(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    e = a + 5072 | 0;
    if (c[e >> 2] | 0) qj(a, 4525);
    Dh(a);
    Ah(a);
    b = a + 92 | 0;
    d = c[b >> 2] | 0;
    if (d | 0) {
      $q(d);
      c[b >> 2] = 0;
    }
    b = a + 1200 | 0;
    d = c[b >> 2] | 0;
    if (!((d | 0) == 0 | (d | 0) == 2712)) {
      $q(d);
      c[b >> 2] = 0;
    }
    b = a + 4220 | 0;
    d = c[b >> 2] | 0;
    if (d | 0) {
      $q(d);
      c[b >> 2] = 0;
    }
    c[e >> 2] = 0;
    c[a + 4524 >> 2] = 0;
    c[a + 4192 >> 2] = 0;
    c[a + 4604 >> 2] = 0;
    c[a + 4196 >> 2] = 0;
    return;
  }
  function Fc(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    b = Gc(a, b, d, e) | 0;
    c[a + 6616 >> 2] = f;
    if (!((b | 0) > 100 | (c[a + 4188 >> 2] | 0) == 0)) b = Hc(a) | 0;
    if ((b | 0) <= 100) {
      b = Ic(a) | 0;
      if ((b | 0) <= 100) b = Jc(a) | 0;
    }
    Ec(a);
    a = c[a + 5076 >> 2] | 0;
    return ((a | 0) == 0 ? b : (b | 0) < (a | 0) ? a : b) | 0;
  }
  function Gc(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a + 5072 | 0;
    c[f >> 2] = 0;
    c[a + 4524 >> 2] = 0;
    c[a + 4604 >> 2] = 0;
    c[a + 4192 >> 2] = 0;
    c[a + 4196 >> 2] = 0;
    c[a + 5076 >> 2] = 0;
    c[a + 1224 >> 2] = 1;
    c[a + 1212 >> 2] = 1;
    Bh(a);
    b = wh(a, b, d, e) | 0;
    if ((b | 0) > 0) {
      di(a, b);
      f = b;
      return f | 0;
    }
    ei(c[a + 6616 >> 2] | 0, 4456);
    b = sg(a) | 0;
    if ((b | 0) <= 100) {
      b = Ch(a) | 0;
      if ((b | 0) <= 100) b = lg(a) | 0;
    }
    d = a + 92 | 0;
    e = c[d >> 2] | 0;
    if (e | 0) {
      $q(e);
      c[d >> 2] = 0;
    }
    if (!((b | 0) > 100 | (c[a + 4188 >> 2] | 0) != 0)) b = yh(a) | 0;
    if (b | 0) {
      di(a, b);
      f = b;
      return f | 0;
    }
    if (c[a + 1220 >> 2] | 0) Yi(a);
    qj(a, 4507);
    c[f >> 2] = 1;
    f = 0;
    return f | 0;
  }
  function Hc(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    l = Ib;
    Ib = Ib + 32 | 0;
    k = l + 8 | 0;
    j = l;
    h = l + 16 | 0;
    i = l + 12 | 0;
    b = Pc(a) | 0;
    a: do if (!b) {
      b = Qc(a, 1) | 0;
      if (!b) {
        e = a + 5080 | 0;
        f = a + 1256 | 0;
        g = a + 1172 | 0;
        d = a + 6616 | 0;
        b = 0;
        do {
          m = dj(f, c[g >> 2] | 0) | 0;
          c[j >> 2] = m;
          bq(e, 4543, j);
          c[k >> 2] = f;
          bq(e, 4549, k);
          ei(c[d >> 2] | 0, e);
          c[i >> 2] = 0;
          if ((b | 0) > 100) break a;
          b = Rc(a, h) | 0;
          if ((b | 0) > 100) break a;
          b = Sc(a, i) | 0;
        } while ((c[i >> 2] | 0) > 0);
      }
    } while (0);
    Tc(a) | 0;
    m = c[a + 5076 >> 2] | 0;
    Ib = l;
    return ((b | 0) < (m | 0) ? m : b) | 0;
  }
  function Ic(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    m = Ib;
    Ib = Ib + 32 | 0;
    l = m + 8 | 0;
    k = m;
    i = m + 16 | 0;
    j = m + 12 | 0;
    b = Xc(a) | 0;
    a: do if (!b) {
      b = Yc(a, 1) | 0;
      h = a + 4600 | 0;
      if (!(c[h >> 2] | 0)) ei(c[a + 6616 >> 2] | 0, 4595);
      if (!b) {
        d = a + 5080 | 0;
        e = a + 1256 | 0;
        f = a + 1172 | 0;
        g = a + 6616 | 0;
        b = 0;
        do {
          n = dj(e, c[f >> 2] | 0) | 0;
          c[k >> 2] = n;
          bq(d, 4543, k);
          if (c[h >> 2] | 0) {
            c[l >> 2] = e;
            bq(d, 4646, l);
            ei(c[g >> 2] | 0, d);
          }
          c[j >> 2] = 0;
          if ((b | 0) > 100) break a;
          b = Zc(a, i) | 0;
          if ((b | 0) > 100) break a;
          b = _c(a, j) | 0;
        } while ((c[j >> 2] | 0) > 0);
      }
    } while (0);
    $c(a) | 0;
    Ib = m;
    return b | 0;
  }
  function Jc(a) {
    a = a | 0;
    var b = 0;
    if (!(c[a + 4196 >> 2] | 0)) {
      b = 106;
      return b | 0;
    }
    ei(c[a + 6616 >> 2] | 0, 4692);
    b = Vi(a) | 0;
    if (!b) {
      b = 0;
      return b | 0;
    }
    di(a, b);
    return b | 0;
  }
  function Kc(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0;
    g = a + 5072 | 0;
    c[g >> 2] = 0;
    c[a + 4524 >> 2] = 0;
    c[a + 4604 >> 2] = 0;
    c[a + 4192 >> 2] = 0;
    c[a + 4196 >> 2] = 0;
    c[a + 5076 >> 2] = 0;
    c[a + 1224 >> 2] = 1;
    c[a + 1212 >> 2] = 1;
    if (e >>> 0 > 9 | f >>> 0 > 2) {
      g = 251;
      return g | 0;
    }
    b = wh(a, 21176, b, d) | 0;
    Bh(a);
    if ((b | 0) > 100) {
      g = b;
      return g | 0;
    }
    b = sg(a) | 0;
    if ((b | 0) > 100) {
      g = b;
      return g | 0;
    }
    b = Ch(a) | 0;
    if (b | 0) {
      g = b;
      return g | 0;
    }
    mg(a);
    c[a + 1120 >> 2] = e;
    c[a + 4500 >> 2] = f;
    og(a);
    ng(a + 1200 | 0);
    pg(a);
    qg(a) | 0;
    rg(a);
    c[a + 1096 >> 2] = 0;
    c[g >> 2] = 1;
    g = 0;
    return g | 0;
  }
  function Lc(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    hr(b, a + 5336 | 0, 79) | 0;
    hr(d, a + 5416 | 0, 79) | 0;
    hr(e, a + 5496 | 0, 79) | 0;
    e = 0;
    return e | 0;
  }
  function Mc(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    hr(a + 5336 | 0, b, 79) | 0;
    hr(a + 5416 | 0, d, 79) | 0;
    hr(a + 5496 | 0, e, 79) | 0;
    e = 0;
    return e | 0;
  }
  function Nc(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    c[d >> 2] = 0;
    a: do if (!(c[a + 5072 >> 2] | 0)) a = 102;else switch (b | 0) {
      case 0:
        {
          c[d >> 2] = c[a >> 2];
          a = 0;
          break a;
        }
      case 1:
        {
          c[d >> 2] = c[a + 4 >> 2];
          a = 0;
          break a;
        }
      case 2:
        {
          c[d >> 2] = c[a + 12 >> 2];
          a = 0;
          break a;
        }
      case 3:
        {
          c[d >> 2] = c[a + 36 >> 2];
          a = 0;
          break a;
        }
      case 4:
        {
          c[d >> 2] = c[a + 40 >> 2];
          a = 0;
          break a;
        }
      case 5:
        {
          c[d >> 2] = c[a + 28 >> 2];
          a = 0;
          break a;
        }
      case 6:
        {
          c[d >> 2] = c[a + 32 >> 2];
          a = 0;
          break a;
        }
      default:
        {
          a = 251;
          break a;
        }
    } while (0);
    return a | 0;
  }
  function Oc(a, b) {
    a = a | 0;
    b = b | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      b = 102;
      return b | 0;
    }
    b = kg(a, b) | 0;
    return b | 0;
  }
  function Pc(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = a + 4524 | 0;
    c[b >> 2] = 0;
    c[a + 4192 >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if (!(c[a + 4188 >> 2] | 0)) {
      d = 107;
      return d | 0;
    }
    d = wf(a) | 0;
    if (!d) {
      c[b >> 2] = 1;
      d = 0;
      return d | 0;
    } else {
      di(a, d);
      return d | 0;
    }
    return 0;
  }
  function Qc(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    c[a + 4192 >> 2] = 0;
    c[a + 5076 >> 2] = 0;
    e = (b | 0) / 10 | 0;
    if (!(c[a + 4524 >> 2] | 0)) {
      e = 103;
      return e | 0;
    }
    d = (w(e, -10) | 0) + b | 0;
    b = a + 4200 | 0;
    c[b >> 2] = 0;
    do if ((d | 0) > 0) {
      d = yh(a) | 0;
      if (!d) {
        c[b >> 2] = 1;
        break;
      }
      di(a, d);
      e = d;
      return e | 0;
    } while (0);
    zf(a, e);
    if ((c[a + 1228 >> 2] | 0) <= 0) {
      e = 0;
      return e | 0;
    }
    aj(a, 0, 0);
    e = 0;
    return e | 0;
  }
  function Rc(a, b) {
    a = a | 0;
    b = b | 0;
    c[b >> 2] = 0;
    if (c[a + 4524 >> 2] | 0) {
      b = Af(a, b) | 0;
      if (!b) b = 0;else di(a, b);
    } else b = 103;
    return b | 0;
  }
  function Sc(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    c[b >> 2] = 0;
    do if (c[a + 4524 >> 2] | 0) {
      d = Gf(a, b) | 0;
      if (d | 0) {
        di(a, d);
        break;
      }
      if ((c[a + 4200 >> 2] | 0) != 0 ? (c[b >> 2] | 0) == 0 : 0) {
        c[a + 4192 >> 2] = 1;
        d = 0;
      } else d = 0;
    } else d = 103; while (0);
    return d | 0;
  }
  function Tc(a) {
    a = a | 0;
    var b = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      b = 102;
      return b | 0;
    }
    b = a + 4524 | 0;
    if (c[b >> 2] | 0) Pf(a);
    c[b >> 2] = 0;
    b = 0;
    return b | 0;
  }
  function Uc(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    if (!(c[a + 4192 >> 2] | 0)) {
      b = 104;
      return b | 0;
    }
    d = a + 4600 | 0;
    e = c[d >> 2] | 0;
    c[d >> 2] = 0;
    b = Ic(a) | 0;
    c[d >> 2] = e;
    if (!b) {
      e = 0;
      return e | 0;
    }
    di(a, b);
    e = b;
    return e | 0;
  }
  function Vc(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = a + 4220 | 0;
    if (!(c[d >> 2] | 0)) {
      e = 104;
      return e | 0;
    }
    if (!(c[a + 4192 >> 2] | 0)) {
      e = 104;
      return e | 0;
    }
    e = Vq(b, 8675) | 0;
    if (!e) {
      e = 305;
      return e | 0;
    }
    b = c[d >> 2] | 0;
    dr(b, 0, 0);
    a = lr(b) | 0;
    if ((a | 0) != -1) do {
      or(a, e);
      a = lr(b) | 0;
    } while ((a | 0) != -1);
    $q(e);
    e = 0;
    return e | 0;
  }
  function Wc(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      g = 102;
      return g | 0;
    }
    if (c[b + 4524 >> 2] | 0) {
      g = 108;
      return g | 0;
    }
    g = b + 3664 | 0;
    hr(g, d, 259) | 0;
    f = b + 4188 | 0;
    c[f >> 2] = 0;
    e = b + 4192 | 0;
    c[e >> 2] = 1;
    d = yh(b) | 0;
    if (!d) {
      g = 0;
      return g | 0;
    }
    a[g >> 0] = 0;
    c[f >> 2] = 2;
    c[e >> 2] = 0;
    g = d;
    return g | 0;
  }
  function Xc(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = a + 4604 | 0;
    c[b >> 2] = 0;
    c[a + 4196 >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((c[a + 4524 >> 2] | 0) == 0 ? (c[a + 4192 >> 2] | 0) == 0 : 0) {
      d = 104;
      return d | 0;
    }
    d = fi(a) | 0;
    if (!d) {
      c[b >> 2] = 1;
      d = 0;
      return d | 0;
    } else {
      di(a, d);
      return d | 0;
    }
    return 0;
  }
  function Yc(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    if (!(c[a + 4604 >> 2] | 0)) {
      d = 105;
      return d | 0;
    }
    gi(a);
    c[a + 4196 >> 2] = 0;
    d = a + 4200 | 0;
    c[d >> 2] = 0;
    if (!b) {
      d = 0;
      return d | 0;
    }
    a = zh(a) | 0;
    if (a | 0) {
      d = a;
      return d | 0;
    }
    c[d >> 2] = 1;
    d = 0;
    return d | 0;
  }
  function Zc(a, b) {
    a = a | 0;
    b = b | 0;
    c[b >> 2] = 0;
    if (c[a + 4604 >> 2] | 0) {
      b = ii(a, b) | 0;
      if (!b) b = 0;else di(a, b);
    } else b = 105;
    return b | 0;
  }
  function _c(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    c[b >> 2] = 0;
    do if (c[a + 4604 >> 2] | 0) {
      d = ki(a, b) | 0;
      if (d | 0) {
        di(a, d);
        break;
      }
      if ((c[a + 4200 >> 2] | 0) != 0 ? (c[b >> 2] | 0) == 0 : 0) {
        c[a + 4196 >> 2] = 1;
        d = 0;
      } else d = 0;
    } else d = 105; while (0);
    return d | 0;
  }
  function $c(a) {
    a = a | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      a = 102;
      return a | 0;
    }
    ni(a);
    c[a + 4604 >> 2] = 0;
    Ah(a);
    a = 0;
    return a | 0;
  }
  function ad(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    c[b >> 2] = 0;
    do if (c[a + 4604 >> 2] | 0) {
      d = mi(a, b) | 0;
      if (d | 0) {
        di(a, d);
        break;
      }
      if ((c[a + 4200 >> 2] | 0) != 0 ? (c[b >> 2] | 0) == 0 : 0) {
        c[a + 4196 >> 2] = 1;
        d = 0;
      } else d = 0;
    } else d = 105; while (0);
    return d | 0;
  }
  function bd(a, b) {
    a = a | 0;
    b = b | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      b = 102;
      return b | 0;
    }
    Ti(a, b);
    b = 0;
    return b | 0;
  }
  function cd(a, b) {
    a = a | 0;
    b = b | 0;
    return Ui(a, b) | 0;
  }
  function dd(a) {
    a = a | 0;
    return Ri(a) | 0;
  }
  function ed(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    ng(a + 1200 | 0);
    if ((c[a >> 2] | 0) >= 1) {
      d = a + 44 | 0;
      b = 1;
      while (1) {
        c[(c[d >> 2] | 0) + (b * 96 | 0) + 80 >> 2] = 0;
        if ((b | 0) < (c[a >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    e = a + 12 | 0;
    if ((c[e >> 2] | 0) < 1) {
      e = 0;
      return e | 0;
    }
    d = a + 48 | 0;
    b = 1;
    while (1) {
      c[(c[d >> 2] | 0) + (b << 7) + 116 >> 2] = 0;
      if ((b | 0) < (c[e >> 2] | 0)) b = b + 1 | 0;else {
        b = 0;
        break;
      }
    }
    return b | 0;
  }
  function fd(a, b) {
    a = a | 0;
    b = b | 0;
    if (b >>> 0 >= 3) {
      b = 251;
      return b | 0;
    }
    c[a + 1228 >> 2] = b << 24 >> 24;
    b = 0;
    return b | 0;
  }
  function gd(a) {
    a = a | 0;
    c[a >> 2] = 20200;
    return 0;
  }
  function hd(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 528 | 0;
    k = l + 520 | 0;
    f = l + 512 | 0;
    i = l + 256 | 0;
    j = l;
    vt(i | 0, 0, 256) | 0;
    vt(j | 0, 0, 256) | 0;
    switch (b | 0) {
      case 1:
        {
          hr(d, 4743, e) | 0;
          break;
        }
      case 2:
        {
          hr(d, 4785, e) | 0;
          break;
        }
      case 3:
        {
          hr(d, 4832, e) | 0;
          break;
        }
      case 4:
        {
          hr(d, 4862, e) | 0;
          break;
        }
      case 5:
        {
          hr(d, 4913, e) | 0;
          break;
        }
      case 6:
        {
          hr(d, 4957, e) | 0;
          break;
        }
      default:
        {
          c[f >> 2] = b;
          bq(i, 4997, f);
          if ((b + -202 | 0) >>> 0 < 21 | (b + -240 | 0) >>> 0 < 22) {
            f = i + (Kq(i) | 0) | 0;
            g = 5008;
            h = f + 24 | 0;
            do {
              a[f >> 0] = a[g >> 0] | 0;
              f = f + 1 | 0;
              g = g + 1 | 0;
            } while ((f | 0) < (h | 0));
          }
          j = ci(b, j) | 0;
          c[k >> 2] = i;
          c[k + 4 >> 2] = j;
          Nq(d, e, 5032, k);
        }
    }
    Ib = l;
    return ((a[d >> 0] | 0) == 0 ? 251 : 0) | 0;
  }
  function id(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0.0;
    switch (b | 0) {
      case 0:
        {
          b = 0;
          e = +(c[a + 4504 >> 2] | 0);
          break;
        }
      case 1:
        {
          b = 0;
          e = +g[a + 4440 >> 3];
          break;
        }
      case 2:
        {
          b = 0;
          e = +g[a + 4448 >> 3] * +g[a + 4920 >> 3];
          break;
        }
      case 3:
        {
          b = 0;
          e = +g[a + 4456 >> 3] * +g[a + 4960 >> 3];
          break;
        }
      case 5:
        {
          b = 0;
          e = +(c[a + 4532 >> 2] | 0);
          break;
        }
      case 6:
        {
          b = 0;
          e = +g[a + 4464 >> 3];
          break;
        }
      case 4:
        {
          b = 0;
          e = +g[a + 4896 >> 3];
          break;
        }
      default:
        {
          b = 251;
          e = 0.0;
        }
    }
    g[d >> 3] = e;
    return b | 0;
  }
  function jd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    c[e >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    a: do switch (b | 0) {
      case 0:
        {
          if ((d | 0) < 1) {
            e = 203;
            return e | 0;
          }
          if ((c[a >> 2] | 0) < (d | 0)) {
            e = 203;
            return e | 0;
          } else {
            a = (c[a + 44 >> 2] | 0) + (d * 96 | 0) + 84 | 0;
            break a;
          }
        }
      case 1:
        {
          if ((d | 0) < 1) {
            e = 204;
            return e | 0;
          }
          if ((c[a + 12 >> 2] | 0) < (d | 0)) {
            e = 204;
            return e | 0;
          } else {
            a = (c[a + 48 >> 2] | 0) + (d << 7) + 120 | 0;
            break a;
          }
        }
      default:
        {
          e = 251;
          return e | 0;
        }
    } while (0);
    c[e >> 2] = c[a >> 2];
    e = 0;
    return e | 0;
  }
  function kd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0.0;
    g[d >> 3] = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    do switch (b | 0) {
      case 0:
        {
          e = +(c[a + 4508 >> 2] | 0);
          break;
        }
      case 1:
        {
          e = +g[a + 4352 >> 3];
          break;
        }
      case 2:
        {
          e = +g[a + 4688 >> 3] * +g[a + 4936 >> 3];
          break;
        }
      case 3:
        {
          e = +g[a + 4312 >> 3];
          if (e > 0.0) e = 1.0 / e;else e = 0.0;
          break;
        }
      case 4:
        {
          e = +g[a + 4344 >> 3];
          break;
        }
      case 5:
        {
          e = +g[a + 4368 >> 3] * +g[a + 4920 >> 3];
          break;
        }
      case 6:
        {
          e = +g[a + 4360 >> 3] * +g[a + 4960 >> 3];
          break;
        }
      case 7:
        {
          e = +(c[a + 4500 >> 2] | 0);
          break;
        }
      case 8:
        {
          e = +g[a + 4400 >> 3];
          break;
        }
      case 9:
        {
          e = +g[a + 4416 >> 3];
          break;
        }
      case 10:
        {
          e = +(c[a + 4492 >> 2] | 0);
          break;
        }
      case 11:
        {
          e = +g[a + 4424 >> 3];
          break;
        }
      case 12:
        {
          e = +g[a + 4392 >> 3];
          break;
        }
      case 13:
        {
          e = +g[a + 4384 >> 3] / .000011;
          break;
        }
      case 14:
        {
          e = +(c[a + 4512 >> 2] | 0);
          break;
        }
      case 15:
        {
          e = +(c[a + 4516 >> 2] | 0);
          break;
        }
      case 16:
        {
          e = +(c[a + 4520 >> 2] | 0);
          break;
        }
      case 17:
        {
          e = +g[a + 4376 >> 3];
          break;
        }
      case 18:
        {
          e = +g[a + 4696 >> 3] / 1.3e-08;
          break;
        }
      case 19:
        {
          e = +g[a + 4768 >> 3];
          break;
        }
      case 20:
        {
          e = +g[a + 4776 >> 3];
          break;
        }
      case 21:
        {
          e = +g[a + 4784 >> 3];
          break;
        }
      case 22:
        {
          e = +g[a + 4808 >> 3] * +g[a + 4936 >> 3];
          break;
        }
      default:
        {
          d = 251;
          return d | 0;
        }
    } while (0);
    g[d >> 3] = e;
    d = 0;
    return d | 0;
  }
  function ld(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    var e = 0,
      f = 0.0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    k = Ib;
    Ib = Ib + 16 | 0;
    i = k;
    j = c[a + 8 >> 2] | 0;
    a: do if (c[a + 5072 >> 2] | 0) {
      if ((b | 0) == 14) {
        b = ~~d;
        c[a + 4512 >> 2] = (b | 0) > -1 ? b : -1;
        b = 0;
        break;
      }
      if (d < 0.0) b = 213;else do switch (b | 0) {
        case 0:
          {
            if (d < 1.0) {
              b = 213;
              break a;
            }
            c[a + 4508 >> 2] = ~~d;
            b = 0;
            break a;
          }
        case 1:
          {
            if (d < 1.0e-08 | d > .1) {
              b = 213;
              break a;
            }
            g[a + 4352 >> 3] = d;
            b = 0;
            break a;
          }
        case 2:
          {
            g[a + 4688 >> 3] = d / +g[a + 4936 >> 3];
            b = 0;
            break a;
          }
        case 3:
          {
            if (d <= 0.0) {
              b = 213;
              break a;
            }
            d = 1.0 / d;
            f = +u(+ +g[a + 4960 >> 3], +d) / +g[a + 4928 >> 3];
            if ((j | 0) >= 1) {
              e = a + 44 | 0;
              b = 1;
              while (1) {
                l = (md(a, b, 3, i) | 0) == 0;
                h = +g[i >> 3];
                if (l & h > 0.0) {
                  h = f / +u(+h, +d);
                  g[(c[e >> 2] | 0) + (b * 96 | 0) + 72 >> 3] = h;
                }
                if ((b | 0) == (j | 0)) break;else b = b + 1 | 0;
              }
            }
            g[a + 4312 >> 3] = d;
            b = 0;
            break a;
          }
        case 4:
          {
            g[a + 4344 >> 3] = d;
            b = 0;
            break a;
          }
        case 5:
          {
            g[a + 4368 >> 3] = d / +g[a + 4920 >> 3];
            b = 0;
            break a;
          }
        case 6:
          {
            g[a + 4360 >> 3] = d / +g[a + 4960 >> 3];
            b = 0;
            break a;
          }
        case 7:
          {
            if (c[a + 4524 >> 2] | 0) {
              b = 262;
              break a;
            }
            e = ~~((d >= 0.0 ? .5 : -.5) + d);
            if (e >>> 0 > 2) {
              b = 213;
              break a;
            }
            c[a + 4500 >> 2] = e;
            b = a + 4304 | 0;
            if (!e) {
              g[b >> 3] = 1.852;
              b = 0;
              break a;
            } else {
              g[b >> 3] = 2.0;
              b = 0;
              break a;
            }
          }
        case 8:
          {
            if (d <= 1.0 | d > 100.0) {
              b = 213;
              break a;
            }
            g[a + 4400 >> 3] = d;
            b = 0;
            break a;
          }
        case 9:
          {
            g[a + 4416 >> 3] = d;
            b = 0;
            break a;
          }
        case 10:
          {
            b = ~~((d >= 0.0 ? .5 : -.5) + d);
            if ((b | 0) < 0) {
              b = 205;
              break a;
            }
            if ((c[a + 36 >> 2] | 0) < (b | 0)) {
              b = 205;
              break a;
            }
            c[a + 4492 >> 2] = b;
            b = 0;
            break a;
          }
        case 11:
          {
            g[a + 4424 >> 3] = d;
            b = 0;
            break a;
          }
        case 12:
          {
            if (d <= 0.0) {
              b = 213;
              break a;
            }
            b = a + 4392 | 0;
            l = a + 4928 | 0;
            g[l >> 3] = +g[l >> 3] * (d / +g[b >> 3]);
            g[b >> 3] = d;
            b = 0;
            break a;
          }
        case 13:
          {
            if (d <= 0.0) {
              b = 213;
              break a;
            }
            g[a + 4384 >> 3] = d * .000011;
            b = 0;
            break a;
          }
        case 15:
          {
            c[a + 4516 >> 2] = ~~d;
            b = 0;
            break a;
          }
        case 16:
          {
            c[a + 4520 >> 2] = ~~d;
            b = 0;
            break a;
          }
        case 17:
          {
            g[a + 4376 >> 3] = d;
            b = 0;
            break a;
          }
        case 18:
          {
            g[a + 4696 >> 3] = d * 1.3e-08;
            b = 0;
            break a;
          }
        case 19:
          {
            g[a + 4768 >> 3] = d;
            b = 0;
            break a;
          }
        case 20:
          {
            if (!(d == 0.0 | d == 1.0)) {
              b = 213;
              break a;
            }
            g[a + 4776 >> 3] = d;
            b = 0;
            break a;
          }
        case 21:
          {
            g[a + 4784 >> 3] = d;
            b = 0;
            break a;
          }
        case 22:
          {
            g[a + 4808 >> 3] = d / +g[a + 4936 >> 3];
            b = 0;
            break a;
          }
        default:
          {
            b = 251;
            break a;
          }
      } while (0);
    } else b = 102; while (0);
    Ib = k;
    return b | 0;
  }
  function md(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    m = c[a + 44 >> 2] | 0;
    n = c[a + 52 >> 2] | 0;
    o = c[a + 8 >> 2] | 0;
    h = a + 4904 | 0;
    i = c[a + 4256 >> 2] | 0;
    j = c[a + 4824 >> 2] | 0;
    g[e >> 3] = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 203;
      return e | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      e = 203;
      return e | 0;
    }
    a: do switch (d | 0) {
      case 0:
        {
          f = +g[m + (b * 96 | 0) + 48 >> 3] * +g[h >> 3];
          break;
        }
      case 1:
        {
          if ((o | 0) >= (b | 0) ? (l = c[m + (b * 96 | 0) + 56 >> 2] | 0, (l | 0) != 0) : 0) f = +g[l >> 3] * +g[a + 4960 >> 3];else f = 0.0;
          break;
        }
      case 2:
        {
          if ((o | 0) < (b | 0)) {
            f = +(c[n + ((b - o | 0) * 120 | 0) + 88 >> 2] | 0);
            break a;
          }
          h = c[m + (b * 96 | 0) + 56 >> 2] | 0;
          if (!h) f = 0.0;else f = +(c[h + 8 >> 2] | 0);
          break;
        }
      case 3:
        {
          f = +g[m + (b * 96 | 0) + 72 >> 3];
          if (f > 0.0) f = +g[a + 4960 >> 3] / +u(+(f * +g[a + 4928 >> 3]), +(1.0 / +g[a + 4312 >> 3]));else f = 0.0;
          break;
        }
      case 4:
        {
          f = +g[m + (b * 96 | 0) + 64 >> 3] * +g[a + 4936 >> 3];
          break;
        }
      case 6:
      case 13:
      case 7:
      case 5:
        {
          h = c[m + (b * 96 | 0) + 60 >> 2] | 0;
          if (!h) {
            e = 240;
            return e | 0;
          }
          switch (d | 0) {
            case 5:
              {
                f = +g[h >> 3];
                break a;
              }
            case 13:
              {
                f = +g[h + 16 >> 3] * 60.0;
                break a;
              }
            case 6:
              {
                f = +(c[h + 8 >> 2] | 0);
                break a;
              }
            default:
              {
                f = +((c[h + 24 >> 2] | 0) >>> 0);
                break a;
              }
          }
        }
      case 8:
        if ((o | 0) < (b | 0)) {
          f = (+g[n + ((b - o | 0) * 120 | 0) + 32 >> 3] - +g[m + (b * 96 | 0) + 48 >> 3]) * +g[h >> 3];
          break a;
        } else {
          e = 0;
          return e | 0;
        }
      case 14:
        {
          if ((o | 0) < (b | 0)) f = +g[n + ((b - o | 0) * 120 | 0) + 56 >> 3] * +g[a + 5040 >> 3];else f = 0.0;
          break;
        }
      case 15:
        {
          if ((o | 0) < (b | 0)) f = +((c[n + ((b - o | 0) * 120 | 0) + 96 >> 2] | 0) >>> 0);else f = 0.0;
          break;
        }
      case 16:
        {
          if ((o | 0) < (b | 0)) f = +g[n + ((b - o | 0) * 120 | 0) + 104 >> 3] * +g[a + 5040 >> 3];else f = 0.0;
          break;
        }
      case 9:
        {
          f = +g[(c[a + 4260 >> 2] | 0) + (b << 3) >> 3] * +g[a + 4960 >> 3];
          break;
        }
      case 10:
        {
          f = +g[i + (b << 3) >> 3] * +g[a + 4920 >> 3];
          break;
        }
      case 11:
        {
          f = (+g[i + (b << 3) >> 3] - +g[m + (b * 96 | 0) + 48 >> 3]) * +g[a + 4928 >> 3];
          break;
        }
      case 12:
        {
          f = +g[j + (b << 3) >> 3] * +g[a + 4936 >> 3];
          break;
        }
      case 17:
        {
          if ((o | 0) < (b | 0)) {
            f = +t(+(+g[n + ((b - o | 0) * 120 | 0) + 8 >> 3] * 1.2732395447351628));
            f = +g[h >> 3] * f;
          } else f = 0.0;
          break;
        }
      case 18:
        {
          if ((o | 0) < (b | 0)) f = +g[n + ((b - o | 0) * 120 | 0) + 40 >> 3] * +g[a + 5040 >> 3];else f = 0.0;
          break;
        }
      case 25:
        {
          if ((o | 0) < (b | 0)) f = +g[n + ((b - o | 0) * 120 | 0) + 48 >> 3] * +g[a + 5040 >> 3];else f = 0.0;
          break;
        }
      case 19:
        {
          if ((o | 0) < (b | 0)) f = +(c[n + ((b - o | 0) * 120 | 0) + 92 >> 2] | 0);else f = 0.0;
          break;
        }
      case 20:
        {
          if ((o | 0) < (b | 0)) f = (+g[n + ((b - o | 0) * 120 | 0) + 16 >> 3] - +g[m + (b * 96 | 0) + 48 >> 3]) * +g[h >> 3];else f = 0.0;
          break;
        }
      case 21:
        {
          if ((o | 0) < (b | 0)) f = (+g[n + ((b - o | 0) * 120 | 0) + 24 >> 3] - +g[m + (b * 96 | 0) + 48 >> 3]) * +g[h >> 3];else f = 0.0;
          break;
        }
      case 22:
        {
          if ((o | 0) < (b | 0) ? (k = b - o | 0, f = +g[n + (k * 120 | 0) + 48 >> 3], f > 0.0) : 0) f = +g[n + (k * 120 | 0) + 104 >> 3] / f;else f = 1.0;
          break;
        }
      case 23:
        {
          if ((o | 0) < (b | 0)) f = +g[n + ((b - o | 0) * 120 | 0) + 64 >> 3] * 86400.0;else f = 0.0;
          break;
        }
      case 24:
        if ((o | 0) < (b | 0)) {
          f = +Df(a, b - o | 0, +g[i + (b << 3) >> 3]);
          f = f * +g[a + 5040 >> 3];
          break a;
        } else {
          e = 0;
          return e | 0;
        }
      case 26:
        if ((c[m + (b * 96 | 0) + 88 >> 2] | 0) == 2) {
          f = +(c[n + ((b - o | 0) * 120 | 0) + 112 >> 2] | 0);
          break a;
        } else {
          e = 0;
          return e | 0;
        }
      case 27:
        {
          if ((o | 0) < (b | 0)) {
            e = 0;
            return e | 0;
          }
          f = +g[(c[a + 4264 >> 2] | 0) + (b << 3) >> 3];
          if (f < 0.0) {
            e = 0;
            return e | 0;
          } else {
            f = +g[a + 4960 >> 3] * (f - (+g[(c[a + 4260 >> 2] | 0) + (b << 3) >> 3] - +g[(c[a + 4268 >> 2] | 0) + (b << 3) >> 3]));
            break a;
          }
        }
      default:
        {
          e = 251;
          return e | 0;
        }
    } while (0);
    g[e >> 3] = f;
    e = 0;
    return e | 0;
  }
  function nd(a, b) {
    a = a | 0;
    b = b | 0;
    c[b >> 2] = -1;
    if (!(c[a + 5072 >> 2] | 0)) {
      b = 102;
      return b | 0;
    }
    c[b >> 2] = c[a + 1120 >> 2];
    b = 0;
    return b | 0;
  }
  function od(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0.0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0.0,
      p = 0,
      q = 0.0,
      r = 0;
    m = a + 4904 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      p = 102;
      return p | 0;
    }
    n = a + 4960 | 0;
    o = +g[n >> 3];
    p = a + 5040 | 0;
    q = +g[p >> 3];
    j = a + 4920 | 0;
    k = +g[j >> 3];
    l = +g[m >> 3];
    c[a + 1120 >> 2] = b;
    i = (b + -5 | 0) >>> 0 < 5;
    c[a + 1116 >> 2] = i & 1;
    d = a + 1124 | 0;
    if (i) {
      if (!(c[d >> 2] | 0)) {
        b = 2;
        e = 4;
      }
    } else {
      b = 0;
      e = 4;
    }
    if ((e | 0) == 4) c[d >> 2] = b;
    pg(a);
    i = a + 40 | 0;
    d = c[i >> 2] | 0;
    if ((d | 0) < 1) {
      p = 0;
      return p | 0;
    }
    a = a + 68 | 0;
    e = 1;
    b = c[a >> 2] | 0;
    while (1) {
      switch (c[b + (e * 56 | 0) + 36 >> 2] | 0) {
        case 0:
          {
            f = q / +g[p >> 3];
            h = l / +g[m >> 3];
            break;
          }
        case 1:
        case 3:
          {
            f = k / +g[j >> 3];
            h = o / +g[n >> 3];
            break;
          }
        case 2:
          {
            f = 1.0;
            h = o / +g[n >> 3];
            break;
          }
        default:
          {
            f = 1.0;
            h = 1.0;
          }
      }
      if ((c[b + (e * 56 | 0) + 40 >> 2] | 0) > 0) {
        d = 0;
        do {
          r = (c[b + (e * 56 | 0) + 48 >> 2] | 0) + (d << 3) | 0;
          g[r >> 3] = +g[r >> 3] / h;
          r = (c[(c[a >> 2] | 0) + (e * 56 | 0) + 52 >> 2] | 0) + (d << 3) | 0;
          g[r >> 3] = +g[r >> 3] / f;
          d = d + 1 | 0;
          b = c[a >> 2] | 0;
        } while ((d | 0) < (c[b + (e * 56 | 0) + 40 >> 2] | 0));
        d = c[i >> 2] | 0;
      }
      if ((e | 0) < (d | 0)) e = e + 1 | 0;else {
        b = 0;
        break;
      }
    }
    return b | 0;
  }
  function pd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if (b >>> 0 > 15) {
      d = 251;
      return d | 0;
    }
    do switch (b | 0) {
      case 0:
        {
          c[d >> 2] = c[a + 1192 >> 2];
          break;
        }
      case 1:
        {
          c[d >> 2] = c[a + 1148 >> 2];
          break;
        }
      case 2:
        {
          c[d >> 2] = c[a + 1180 >> 2];
          break;
        }
      case 3:
        {
          c[d >> 2] = c[a + 1152 >> 2];
          break;
        }
      case 4:
        {
          c[d >> 2] = c[a + 1156 >> 2];
          break;
        }
      case 5:
        {
          c[d >> 2] = c[a + 1160 >> 2];
          break;
        }
      case 6:
        {
          c[d >> 2] = c[a + 1164 >> 2];
          break;
        }
      case 7:
        {
          c[d >> 2] = c[a + 1188 >> 2];
          break;
        }
      case 8:
        {
          c[d >> 2] = c[a + 1216 >> 2];
          break;
        }
      case 9:
        {
          c[d >> 2] = c[a + 1204 >> 2];
          break;
        }
      case 10:
        {
          c[d >> 2] = c[a + 1144 >> 2];
          break;
        }
      case 11:
        {
          c[d >> 2] = c[a + 1172 >> 2];
          break;
        }
      case 12:
        {
          c[d >> 2] = c[a + 1184 >> 2];
          break;
        }
      case 13:
        break;
      case 14:
        {
          c[d >> 2] = c[a + 1148 >> 2];
          Kf(a, d) | 0;
          break;
        }
      case 15:
        {
          c[d >> 2] = c[a + 1148 >> 2];
          b = Kf(a, d) | 0;
          c[d >> 2] = b;
          break;
        }
      default:
        {
          d = 251;
          return d | 0;
        }
    } while (0);
    d = 0;
    return d | 0;
  }
  function qd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0;
    a: do if (c[a + 5072 >> 2] | 0) {
      if ((d | 0) < 0) b = 213;else do switch (b | 0) {
        case 0:
          {
            c[a + 1192 >> 2] = d;
            b = a + 1164 | 0;
            if ((c[b >> 2] | 0) <= (d | 0)) {
              b = 0;
              break a;
            }
            c[b >> 2] = 0;
            b = 0;
            break a;
          }
        case 1:
          {
            if (!d) {
              b = 213;
              break a;
            }
            b = c[a + 1152 >> 2] | 0;
            b = (b | 0) > (d | 0) ? d : b;
            e = c[a + 1160 >> 2] | 0;
            e = (e | 0) > (b | 0) ? b : e;
            c[a + 1148 >> 2] = e;
            b = a + 1180 | 0;
            d = c[b >> 2] | 0;
            c[b >> 2] = (d | 0) > (e | 0) ? e : d;
            b = 0;
            break a;
          }
        case 2:
          {
            if (!d) {
              b = 213;
              break a;
            }
            b = c[a + 1148 >> 2] | 0;
            c[a + 1180 >> 2] = (b | 0) < (d | 0) ? b : d;
            b = 0;
            break a;
          }
        case 3:
          {
            if (!d) {
              b = 213;
              break a;
            }
            c[a + 1152 >> 2] = d;
            b = a + 1148 | 0;
            if ((c[b >> 2] | 0) <= (d | 0)) {
              b = 0;
              break a;
            }
            c[b >> 2] = d;
            b = 0;
            break a;
          }
        case 4:
          {
            c[a + 1156 >> 2] = d;
            b = 0;
            break a;
          }
        case 5:
          {
            if (!d) {
              b = 213;
              break a;
            }
            c[a + 1160 >> 2] = d;
            b = a + 1148 | 0;
            if ((c[b >> 2] | 0) <= (d | 0)) {
              b = 0;
              break a;
            }
            c[b >> 2] = d;
            b = 0;
            break a;
          }
        case 6:
          {
            b = a + 1164 | 0;
            if ((c[b >> 2] | 0) > (c[a + 1192 >> 2] | 0)) {
              b = 213;
              break a;
            }
            c[b >> 2] = d;
            b = 0;
            break a;
          }
        case 7:
          {
            if (!d) {
              b = 213;
              break a;
            }
            b = c[a + 1148 >> 2] | 0;
            c[a + 1188 >> 2] = (b | 0) < (d | 0) ? b : d;
            b = 0;
            break a;
          }
        case 8:
          {
            if ((d | 0) > 4) {
              b = 213;
              break a;
            }
            c[a + 1216 >> 2] = d << 24 >> 24;
            b = 0;
            break a;
          }
        case 11:
          {
            c[a + 1172 >> 2] = d;
            b = 0;
            break a;
          }
        case 12:
          {
            c[a + 1184 >> 2] = d;
            b = 0;
            break a;
          }
        default:
          {
            b = 251;
            break a;
          }
      } while (0);
    } else b = 102; while (0);
    return b | 0;
  }
  function rd(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    sd(b, d, g) | 0;
    switch (c[b + 4600 >> 2] | 0) {
      case 1:
        {
          hr(e, b + 4624 | 0, 31) | 0;
          hr(f, b + 4656 | 0, 31) | 0;
          return;
        }
      case 3:
        {
          hr(e, 8625, 31) | 0;
          hr(f, 8631, 31) | 0;
          return;
        }
      case 2:
        {
          hr(e, 8621, 31) | 0;
          hr(f, 8638, 31) | 0;
          return;
        }
      default:
        {
          b = e + 31 | 0;
          do {
            a[e >> 0] = 0;
            e = e + 1 | 0;
          } while ((e | 0) < (b | 0));
          e = f;
          b = e + 31 | 0;
          do {
            a[e >> 0] = 0;
            e = e + 1 | 0;
          } while ((e | 0) < (b | 0));
          return;
        }
    }
  }
  function sd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    e = a + 4600 | 0;
    c[b >> 2] = c[e >> 2];
    if ((c[e >> 2] | 0) != 3) {
      e = 0;
      return e | 0;
    }
    c[d >> 2] = c[a + 4616 >> 2];
    e = 0;
    return e | 0;
  }
  function td(b, d, e, f, h) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    var i = 0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      o = 102;
      return o | 0;
    }
    if (c[b + 4604 >> 2] | 0) {
      o = 262;
      return o | 0;
    }
    if (d >>> 0 > 3) {
      o = 251;
      return o | 0;
    }
    if ((d | 0) == 3 ? (Oh(c[b + 80 >> 2] | 0, h) | 0) == 0 : 0) {
      o = 212;
      return o | 0;
    }
    i = b + 4600 | 0;
    k = c[i >> 2] | 0;
    c[i >> 2] = d;
    n = b + 4936 | 0;
    o = b + 4688 | 0;
    g[o >> 3] = +g[n >> 3] * +g[o >> 3];
    if ((d | 0) == 1) {
      hr(b + 4624 | 0, e, 31) | 0;
      e = b + 4656 | 0;
      hr(e, f, 31) | 0;
      hr(b + 2200 | 0, e, 31) | 0;
      d = b + 2992 | 0;
      hr(d, e, 31) | 0;
      d = (Kq(d) | 0) + (b + 2992) | 0;
      a[d >> 0] = a[8026] | 0;
      a[d + 1 >> 0] = a[8027] | 0;
      a[d + 2 >> 0] = a[8028] | 0;
      a[d + 3 >> 0] = a[8029] | 0;
      a[d + 4 >> 0] = a[8030] | 0;
      j = .03531447540346788;
      d = c[i >> 2] | 0;
    } else j = 1.0;
    do if ((d | 0) == 3) {
      h = Oh(c[b + 80 >> 2] | 0, h) | 0;
      c[b + 4616 >> 2] = h;
      if (!h) {
        o = 212;
        return o | 0;
      } else {
        hr(b + 4624 | 0, 8625, 31) | 0;
        hr(b + 4656 | 0, 8631, 31) | 0;
        d = b + 2200 | 0;
        a[d >> 0] = a[8631] | 0;
        a[d + 1 >> 0] = a[8632] | 0;
        a[d + 2 >> 0] = a[8633] | 0;
        a[d + 3 >> 0] = a[8634] | 0;
        a[d + 4 >> 0] = a[8635] | 0;
        a[d + 5 >> 0] = a[8636] | 0;
        a[d + 6 >> 0] = a[8637] | 0;
        d = c[i >> 2] | 0;
        break;
      }
    } while (0);
    if ((d | 0) == 2) {
      hr(b + 4624 | 0, 8621, 31) | 0;
      hr(b + 4656 | 0, 8638, 31) | 0;
      d = b + 2200 | 0;
      a[d >> 0] = 104;
      a[d + 1 >> 0] = 114;
      a[d + 2 >> 0] = 115;
      a[d + 3 >> 0] = 0;
      d = c[i >> 2] | 0;
      if ((d | 0) == 2) {
        if ((k | 0) == 1) m = 15;
      } else {
        l = d;
        m = 13;
      }
    } else {
      l = d;
      m = 13;
    }
    if ((m | 0) == 13 ? (k | 0) == 1 & (l | 0) == 3 : 0) m = 15;
    if ((m | 0) == 15 ? (c[b >> 2] | 0) >= 1 : 0) {
      e = b + 44 | 0;
      d = 1;
      while (1) {
        m = (c[e >> 2] | 0) + (d * 96 | 0) + 64 | 0;
        g[m >> 3] = +g[n >> 3] * +g[m >> 3];
        if ((d | 0) < (c[b >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    g[n >> 3] = j;
    g[b + 4984 >> 3] = j;
    g[b + 5008 >> 3] = j;
    g[o >> 3] = +g[o >> 3] / j;
    o = 0;
    return o | 0;
  }
  function ud(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    r = Ib;
    Ib = Ib + 16 | 0;
    q = r;
    c[e >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      Ib = r;
      return e | 0;
    }
    if (c[a + 4524 >> 2] | 0) {
      e = 262;
      Ib = r;
      return e | 0;
    }
    if (c[a + 4604 >> 2] | 0) {
      e = 262;
      Ib = r;
      return e | 0;
    }
    if (!($h(b) | 0)) {
      e = 252;
      Ib = r;
      return e | 0;
    }
    if (!(vd(a, b, q) | 0)) {
      e = 215;
      Ib = r;
      return e | 0;
    }
    if (d >>> 0 > 2) {
      e = 251;
      Ib = r;
      return e | 0;
    }
    j = a + 44 | 0;
    p = ht(c[j >> 2] | 0, ((c[a >> 2] | 0) * 96 | 0) + 192 | 0) | 0;
    c[j >> 2] = p;
    p = (c[a >> 2] << 3) + 16 | 0;
    h = a + 4260 | 0;
    o = ht(c[h >> 2] | 0, p) | 0;
    c[h >> 2] = o;
    h = a + 4824 | 0;
    o = ht(c[h >> 2] | 0, p) | 0;
    c[h >> 2] = o;
    h = a + 4256 | 0;
    p = ht(c[h >> 2] | 0, p) | 0;
    c[h >> 2] = p;
    h = c[a >> 2] | 0;
    if (!d) {
      c[q >> 2] = h;
      p = a + 8 | 0;
      f = c[p >> 2] | 0;
      if ((h | 0) > (f | 0)) {
        i = a + 80 | 0;
        do {
          l = h + 1 | 0;
          Xe(c[i >> 2] | 0, (c[j >> 2] | 0) + (h * 96 | 0) | 0, l);
          f = c[j >> 2] | 0;
          l = f + (l * 96 | 0) | 0;
          f = f + (h * 96 | 0) | 0;
          m = l + 96 | 0;
          do {
            c[l >> 2] = c[f >> 2];
            l = l + 4 | 0;
            f = f + 4 | 0;
          } while ((l | 0) < (m | 0));
          h = h + -1 | 0;
          f = c[p >> 2] | 0;
        } while ((h | 0) > (f | 0));
        c[q >> 2] = h;
      }
      f = f + 1 | 0;
      c[p >> 2] = f;
      i = c[j >> 2] | 0;
      h = i + (f * 96 | 0) | 0;
      c[i + (f * 96 | 0) + 56 >> 2] = 0;
      Ih(h, 0.0, 0, 0) | 0;
      c[q >> 2] = 1;
      i = a + 4 | 0;
      if ((c[i >> 2] | 0) >= 1) {
        j = a + 52 | 0;
        k = 1;
        do {
          o = (c[j >> 2] | 0) + (k * 120 | 0) | 0;
          c[o >> 2] = (c[o >> 2] | 0) + 1;
          o = k;
          k = k + 1 | 0;
        } while ((o | 0) < (c[i >> 2] | 0));
        c[q >> 2] = k;
      }
      c[q >> 2] = 1;
      m = a + 12 | 0;
      if ((c[m >> 2] | 0) >= 1) {
        n = a + 48 | 0;
        o = 1;
        do {
          i = c[n >> 2] | 0;
          j = i + (o << 7) + 32 | 0;
          k = c[j >> 2] | 0;
          l = c[p >> 2] | 0;
          if ((k | 0) < (l | 0)) k = l;else {
            c[j >> 2] = k + 1;
            i = c[n >> 2] | 0;
            k = c[p >> 2] | 0;
          }
          i = i + (o << 7) + 36 | 0;
          j = c[i >> 2] | 0;
          if ((j | 0) >= (k | 0)) c[i >> 2] = j + 1;
          l = o;
          o = o + 1 | 0;
        } while ((l | 0) < (c[m >> 2] | 0));
        c[q >> 2] = o;
      }
      c[q >> 2] = 1;
      m = a + 28 | 0;
      i = c[m >> 2] | 0;
      if ((i | 0) >= 1) {
        n = a + 72 | 0;
        l = 1;
        do {
          j = (c[n >> 2] | 0) + (l * 40 | 0) + 4 | 0;
          k = c[j >> 2] | 0;
          if ((k | 0) >= (c[p >> 2] | 0)) {
            c[j >> 2] = k + 1;
            i = c[m >> 2] | 0;
          }
          o = l;
          l = l + 1 | 0;
        } while ((o | 0) < (i | 0));
        c[q >> 2] = l;
      }
      Ej(a);
    } else {
      f = h + 1 | 0;
      j = c[j >> 2] | 0;
      h = j + (f * 96 | 0) | 0;
      c[j + (f * 96 | 0) + 56 >> 2] = 0;
      j = a + 4 | 0;
      i = c[j >> 2] | 0;
      c[j >> 2] = i + 1;
      k = a + 52 | 0;
      i = ht(c[k >> 2] | 0, (i * 120 | 0) + 240 | 0) | 0;
      c[k >> 2] = i;
      j = c[j >> 2] | 0;
      c[i + (j * 120 | 0) >> 2] = f;
      c[i + (j * 120 | 0) + 88 >> 2] = 0;
      g[i + (j * 120 | 0) + 8 >> 3] = (d | 0) == 2 ? 1.0 : 0.0;
      k = i + (j * 120 | 0) + 104 | 0;
      l = i + (j * 120 | 0) + 16 | 0;
      m = l + 84 | 0;
      do {
        c[l >> 2] = 0;
        l = l + 4 | 0;
      } while ((l | 0) < (m | 0));
      g[k >> 3] = 1.0e4;
      c[i + (j * 120 | 0) + 112 >> 2] = 0;
    }
    q = (c[a >> 2] | 0) + 1 | 0;
    c[a >> 2] = q;
    c[a + 1060 >> 2] = q;
    hr(h, b, 31) | 0;
    c[h + 88 >> 2] = d;
    g[h + 48 >> 3] = 0.0;
    d = h + 60 | 0;
    c[d >> 2] = 0;
    c[d + 4 >> 2] = 0;
    c[d + 8 >> 2] = 0;
    c[d + 12 >> 2] = 0;
    c[d + 16 >> 2] = 0;
    c[d + 20 >> 2] = 0;
    c[d + 24 >> 2] = 0;
    g[h + 32 >> 3] = -1.0e10;
    g[h + 40 >> 3] = -1.0e10;
    c[h + 92 >> 2] = 0;
    We(c[a + 80 >> 2] | 0, h, f);
    c[e >> 2] = f;
    e = 0;
    Ib = r;
    return e | 0;
  }
  function vd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    b = Oh(c[a + 80 >> 2] | 0, b) | 0;
    c[d >> 2] = b;
    d = (b | 0) == 0 ? 203 : 0;
    return d | 0;
  }
  function wd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    k = l;
    if (!(c[a + 5072 >> 2] | 0)) {
      b = 102;
      Ib = l;
      return b | 0;
    }
    if (c[a + 4524 >> 2] | 0) {
      b = 262;
      Ib = l;
      return b | 0;
    }
    if (c[a + 4604 >> 2] | 0) {
      b = 262;
      Ib = l;
      return b | 0;
    }
    if ((b | 0) < 1) {
      b = 203;
      Ib = l;
      return b | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      b = 203;
      Ib = l;
      return b | 0;
    }
    if (d >>> 0 > 1) {
      b = 251;
      Ib = l;
      return b | 0;
    }
    if ((c[a + 4616 >> 2] | 0) == (b | 0)) {
      b = 260;
      Ib = l;
      return b | 0;
    }
    a: do if ((d | 0) == 1) {
      if (Mh(a, 0, b) | 0) {
        b = 261;
        Ib = l;
        return b | 0;
      }
      e = c[a + 12 >> 2] | 0;
      if ((e | 0) >= 1) {
        f = c[a + 48 >> 2] | 0;
        d = 1;
        while (1) {
          if ((c[f + (d << 7) + 32 >> 2] | 0) == (b | 0)) {
            d = 259;
            e = 52;
            break;
          }
          if ((c[f + (d << 7) + 36 >> 2] | 0) == (b | 0)) {
            d = 259;
            e = 52;
            break;
          }
          if ((d | 0) < (e | 0)) d = d + 1 | 0;else break a;
        }
        if ((e | 0) == 52) {
          Ib = l;
          return d | 0;
        }
      }
    } while (0);
    f = a + 44 | 0;
    j = c[f >> 2] | 0;
    i = j + (b * 96 | 0) | 0;
    xd(a, b, k) | 0;
    g = a + 80 | 0;
    Ye(c[g >> 2] | 0, i);
    Fh(i);
    ft(c[j + (b * 96 | 0) + 60 >> 2] | 0);
    ft(c[j + (b * 96 | 0) + 92 >> 2] | 0);
    if ((c[a >> 2] | 0) > (b | 0)) {
      d = b;
      do {
        i = c[f >> 2] | 0;
        e = d;
        d = d + 1 | 0;
        h = i + (e * 96 | 0) | 0;
        i = i + (d * 96 | 0) | 0;
        j = h + 96 | 0;
        do {
          c[h >> 2] = c[i >> 2];
          h = h + 4 | 0;
          i = i + 4 | 0;
        } while ((h | 0) < (j | 0));
        Xe(c[g >> 2] | 0, (c[f >> 2] | 0) + (e * 96 | 0) | 0, e);
      } while ((d | 0) < (c[a >> 2] | 0));
    }
    k = (c[k >> 2] | 0) == 0;
    if (!k) {
      d = Qh(a, b) | 0;
      g = a + 4 | 0;
      e = c[g >> 2] | 0;
      if ((d | 0) < (e | 0)) {
        f = a + 52 | 0;
        do {
          i = c[f >> 2] | 0;
          h = i + (d * 120 | 0) | 0;
          d = d + 1 | 0;
          i = i + (d * 120 | 0) | 0;
          j = h + 120 | 0;
          do {
            c[h >> 2] = c[i >> 2];
            h = h + 4 | 0;
            i = i + 4 | 0;
          } while ((h | 0) < (j | 0));
          e = c[g >> 2] | 0;
        } while ((d | 0) < (e | 0));
        j = g;
      } else j = g;
    } else {
      e = a + 4 | 0;
      j = e;
      e = c[e >> 2] | 0;
    }
    if ((e | 0) >= 1) {
      h = a + 52 | 0;
      g = 1;
      while (1) {
        d = (c[h >> 2] | 0) + (g * 120 | 0) | 0;
        f = c[d >> 2] | 0;
        if ((f | 0) > (b | 0)) {
          c[d >> 2] = f + -1;
          e = c[j >> 2] | 0;
        }
        if ((g | 0) < (e | 0)) g = g + 1 | 0;else break;
      }
    }
    h = a + 12 | 0;
    d = c[h >> 2] | 0;
    if ((d | 0) > 0) {
      i = a + 48 | 0;
      while (1) {
        g = c[i >> 2] | 0;
        if (!((c[g + (d << 7) + 32 >> 2] | 0) != (b | 0) ? (c[g + (d << 7) + 36 >> 2] | 0) != (b | 0) : 0)) yd(a, d, 0) | 0;
        if ((d | 0) > 1) d = d + -1 | 0;else break;
      }
      if ((c[h >> 2] | 0) >= 1) {
        g = 1;
        while (1) {
          d = c[i >> 2] | 0;
          e = d + (g << 7) + 32 | 0;
          f = c[e >> 2] | 0;
          if ((f | 0) > (b | 0)) {
            c[e >> 2] = f + -1;
            d = c[i >> 2] | 0;
          }
          e = d + (g << 7) + 36 | 0;
          d = c[e >> 2] | 0;
          if ((d | 0) > (b | 0)) c[e >> 2] = d + -1;
          if ((g | 0) < (c[h >> 2] | 0)) g = g + 1 | 0;else break;
        }
      }
    }
    h = a + 28 | 0;
    d = c[h >> 2] | 0;
    if ((d | 0) > 0) {
      i = a + 72 | 0;
      while (1) {
        if ((c[(c[i >> 2] | 0) + (d * 40 | 0) + 4 >> 2] | 0) == (b | 0)) zd(a, d) | 0;
        if ((d | 0) > 1) d = d + -1 | 0;else break;
      }
      d = c[h >> 2] | 0;
      if ((d | 0) >= 1) {
        g = 1;
        while (1) {
          e = (c[i >> 2] | 0) + (g * 40 | 0) + 4 | 0;
          f = c[e >> 2] | 0;
          if ((f | 0) > (b | 0)) {
            c[e >> 2] = f + -1;
            d = c[h >> 2] | 0;
          }
          if ((g | 0) < (d | 0)) g = g + 1 | 0;else break;
        }
      }
    }
    Dj(a, 6, b);
    b = k ? a + 8 | 0 : j;
    c[b >> 2] = (c[b >> 2] | 0) + -1;
    c[a >> 2] = (c[a >> 2] | 0) + -1;
    b = 0;
    Ib = l;
    return b | 0;
  }
  function xd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0;
    c[d >> 2] = -1;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 203;
      return d | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      d = 203;
      return d | 0;
    }
    e = c[a + 8 >> 2] | 0;
    if ((e | 0) >= (b | 0)) {
      c[d >> 2] = 0;
      d = 0;
      return d | 0;
    }
    if (+g[(c[a + 52 >> 2] | 0) + ((b - e | 0) * 120 | 0) + 8 >> 3] == 0.0) {
      c[d >> 2] = 1;
      d = 0;
      return d | 0;
    } else {
      c[d >> 2] = 2;
      d = 0;
      return d | 0;
    }
    return 0;
  }
  function yd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    o = Ib;
    Ib = Ib + 16 | 0;
    k = o;
    if (!(c[a + 5072 >> 2] | 0)) {
      n = 102;
      Ib = o;
      return n | 0;
    }
    if (c[a + 4524 >> 2] | 0) {
      n = 262;
      Ib = o;
      return n | 0;
    }
    if (c[a + 4604 >> 2] | 0) {
      n = 262;
      Ib = o;
      return n | 0;
    }
    if ((b | 0) < 1) {
      n = 204;
      Ib = o;
      return n | 0;
    }
    n = a + 12 | 0;
    if ((c[n >> 2] | 0) < (b | 0)) {
      n = 204;
      Ib = o;
      return n | 0;
    }
    if (d >>> 0 > 1) {
      n = 251;
      Ib = o;
      return n | 0;
    }
    if ((d | 0) == 1 ? (Mh(a, 1, b) | 0) > 0 : 0) {
      n = 261;
      Ib = o;
      return n | 0;
    }
    f = a + 48 | 0;
    l = c[f >> 2] | 0;
    m = l + (b << 7) | 0;
    Wd(a, b, k) | 0;
    g = a + 84 | 0;
    Ye(c[g >> 2] | 0, m);
    ft(c[l + (b << 7) + 124 >> 2] | 0);
    Gh(m);
    if ((c[n >> 2] | 0) > (b | 0)) {
      d = b;
      do {
        i = c[f >> 2] | 0;
        e = d;
        d = d + 1 | 0;
        h = i + (e << 7) | 0;
        i = i + (d << 7) | 0;
        j = h + 128 | 0;
        do {
          c[h >> 2] = c[i >> 2];
          h = h + 4 | 0;
          i = i + 4 | 0;
        } while ((h | 0) < (j | 0));
        Xe(c[g >> 2] | 0, (c[f >> 2] | 0) + (e << 7) | 0, e);
      } while ((d | 0) < (c[n >> 2] | 0));
    }
    m = a + 20 | 0;
    d = c[m >> 2] | 0;
    if ((d | 0) >= 1) {
      h = a + 56 | 0;
      g = 1;
      while (1) {
        e = (c[h >> 2] | 0) + (g << 7) | 0;
        f = c[e >> 2] | 0;
        if ((f | 0) > (b | 0)) {
          c[e >> 2] = f + -1;
          d = c[m >> 2] | 0;
        }
        if ((g | 0) < (d | 0)) g = g + 1 | 0;else break;
      }
    }
    l = a + 24 | 0;
    d = c[l >> 2] | 0;
    if ((d | 0) >= 1) {
      h = a + 60 | 0;
      g = 1;
      while (1) {
        e = (c[h >> 2] | 0) + (g << 2) | 0;
        f = c[e >> 2] | 0;
        if ((f | 0) > (b | 0)) {
          c[e >> 2] = f + -1;
          d = c[l >> 2] | 0;
        }
        if ((g | 0) < (d | 0)) g = g + 1 | 0;else break;
      }
    }
    g = c[k >> 2] | 0;
    if ((g | 0) == 2) {
      e = Rh(a, b) | 0;
      d = c[m >> 2] | 0;
      if ((e | 0) < (d | 0)) {
        f = a + 56 | 0;
        do {
          i = c[f >> 2] | 0;
          h = i + (e << 7) | 0;
          e = e + 1 | 0;
          i = i + (e << 7) | 0;
          j = h + 128 | 0;
          do {
            c[h >> 2] = c[i >> 2];
            h = h + 4 | 0;
            i = i + 4 | 0;
          } while ((h | 0) < (j | 0));
          d = c[m >> 2] | 0;
        } while ((e | 0) < (d | 0));
      }
      c[m >> 2] = d + -1;
    }
    if ((g | 0) > 2) {
      e = Sh(a, b) | 0;
      d = c[l >> 2] | 0;
      if ((e | 0) < (d | 0)) {
        f = a + 60 | 0;
        do {
          m = c[f >> 2] | 0;
          d = e;
          e = e + 1 | 0;
          c[m + (d << 2) >> 2] = c[m + (e << 2) >> 2];
          d = c[l >> 2] | 0;
        } while ((e | 0) < (d | 0));
      }
      c[l >> 2] = d + -1;
    }
    h = a + 28 | 0;
    d = c[h >> 2] | 0;
    if ((d | 0) > 0) {
      i = a + 72 | 0;
      while (1) {
        if ((c[(c[i >> 2] | 0) + (d * 40 | 0) >> 2] | 0) == (b | 0)) zd(a, d) | 0;
        if ((d | 0) > 1) d = d + -1 | 0;else break;
      }
      d = c[h >> 2] | 0;
      if ((d | 0) >= 1) {
        g = 1;
        while (1) {
          e = (c[i >> 2] | 0) + (g * 40 | 0) | 0;
          f = c[e >> 2] | 0;
          if ((f | 0) > (b | 0)) {
            c[e >> 2] = f + -1;
            d = c[h >> 2] | 0;
          }
          if ((g | 0) < (d | 0)) g = g + 1 | 0;else break;
        }
      }
    }
    Dj(a, 7, b);
    c[n >> 2] = (c[n >> 2] | 0) + -1;
    n = 0;
    Ib = o;
    return n | 0;
  }
  function zd(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    if ((b | 0) < 1) {
      g = 241;
      return g | 0;
    }
    g = a + 28 | 0;
    d = c[g >> 2] | 0;
    if ((d | 0) < (b | 0)) {
      g = 241;
      return g | 0;
    }
    if ((d | 0) > (b | 0)) {
      f = a + 72 | 0;
      do {
        a = c[f >> 2] | 0;
        d = a + (b * 40 | 0) | 0;
        b = b + 1 | 0;
        a = a + (b * 40 | 0) | 0;
        e = d + 40 | 0;
        do {
          c[d >> 2] = c[a >> 2];
          d = d + 4 | 0;
          a = a + 4 | 0;
        } while ((d | 0) < (e | 0));
        d = c[g >> 2] | 0;
      } while ((b | 0) < (d | 0));
    }
    c[g >> 2] = d + -1;
    g = 0;
    return g | 0;
  }
  function Ad(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    a[e >> 0] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((d | 0) < 1) {
      e = 203;
      return e | 0;
    }
    if ((c[b >> 2] | 0) < (d | 0)) {
      e = 203;
      return e | 0;
    }
    Oq(e, (c[b + 44 >> 2] | 0) + (d * 96 | 0) | 0) | 0;
    e = 0;
    return e | 0;
  }
  function Bd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    if ((b | 0) < 1) {
      f = 203;
      return f | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      f = 203;
      return f | 0;
    }
    if (!($h(d) | 0)) {
      f = 252;
      return f | 0;
    }
    e = a + 80 | 0;
    f = c[e >> 2] | 0;
    if ((Ze(f, d) | 0) > 0) {
      f = 215;
      return f | 0;
    }
    a = a + 44 | 0;
    Ye(f, (c[a >> 2] | 0) + (b * 96 | 0) | 0);
    hr((c[a >> 2] | 0) + (b * 96 | 0) | 0, d, 31) | 0;
    We(c[e >> 2] | 0, (c[a >> 2] | 0) + (b * 96 | 0) | 0, b);
    f = 0;
    return f | 0;
  }
  function Cd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var f = 0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    h = a + 4256 | 0;
    q = c[a + 44 >> 2] | 0;
    r = c[a + 52 >> 2] | 0;
    k = c[a + 8 >> 2] | 0;
    l = c[a + 36 >> 2] | 0;
    p = a + 4904 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      r = 102;
      return r | 0;
    }
    if ((b | 0) < 1 ? 1 : (c[a >> 2] | 0) < (b | 0)) {
      r = 203;
      return r | 0;
    }
    do switch (d | 0) {
      case 0:
        {
          e = e / +g[p >> 3];
          f = q + (b * 96 | 0) + 48 | 0;
          if ((k | 0) < (b | 0)) {
            n = e - +g[f >> 3];
            a = b - k | 0;
            q = r + (a * 120 | 0) + 32 | 0;
            g[q >> 3] = +g[q >> 3] + n;
            q = r + (a * 120 | 0) + 16 | 0;
            g[q >> 3] = n + +g[q >> 3];
            r = r + (a * 120 | 0) + 24 | 0;
            g[r >> 3] = n + +g[r >> 3];
            g[f >> 3] = n + +g[f >> 3];
            r = (c[h >> 2] | 0) + (b << 3) | 0;
            g[r >> 3] = n + +g[r >> 3];
            r = 0;
            return r | 0;
          } else {
            g[f >> 3] = e;
            r = 0;
            return r | 0;
          }
        }
      case 1:
        {
          if ((k | 0) < (b | 0)) {
            r = 0;
            return r | 0;
          }
          f = c[q + (b * 96 | 0) + 56 >> 2] | 0;
          if (!f) {
            r = 0;
            return r | 0;
          }
          g[f >> 3] = e / +g[a + 4960 >> 3];
          r = 0;
          return r | 0;
        }
      case 2:
        {
          h = ~~((e >= 0.0 ? .5 : -.5) + e);
          if ((h | 0) < 0 | (l | 0) < (h | 0)) {
            r = 205;
            return r | 0;
          }
          if ((k | 0) < (b | 0)) {
            c[r + ((b - k | 0) * 120 | 0) + 88 >> 2] = h;
            r = 0;
            return r | 0;
          }
          f = c[q + (b * 96 | 0) + 56 >> 2] | 0;
          if (!f) {
            r = 0;
            return r | 0;
          }
          c[f + 8 >> 2] = h;
          r = 0;
          return r | 0;
        }
      case 3:
        {
          if ((k | 0) < (b | 0)) {
            r = 0;
            return r | 0;
          }
          if (e < 0.0) {
            r = 209;
            return r | 0;
          }
          if (e > 0.0) {
            e = +u(+(+g[a + 4960 >> 3] / e), + +g[a + 4312 >> 3]);
            e = e / +g[a + 4928 >> 3];
          }
          g[q + (b * 96 | 0) + 72 >> 3] = e;
          r = 0;
          return r | 0;
        }
      case 4:
        {
          if (e < 0.0) {
            r = 209;
            return r | 0;
          }
          e = e / +g[a + 4936 >> 3];
          g[q + (b * 96 | 0) + 64 >> 3] = e;
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          g[r + ((b - k | 0) * 120 | 0) + 80 >> 3] = e;
          r = 0;
          return r | 0;
        }
      case 6:
      case 7:
      case 5:
        {
          if (e < 0.0) {
            r = 209;
            return r | 0;
          }
          f = q + (b * 96 | 0) + 60 | 0;
          h = c[f >> 2] | 0;
          do if (!h) {
            h = et(32) | 0;
            if (!h) {
              r = 101;
              return r | 0;
            } else {
              c[h + 24 >> 2] = 0;
              g[h >> 3] = 0.0;
              c[h + 8 >> 2] = 0;
              c[f >> 2] = h;
              break;
            }
          } while (0);
          if ((d | 0) == 5) {
            g[h >> 3] = e;
            r = 0;
            return r | 0;
          }
          f = ~~((e >= 0.0 ? .5 : -.5) + e);
          if ((d | 0) == 6) {
            if ((f | 0) < 0 | (l | 0) < (f | 0)) {
              r = 205;
              return r | 0;
            }
            c[h + 8 >> 2] = f;
            r = 0;
            return r | 0;
          } else {
            if (f >>> 0 > 3) {
              r = 251;
              return r | 0;
            }
            c[h + 24 >> 2] = f << 24 >> 24;
            r = 0;
            return r | 0;
          }
        }
      case 8:
        {
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          f = b - k | 0;
          if (+g[r + (f * 120 | 0) + 8 >> 3] == 0.0) {
            n = e / +g[p >> 3];
            a = r + (f * 120 | 0) + 32 | 0;
            g[a >> 3] = n;
            g[r + (f * 120 | 0) + 16 >> 3] = n;
            g[r + (f * 120 | 0) + 24 >> 3] = n;
            g[q + (b * 96 | 0) + 48 >> 3] = n;
            g[(c[h >> 2] | 0) + (b << 3) >> 3] = +g[a >> 3];
            r = 0;
            return r | 0;
          }
          e = +g[q + (b * 96 | 0) + 48 >> 3] + e / +g[p >> 3];
          if (e > +g[r + (f * 120 | 0) + 24 >> 3]) {
            r = 225;
            return r | 0;
          }
          if (e < +g[r + (f * 120 | 0) + 16 >> 3]) {
            r = 225;
            return r | 0;
          }
          g[r + (f * 120 | 0) + 32 >> 3] = e;
          n = +Df(a, f, e);
          g[r + (f * 120 | 0) + 56 >> 3] = n;
          g[r + (f * 120 | 0) + 72 >> 3] = n;
          g[(c[h >> 2] | 0) + (b << 3) >> 3] = e;
          r = 0;
          return r | 0;
        }
      case 17:
        {
          if (e <= 0.0) {
            r = 209;
            return r | 0;
          }
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          h = b - k | 0;
          f = r + (h * 120 | 0) + 8 | 0;
          if (+g[f >> 3] == 0.0) {
            r = 0;
            return r | 0;
          }
          e = e / +g[p >> 3];
          e = e * e * 3.141592653589793 * .25;
          g[f >> 3] = e;
          f = r + (h * 120 | 0) + 92 | 0;
          if ((c[f >> 2] | 0) > 0) {
            c[f >> 2] = 0;
            g[r + (h * 120 | 0) + 40 >> 3] = e * +g[r + (h * 120 | 0) + 16 >> 3];
          }
          n = +Df(a, h, +g[r + (h * 120 | 0) + 32 >> 3]);
          g[r + (h * 120 | 0) + 56 >> 3] = n;
          b = r + (h * 120 | 0) + 48 | 0;
          n = +g[b >> 3];
          j = +Df(a, h, +g[r + (h * 120 | 0) + 24 >> 3]);
          g[b >> 3] = j;
          r = r + (h * 120 | 0) + 104 | 0;
          g[r >> 3] = j / n * +g[r >> 3];
          r = 0;
          return r | 0;
        }
      case 18:
        {
          if (e < 0.0) {
            r = 209;
            return r | 0;
          }
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          h = b - k | 0;
          i = +g[r + (h * 120 | 0) + 8 >> 3];
          if (i == 0.0) {
            r = 0;
            return r | 0;
          }
          f = c[r + (h * 120 | 0) + 92 >> 2] | 0;
          if ((f | 0) <= 0) {
            if (e == 0.0) e = i * +g[r + (h * 120 | 0) + 16 >> 3];else e = e / +g[a + 5040 >> 3];
            g[r + (h * 120 | 0) + 40 >> 3] = e;
            n = +Df(a, h, +g[r + (h * 120 | 0) + 32 >> 3]);
            g[r + (h * 120 | 0) + 56 >> 3] = n;
            b = r + (h * 120 | 0) + 48 | 0;
            n = +g[b >> 3];
            j = +Df(a, h, +g[r + (h * 120 | 0) + 24 >> 3]);
            g[b >> 3] = j;
            r = r + (h * 120 | 0) + 104 | 0;
            g[r >> 3] = j / n * +g[r >> 3];
            r = 0;
            return r | 0;
          }
          if (+g[c[(c[a + 68 >> 2] | 0) + (f * 56 | 0) + 52 >> 2] >> 3] > e) {
            r = 225;
            return r | 0;
          }
          i = e / +g[a + 5040 >> 3];
          e = +Of(a, h, i);
          if (e > +g[r + (h * 120 | 0) + 32 >> 3]) {
            r = 225;
            return r | 0;
          }
          if (e > +g[r + (h * 120 | 0) + 24 >> 3]) {
            r = 225;
            return r | 0;
          }
          g[r + (h * 120 | 0) + 16 >> 3] = e;
          g[r + (h * 120 | 0) + 40 >> 3] = i;
          r = 0;
          return r | 0;
        }
      case 19:
        {
          o = ~~((e >= 0.0 ? .5 : -.5) + e);
          if ((o | 0) < 1) {
            r = 205;
            return r | 0;
          }
          if ((c[a + 40 >> 2] | 0) < (o | 0)) {
            r = 205;
            return r | 0;
          }
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          k = b - k | 0;
          l = r + (k * 120 | 0) + 8 | 0;
          if (+g[l >> 3] == 0.0) {
            r = 0;
            return r | 0;
          }
          m = c[a + 68 >> 2] | 0;
          n = +g[r + (k * 120 | 0) + 16 >> 3];
          j = +g[q + (b * 96 | 0) + 48 >> 3];
          e = +g[p >> 3];
          f = m + (o * 56 | 0) + 48 | 0;
          h = c[f >> 2] | 0;
          if ((n - j) * e < +g[h >> 3]) {
            r = 225;
            return r | 0;
          }
          i = +g[r + (k * 120 | 0) + 24 >> 3];
          d = (c[m + (o * 56 | 0) + 40 >> 2] | 0) + -1 | 0;
          if (e * (i - j) > +g[h + (d << 3) >> 3]) {
            r = 225;
            return r | 0;
          }
          c[r + (k * 120 | 0) + 92 >> 2] = o;
          n = +Df(a, k, n);
          g[r + (k * 120 | 0) + 40 >> 3] = n;
          n = +Df(a, k, +g[r + (k * 120 | 0) + 32 >> 3]);
          g[r + (k * 120 | 0) + 56 >> 3] = n;
          b = r + (k * 120 | 0) + 48 | 0;
          n = +g[b >> 3];
          j = +Df(a, k, i);
          g[b >> 3] = j;
          a = r + (k * 120 | 0) + 104 | 0;
          g[a >> 3] = j / n * +g[a >> 3];
          a = c[m + (o * 56 | 0) + 52 >> 2] | 0;
          r = c[f >> 2] | 0;
          g[l >> 3] = (+g[a + (d << 3) >> 3] - +g[a >> 3]) / (+g[r + (d << 3) >> 3] - +g[r >> 3]);
          r = 0;
          return r | 0;
        }
      case 20:
        {
          if (e < 0.0) {
            r = 209;
            return r | 0;
          }
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          h = b - k | 0;
          if (+g[r + (h * 120 | 0) + 8 >> 3] == 0.0) {
            r = 0;
            return r | 0;
          }
          i = e / +g[p >> 3] + +g[q + (b * 96 | 0) + 48 >> 3];
          if (i >= +g[r + (h * 120 | 0) + 24 >> 3]) {
            r = 225;
            return r | 0;
          }
          if (i > +g[r + (h * 120 | 0) + 32 >> 3]) {
            r = 225;
            return r | 0;
          }
          f = c[r + (h * 120 | 0) + 92 >> 2] | 0;
          do if ((f | 0) > 0) if (+g[c[(c[a + 68 >> 2] | 0) + (f * 56 | 0) + 48 >> 2] >> 3] > e) {
            r = 225;
            return r | 0;
          } else {
            n = +Df(a, h, i);
            g[r + (h * 120 | 0) + 40 >> 3] = n;
            break;
          } while (0);
          g[r + (h * 120 | 0) + 16 >> 3] = i;
          r = 0;
          return r | 0;
        }
      case 21:
        {
          if (e <= 0.0) {
            r = 209;
            return r | 0;
          }
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          h = b - k | 0;
          if (+g[r + (h * 120 | 0) + 8 >> 3] == 0.0) {
            r = 0;
            return r | 0;
          }
          i = e / +g[p >> 3] + +g[q + (b * 96 | 0) + 48 >> 3];
          if (i < +g[r + (h * 120 | 0) + 16 >> 3]) {
            r = 225;
            return r | 0;
          }
          if (i < +g[r + (h * 120 | 0) + 32 >> 3]) {
            r = 225;
            return r | 0;
          }
          f = c[r + (h * 120 | 0) + 92 >> 2] | 0;
          if ((f | 0) > 0 ? (b = c[a + 68 >> 2] | 0, +g[(c[b + (f * 56 | 0) + 48 >> 2] | 0) + ((c[b + (f * 56 | 0) + 40 >> 2] | 0) + -1 << 3) >> 3] < e) : 0) {
            r = 225;
            return r | 0;
          }
          g[r + (h * 120 | 0) + 24 >> 3] = i;
          b = r + (h * 120 | 0) + 48 | 0;
          n = +g[b >> 3];
          j = +Df(a, h, i);
          g[b >> 3] = j;
          r = r + (h * 120 | 0) + 104 | 0;
          g[r >> 3] = j / n * +g[r >> 3];
          r = 0;
          return r | 0;
        }
      case 15:
        {
          h = ~~((e >= 0.0 ? .5 : -.5) + e);
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          if (h >>> 0 > 3) {
            r = 251;
            return r | 0;
          }
          f = b - k | 0;
          if (!(+g[r + (f * 120 | 0) + 8 >> 3] > 0.0)) {
            r = 0;
            return r | 0;
          }
          c[r + (f * 120 | 0) + 96 >> 2] = h << 24 >> 24;
          r = 0;
          return r | 0;
        }
      case 22:
        {
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          if (e < 0.0 | e > 1.0) {
            r = 209;
            return r | 0;
          }
          f = b - k | 0;
          if (!(+g[r + (f * 120 | 0) + 8 >> 3] > 0.0)) {
            r = 0;
            return r | 0;
          }
          g[r + (f * 120 | 0) + 104 >> 3] = +g[r + (f * 120 | 0) + 48 >> 3] * e;
          r = 0;
          return r | 0;
        }
      case 23:
        {
          if ((k | 0) >= (b | 0)) {
            r = 0;
            return r | 0;
          }
          f = b - k | 0;
          if (!(+g[r + (f * 120 | 0) + 8 >> 3] > 0.0)) {
            r = 0;
            return r | 0;
          }
          g[r + (f * 120 | 0) + 64 >> 3] = e / 86400.0;
          c[a + 4608 >> 2] = 1;
          r = 0;
          return r | 0;
        }
      case 26:
        {
          if ((c[q + (b * 96 | 0) + 88 >> 2] | 0) != 2) {
            r = 0;
            return r | 0;
          }
          c[r + ((b - k | 0) * 120 | 0) + 112 >> 2] = e != 0.0 & 1;
          r = 0;
          return r | 0;
        }
      default:
        {
          r = 251;
          return r | 0;
        }
    } while (0);
    return 0;
  }
  function Dd(b, d, e, f, h) {
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    h = h | 0;
    var i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    k = l;
    c[k >> 2] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      k = 102;
      Ib = l;
      return k | 0;
    }
    if ((d | 0) < 1) {
      k = 203;
      Ib = l;
      return k | 0;
    }
    if ((c[b + 8 >> 2] | 0) < (d | 0)) {
      k = 203;
      Ib = l;
      return k | 0;
    }
    if ((h | 0 ? a[h >> 0] | 0 : 0) ? (Ed(b, h, k) | 0) > 0 : 0) {
      k = 205;
      Ib = l;
      return k | 0;
    }
    j = c[b + 44 >> 2] | 0;
    f = f / +g[b + 4960 >> 3];
    h = j + (d * 96 | 0) + 56 | 0;
    i = c[h >> 2] | 0;
    if (!i) {
      if (!(Ih(j + (d * 96 | 0) | 0, f, c[k >> 2] | 0, 0) | 0)) {
        k = 101;
        Ib = l;
        return k | 0;
      }
    } else {
      g[i >> 3] = f;
      c[(c[h >> 2] | 0) + 8 >> 2] = c[k >> 2];
    }
    g[j + (d * 96 | 0) + 48 >> 3] = e / +g[b + 4904 >> 3];
    k = 0;
    Ib = l;
    return k | 0;
  }
  function Ed(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    f = c[a + 36 >> 2] | 0;
    a: do if ((f | 0) < 1) {
      e = 205;
      a = 0;
    } else {
      e = c[a + 64 >> 2] | 0;
      a = 1;
      while (1) {
        if (!(_p(b, e + (a * 44 | 0) | 0) | 0)) {
          e = 0;
          break a;
        }
        if ((a | 0) < (f | 0)) a = a + 1 | 0;else {
          e = 205;
          a = 0;
          break;
        }
      }
    } while (0);
    c[d >> 2] = a;
    d = e;
    return d | 0;
  }
  function Fd(b, d, e, f, h, i, j, k, l) {
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    h = +h;
    i = +i;
    j = +j;
    k = +k;
    l = l | 0;
    var m = 0.0,
      n = 0,
      o = 0.0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0;
    u = b + 4904 | 0;
    v = c[b + 52 >> 2] | 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      v = 102;
      return v | 0;
    }
    n = c[b + 8 >> 2] | 0;
    if ((n | 0) >= (d | 0)) {
      v = 203;
      return v | 0;
    }
    if ((c[b >> 2] | 0) < (d | 0)) {
      v = 203;
      return v | 0;
    }
    t = d - n | 0;
    s = v + (t * 120 | 0) + 8 | 0;
    if (+g[s >> 3] == 0.0) {
      v = 0;
      return v | 0;
    }
    if (f < 0.0 | h < 0.0 | i < 0.0) {
      v = 209;
      return v | 0;
    }
    if (f > i | (h > f | h > i)) {
      v = 225;
      return v | 0;
    }
    if (j < 0.0 | k < 0.0) {
      v = 209;
      return v | 0;
    }
    do if (a[l >> 0] | 0) {
      d = c[b + 40 >> 2] | 0;
      if ((d | 0) < 1) {
        v = 206;
        return v | 0;
      }
      p = c[b + 68 >> 2] | 0;
      r = 1;
      while (1) {
        if (!(_p(l, p + (r * 56 | 0) | 0) | 0)) break;
        if ((r | 0) < (d | 0)) r = r + 1 | 0;else {
          d = 206;
          q = 23;
          break;
        }
      }
      if ((q | 0) == 23) return d | 0;
      n = (c[p + (r * 56 | 0) + 40 >> 2] | 0) + -1 | 0;
      d = c[p + (r * 56 | 0) + 48 >> 2] | 0;
      m = +g[d >> 3];
      if (m > h) {
        v = 225;
        return v | 0;
      }
      j = +g[d + (n << 3) >> 3];
      if (j < i) {
        v = 225;
        return v | 0;
      } else {
        d = c[p + (r * 56 | 0) + 52 >> 2] | 0;
        j = (+g[d + (n << 3) >> 3] - +g[d >> 3]) / (j - m);
        d = r;
        break;
      }
    } else {
      j = j * 3.141592653589793 * j * .25;
      d = 0;
    } while (0);
    g[(c[b + 44 >> 2] | 0) + ((c[v + (t * 120 | 0) >> 2] | 0) * 96 | 0) + 48 >> 3] = e;
    o = +g[u >> 3];
    o = j / o / o;
    g[s >> 3] = o;
    f = f / +g[u >> 3] + e;
    g[v + (t * 120 | 0) + 32 >> 3] = f;
    j = h / +g[u >> 3] + e;
    g[v + (t * 120 | 0) + 16 >> 3] = j;
    m = i / +g[u >> 3] + e;
    g[v + (t * 120 | 0) + 24 >> 3] = m;
    c[v + (t * 120 | 0) + 92 >> 2] = d;
    do if (!d) {
      if (k > 0.0) {
        j = k / +g[b + 5040 >> 3];
        break;
      } else {
        j = o * j;
        break;
      }
    } else j = +Df(b, t, j); while (0);
    g[v + (t * 120 | 0) + 40 >> 3] = j;
    k = +Df(b, t, f);
    g[v + (t * 120 | 0) + 56 >> 3] = k;
    k = +Df(b, t, m);
    g[v + (t * 120 | 0) + 48 >> 3] = k;
    v = 0;
    return v | 0;
  }
  function Gd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 203;
      return e | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      e = 203;
      return e | 0;
    }
    a = c[a + 44 >> 2] | 0;
    f = +g[a + (b * 96 | 0) + 32 >> 3];
    if (f == -1.0e10) {
      e = 254;
      return e | 0;
    }
    a = a + (b * 96 | 0) + 40 | 0;
    if (+g[a >> 3] == -1.0e10) {
      e = 254;
      return e | 0;
    }
    g[d >> 3] = f;
    g[e >> 3] = +g[a >> 3];
    e = 0;
    return e | 0;
  }
  function Hd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    if (!(c[a + 5072 >> 2] | 0)) {
      b = 102;
      return b | 0;
    }
    if ((b | 0) < 1) {
      b = 203;
      return b | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      b = 203;
      return b | 0;
    }
    a = c[a + 44 >> 2] | 0;
    g[a + (b * 96 | 0) + 32 >> 3] = d;
    g[a + (b * 96 | 0) + 40 >> 3] = e;
    b = 0;
    return b | 0;
  }
  function Id(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    c[b >> 2] = c[a + 4496 >> 2];
    b = a + 4928 | 0;
    g[d >> 3] = +g[a + 4328 >> 3] * +g[b >> 3];
    g[e >> 3] = +g[a + 4336 >> 3] * +g[b >> 3];
    g[f >> 3] = +g[a + 4320 >> 3];
    return;
  }
  function Jd(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    var h = 0.0;
    if (b >>> 0 > 1) {
      b = 251;
      return b | 0;
    }
    if ((b | 0) == 1 ? e - d < .1 | (d < 0.0 | f <= 0.0) : 0) {
      b = 208;
      return b | 0;
    }
    c[a + 4496 >> 2] = b;
    h = +g[a + 4928 >> 3];
    g[a + 4328 >> 3] = d / h;
    g[a + 4336 >> 3] = e / h;
    g[a + 4320 >> 3] = f;
    b = 0;
    return b | 0;
  }
  function Kd(b, d, e, f, h) {
    b = b | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    h = h | 0;
    var i = 0,
      j = 0;
    j = Ib;
    Ib = Ib + 16 | 0;
    i = j;
    c[i >> 2] = 0;
    do if (c[b + 5072 >> 2] | 0) {
      if ((d | 0) >= 1 ? (c[b >> 2] | 0) >= (d | 0) : 0) {
        if ((f | 0 ? a[f >> 0] | 0 : 0) ? (Ed(b, f, i) | 0) > 0 : 0) {
          b = 205;
          break;
        }
        if ((c[b + 8 >> 2] | 0) < (d | 0)) b = 0;else {
          b = (Ih((c[b + 44 >> 2] | 0) + (d * 96 | 0) | 0, e / +g[b + 4960 >> 3], c[i >> 2] | 0, h) | 0) == 0;
          b = b ? 101 : 0;
        }
      } else b = 203;
    } else b = 102; while (0);
    Ib = j;
    return b | 0;
  }
  function Ld(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 203;
      return d | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      d = 203;
      return d | 0;
    }
    if ((c[a + 8 >> 2] | 0) < (b | 0)) {
      d = 0;
      return d | 0;
    }
    a = (c[a + 44 >> 2] | 0) + (b * 96 | 0) + 56 | 0;
    b = c[a >> 2] | 0;
    if (!b) {
      d = 253;
      return d | 0;
    }
    if ((d | 0) == 1) {
      c[a >> 2] = c[b + 16 >> 2];
      ft(c[b + 12 >> 2] | 0);
      ft(b);
      d = 0;
      return d | 0;
    }
    do if ((d | 0) > 1) {
      f = b;
      b = 1;
      do {
        a = f + 16 | 0;
        f = c[a >> 2] | 0;
        b = b + 1 | 0;
        e = (f | 0) == 0;
      } while ((b | 0) < (d | 0) & (e ^ 1));
      if (e) {
        d = 253;
        return d | 0;
      } else {
        b = f;
        e = f + 16 | 0;
        break;
      }
    } else {
      a = b + 16 | 0;
      e = a;
    } while (0);
    c[a >> 2] = c[e >> 2];
    ft(c[b + 12 >> 2] | 0);
    ft(b);
    d = 0;
    return d | 0;
  }
  function Md(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0;
    c[f >> 2] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((d | 0) < 1) {
      f = 203;
      return f | 0;
    }
    if ((c[b >> 2] | 0) < (d | 0)) {
      f = 203;
      return f | 0;
    }
    if (!e) {
      f = 253;
      return f | 0;
    }
    d = c[(c[b + 44 >> 2] | 0) + (d * 96 | 0) + 56 >> 2] | 0;
    if (!d) {
      f = 253;
      return f | 0;
    }
    a: do if (!(a[e >> 0] | 0)) {
      b = 0;
      while (1) {
        b = b + 1 | 0;
        g = c[d + 12 >> 2] | 0;
        if (!g) break a;
        if (!(_p(g, e) | 0)) break a;
        d = c[d + 16 >> 2] | 0;
        if (!d) {
          b = 253;
          break;
        }
      }
      return b | 0;
    } else {
      b = 0;
      while (1) {
        b = b + 1 | 0;
        g = c[d + 12 >> 2] | 0;
        if (g | 0 ? (_p(g, e) | 0) == 0 : 0) break a;
        d = c[d + 16 >> 2] | 0;
        if (!d) {
          b = 253;
          break;
        }
      }
      return b | 0;
    } while (0);
    c[f >> 2] = b;
    f = 0;
    return f | 0;
  }
  function Nd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 203;
      return d | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      d = 203;
      return d | 0;
    }
    a = c[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 56 >> 2] | 0;
    if (!a) a = 0;else {
      b = a;
      a = 0;
      do {
        a = a + 1 | 0;
        b = c[b + 16 >> 2] | 0;
      } while ((b | 0) != 0);
    }
    c[d >> 2] = a;
    d = 0;
    return d | 0;
  }
  function Od(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    g[e >> 3] = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 203;
      return e | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      e = 203;
      return e | 0;
    }
    b = Hh(c[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 56 >> 2] | 0, d) | 0;
    if (!b) {
      e = 253;
      return e | 0;
    }
    g[e >> 3] = +g[b >> 3] * +g[a + 4960 >> 3];
    e = 0;
    return e | 0;
  }
  function Pd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    if (!(c[a + 5072 >> 2] | 0)) {
      a = 102;
      return a | 0;
    }
    if ((b | 0) < 1) {
      a = 203;
      return a | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      a = 203;
      return a | 0;
    }
    b = Hh(c[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 56 >> 2] | 0, d) | 0;
    if (!b) {
      a = 253;
      return a | 0;
    }
    g[b >> 3] = e / +g[a + 4960 >> 3];
    a = 0;
    return a | 0;
  }
  function Qd(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    a[f >> 0] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((d | 0) < 1) {
      f = 203;
      return f | 0;
    }
    if ((c[b + 8 >> 2] | 0) < (d | 0)) {
      f = 203;
      return f | 0;
    }
    b = Hh(c[(c[b + 44 >> 2] | 0) + (d * 96 | 0) + 56 >> 2] | 0, e) | 0;
    if (!b) {
      f = 253;
      return f | 0;
    }
    b = c[b + 12 >> 2] | 0;
    if (!b) {
      f = 0;
      return f | 0;
    }
    Oq(f, b) | 0;
    f = 0;
    return f | 0;
  }
  function Rd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 203;
      return e | 0;
    }
    if ((c[a + 8 >> 2] | 0) < (b | 0)) {
      e = 203;
      return e | 0;
    }
    a = Hh(c[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 56 >> 2] | 0, d) | 0;
    if (!a) {
      e = 253;
      return e | 0;
    }
    d = a + 12 | 0;
    e = Jh(d, e, 31) | 0;
    c[d >> 2] = e;
    e = 0;
    return e | 0;
  }
  function Sd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    c[e >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 203;
      return e | 0;
    }
    if ((c[a >> 2] | 0) < (b | 0)) {
      e = 203;
      return e | 0;
    }
    a = Hh(c[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 56 >> 2] | 0, d) | 0;
    if (!a) {
      e = 253;
      return e | 0;
    }
    c[e >> 2] = c[a + 8 >> 2];
    e = 0;
    return e | 0;
  }
  function Td(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if (c[a + 5072 >> 2] | 0) {
      if ((b | 0) >= 1 ? (c[a >> 2] | 0) >= (b | 0) : 0) {
        if ((e | 0) >= 0 ? (c[a + 36 >> 2] | 0) >= (e | 0) : 0) {
          a = Hh(c[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 56 >> 2] | 0, d) | 0;
          if (!a) a = 253;else {
            c[a + 8 >> 2] = e;
            a = 0;
          }
        } else a = 205;
      } else a = 203;
    } else a = 102;
    return a | 0;
  }
  function Ud(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    var i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    p = Ib;
    Ib = Ib + 16 | 0;
    c[h >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      h = 102;
      Ib = p;
      return h | 0;
    }
    if (c[a + 4524 >> 2] | 0) {
      h = 262;
      Ib = p;
      return h | 0;
    }
    if (c[a + 4604 >> 2] | 0) {
      h = 262;
      Ib = p;
      return h | 0;
    }
    if (!($h(b) | 0)) {
      h = 252;
      Ib = p;
      return h | 0;
    }
    if (!(Vd(a, b, p) | 0)) {
      h = 215;
      Ib = p;
      return h | 0;
    }
    if (d >>> 0 > 8) {
      h = 251;
      Ib = p;
      return h | 0;
    }
    k = c[a + 80 >> 2] | 0;
    l = Ze(k, e) | 0;
    k = Ze(k, f) | 0;
    if ((l | 0) == 0 | (k | 0) == 0) {
      h = 203;
      Ib = p;
      return h | 0;
    }
    if ((d | 0) > 2 ? (j = Nh(a, 0, d, l, k) | 0, j | 0) : 0) {
      h = j;
      Ib = p;
      return h | 0;
    }
    n = a + 12 | 0;
    j = c[n >> 2] | 0;
    m = j + 1 | 0;
    c[n >> 2] = m;
    c[a + 1064 >> 2] = m;
    j = j + 2 | 0;
    n = a + 48 | 0;
    f = ht(c[n >> 2] | 0, j << 7) | 0;
    c[n >> 2] = f;
    f = j << 3;
    o = a + 4272 | 0;
    e = ht(c[o >> 2] | 0, f) | 0;
    c[o >> 2] = e;
    o = a + 4276 | 0;
    f = ht(c[o >> 2] | 0, f) | 0;
    c[o >> 2] = f;
    o = a + 4536 | 0;
    j = ht(c[o >> 2] | 0, j << 2) | 0;
    c[o >> 2] = j;
    n = c[n >> 2] | 0;
    o = n + (m << 7) | 0;
    hr(o, b, 31) | 0;
    b = (d | 0) < 2;
    do if (!b) {
      if ((d | 0) == 2) {
        f = a + 20 | 0;
        j = c[f >> 2] | 0;
        c[f >> 2] = j + 1;
        e = a + 56 | 0;
        j = ht(c[e >> 2] | 0, (j << 7) + 256 | 0) | 0;
        c[e >> 2] = j;
        f = c[f >> 2] | 0;
        c[j + (f << 7) >> 2] = m;
        c[j + (f << 7) + 4 >> 2] = 3;
        e = j + (f << 7) + 120 | 0;
        f = j + (f << 7) + 8 | 0;
        j = f + 72 | 0;
        do {
          c[f >> 2] = 0;
          f = f + 4 | 0;
        } while ((f | 0) < (j | 0));
        g[e >> 3] = -1.0e10;
        break;
      } else {
        j = a + 24 | 0;
        f = c[j >> 2] | 0;
        c[j >> 2] = f + 1;
        e = a + 60 | 0;
        f = ht(c[e >> 2] | 0, (f << 2) + 8 | 0) | 0;
        c[e >> 2] = f;
        c[f + (c[j >> 2] << 2) >> 2] = m;
        break;
      }
    } else {
      j = a + 16 | 0;
      c[j >> 2] = (c[j >> 2] | 0) + 1;
    } while (0);
    c[n + (m << 7) + 104 >> 2] = d;
    c[n + (m << 7) + 32 >> 2] = l;
    c[n + (m << 7) + 36 >> 2] = k;
    e = n + (m << 7) + 108 | 0;
    c[e >> 2] = 3;
    do if ((d | 0) == 2) {
      g[n + (m << 7) + 56 >> 3] = 1.0;
      g[n + (m << 7) + 64 >> 3] = 0.0;
      g[n + (m << 7) + 48 >> 3] = 0.0;
    } else {
      g[n + (m << 7) + 40 >> 3] = 10.0 / +g[a + 4952 >> 3];
      if (!b) {
        d = n + (m << 7) + 48 | 0;
        c[d >> 2] = 0;
        c[d + 4 >> 2] = 0;
        c[d + 8 >> 2] = 0;
        c[d + 12 >> 2] = 0;
        c[d + 16 >> 2] = 0;
        c[d + 20 >> 2] = 0;
        c[e >> 2] = 4;
        break;
      }
      switch (c[a + 4500 >> 2] | 0) {
        case 0:
          {
            i = 130.0;
            break;
          }
        case 1:
          {
            i = .0005;
            break;
          }
        case 2:
          {
            i = .01;
            break;
          }
        default:
          i = 1.0;
      }
      g[n + (m << 7) + 56 >> 3] = i;
      g[n + (m << 7) + 64 >> 3] = 0.0;
      g[n + (m << 7) + 48 >> 3] = 330.0;
    } while (0);
    l = n + (m << 7) + 72 | 0;
    d = n + (m << 7) + 112 | 0;
    c[l >> 2] = 0;
    c[l + 4 >> 2] = 0;
    c[l + 8 >> 2] = 0;
    c[l + 12 >> 2] = 0;
    c[l + 16 >> 2] = 0;
    c[l + 20 >> 2] = 0;
    c[l + 24 >> 2] = 0;
    c[l + 28 >> 2] = 0;
    c[d >> 2] = 0;
    c[d + 4 >> 2] = 0;
    c[d + 8 >> 2] = 0;
    c[d + 12 >> 2] = 0;
    We(c[a + 84 >> 2] | 0, o, m);
    c[h >> 2] = m;
    h = 0;
    Ib = p;
    return h | 0;
  }
  function Vd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    b = Ph(c[a + 84 >> 2] | 0, b) | 0;
    c[d >> 2] = b;
    d = (b | 0) == 0 ? 204 : 0;
    return d | 0;
  }
  function Wd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    c[d >> 2] = -1;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 204;
      return d | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      d = 204;
      return d | 0;
    }
    c[d >> 2] = c[(c[a + 48 >> 2] | 0) + (b << 7) + 104 >> 2];
    d = 0;
    return d | 0;
  }
  function Xd(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    a[e >> 0] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((d | 0) < 1) {
      e = 204;
      return e | 0;
    }
    if ((c[b + 12 >> 2] | 0) < (d | 0)) {
      e = 204;
      return e | 0;
    }
    Oq(e, (c[b + 48 >> 2] | 0) + (d << 7) | 0) | 0;
    e = 0;
    return e | 0;
  }
  function Yd(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    if ((b | 0) < 1) {
      f = 204;
      return f | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      f = 204;
      return f | 0;
    }
    if (!($h(d) | 0)) {
      f = 252;
      return f | 0;
    }
    f = a + 84 | 0;
    e = c[f >> 2] | 0;
    if ((Ze(e, d) | 0) > 0) {
      f = 215;
      return f | 0;
    }
    a = a + 48 | 0;
    Ye(e, (c[a >> 2] | 0) + (b << 7) | 0);
    hr((c[a >> 2] | 0) + (b << 7) | 0, d, 31) | 0;
    We(c[f >> 2] | 0, (c[a >> 2] | 0) + (b << 7) | 0, b);
    f = 0;
    return f | 0;
  }
  function Zd(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 112 | 0;
    h = n + 104 | 0;
    i = n + 100 | 0;
    j = n + 64 | 0;
    k = n + 32 | 0;
    l = n;
    f = n + 96 | 0;
    m = c[b >> 2] | 0;
    do if (c[a + 5072 >> 2] | 0) {
      if ((c[a + 4524 >> 2] | 0) == 0 ? (c[a + 4604 >> 2] | 0) == 0 : 0) {
        if (!(d >>> 0 > 8 | e >>> 0 > 1)) {
          if ((m | 0) >= 1 ? (m | 0) <= (c[a + 12 >> 2] | 0) : 0) {
            Wd(a, m, f) | 0;
            g = c[f >> 2] | 0;
            if ((g | 0) != (d | 0)) {
              if ((e | 0) == 1) {
                f = Mh(a, 1, m) | 0;
                if ((f | 0) > 0) {
                  f = 261;
                  break;
                } else e = f;
              } else e = 0;
              if ((d | 0) < 2 & (g | 0) < 2) {
                f = a + 48 | 0;
                c[(c[f >> 2] | 0) + (m << 7) + 104 >> 2] = d;
                if (d | 0) {
                  f = 0;
                  break;
                }
                c[(c[f >> 2] | 0) + (m << 7) + 108 >> 2] = 3;
                f = 0;
                break;
              } else {
                Xd(a, m, j) | 0;
                _d(a, m, h, i) | 0;
                h = c[h >> 2] | 0;
                Ad(a, h, k) | 0;
                f = c[i >> 2] | 0;
                Ad(a, f, l) | 0;
                f = Nh(a, m, d, h, f) | 0;
                if (f | 0) break;
                yd(a, m, e) | 0;
                f = Ud(a, j, d, k, l, b) | 0;
                break;
              }
            } else f = 0;
          } else f = 204;
        } else f = 251;
      } else f = 262;
    } else f = 102; while (0);
    Ib = n;
    return f | 0;
  }
  function _d(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    c[d >> 2] = 0;
    c[e >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 204;
      return e | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      e = 204;
      return e | 0;
    }
    a = a + 48 | 0;
    c[d >> 2] = c[(c[a >> 2] | 0) + (b << 7) + 32 >> 2];
    c[e >> 2] = c[(c[a >> 2] | 0) + (b << 7) + 36 >> 2];
    e = 0;
    return e | 0;
  }
  function $d(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    if (c[a + 4524 >> 2] | 0) {
      i = 262;
      return i | 0;
    }
    if (c[a + 4604 >> 2] | 0) {
      i = 262;
      return i | 0;
    }
    if ((b | 0) < 1) {
      i = 204;
      return i | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      i = 204;
      return i | 0;
    }
    if ((d | 0) < 0) {
      i = 203;
      return i | 0;
    }
    f = c[a >> 2] | 0;
    if ((f | 0) < (d | 0)) {
      i = 203;
      return i | 0;
    }
    if ((e | 0) < 0 | (f | 0) < (e | 0)) {
      i = 203;
      return i | 0;
    }
    if ((d | 0) == (e | 0)) {
      i = 222;
      return i | 0;
    }
    g = a + 48 | 0;
    f = c[g >> 2] | 0;
    h = f + (b << 7) + 32 | 0;
    if ((c[h >> 2] | 0) == (d | 0) ? (c[f + (b << 7) + 36 >> 2] | 0) == (e | 0) : 0) {
      i = 0;
      return i | 0;
    }
    f = c[f + (b << 7) + 104 >> 2] | 0;
    if ((f | 0) > 2 ? (i = Nh(a, b, f, d, e) | 0, i | 0) : 0) return i | 0;
    c[h >> 2] = d;
    c[(c[g >> 2] | 0) + (b << 7) + 36 >> 2] = e;
    i = 0;
    return i | 0;
  }
  function ae(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0.0;
    q = Ib;
    Ib = Ib + 16 | 0;
    j = q + 8 | 0;
    p = q;
    g[p >> 3] = 0.0;
    m = c[a + 48 >> 2] | 0;
    o = c[a + 56 >> 2] | 0;
    k = a + 4904 | 0;
    h = a + 4272 | 0;
    i = c[h >> 2] | 0;
    n = a + 4276 | 0;
    l = c[n >> 2] | 0;
    g[e >> 3] = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      p = 102;
      Ib = q;
      return p | 0;
    }
    if ((b | 0) < 1) {
      p = 204;
      Ib = q;
      return p | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      p = 204;
      Ib = q;
      return p | 0;
    }
    a: do switch (d | 0) {
      case 0:
        if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
          g[p >> 3] = 0.0;
          break a;
        } else {
          g[p >> 3] = +g[m + (b << 7) + 40 >> 3] * +g[a + 4952 >> 3];
          break a;
        }
      case 1:
        {
          g[p >> 3] = +g[m + (b << 7) + 48 >> 3] * +g[k >> 3];
          break;
        }
      case 2:
        {
          if ((c[m + (b << 7) + 104 >> 2] | 0) >>> 0 >= 2) {
            g[p >> 3] = 0.0;
            break a;
          }
          f = +g[m + (b << 7) + 56 >> 3];
          if ((c[a + 4500 >> 2] | 0) == 1) {
            g[p >> 3] = f * (+g[k >> 3] * 1.0e3);
            break a;
          } else {
            g[p >> 3] = f;
            break a;
          }
        }
      case 3:
        if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
          g[p >> 3] = 0.0;
          break a;
        } else {
          f = +g[m + (b << 7) + 40 >> 3];
          f = f * f;
          g[p >> 3] = +g[m + (b << 7) + 64 >> 3] * (f * f / .02517);
          break a;
        }
      case 4:
        if ((c[m + (b << 7) + 108 >> 2] | 0) >>> 0 < 3) {
          g[p >> 3] = 0.0;
          break a;
        } else {
          g[p >> 3] = 1.0;
          break a;
        }
      case 5:
        {
          h = c[m + (b << 7) + 104 >> 2] | 0;
          if (h >>> 0 < 2) {
            p = ae(a, b, 2, e) | 0;
            Ib = q;
            return p | 0;
          }
          f = +g[m + (b << 7) + 56 >> 3];
          g[p >> 3] = f;
          switch (h | 0) {
            case 5:
            case 4:
            case 3:
              {
                g[p >> 3] = f * +g[a + 4928 >> 3];
                break a;
              }
            case 6:
              {
                g[p >> 3] = f * +g[a + 4960 >> 3];
                break a;
              }
            default:
              break a;
          }
        }
      case 6:
        {
          g[p >> 3] = +g[m + (b << 7) + 72 >> 3] * 86400.0;
          break;
        }
      case 7:
        {
          g[p >> 3] = +g[m + (b << 7) + 80 >> 3] * 86400.0;
          break;
        }
      case 8:
        if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) {
          g[p >> 3] = 0.0;
          break a;
        } else {
          g[p >> 3] = +g[i + (b << 3) >> 3] * +g[a + 4960 >> 3];
          break a;
        }
      case 9:
        {
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
            g[p >> 3] = 0.0;
            break a;
          }
          if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) {
            g[p >> 3] = 0.0;
            break a;
          } else {
            r = +g[i + (b << 3) >> 3];
            f = +g[m + (b << 7) + 40 >> 3];
            f = f * f * 3.141592653589793 * .25;
            g[j >> 3] = f;
            g[p >> 3] = +g[a + 4968 >> 3] * ((r < 0.0 ? -r : r) / f);
            break a;
          }
        }
      case 10:
        if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) {
          g[p >> 3] = 0.0;
          break a;
        } else {
          o = c[a + 4256 >> 2] | 0;
          r = +g[o + (c[m + (b << 7) + 32 >> 2] << 3) >> 3] - +g[o + (c[m + (b << 7) + 36 >> 2] << 3) >> 3];
          g[p >> 3] = +g[a + 4976 >> 3] * ((c[m + (b << 7) + 104 >> 2] | 0) == 2 ? r : r < 0.0 ? -r : r);
          break a;
        }
      case 11:
        if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) {
          g[p >> 3] = 0.0;
          break a;
        } else {
          g[p >> 3] = 1.0;
          break a;
        }
      case 12:
        {
          h = c[m + (b << 7) + 104 >> 2] | 0;
          if (h >>> 0 < 2) {
            p = ae(a, b, 2, e) | 0;
            Ib = q;
            return p | 0;
          }
          f = +g[l + (b << 3) >> 3];
          f = f == -1.0e10 ? 0.0 : f;
          g[p >> 3] = f;
          switch (h | 0) {
            case 5:
            case 4:
            case 3:
              {
                g[p >> 3] = f * +g[a + 4928 >> 3];
                break a;
              }
            case 6:
              {
                g[p >> 3] = f * +g[a + 4960 >> 3];
                break a;
              }
            default:
              break a;
          }
        }
      case 13:
        {
          Jf(a, b, p, j);
          break;
        }
      case 14:
        {
          r = +oi(a, b);
          g[p >> 3] = r * +g[a + 4984 >> 3];
          break;
        }
      case 15:
        {
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
            a = o + ((Rh(a, b) | 0) << 7) + 64 | 0;
            g[p >> 3] = +(c[a >> 2] | 0);
          }
          break;
        }
      case 16:
        {
          l = (c[a + 4536 >> 2] | 0) + (b << 2) | 0;
          g[p >> 3] = +((c[l >> 2] | 0) >>> 0);
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2 ? (c[l >> 2] | 0) >>> 0 > 2 : 0) {
            a = Rh(a, b) | 0;
            h = (c[h >> 2] | 0) + (b << 3) | 0;
            f = +g[h >> 3];
            if (f > +g[(c[n >> 2] | 0) + (b << 3) >> 3] * +g[o + (a << 7) + 16 >> 3]) {
              g[p >> 3] = 5.0;
              f = +g[h >> 3];
            }
            if (f < 0.0) g[p >> 3] = 0.0;
          }
          break;
        }
      case 17:
        {
          Jf(a, b, j, p);
          break;
        }
      case 18:
        {
          g[p >> 3] = 0.0;
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2 ? (a = o + ((Rh(a, b) | 0) << 7) + 4 | 0, (c[a >> 2] | 0) == 0) : 0) g[p >> 3] = +g[m + (b << 7) + 64 >> 3];
          break;
        }
      case 19:
        {
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
            a = o + ((Rh(a, b) | 0) << 7) + 56 | 0;
            g[p >> 3] = +(c[a >> 2] | 0);
          }
          break;
        }
      case 20:
        {
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
            a = o + ((Rh(a, b) | 0) << 7) + 60 | 0;
            g[p >> 3] = +(c[a >> 2] | 0);
          }
          break;
        }
      case 21:
        {
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
            a = o + ((Rh(a, b) | 0) << 7) + 72 | 0;
            g[p >> 3] = +g[a >> 3];
          }
          break;
        }
      case 22:
        {
          if ((c[m + (b << 7) + 104 >> 2] | 0) == 2) {
            a = o + ((Rh(a, b) | 0) << 7) + 68 | 0;
            g[p >> 3] = +(c[a >> 2] | 0);
          }
          break;
        }
      default:
        {
          p = 251;
          Ib = q;
          return p | 0;
        }
    } while (0);
    g[e >> 3] = +g[p >> 3];
    p = 0;
    Ib = q;
    return p | 0;
  }
  function be(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0;
    i = a + 48 | 0;
    l = c[i >> 2] | 0;
    j = a + 4904 | 0;
    k = c[a + 4276 >> 2] | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      b = 102;
      return b | 0;
    }
    if ((b | 0) < 1) {
      b = 204;
      return b | 0;
    }
    h = (c[a + 12 >> 2] | 0) < (b | 0);
    a: do if (!(e < 0.0)) {
      f = l + (b << 7) + 104 | 0;
      if (h) {
        b = 204;
        return b | 0;
      }
      b: while (1) {
        switch (d | 0) {
          case 0:
            {
              m = 21;
              break a;
            }
          case 1:
            {
              m = 24;
              break a;
            }
          case 2:
            {
              m = 27;
              break a;
            }
          case 3:
            {
              m = 32;
              break a;
            }
          case 11:
          case 4:
            {
              m = 35;
              break a;
            }
          case 6:
            {
              m = 47;
              break a;
            }
          case 7:
            {
              m = 49;
              break a;
            }
          case 15:
            {
              m = 51;
              break a;
            }
          case 18:
            {
              m = 55;
              break a;
            }
          case 19:
            {
              m = 58;
              break a;
            }
          case 20:
            {
              m = 60;
              break a;
            }
          case 22:
            {
              m = 66;
              break a;
            }
          case 21:
            {
              m = 64;
              break b;
            }
          case 12:
          case 5:
            break;
          default:
            {
              m = 70;
              break a;
            }
        }
        switch (c[f >> 2] | 0) {
          case 7:
          case 2:
            break b;
          case 5:
          case 4:
          case 3:
            {
              m = 42;
              break b;
            }
          case 6:
            {
              m = 43;
              break b;
            }
          case 8:
            {
              f = 207;
              m = 72;
              break b;
            }
          case 0:
          case 1:
            break;
          default:
            {
              m = 71;
              break b;
            }
        }
        d = 2;
      }
      if ((m | 0) == 42) e = e / +g[a + 4928 >> 3];else if ((m | 0) == 43) e = e / +g[a + 4960 >> 3];else if ((m | 0) == 64) {
        f = (c[f >> 2] | 0) != 2;
        if (f) {
          b = f ? 0 : 211;
          return b | 0;
        }
        b = Rh(a, b) | 0;
        g[(c[a + 56 >> 2] | 0) + (b << 7) + 72 >> 3] = e;
        b = 0;
        return b | 0;
      } else if ((m | 0) == 71) {
        b = 0;
        return b | 0;
      } else if ((m | 0) == 72) return f | 0;
      if ((d | 0) == 5) {
        Ff(a, b, e, l + (b << 7) + 108 | 0, l + (b << 7) + 56 | 0);
        b = 0;
        return b | 0;
      } else {
        Ff(a, b, e, (c[a + 4536 >> 2] | 0) + (b << 2) | 0, k + (b << 3) | 0);
        b = 0;
        return b | 0;
      }
    } else {
      if (h) {
        b = 204;
        return b | 0;
      }
      do switch (d | 0) {
        case 11:
        case 4:
          {
            m = 35;
            break a;
          }
        case 0:
          {
            f = l + (b << 7) + 104 | 0;
            m = 21;
            break a;
          }
        case 1:
          {
            f = l + (b << 7) + 104 | 0;
            m = 24;
            break a;
          }
        case 2:
          {
            f = l + (b << 7) + 104 | 0;
            m = 27;
            break a;
          }
        case 3:
          {
            f = l + (b << 7) + 104 | 0;
            m = 32;
            break a;
          }
        case 6:
          {
            f = l + (b << 7) + 104 | 0;
            m = 47;
            break a;
          }
        case 7:
          {
            f = l + (b << 7) + 104 | 0;
            m = 49;
            break a;
          }
        case 15:
          {
            f = l + (b << 7) + 104 | 0;
            m = 51;
            break a;
          }
        case 18:
          {
            f = l + (b << 7) + 104 | 0;
            m = 55;
            break a;
          }
        case 19:
          {
            f = l + (b << 7) + 104 | 0;
            m = 58;
            break a;
          }
        case 20:
          {
            f = l + (b << 7) + 104 | 0;
            m = 60;
            break a;
          }
        case 21:
          {
            b = (c[l + (b << 7) + 104 >> 2] | 0) == 2 ? 211 : 0;
            return b | 0;
          }
        case 22:
          {
            f = l + (b << 7) + 104 | 0;
            m = 66;
            break a;
          }
        case 12:
        case 5:
          {
            b = 211;
            return b | 0;
          }
        default:
          {
            m = 70;
            break a;
          }
      } while (0);
    } while (0);
    switch (m | 0) {
      case 21:
        {
          if ((c[f >> 2] | 0) == 2) {
            b = 0;
            return b | 0;
          }
          if (e <= 0.0) {
            b = 211;
            return b | 0;
          }
          e = e / +g[a + 4952 >> 3];
          m = l + (b << 7) + 40 | 0;
          n = +g[m >> 3] / e;
          n = n * n;
          l = l + (b << 7) + 64 | 0;
          g[l >> 3] = +g[l >> 3] * (n * n);
          g[m >> 3] = e;
          $e(a, b);
          b = 0;
          return b | 0;
        }
      case 24:
        {
          if ((c[f >> 2] | 0) >>> 0 >= 2) {
            b = 0;
            return b | 0;
          }
          if (e <= 0.0) {
            b = 211;
            return b | 0;
          }
          g[l + (b << 7) + 48 >> 3] = e / +g[j >> 3];
          $e(a, b);
          b = 0;
          return b | 0;
        }
      case 27:
        {
          if ((c[f >> 2] | 0) >>> 0 >= 2) {
            b = 0;
            return b | 0;
          }
          if (e <= 0.0) {
            b = 211;
            return b | 0;
          }
          f = l + (b << 7) + 56 | 0;
          g[f >> 3] = e;
          if ((c[a + 4500 >> 2] | 0) == 1) g[f >> 3] = e / (+g[j >> 3] * 1.0e3);
          $e(a, b);
          b = 0;
          return b | 0;
        }
      case 32:
        {
          if ((c[f >> 2] | 0) == 2) {
            b = 0;
            return b | 0;
          }
          if (e <= 0.0) {
            b = 211;
            return b | 0;
          }
          n = +g[l + (b << 7) + 40 >> 3];
          n = n * n;
          g[l + (b << 7) + 64 >> 3] = e * .02517 / n / n;
          b = 0;
          return b | 0;
        }
      case 35:
        {
          if (!(c[l + (b << 7) + 104 >> 2] | 0)) {
            b = 207;
            return b | 0;
          }
          m = ~~((e >= 0.0 ? .5 : -.5) + e);
          f = m & 255;
          if (m << 24 >>> 0 > 16777216) {
            b = 211;
            return b | 0;
          }
          if ((d | 0) == 4) {
            Rf(a, b, f, l + (b << 7) + 108 | 0, l + (b << 7) + 56 | 0);
            b = 0;
            return b | 0;
          } else {
            Rf(a, b, f, (c[a + 4536 >> 2] | 0) + (b << 2) | 0, k + (b << 3) | 0);
            b = 0;
            return b | 0;
          }
        }
      case 47:
        {
          if ((c[f >> 2] | 0) >>> 0 >= 2) {
            b = 0;
            return b | 0;
          }
          g[l + (b << 7) + 72 >> 3] = e / 86400.0;
          c[a + 4608 >> 2] = 1;
          b = 0;
          return b | 0;
        }
      case 49:
        {
          if ((c[f >> 2] | 0) >>> 0 >= 2) {
            b = 0;
            return b | 0;
          }
          g[l + (b << 7) + 80 >> 3] = e / 86400.0;
          c[a + 4608 >> 2] = 1;
          b = 0;
          return b | 0;
        }
      case 51:
        {
          if ((c[f >> 2] | 0) != 2) {
            b = 0;
            return b | 0;
          }
          f = ~~((e >= 0.0 ? .5 : -.5) + e);
          if ((f | 0) < 0) {
            b = 205;
            return b | 0;
          }
          if ((c[a + 36 >> 2] | 0) < (f | 0)) {
            b = 205;
            return b | 0;
          }
          b = Rh(a, b) | 0;
          c[(c[a + 56 >> 2] | 0) + (b << 7) + 64 >> 2] = f;
          b = 0;
          return b | 0;
        }
      case 55:
        {
          if ((c[f >> 2] | 0) != 2) {
            b = 0;
            return b | 0;
          }
          if (e <= 0.0) {
            b = 211;
            return b | 0;
          }
          m = Rh(a, b) | 0;
          l = a + 56 | 0;
          c[(c[l >> 2] | 0) + (m << 7) + 4 >> 2] = 0;
          c[(c[l >> 2] | 0) + (m << 7) + 56 >> 2] = 0;
          g[(c[i >> 2] | 0) + (b << 7) + 64 >> 3] = e;
          Dg(a, m) | 0;
          k = (c[l >> 2] | 0) + (m << 7) + 40 | 0;
          g[k >> 3] = +g[k >> 3] / +g[a + 5024 >> 3];
          k = a + 4960 | 0;
          b = (c[l >> 2] | 0) + (m << 7) + 8 | 0;
          g[b >> 3] = +g[b >> 3] / +g[k >> 3];
          b = (c[l >> 2] | 0) + (m << 7) + 16 | 0;
          g[b >> 3] = +g[b >> 3] / +g[k >> 3];
          b = (c[l >> 2] | 0) + (m << 7) + 24 | 0;
          g[b >> 3] = +g[b >> 3] / +g[a + 4920 >> 3];
          b = 0;
          return b | 0;
        }
      case 58:
        {
          if ((c[f >> 2] | 0) != 2) {
            b = 0;
            return b | 0;
          }
          b = ce(a, b, ~~((e >= 0.0 ? .5 : -.5) + e)) | 0;
          return b | 0;
        }
      case 60:
        {
          if ((c[f >> 2] | 0) != 2) {
            b = 0;
            return b | 0;
          }
          f = ~~((e >= 0.0 ? .5 : -.5) + e);
          if ((f | 0) < 0) {
            b = 205;
            return b | 0;
          }
          if ((c[a + 40 >> 2] | 0) < (f | 0)) {
            b = 205;
            return b | 0;
          }
          b = Rh(a, b) | 0;
          c[(c[a + 56 >> 2] | 0) + (b << 7) + 60 >> 2] = f;
          b = 0;
          return b | 0;
        }
      case 66:
        {
          if ((c[f >> 2] | 0) != 2) {
            b = 0;
            return b | 0;
          }
          f = ~~((e >= 0.0 ? .5 : -.5) + e);
          if ((f | 0) < 0) {
            b = 205;
            return b | 0;
          }
          if ((c[a + 36 >> 2] | 0) < (f | 0)) {
            b = 205;
            return b | 0;
          }
          b = Rh(a, b) | 0;
          c[(c[a + 56 >> 2] | 0) + (b << 7) + 68 >> 2] = f;
          b = 0;
          return b | 0;
        }
      case 70:
        {
          b = 251;
          return b | 0;
        }
    }
    return 0;
  }
  function ce(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      l = 102;
      return l | 0;
    }
    if ((b | 0) < 1) {
      l = 204;
      return l | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      l = 204;
      return l | 0;
    }
    if ((c[(c[a + 48 >> 2] | 0) + (b << 7) + 104 >> 2] | 0) != 2) {
      l = 0;
      return l | 0;
    }
    if ((d | 0) < 0) {
      l = 206;
      return l | 0;
    }
    if ((c[a + 40 >> 2] | 0) < (d | 0)) {
      l = 206;
      return l | 0;
    }
    j = Rh(a, b) | 0;
    k = c[a + 56 >> 2] | 0;
    b = k + (j << 7) + 56 | 0;
    e = c[b >> 2] | 0;
    f = a + 68 | 0;
    h = c[(c[f >> 2] | 0) + (d * 56 | 0) + 36 >> 2] | 0;
    i = k + (j << 7) + 4 | 0;
    c[i >> 2] = 3;
    c[b >> 2] = d;
    if (!d) {
      l = 0;
      return l | 0;
    }
    l = Dg(a, j) | 0;
    do if ((l | 0) > 0) {
      c[(c[f >> 2] | 0) + (d * 56 | 0) + 36 >> 2] = h;
      c[i >> 2] = 3;
      c[b >> 2] = e;
      if (!e) return l | 0;else {
        Dg(a, j) | 0;
        break;
      }
    } while (0);
    if ((c[i >> 2] | 0) == 1) {
      e = a + 4920 | 0;
      b = k + (j << 7) + 32 | 0;
      g[b >> 3] = +g[b >> 3] / +g[e >> 3];
      b = a + 4960 | 0;
      m = +u(+ +g[b >> 3], + +g[k + (j << 7) + 48 >> 3]);
      a = k + (j << 7) + 40 | 0;
      g[a >> 3] = +g[a >> 3] * (m / +g[e >> 3]);
    } else {
      e = a + 4920 | 0;
      b = a + 4960 | 0;
    }
    a = k + (j << 7) + 8 | 0;
    g[a >> 3] = +g[a >> 3] / +g[b >> 3];
    a = k + (j << 7) + 16 | 0;
    g[a >> 3] = +g[a >> 3] / +g[b >> 3];
    k = k + (j << 7) + 24 | 0;
    g[k >> 3] = +g[k >> 3] / +g[e >> 3];
    return l | 0;
  }
  function de(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    h = +h;
    var i = 0,
      j = 0,
      k = 0;
    j = c[a + 48 >> 2] | 0;
    k = a + 4904 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      k = 102;
      return k | 0;
    }
    if ((b | 0) < 1) {
      k = 204;
      return k | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      k = 204;
      return k | 0;
    }
    if ((c[j + (b << 7) + 104 >> 2] | 0) >>> 0 > 1) {
      k = 0;
      return k | 0;
    }
    if (d <= 0.0 | e <= 0.0 | f <= 0.0 | h < 0.0) {
      k = 211;
      return k | 0;
    }
    g[j + (b << 7) + 48 >> 3] = d / +g[k >> 3];
    d = e / +g[a + 4952 >> 3];
    g[j + (b << 7) + 40 >> 3] = d;
    i = j + (b << 7) + 56 | 0;
    g[i >> 3] = f;
    if ((c[a + 4500 >> 2] | 0) == 1) g[i >> 3] = f / (+g[k >> 3] * 1.0e3);
    f = d * d;
    g[j + (b << 7) + 64 >> 3] = h * .02517 / f / f;
    $e(a, b);
    k = 0;
    return k | 0;
  }
  function ee(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = c[a + 48 >> 2] | 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 204;
      return d | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      d = 204;
      return d | 0;
    }
    a = c[e + (b << 7) + 112 >> 2] | 0;
    if (!a) {
      d = 0;
      return d | 0;
    }
    c[d >> 2] = c[a + 8 >> 2];
    d = 0;
    return d | 0;
  }
  function fe(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0;
    h = c[a + 48 >> 2] | 0;
    g[e >> 3] = -1.0e10;
    g[f >> 3] = -1.0e10;
    if (!(c[a + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((b | 0) < 1) {
      f = 204;
      return f | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      f = 204;
      return f | 0;
    }
    a = c[h + (b << 7) + 112 >> 2] | 0;
    if ((d | 0) < 1 | (a | 0) == 0) {
      f = 255;
      return f | 0;
    }
    if ((c[a + 8 >> 2] | 0) < (d | 0)) {
      f = 255;
      return f | 0;
    }
    d = d + -1 | 0;
    g[e >> 3] = +g[(c[a >> 2] | 0) + (d << 3) >> 3];
    g[f >> 3] = +g[(c[a + 4 >> 2] | 0) + (d << 3) >> 3];
    f = 0;
    return f | 0;
  }
  function ge(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0,
      i = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      i = 102;
      return i | 0;
    }
    if ((b | 0) < 1) {
      i = 204;
      return i | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (b | 0)) {
      i = 204;
      return i | 0;
    }
    b = (c[a + 48 >> 2] | 0) + (b << 7) | 0;
    Gh(b);
    if ((f | 0) <= 0) {
      i = 0;
      return i | 0;
    }
    a = 0;
    while (1) {
      h = Kh(b, +g[d + (a << 3) >> 3], +g[e + (a << 3) >> 3]) | 0;
      a = a + 1 | 0;
      if (h | 0) break;
      if ((a | 0) >= (f | 0)) {
        a = 0;
        i = 9;
        break;
      }
    }
    if ((i | 0) == 9) return a | 0;
    Gh(b);
    i = h;
    return i | 0;
  }
  function he(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    e = c[a + 48 >> 2] | 0;
    f = c[a + 56 >> 2] | 0;
    g = c[a + 12 >> 2] | 0;
    c[d >> 2] = -1;
    if (!(c[a + 5072 >> 2] | 0)) {
      g = 102;
      return g | 0;
    }
    if ((b | 0) < 1 | (g | 0) < (b | 0)) {
      g = 204;
      return g | 0;
    }
    if ((c[e + (b << 7) + 104 >> 2] | 0) != 2) {
      g = 216;
      return g | 0;
    }
    g = f + ((Rh(a, b) | 0) << 7) + 4 | 0;
    c[d >> 2] = c[g >> 2];
    g = 0;
    return g | 0;
  }
  function ie(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    e = c[a + 48 >> 2] | 0;
    f = c[a + 56 >> 2] | 0;
    g = c[a + 12 >> 2] | 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      g = 102;
      return g | 0;
    }
    if ((b | 0) < 1 | (g | 0) < (b | 0)) {
      g = 204;
      return g | 0;
    }
    if ((c[e + (b << 7) + 104 >> 2] | 0) != 2) {
      g = 216;
      return g | 0;
    }
    g = f + ((Rh(a, b) | 0) << 7) + 56 | 0;
    c[d >> 2] = c[g >> 2];
    g = 0;
    return g | 0;
  }
  function je(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0;
    f = Ib;
    Ib = Ib + 16 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      Ib = f;
      return e | 0;
    }
    if (!(Ed(a, b, f) | 0)) {
      e = 215;
      Ib = f;
      return e | 0;
    }
    if (!($h(b) | 0)) {
      e = 252;
      Ib = f;
      return e | 0;
    }
    d = a + 36 | 0;
    h = c[d >> 2] | 0;
    e = h + 1 | 0;
    i = a + 64 | 0;
    h = ht(c[i >> 2] | 0, (h * 44 | 0) + 88 | 0) | 0;
    c[i >> 2] = h;
    Oq(h + (e * 44 | 0) | 0, b) | 0;
    c[h + (e * 44 | 0) + 32 >> 2] = 0;
    c[h + (e * 44 | 0) + 36 >> 2] = 1;
    b = gt(1, 8) | 0;
    c[h + (e * 44 | 0) + 40 >> 2] = b;
    if (!b) {
      i = 101;
      Ib = f;
      return i | 0;
    }
    g[b >> 3] = 1.0;
    c[d >> 2] = e;
    c[a + 1096 >> 2] = e;
    i = 0;
    Ib = f;
    return i | 0;
  }
  function ke(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      h = 102;
      return h | 0;
    }
    if (c[a + 4524 >> 2] | 0) {
      h = 262;
      return h | 0;
    }
    if (c[a + 4604 >> 2] | 0) {
      h = 262;
      return h | 0;
    }
    if ((b | 0) < 1) {
      h = 205;
      return h | 0;
    }
    h = a + 36 | 0;
    if ((c[h >> 2] | 0) < (b | 0)) {
      h = 205;
      return h | 0;
    }
    Wh(a, b);
    e = a + 4492 | 0;
    d = c[e >> 2] | 0;
    if ((d | 0) != (b | 0)) {
      if ((d | 0) > (b | 0)) {
        d = d + -1 | 0;
        f = 9;
      }
    } else {
      d = 0;
      f = 9;
    }
    if ((f | 0) == 9) c[e >> 2] = d;
    g = a + 64 | 0;
    ft(c[(c[g >> 2] | 0) + (b * 44 | 0) + 40 >> 2] | 0);
    c[(c[g >> 2] | 0) + (b * 44 | 0) + 40 >> 2] = 0;
    ft(c[(c[g >> 2] | 0) + (b * 44 | 0) + 32 >> 2] | 0);
    c[(c[g >> 2] | 0) + (b * 44 | 0) + 32 >> 2] = 0;
    d = c[h >> 2] | 0;
    if ((d | 0) > (b | 0)) do {
      e = c[g >> 2] | 0;
      d = e + (b * 44 | 0) | 0;
      b = b + 1 | 0;
      e = e + (b * 44 | 0) | 0;
      f = d + 44 | 0;
      do {
        c[d >> 2] = c[e >> 2];
        d = d + 4 | 0;
        e = e + 4 | 0;
      } while ((d | 0) < (f | 0));
      d = c[h >> 2] | 0;
    } while ((b | 0) < (d | 0));
    c[h >> 2] = d + -1;
    h = a + 1096 | 0;
    c[h >> 2] = (c[h >> 2] | 0) + -1;
    h = 0;
    return h | 0;
  }
  function le(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    a[e >> 0] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((d | 0) < 1) {
      e = 205;
      return e | 0;
    }
    if ((c[b + 36 >> 2] | 0) < (d | 0)) {
      e = 205;
      return e | 0;
    }
    Oq(e, (c[b + 64 >> 2] | 0) + (d * 44 | 0) | 0) | 0;
    e = 0;
    return e | 0;
  }
  function me(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((b | 0) < 1) {
      f = 205;
      return f | 0;
    }
    f = c[a + 36 >> 2] | 0;
    if ((f | 0) < (b | 0)) {
      f = 205;
      return f | 0;
    }
    if (!($h(d) | 0)) {
      f = 252;
      return f | 0;
    }
    e = a + 64 | 0;
    a: do if ((f | 0) >= 1) {
      a = 1;
      while (1) {
        if ((a | 0) != (b | 0) ? (_p(d, (c[e >> 2] | 0) + (a * 44 | 0) | 0) | 0) == 0 : 0) {
          a = 215;
          break;
        }
        if ((a | 0) < (f | 0)) a = a + 1 | 0;else break a;
      }
      return a | 0;
    } while (0);
    Oq((c[e >> 2] | 0) + (b * 44 | 0) | 0, d) | 0;
    f = 0;
    return f | 0;
  }
  function ne(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 205;
      return d | 0;
    }
    if ((c[a + 36 >> 2] | 0) < (b | 0)) {
      d = 205;
      return d | 0;
    }
    c[d >> 2] = c[(c[a + 64 >> 2] | 0) + (b * 44 | 0) + 36 >> 2];
    d = 0;
    return d | 0;
  }
  function oe(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    g[e >> 3] = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 205;
      return e | 0;
    }
    if ((c[a + 36 >> 2] | 0) < (b | 0)) {
      e = 205;
      return e | 0;
    }
    if ((d | 0) < 1) {
      e = 251;
      return e | 0;
    }
    a = c[a + 64 >> 2] | 0;
    if ((c[a + (b * 44 | 0) + 36 >> 2] | 0) < (d | 0)) {
      e = 251;
      return e | 0;
    }
    g[e >> 3] = +g[(c[a + (b * 44 | 0) + 40 >> 2] | 0) + (d + -1 << 3) >> 3];
    e = 0;
    return e | 0;
  }
  function pe(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var f = 0;
    f = c[a + 64 >> 2] | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((b | 0) < 1) {
      f = 205;
      return f | 0;
    }
    if ((c[a + 36 >> 2] | 0) < (b | 0)) {
      f = 205;
      return f | 0;
    }
    if ((d | 0) < 1) {
      f = 251;
      return f | 0;
    }
    if ((c[f + (b * 44 | 0) + 36 >> 2] | 0) < (d | 0)) {
      f = 251;
      return f | 0;
    }
    g[(c[f + (b * 44 | 0) + 40 >> 2] | 0) + (d + -1 << 3) >> 3] = e;
    f = 0;
    return f | 0;
  }
  function qe(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0.0,
      f = 0,
      h = 0;
    f = c[a + 64 >> 2] | 0;
    g[d >> 3] = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 205;
      return d | 0;
    }
    if ((c[a + 36 >> 2] | 0) < (b | 0)) {
      d = 205;
      return d | 0;
    }
    h = f + (b * 44 | 0) + 36 | 0;
    a = c[h >> 2] | 0;
    if ((a | 0) > 0) {
      f = f + (b * 44 | 0) + 40 | 0;
      b = 0;
      e = 0.0;
      do {
        e = +g[(c[f >> 2] | 0) + (b << 3) >> 3] + e;
        g[d >> 3] = e;
        b = b + 1 | 0;
        a = c[h >> 2] | 0;
      } while ((b | 0) < (a | 0));
    } else e = 0.0;
    g[d >> 3] = e / +(a | 0);
    d = 0;
    return d | 0;
  }
  function re(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = c[a + 64 >> 2] | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 205;
      return e | 0;
    }
    if ((d | 0) == 0 ? 1 : (c[a + 36 >> 2] | 0) < (b | 0)) {
      e = 205;
      return e | 0;
    }
    if ((e | 0) < 1) {
      e = 202;
      return e | 0;
    }
    c[f + (b * 44 | 0) + 36 >> 2] = e;
    b = f + (b * 44 | 0) + 40 | 0;
    a = ht(c[b >> 2] | 0, e << 3) | 0;
    c[b >> 2] = a;
    if (!a) {
      e = 101;
      return e | 0;
    }
    g[a >> 3] = +g[d >> 3];
    if ((e | 0) == 1) {
      e = 0;
      return e | 0;
    }
    a = 1;
    do {
      g[(c[b >> 2] | 0) + (a << 3) >> 3] = +g[d + (a << 3) >> 3];
      a = a + 1 | 0;
    } while ((a | 0) != (e | 0));
    a = 0;
    return a | 0;
  }
  function se(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      f = 102;
      Ib = h;
      return f | 0;
    }
    if (!(te(a, b, h) | 0)) {
      f = 215;
      Ib = h;
      return f | 0;
    }
    if (!($h(b) | 0)) {
      f = 252;
      Ib = h;
      return f | 0;
    }
    e = a + 40 | 0;
    j = c[e >> 2] | 0;
    f = j + 1 | 0;
    i = a + 68 | 0;
    j = ht(c[i >> 2] | 0, (j * 56 | 0) + 112 | 0) | 0;
    c[i >> 2] = j;
    Oq(j + (f * 56 | 0) | 0, b) | 0;
    c[j + (f * 56 | 0) + 32 >> 2] = 0;
    c[j + (f * 56 | 0) + 44 >> 2] = 1;
    c[j + (f * 56 | 0) + 40 >> 2] = 1;
    c[j + (f * 56 | 0) + 36 >> 2] = 4;
    i = gt(1, 8) | 0;
    d = j + (f * 56 | 0) + 48 | 0;
    c[d >> 2] = i;
    i = gt(1, 8) | 0;
    b = j + (f * 56 | 0) + 52 | 0;
    c[b >> 2] = i;
    d = c[d >> 2] | 0;
    if ((i | 0) == 0 | (d | 0) == 0) {
      ft(d);
      ft(c[b >> 2] | 0);
      j = 101;
      Ib = h;
      return j | 0;
    } else {
      g[d >> 3] = 1.0;
      g[c[b >> 2] >> 3] = 1.0;
      c[e >> 2] = f;
      c[a + 1100 >> 2] = f;
      j = 0;
      Ib = h;
      return j | 0;
    }
    return 0;
  }
  function te(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    c[d >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    b = Uh(a, b) | 0;
    c[d >> 2] = b;
    d = (b | 0) == 0 ? 206 : 0;
    return d | 0;
  }
  function ue(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      h = 102;
      return h | 0;
    }
    if (c[a + 4524 >> 2] | 0) {
      h = 262;
      return h | 0;
    }
    if (c[a + 4604 >> 2] | 0) {
      h = 262;
      return h | 0;
    }
    if ((b | 0) < 1) {
      h = 205;
      return h | 0;
    }
    h = a + 40 | 0;
    if ((c[h >> 2] | 0) < (b | 0)) {
      h = 205;
      return h | 0;
    }
    Yh(a, b);
    g = a + 68 | 0;
    ft(c[(c[g >> 2] | 0) + (b * 56 | 0) + 48 >> 2] | 0);
    c[(c[g >> 2] | 0) + (b * 56 | 0) + 48 >> 2] = 0;
    ft(c[(c[g >> 2] | 0) + (b * 56 | 0) + 52 >> 2] | 0);
    c[(c[g >> 2] | 0) + (b * 56 | 0) + 52 >> 2] = 0;
    ft(c[(c[g >> 2] | 0) + (b * 56 | 0) + 32 >> 2] | 0);
    c[(c[g >> 2] | 0) + (b * 56 | 0) + 32 >> 2] = 0;
    d = c[h >> 2] | 0;
    if ((d | 0) > (b | 0)) do {
      e = c[g >> 2] | 0;
      d = e + (b * 56 | 0) | 0;
      b = b + 1 | 0;
      e = e + (b * 56 | 0) | 0;
      f = d + 56 | 0;
      do {
        c[d >> 2] = c[e >> 2];
        d = d + 4 | 0;
        e = e + 4 | 0;
      } while ((d | 0) < (f | 0));
      d = c[h >> 2] | 0;
    } while ((b | 0) < (d | 0));
    c[h >> 2] = d + -1;
    h = a + 1100 | 0;
    c[h >> 2] = (c[h >> 2] | 0) + -1;
    h = 0;
    return h | 0;
  }
  function ve(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    a[e >> 0] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((d | 0) < 1) {
      e = 206;
      return e | 0;
    }
    if ((c[b + 40 >> 2] | 0) < (d | 0)) {
      e = 206;
      return e | 0;
    }
    Oq(e, (c[b + 68 >> 2] | 0) + (d * 56 | 0) | 0) | 0;
    e = 0;
    return e | 0;
  }
  function we(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((b | 0) < 1) {
      f = 205;
      return f | 0;
    }
    f = c[a + 40 >> 2] | 0;
    if ((f | 0) < (b | 0)) {
      f = 205;
      return f | 0;
    }
    if (!($h(d) | 0)) {
      f = 252;
      return f | 0;
    }
    e = a + 68 | 0;
    a: do if ((f | 0) >= 1) {
      a = 1;
      while (1) {
        if ((a | 0) != (b | 0) ? (_p(d, (c[e >> 2] | 0) + (a * 56 | 0) | 0) | 0) == 0 : 0) {
          a = 215;
          break;
        }
        if ((a | 0) < (f | 0)) a = a + 1 | 0;else break a;
      }
      return a | 0;
    } while (0);
    Oq((c[e >> 2] | 0) + (b * 56 | 0) | 0, d) | 0;
    f = 0;
    return f | 0;
  }
  function xe(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 206;
      return d | 0;
    }
    if ((c[a + 40 >> 2] | 0) < (b | 0)) {
      d = 206;
      return d | 0;
    }
    c[d >> 2] = c[(c[a + 68 >> 2] | 0) + (b * 56 | 0) + 40 >> 2];
    d = 0;
    return d | 0;
  }
  function ye(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      d = 102;
      return d | 0;
    }
    if ((b | 0) < 1) {
      d = 206;
      return d | 0;
    }
    if ((c[a + 40 >> 2] | 0) < (b | 0)) {
      d = 206;
      return d | 0;
    }
    c[d >> 2] = c[(c[a + 68 >> 2] | 0) + (b * 56 | 0) + 36 >> 2];
    d = 0;
    return d | 0;
  }
  function ze(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0;
    g[e >> 3] = 0.0;
    g[f >> 3] = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((b | 0) < 1) {
      f = 206;
      return f | 0;
    }
    if ((c[a + 40 >> 2] | 0) < (b | 0)) {
      f = 206;
      return f | 0;
    }
    if ((d | 0) < 1) {
      f = 251;
      return f | 0;
    }
    a = a + 68 | 0;
    h = c[a >> 2] | 0;
    if ((c[h + (b * 56 | 0) + 40 >> 2] | 0) < (d | 0)) {
      f = 251;
      return f | 0;
    }
    d = d + -1 | 0;
    g[e >> 3] = +g[(c[h + (b * 56 | 0) + 48 >> 2] | 0) + (d << 3) >> 3];
    g[f >> 3] = +g[(c[(c[a >> 2] | 0) + (b * 56 | 0) + 52 >> 2] | 0) + (d << 3) >> 3];
    f = 0;
    return f | 0;
  }
  function Ae(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    var h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    m = d + -1 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      n = 102;
      return n | 0;
    }
    if ((b | 0) < 1) {
      n = 206;
      return n | 0;
    }
    if ((c[a + 40 >> 2] | 0) < (b | 0)) {
      n = 206;
      return n | 0;
    }
    n = c[a + 68 >> 2] | 0;
    if ((d | 0) < 1) {
      n = 251;
      return n | 0;
    }
    if ((d | 0) == 1) j = -1.e+37;else j = +g[(c[n + (b * 56 | 0) + 48 >> 2] | 0) + (d + -2 << 3) >> 3];
    l = n + (b * 56 | 0) + 40 | 0;
    h = c[l >> 2] | 0;
    if ((h | 0) > (d | 0)) i = +g[(c[n + (b * 56 | 0) + 48 >> 2] | 0) + (d << 3) >> 3];else i = 1.e+37;
    if (!(!(j >= e) & !(i <= e))) {
      n = 230;
      return n | 0;
    }
    k = (h | 0) < (d | 0) ? h + 1 | 0 : d;
    d = c[n + (b * 56 | 0) + 44 >> 2] | 0;
    do if ((k | 0) >= (d | 0)) if ((_h(n + (b * 56 | 0) | 0, d + 10 | 0) | 0) > 0) {
      n = 101;
      return n | 0;
    } else {
      h = c[l >> 2] | 0;
      break;
    } while (0);
    if ((k | 0) > (h | 0)) c[l >> 2] = h + 1;else h = m;
    g[(c[n + (b * 56 | 0) + 48 >> 2] | 0) + (h << 3) >> 3] = e;
    g[(c[n + (b * 56 | 0) + 52 >> 2] | 0) + (h << 3) >> 3] = f;
    n = Zh(a, b) | 0;
    return n | 0;
  }
  function Be(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0.0;
    if (!(c[a + 5072 >> 2] | 0)) {
      f = 102;
      return f | 0;
    }
    if ((b | 0) < 1) {
      f = 206;
      return f | 0;
    }
    if ((c[a + 40 >> 2] | 0) < (b | 0)) {
      f = 206;
      return f | 0;
    }
    if ((d | 0) == 0 | (e | 0) == 0) {
      f = 206;
      return f | 0;
    }
    if ((f | 0) < 1) {
      f = 202;
      return f | 0;
    }
    a: do if ((f | 0) != 1) {
      h = 1;
      i = +g[d >> 3];
      while (1) {
        l = i;
        i = +g[d + (h << 3) >> 3];
        h = h + 1 | 0;
        if (l >= i) {
          h = 230;
          break;
        }
        if ((h | 0) >= (f | 0)) break a;
      }
      return h | 0;
    } while (0);
    h = c[a + 68 >> 2] | 0;
    if ((_h(h + (b * 56 | 0) | 0, f) | 0) > 0) {
      f = 101;
      return f | 0;
    }
    c[h + (b * 56 | 0) + 40 >> 2] = f;
    if ((f | 0) > 0) {
      k = h + (b * 56 | 0) + 48 | 0;
      j = h + (b * 56 | 0) + 52 | 0;
      h = 0;
      do {
        g[(c[k >> 2] | 0) + (h << 3) >> 3] = +g[d + (h << 3) >> 3];
        g[(c[j >> 2] | 0) + (h << 3) >> 3] = +g[e + (h << 3) >> 3];
        h = h + 1 | 0;
      } while ((h | 0) != (f | 0));
    }
    f = Zh(a, b) | 0;
    return f | 0;
  }
  function Ce(a, b, d, e, f, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    h = +h;
    i = i | 0;
    var j = 0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    n = a + 4904 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      i = 102;
      return i | 0;
    }
    if ((d | 0) < 1) {
      i = 204;
      return i | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (d | 0)) {
      i = 204;
      return i | 0;
    }
    k = c[a + 48 >> 2] | 0;
    j = c[k + (d << 7) + 104 >> 2] | 0;
    if (!j) {
      i = 207;
      return i | 0;
    }
    if (b >>> 0 > 3) {
      i = 251;
      return i | 0;
    }
    m = b >>> 0 < 2;
    if (m) {
      if ((f | 0) < 1) {
        i = 203;
        return i | 0;
      }
      if ((c[a >> 2] | 0) < (f | 0)) {
        i = 203;
        return i | 0;
      } else o = f;
    } else o = 0;
    if (e < 0.0 | h < 0.0) {
      i = 202;
      return i | 0;
    }
    switch (j | 0) {
      case 5:
      case 4:
      case 3:
        {
          l = e / +g[a + 4928 >> 3];
          j = 4;
          break;
        }
      case 6:
        {
          l = e / +g[a + 4960 >> 3];
          j = 4;
          break;
        }
      case 8:
        {
          if (!(e == 0.0)) {
            if (e == 1.0) f = 3;else {
              i = 202;
              return i | 0;
            }
          } else f = 2;
          l = +g[k + (d << 7) + 56 >> 3];
          j = f;
          break;
        }
      case 2:
      case 1:
        {
          if (e == 0.0) {
            l = e;
            j = 2;
          } else {
            l = e;
            j = 3;
          }
          break;
        }
      default:
        {
          l = e;
          j = 4;
        }
    }
    do if (m) {
      e = +g[(c[a + 44 >> 2] | 0) + (o * 96 | 0) + 48 >> 3];
      if ((o | 0) > (c[a + 8 >> 2] | 0)) {
        h = e + h / +g[n >> 3];
        f = 0;
        break;
      } else {
        h = e + h / +g[a + 4928 >> 3];
        f = 0;
        break;
      }
    } else {
      f = ~~((h >= 0.0 ? .5 : -.5) + h);
      if ((b | 0) != 2) f = (f | 0) % 86400 | 0;
    } while (0);
    m = a + 28 | 0;
    k = c[m >> 2] | 0;
    n = k + 1 | 0;
    p = a + 72 | 0;
    k = ht(c[p >> 2] | 0, (k * 40 | 0) + 80 | 0) | 0;
    c[p >> 2] = k;
    c[k + (n * 40 | 0) + 36 >> 2] = b << 24 >> 24;
    c[k + (n * 40 | 0) >> 2] = d;
    c[k + (n * 40 | 0) + 4 >> 2] = o;
    c[k + (n * 40 | 0) + 32 >> 2] = j;
    g[k + (n * 40 | 0) + 24 >> 3] = l;
    g[k + (n * 40 | 0) + 16 >> 3] = h;
    c[k + (n * 40 | 0) + 8 >> 2] = f;
    c[m >> 2] = n;
    c[a + 1088 >> 2] = n;
    c[i >> 2] = n;
    i = 0;
    return i | 0;
  }
  function De(a, b, d, e, f, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    i = i | 0;
    var j = 0.0,
      k = 0.0,
      l = 0,
      m = 0;
    m = a + 4904 | 0;
    c[d >> 2] = 0;
    c[e >> 2] = 0;
    c[h >> 2] = 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      i = 102;
      return i | 0;
    }
    if ((b | 0) < 1) {
      i = 241;
      return i | 0;
    }
    if ((c[a + 28 >> 2] | 0) < (b | 0)) {
      i = 241;
      return i | 0;
    }
    l = c[a + 72 >> 2] | 0;
    c[d >> 2] = c[l + (b * 40 | 0) + 36 >> 2];
    d = c[l + (b * 40 | 0) >> 2] | 0;
    c[e >> 2] = d;
    j = +g[l + (b * 40 | 0) + 24 >> 3];
    a: do if (j != -1.0e10) switch (c[(c[a + 48 >> 2] | 0) + (d << 7) + 104 >> 2] | 0) {
      case 5:
      case 4:
      case 3:
        {
          k = j * +g[a + 4928 >> 3];
          break a;
        }
      case 6:
        {
          k = j * +g[a + 4960 >> 3];
          break a;
        }
      default:
        {
          k = j;
          break a;
        }
    } else k = (c[l + (b * 40 | 0) + 32 >> 2] | 0) == 3 ? 1.0 : 0.0; while (0);
    d = c[l + (b * 40 | 0) + 4 >> 2] | 0;
    c[h >> 2] = d;
    do if ((d | 0) > 0) {
      j = +g[l + (b * 40 | 0) + 16 >> 3] - +g[(c[a + 44 >> 2] | 0) + (d * 96 | 0) + 48 >> 3];
      if ((d | 0) > (c[a + 8 >> 2] | 0)) {
        j = j * +g[m >> 3];
        break;
      } else {
        j = j * +g[a + 4928 >> 3];
        break;
      }
    } else j = +(c[l + (b * 40 | 0) + 8 >> 2] | 0); while (0);
    g[f >> 3] = k;
    g[i >> 3] = j;
    i = 0;
    return i | 0;
  }
  function Ee(a, b, d, e, f, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    h = h | 0;
    i = +i;
    var j = 0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    n = a + 4904 | 0;
    if (!(c[a + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((b | 0) < 1) {
      e = 241;
      return e | 0;
    }
    if ((c[a + 28 >> 2] | 0) < (b | 0)) {
      e = 241;
      return e | 0;
    }
    p = c[a + 72 >> 2] | 0;
    q = p + (b * 40 | 0) | 0;
    if (!e) {
      c[q >> 2] = 0;
      e = 0;
      return e | 0;
    }
    if ((e | 0) < 0) {
      e = 204;
      return e | 0;
    }
    if ((c[a + 12 >> 2] | 0) < (e | 0)) {
      e = 204;
      return e | 0;
    }
    k = c[a + 48 >> 2] | 0;
    j = c[k + (e << 7) + 104 >> 2] | 0;
    if (!j) {
      e = 207;
      return e | 0;
    }
    if (d >>> 0 > 3) {
      e = 251;
      return e | 0;
    }
    m = d >>> 0 < 2;
    if (m) {
      if ((h | 0) < 1) {
        e = 203;
        return e | 0;
      }
      if ((c[a >> 2] | 0) < (h | 0)) {
        e = 203;
        return e | 0;
      } else o = h;
    } else o = 0;
    if (f < 0.0 | i < 0.0) {
      e = 202;
      return e | 0;
    }
    switch (j | 0) {
      case 5:
      case 4:
      case 3:
        {
          l = f / +g[a + 4928 >> 3];
          j = 4;
          break;
        }
      case 6:
        {
          l = f / +g[a + 4960 >> 3];
          j = 4;
          break;
        }
      case 8:
        {
          if (!(f == 0.0)) {
            if (f == 1.0) h = 3;else {
              e = 202;
              return e | 0;
            }
          } else h = 2;
          l = +g[k + (e << 7) + 56 >> 3];
          j = h;
          break;
        }
      case 2:
      case 1:
        {
          if (f == 0.0) {
            l = f;
            j = 2;
          } else {
            l = f;
            j = 3;
          }
          break;
        }
      default:
        {
          l = f;
          j = 4;
        }
    }
    do if (m) {
      f = +g[(c[a + 44 >> 2] | 0) + (o * 96 | 0) + 48 >> 3];
      if ((o | 0) > (c[a + 8 >> 2] | 0)) {
        i = f + i / +g[n >> 3];
        h = 0;
        break;
      } else {
        i = f + i / +g[a + 4928 >> 3];
        h = 0;
        break;
      }
    } else {
      h = ~~((i >= 0.0 ? .5 : -.5) + i);
      if ((d | 0) != 2) h = (h | 0) % 86400 | 0;
    } while (0);
    c[p + (b * 40 | 0) + 36 >> 2] = d << 24 >> 24;
    c[q >> 2] = e;
    c[p + (b * 40 | 0) + 4 >> 2] = o;
    c[p + (b * 40 | 0) + 32 >> 2] = j;
    g[p + (b * 40 | 0) + 24 >> 3] = l;
    g[p + (b * 40 | 0) + 16 >> 3] = i;
    c[p + (b * 40 | 0) + 8 >> 2] = h;
    e = 0;
    return e | 0;
  }
  function Fe(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 1040 | 0;
    j = n;
    m = b + 76 | 0;
    k = b + 32 | 0;
    i = ht(c[m >> 2] | 0, ((c[k >> 2] | 0) * 56 | 0) + 112 | 0) | 0;
    c[m >> 2] = i;
    m = b + 4236 | 0;
    c[m >> 2] = 0;
    c[b + 4232 >> 2] = 6;
    if (!d) {
      m = 0;
      Ib = n;
      return m | 0;
    }
    g = b + 388 | 0;
    h = b + 548 | 0;
    i = b + 1104 | 0;
    while (1) {
      e = Lq(d, 10) | 0;
      f = (e | 0) != 0;
      if (f) a[e >> 0] = 0;
      Oq(j, d) | 0;
      d = j + (Kq(j) | 0) | 0;
      a[d >> 0] = 10;
      a[d + 1 >> 0] = 0;
      d = yg(j, g, h) | 0;
      c[i >> 2] = d;
      if (((d | 0) > 0 ? (a[c[g >> 2] >> 0] | 0) != 59 : 0) ? (xj(b) | 0, c[m >> 2] | 0) : 0) break;
      if (!f) {
        l = 10;
        break;
      }
      a[e >> 0] = 10;
      d = e + 1 | 0;
    }
    if ((l | 0) == 10 ? (c[m >> 2] | 0) == 0 : 0) {
      m = 0;
      Ib = n;
      return m | 0;
    }
    tj(b, c[k >> 2] | 0);
    d = c[m >> 2] | 0;
    if ((d | 0) != 201) {
      m = d;
      Ib = n;
      return m | 0;
    }
    c[m >> 2] = 250;
    m = 250;
    Ib = n;
    return m | 0;
  }
  function Ge(a, b) {
    a = a | 0;
    b = b | 0;
    if ((b | 0) >= 1 ? (c[a + 32 >> 2] | 0) >= (b | 0) : 0) {
      tj(a, b);
      a = 0;
    } else a = 257;
    return a | 0;
  }
  function He(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    var i = 0;
    if ((b | 0) < 1) {
      f = 257;
      return f | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      f = 257;
      return f | 0;
    }
    i = a + 76 | 0;
    g[h >> 3] = +g[(c[i >> 2] | 0) + (b * 56 | 0) + 32 >> 3];
    a = c[(c[i >> 2] | 0) + (b * 56 | 0) + 40 >> 2] | 0;
    if (!a) a = 0;else {
      h = 0;
      do {
        h = h + 1 | 0;
        a = c[a + 32 >> 2] | 0;
      } while ((a | 0) != 0);
      a = h;
    }
    c[d >> 2] = a;
    a = c[(c[i >> 2] | 0) + (b * 56 | 0) + 44 >> 2] | 0;
    if (!a) a = 0;else {
      h = 0;
      do {
        h = h + 1 | 0;
        a = c[a + 16 >> 2] | 0;
      } while ((a | 0) != 0);
      a = h;
    }
    c[e >> 2] = a;
    a = c[(c[i >> 2] | 0) + (b * 56 | 0) + 48 >> 2] | 0;
    if (!a) a = 0;else {
      h = 0;
      do {
        h = h + 1 | 0;
        a = c[a + 16 >> 2] | 0;
      } while ((a | 0) != 0);
      a = h;
    }
    c[f >> 2] = a;
    f = 0;
    return f | 0;
  }
  function Ie(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    a[e >> 0] = 0;
    if (!(c[b + 5072 >> 2] | 0)) {
      e = 102;
      return e | 0;
    }
    if ((d | 0) < 1) {
      e = 257;
      return e | 0;
    }
    if ((c[b + 32 >> 2] | 0) < (d | 0)) {
      e = 257;
      return e | 0;
    }
    Oq(e, (c[b + 76 >> 2] | 0) + (d * 56 | 0) | 0) | 0;
    e = 0;
    return e | 0;
  }
  function Je(a, b, d, e, f, h, i, j, k, l) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = l | 0;
    if ((b | 0) < 1) {
      l = 257;
      return l | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      l = 257;
      return l | 0;
    }
    a = Fj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 40 >> 2] | 0, d) | 0;
    if (!a) {
      l = 258;
      return l | 0;
    }
    c[e >> 2] = c[a >> 2];
    c[f >> 2] = c[a + 4 >> 2];
    c[h >> 2] = c[a + 8 >> 2];
    c[i >> 2] = c[a + 12 >> 2];
    c[j >> 2] = c[a + 16 >> 2];
    c[k >> 2] = c[a + 20 >> 2];
    g[l >> 3] = +g[a + 24 >> 3];
    l = 0;
    return l | 0;
  }
  function Ke(a, b, d, e, f, h, i, j, k, l) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = +l;
    if ((b | 0) < 1) {
      k = 257;
      return k | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      k = 257;
      return k | 0;
    }
    a = Fj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 40 >> 2] | 0, d) | 0;
    if (!a) {
      k = 258;
      return k | 0;
    }
    c[a >> 2] = e;
    c[a + 4 >> 2] = f;
    c[a + 8 >> 2] = h;
    c[a + 12 >> 2] = i;
    c[a + 16 >> 2] = j;
    c[a + 20 >> 2] = k;
    g[a + 24 >> 3] = l;
    k = 0;
    return k | 0;
  }
  function Le(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if ((b | 0) < 1) {
      e = 257;
      return e | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      e = 257;
      return e | 0;
    }
    a = Fj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 40 >> 2] | 0, d) | 0;
    if (!a) {
      e = 258;
      return e | 0;
    }
    c[a + 8 >> 2] = e;
    e = 0;
    return e | 0;
  }
  function Me(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if ((b | 0) < 1) {
      e = 257;
      return e | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      e = 257;
      return e | 0;
    }
    a = Fj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 40 >> 2] | 0, d) | 0;
    if (!a) {
      e = 258;
      return e | 0;
    }
    c[a + 20 >> 2] = e;
    e = 0;
    return e | 0;
  }
  function Ne(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    if ((b | 0) < 1) {
      d = 257;
      return d | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      d = 257;
      return d | 0;
    }
    a = Fj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 40 >> 2] | 0, d) | 0;
    if (!a) {
      d = 258;
      return d | 0;
    }
    g[a + 24 >> 3] = e;
    d = 0;
    return d | 0;
  }
  function Oe(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    if ((b | 0) < 1) {
      h = 257;
      return h | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      h = 257;
      return h | 0;
    }
    a = Gj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 44 >> 2] | 0, d) | 0;
    if (!a) {
      h = 258;
      return h | 0;
    }
    c[e >> 2] = c[a >> 2];
    c[f >> 2] = c[a + 4 >> 2];
    g[h >> 3] = +g[a + 8 >> 3];
    h = 0;
    return h | 0;
  }
  function Pe(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = +h;
    if ((b | 0) < 1) {
      f = 257;
      return f | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      f = 257;
      return f | 0;
    }
    a = Gj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 44 >> 2] | 0, d) | 0;
    if (!a) {
      f = 258;
      return f | 0;
    }
    c[a >> 2] = e;
    c[a + 4 >> 2] = f;
    g[a + 8 >> 3] = h;
    f = 0;
    return f | 0;
  }
  function Qe(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    if ((b | 0) < 1) {
      h = 257;
      return h | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      h = 257;
      return h | 0;
    }
    a = Gj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 48 >> 2] | 0, d) | 0;
    if (!a) {
      h = 258;
      return h | 0;
    }
    c[e >> 2] = c[a >> 2];
    c[f >> 2] = c[a + 4 >> 2];
    g[h >> 3] = +g[a + 8 >> 3];
    h = 0;
    return h | 0;
  }
  function Re(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = +h;
    if ((b | 0) < 1) {
      f = 257;
      return f | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      f = 257;
      return f | 0;
    }
    a = Gj(c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 48 >> 2] | 0, d) | 0;
    if (!a) {
      f = 258;
      return f | 0;
    }
    c[a >> 2] = e;
    c[a + 4 >> 2] = f;
    g[a + 8 >> 3] = h;
    f = 0;
    return f | 0;
  }
  function Se(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    if ((b | 0) < 1) {
      b = 257;
      return b | 0;
    }
    if ((c[a + 32 >> 2] | 0) < (b | 0)) {
      b = 257;
      return b | 0;
    }
    g[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 32 >> 3] = d;
    b = 0;
    return b | 0;
  }
  function Te(b) {
    b = b | 0;
    var c = 0,
      d = 0;
    c = a[b >> 0] | 0;
    if (!(c << 24 >> 24)) {
      d = 5381;
      return d | 0;
    }
    d = 5381;
    do {
      b = b + 1 | 0;
      d = (d * 33 | 0) + (c << 24 >> 24) | 0;
      c = a[b >> 0] | 0;
    } while (c << 24 >> 24 != 0);
    d = (d >>> 0) % 128e3 | 0;
    return d | 0;
  }
  function Ue(a) {
    a = a | 0;
    var b = 0,
      c = 0;
    b = (Kq(a) | 0) + 1 | 0;
    c = et(b) | 0;
    if (!c) return c | 0;
    ut(c | 0, a | 0, b | 0) | 0;
    return c | 0;
  }
  function Ve() {
    var a = 0;
    a = gt(128e3, 4) | 0;
    if (!a) return a | 0;
    vt(a | 0, 0, 512e3) | 0;
    return a | 0;
  }
  function We(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Te(b) | 0;
    if (e >>> 0 > 127999) return;
    f = et(12) | 0;
    if (!f) return;
    b = Ue(b) | 0;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    e = a + (e << 2) | 0;
    c[f + 8 >> 2] = c[e >> 2];
    c[e >> 2] = f;
    return;
  }
  function Xe(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Te(b) | 0;
    if (e >>> 0 > 127999) return;
    a = c[a + (e << 2) >> 2] | 0;
    if (!a) return;
    while (1) {
      if (!(_p(c[a >> 2] | 0, b) | 0)) break;
      a = c[a + 8 >> 2] | 0;
      if (!a) {
        f = 7;
        break;
      }
    }
    if ((f | 0) == 7) return;
    c[a + 4 >> 2] = d;
    return;
  }
  function Ye(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    d = Te(b) | 0;
    if (d >>> 0 > 127999) return;
    e = a + (d << 2) | 0;
    a = c[e >> 2] | 0;
    if (!a) return;
    d = 0;
    while (1) {
      if (!(_p(c[a >> 2] | 0, b) | 0)) break;
      d = c[a + 8 >> 2] | 0;
      if (!d) {
        f = 7;
        break;
      } else {
        g = a;
        a = d;
        d = g;
      }
    }
    if ((f | 0) == 7) return;
    c[((d | 0) == 0 ? e : d + 8 | 0) >> 2] = c[a + 8 >> 2];
    ft(c[a >> 2] | 0);
    ft(a);
    return;
  }
  function Ze(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Te(b) | 0;
    if (d >>> 0 > 127999) {
      e = 0;
      return e | 0;
    }
    a = c[a + (d << 2) >> 2] | 0;
    if (!a) {
      e = 0;
      return e | 0;
    }
    while (1) {
      if (!(_p(c[a >> 2] | 0, b) | 0)) break;
      a = c[a + 8 >> 2] | 0;
      if (!a) {
        a = 0;
        e = 7;
        break;
      }
    }
    if ((e | 0) == 7) return a | 0;
    e = c[a + 4 >> 2] | 0;
    return e | 0;
  }
  function _e(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    d = 0;
    do {
      e = a + (d << 2) | 0;
      b = c[e >> 2] | 0;
      if (b | 0) do {
        f = b;
        b = c[b + 8 >> 2] | 0;
        ft(c[f >> 2] | 0);
        ft(f);
      } while ((b | 0) != 0);
      c[e >> 2] = 0;
      d = d + 1 | 0;
    } while ((d | 0) != 128e3);
    ft(a);
    return;
  }
  function $e(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0.0,
      h = 0;
    h = c[a + 48 >> 2] | 0;
    a: do switch (c[h + (b << 7) + 104 >> 2] | 0) {
      case 1:
      case 0:
        {
          e = +g[h + (b << 7) + 56 >> 3];
          f = +g[h + (b << 7) + 40 >> 3];
          d = +g[h + (b << 7) + 48 >> 3];
          switch (c[a + 4500 >> 2] | 0) {
            case 0:
              {
                d = d * 4.727 / +u(+e, + +g[a + 4304 >> 3]) / +u(+f, 4.871);
                break a;
              }
            case 1:
              {
                e = f * f * 3.141592653589793 * .25;
                d = d * .5 / 32.2 / f / (e * e);
                break a;
              }
            case 2:
              {
                e = e * 4.0 / (f * f * 4.680973053848792);
                d = d * (+u(+(f * .25), -1.333) * (e * e));
                break a;
              }
            default:
              return;
          }
        }
      case 2:
        {
          d = 1.0e8;
          break;
        }
      default:
        d = 1.0e-06;
    } while (0);
    g[h + (b << 7) + 88 >> 3] = d;
    return;
  }
  function af(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0;
    d = a + 12 | 0;
    if ((c[d >> 2] | 0) < 1) return;
    e = a + 48 | 0;
    f = a + 4276 | 0;
    h = a + 4480 | 0;
    b = 1;
    while (1) {
      a: do switch (c[(c[e >> 2] | 0) + (b << 7) + 104 >> 2] | 0) {
        case 1:
        case 0:
          {
            bf(a, b);
            break;
          }
        case 2:
          {
            cf(a, b);
            break;
          }
        case 5:
          {
            df(a, b);
            break;
          }
        case 7:
          {
            ef(a, b);
            break;
          }
        case 8:
          {
            ff(a, b);
            break;
          }
        case 4:
        case 3:
        case 6:
          if (+g[(c[f >> 2] | 0) + (b << 3) >> 3] == -1.0e10) {
            gf(a, b);
            break a;
          } else {
            g[(c[h >> 2] | 0) + (b << 3) >> 3] = 0.0;
            break a;
          }
        default:
          {}
      } while (0);
      if ((b | 0) < (c[d >> 2] | 0)) b = b + 1 | 0;else break;
    }
    return;
  }
  function bf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0.0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) {
      g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0e-08;
      g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
      return;
    }
    if ((c[a + 4500 >> 2] | 0) == 1) {
      jf(a, b);
      return;
    }
    i = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    h = i < 0.0;
    i = h ? -i : i;
    k = c[a + 48 >> 2] | 0;
    j = +g[k + (b << 7) + 64 >> 3];
    e = +g[a + 4304 >> 3];
    d = +g[k + (b << 7) + 88 >> 3] * e * +u(+i, +(e + -1.0));
    f = +g[a + 4296 >> 3];
    if (d < f) {
      e = i * f;
      d = f;
    } else e = i * d / e;
    k = j > 0.0;
    f = k ? i * (j * 2.0) + d : d;
    g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0 / f;
    g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = (h ? -1.0 : 1.0) * (k ? i * (j * i) + e : e) / f;
    return;
  }
  function cf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0.0,
      p = 0.0,
      q = 0.0,
      r = 0;
    r = Ib;
    Ib = Ib + 16 | 0;
    f = r + 8 | 0;
    m = r;
    e = +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
    if (e == 0.0 ? 1 : (c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) {
      g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0e-08;
      q = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
      a = a + 4484 | 0;
      a = c[a >> 2] | 0;
      b = a + (b << 3) | 0;
      g[b >> 3] = q;
      Ib = r;
      return;
    }
    h = a + 4272 | 0;
    q = +g[(c[h >> 2] | 0) + (b << 3) >> 3];
    d = q < 0.0 ? -q : q;
    k = Rh(a, b) | 0;
    l = c[a + 56 >> 2] | 0;
    n = c[l + (k << 7) + 4 >> 2] | 0;
    a: do switch (n | 0) {
      case 3:
        {
          g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0e6;
          q = +g[(c[h >> 2] | 0) + (b << 3) >> 3];
          a = a + 4484 | 0;
          a = c[a >> 2] | 0;
          b = a + (b << 3) | 0;
          g[b >> 3] = q;
          Ib = r;
          return;
        }
      case 2:
        {
          hf(a, c[l + (k << 7) + 56 >> 2] | 0, d / e, f, m);
          q = -+g[f >> 3];
          g[l + (k << 7) + 32 >> 3] = q;
          d = -+g[m >> 3];
          g[l + (k << 7) + 40 >> 3] = d;
          g[l + (k << 7) + 48 >> 3] = 1.0;
          d = e * d;
          j = d;
          d = e * e * q + d * +g[(c[h >> 2] | 0) + (b << 3) >> 3];
          break;
        }
      default:
        {
          p = e * e * +g[l + (k << 7) + 32 >> 3];
          g[f >> 3] = p;
          o = +g[l + (k << 7) + 48 >> 3];
          i = o + -1.0;
          o = (i < 0.0 ? -i : i) < 1.0e-06 ? 1.0 : o;
          i = +g[l + (k << 7) + 40 >> 3] * +u(+e, +(2.0 - o));
          g[m >> 3] = i;
          if (!n) {
            d = -i / d / d;
            if (d > 1.0e8) {
              j = 1.0e8;
              d = q * -1.0e8;
              break a;
            }
            e = +g[a + 4296 >> 3];
            if (d < e) {
              j = e;
              d = -(q * e);
              break a;
            } else {
              j = d;
              d = i / q;
              break a;
            }
          } else {
            if (!(o != 1.0)) {
              j = i;
              d = p + q * i;
              break a;
            }
            d = +u(+d, +(o + -1.0)) * (o * i);
            e = +g[a + 4296 >> 3];
            if (d < e) {
              j = e;
              d = p + q * e;
              break a;
            } else {
              j = d;
              d = p + q * d / o;
              break a;
            }
          }
        }
    } while (0);
    g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0 / j;
    q = d / j;
    a = a + 4484 | 0;
    a = c[a >> 2] | 0;
    b = a + (b << 3) | 0;
    g[b >> 3] = q;
    Ib = r;
    return;
  }
  function df(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0.0,
      f = 0.0;
    d = a + 4276 | 0;
    e = +g[(c[d >> 2] | 0) + (b << 3) >> 3];
    if (e == -1.0e10 | e == 0.0) {
      gf(a, b);
      return;
    }
    f = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    if (+g[(c[a + 48 >> 2] | 0) + (b << 7) + 64 >> 3] * (f * f) > e) {
      gf(a, b);
      return;
    } else {
      g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0e8;
      g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = +g[(c[d >> 2] | 0) + (b << 3) >> 3] * 1.0e8;
      return;
    }
  }
  function ef(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0.0,
      h = 0.0,
      i = 0.0;
    d = c[a + 48 >> 2] | 0;
    e = d + (b << 7) + 64 | 0;
    f = +g[e >> 3];
    h = +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
    if (!(h != -1.0e10)) {
      gf(a, b);
      g[e >> 3] = f;
      return;
    }
    i = +g[d + (b << 7) + 40 >> 3];
    i = i * i;
    g[e >> 3] = h * .02517 / (i * i);
    gf(a, b);
    g[e >> 3] = f;
    return;
  }
  function ff(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0.0,
      j = 0.0;
    f = Ib;
    Ib = Ib + 16 | 0;
    d = f + 8 | 0;
    e = f;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) == 2) {
      gf(a, b);
      Ib = f;
      return;
    } else {
      i = +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
      h = a + 4272 | 0;
      j = +g[(c[h >> 2] | 0) + (b << 3) >> 3];
      j = j < 0.0 ? -j : j;
      j = j >= 1.0e-06 ? j : 1.0e-06;
      hf(a, ~~(i + (i >= 0.0 ? .5 : -.5)), j, d, e);
      i = +g[e >> 3];
      i = i >= 1.0e-06 ? i : 1.0e-06;
      g[e >> 3] = i;
      g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0 / i;
      g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = (j + +g[d >> 3] / i) * (+g[(c[h >> 2] | 0) + (b << 3) >> 3] < 0.0 ? -1.0 : 1.0);
      Ib = f;
      return;
    }
  }
  function gf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0.0,
      h = 0.0,
      i = 0;
    d = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    do if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 >= 3) {
      e = +g[(c[a + 48 >> 2] | 0) + (b << 7) + 64 >> 3];
      if (e > 0.0) {
        f = +s(+d) * (e * 2.0);
        h = +g[a + 4296 >> 3];
        i = f < h;
        e = i ? h : f;
        g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0 / e;
        d = (i ? d * h : d * f * .5) / e;
        break;
      } else {
        g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0e6;
        break;
      }
    } else g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0e-08; while (0);
    g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = d;
    return;
  }
  function hf(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = e | 0;
    f = f | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = a + 4960 | 0;
    d = +g[l >> 3] * d;
    h = c[a + 68 >> 2] | 0;
    j = c[h + (b * 56 | 0) + 48 >> 2] | 0;
    k = c[h + (b * 56 | 0) + 52 >> 2] | 0;
    h = c[h + (b * 56 | 0) + 40 >> 2] | 0;
    do if ((h | 0) > 0) {
      b = 0;
      while (1) {
        if (!(+g[j + (b << 3) >> 3] < d)) {
          i = 6;
          break;
        }
        b = b + 1 | 0;
        if ((b | 0) >= (h | 0)) {
          i = 5;
          break;
        }
      }
      if ((i | 0) == 5) {
        b = b + (((b | 0) == (h | 0)) << 31 >> 31) | 0;
        break;
      } else if ((i | 0) == 6) if (!b) {
        i = 7;
        break;
      } else {
        b = b + (((b | 0) == (h | 0)) << 31 >> 31) | 0;
        break;
      }
    } else i = 7; while (0);
    if ((i | 0) == 7) b = 1;
    i = b + -1 | 0;
    h = k + (i << 3) | 0;
    i = j + (i << 3) | 0;
    d = (+g[k + (b << 3) >> 3] - +g[h >> 3]) / (+g[j + (b << 3) >> 3] - +g[i >> 3]);
    g[f >> 3] = d;
    d = +g[h >> 3] - d * +g[i >> 3];
    g[e >> 3] = d;
    a = a + 4920 | 0;
    g[e >> 3] = d / +g[a >> 3];
    g[f >> 3] = +g[f >> 3] * +g[l >> 3] / +g[a >> 3];
    return;
  }
  function jf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0.0,
      h = 0,
      i = 0,
      j = 0.0,
      k = 0.0,
      l = 0,
      m = 0.0,
      n = 0;
    n = Ib;
    Ib = Ib + 16 | 0;
    l = n;
    h = c[a + 48 >> 2] | 0;
    i = a + 4272 | 0;
    j = +g[(c[i >> 2] | 0) + (b << 3) >> 3];
    m = j < 0.0 ? -j : j;
    k = +g[h + (b << 7) + 88 >> 3];
    e = +g[h + (b << 7) + 64 >> 3];
    d = +g[h + (b << 7) + 40 >> 3];
    f = d * +g[a + 4384 >> 3];
    if (!(m <= f * 1570.7963267948967)) {
      d = +g[h + (b << 7) + 56 >> 3] / d;
      g[l >> 3] = 0.0;
      e = e + k * +kf(m, d, f, l);
      f = +g[(c[i >> 2] | 0) + (b << 3) >> 3] * (m * e);
      d = m * (m * (k * +g[l >> 3]));
    } else {
      d = k * (f * 50.26548245743669);
      f = j * (e * m + d);
    }
    m = m * (e * 2.0) + d;
    g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 1.0 / m;
    g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = f / m;
    Ib = n;
    return;
  }
  function kf(a, b, c, d) {
    a = +a;
    b = +b;
    c = +c;
    d = d | 0;
    var e = 0.0,
      f = 0.0,
      h = 0.0,
      i = 0.0,
      j = 0.0;
    e = a / c;
    if (!(e >= 3141.5926535897934)) {
      a = b / 3.7 + 3.2889547634539907e-03;
      i = +v(+a) * -.8685889638065036;
      j = 1.0 / (i * i);
      i = j * (2.0 - .005142149657990939 / (a * i));
      a = e / 1570.7963267948967;
      h = .128 - j * 17.0 + i * 2.5;
      f = j * 13.0 + -.128 - (i + i);
      b = .032 - j * 3.0 + i * .5;
      e = j * 7.0 - i + a * (h + a * (f + a * b));
      b = (h + a * (f * 2.0 + a * 3.0 * b)) / c;
      c = 1570.7963267948967;
      c = b / c;
      g[d >> 3] = c;
      return +e;
    } else {
      e = 4.618413198590667 / +u(+e, .9);
      i = b / 3.7 + e;
      h = +v(+i) * -.8685889638065036;
      f = 1.0 / (h * h);
      j = f;
      h = e * (f * 1.8) * -.8685889638065036 / i / h;
      i = a;
      i = h / i;
      g[d >> 3] = i;
      return +j;
    }
    return 0.0;
  }
  function lf(a) {
    a = a | 0;
    vt(c[a + 4544 >> 2] | 0, 0, (c[a >> 2] << 3) + 8 | 0) | 0;
    vt(c[a + 4548 >> 2] | 0, 0, (c[a + 4560 >> 2] << 3) + 8 | 0) | 0;
    vt(c[a + 4552 >> 2] | 0, 0, (c[a >> 2] << 3) + 8 | 0) | 0;
    vt(c[a + 4488 >> 2] | 0, 0, (c[a >> 2] << 3) + 8 | 0) | 0;
    mf(a);
    nf(a);
    of(a);
    pf(a);
    qf(a);
    return;
  }
  function mf(a) {
    a = a | 0;
    var b = 0.0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    i = a + 12 | 0;
    if ((c[i >> 2] | 0) < 1) return;
    o = a + 4480 | 0;
    p = a + 48 | 0;
    q = a + 4272 | 0;
    r = a + 4488 | 0;
    s = a + 4548 | 0;
    t = a + 4572 | 0;
    j = a + 8 | 0;
    k = a + 4256 | 0;
    l = a + 4552 | 0;
    m = a + 4568 | 0;
    n = a + 4544 | 0;
    e = a + 4484 | 0;
    d = 1;
    while (1) {
      do if (!(+g[(c[o >> 2] | 0) + (d << 3) >> 3] == 0.0)) {
        h = c[p >> 2] | 0;
        f = c[h + (d << 7) + 32 >> 2] | 0;
        h = c[h + (d << 7) + 36 >> 2] | 0;
        a = (c[r >> 2] | 0) + (f << 3) | 0;
        g[a >> 3] = +g[a >> 3] - +g[(c[q >> 2] | 0) + (d << 3) >> 3];
        a = (c[r >> 2] | 0) + (h << 3) | 0;
        g[a >> 3] = +g[(c[q >> 2] | 0) + (d << 3) >> 3] + +g[a >> 3];
        a = (c[s >> 2] | 0) + (c[(c[t >> 2] | 0) + (d << 2) >> 2] << 3) | 0;
        g[a >> 3] = +g[a >> 3] - +g[(c[o >> 2] | 0) + (d << 3) >> 3];
        b = +g[(c[o >> 2] | 0) + (d << 3) >> 3];
        if ((f | 0) > (c[j >> 2] | 0)) {
          b = b * +g[(c[k >> 2] | 0) + (f << 3) >> 3];
          a = h;
        } else {
          a = (c[n >> 2] | 0) + (c[(c[m >> 2] | 0) + (f << 2) >> 2] << 3) | 0;
          g[a >> 3] = b + +g[a >> 3];
          b = +g[(c[e >> 2] | 0) + (d << 3) >> 3];
          a = f;
        }
        a = (c[l >> 2] | 0) + (c[(c[m >> 2] | 0) + (a << 2) >> 2] << 3) | 0;
        g[a >> 3] = b + +g[a >> 3];
        b = +g[(c[o >> 2] | 0) + (d << 3) >> 3];
        if ((h | 0) > (c[j >> 2] | 0)) {
          f = (c[l >> 2] | 0) + (c[(c[m >> 2] | 0) + (f << 2) >> 2] << 3) | 0;
          g[f >> 3] = b * +g[(c[k >> 2] | 0) + (h << 3) >> 3] + +g[f >> 3];
          break;
        } else {
          f = (c[n >> 2] | 0) + (c[(c[m >> 2] | 0) + (h << 2) >> 2] << 3) | 0;
          g[f >> 3] = b + +g[f >> 3];
          h = (c[l >> 2] | 0) + (c[(c[m >> 2] | 0) + (h << 2) >> 2] << 3) | 0;
          g[h >> 3] = +g[h >> 3] - +g[(c[e >> 2] | 0) + (d << 3) >> 3];
          break;
        }
      } while (0);
      if ((d | 0) < (c[i >> 2] | 0)) d = d + 1 | 0;else break;
    }
    return;
  }
  function nf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0.0,
      r = 0;
    p = Ib;
    Ib = Ib + 16 | 0;
    f = p + 8 | 0;
    j = p;
    k = a + 8 | 0;
    b = c[k >> 2] | 0;
    if ((b | 0) < 1) {
      Ib = p;
      return;
    }
    l = a + 44 | 0;
    m = a + 4568 | 0;
    n = a + 4544 | 0;
    o = a + 4552 | 0;
    h = a + 4268 | 0;
    i = a + 4488 | 0;
    e = 1;
    while (1) {
      d = c[l >> 2] | 0;
      if (!(+g[d + (e * 96 | 0) + 72 >> 3] == 0.0)) {
        vf(a, e, f, j);
        b = c[(c[m >> 2] | 0) + (e << 2) >> 2] | 0;
        q = +g[j >> 3];
        r = (c[n >> 2] | 0) + (b << 3) | 0;
        g[r >> 3] = 1.0 / q + +g[r >> 3];
        b = (c[o >> 2] | 0) + (b << 3) | 0;
        g[b >> 3] = +g[b >> 3] + (+g[f >> 3] + +g[d + (e * 96 | 0) + 48 >> 3]) / q;
        b = (c[i >> 2] | 0) + (e << 3) | 0;
        g[b >> 3] = +g[b >> 3] - +g[(c[h >> 2] | 0) + (e << 3) >> 3];
        b = c[k >> 2] | 0;
      }
      if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
    }
    Ib = p;
    return;
  }
  function of(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0.0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0.0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    q = Ib;
    Ib = Ib + 16 | 0;
    d = q + 8 | 0;
    l = q;
    if (!(c[a + 4496 >> 2] | 0)) {
      Ib = q;
      return;
    }
    p = a + 4328 | 0;
    e = +g[a + 4336 >> 3] - +g[p >> 3];
    f = 1.0 / +g[a + 4320 >> 3];
    h = a + 8 | 0;
    if ((c[h >> 2] | 0) < 1) {
      Ib = q;
      return;
    }
    i = a + 4260 | 0;
    j = a + 4568 | 0;
    k = a + 4544 | 0;
    m = a + 44 | 0;
    n = a + 4552 | 0;
    b = 1;
    while (1) {
      if (!(+g[(c[i >> 2] | 0) + (b << 3) >> 3] <= 0.0) ? (uf(a, b, e, f, d, l), o = +g[l >> 3], o > 0.0) : 0) {
        r = c[(c[j >> 2] | 0) + (b << 2) >> 2] | 0;
        s = (c[k >> 2] | 0) + (r << 3) | 0;
        g[s >> 3] = 1.0 / o + +g[s >> 3];
        r = (c[n >> 2] | 0) + (r << 3) | 0;
        g[r >> 3] = +g[r >> 3] + (+g[d >> 3] + +g[(c[m >> 2] | 0) + (b * 96 | 0) + 48 >> 3] + +g[p >> 3]) / o;
      }
      if ((b | 0) < (c[h >> 2] | 0)) b = b + 1 | 0;else break;
    }
    Ib = q;
    return;
  }
  function pf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0;
    d = a + 8 | 0;
    if ((c[d >> 2] | 0) < 1) return;
    e = a + 4264 | 0;
    f = a + 4488 | 0;
    h = a + 4552 | 0;
    b = a + 4568 | 0;
    a = 1;
    while (1) {
      i = (c[f >> 2] | 0) + (a << 3) | 0;
      g[i >> 3] = +g[i >> 3] - +g[(c[e >> 2] | 0) + (a << 3) >> 3];
      i = (c[h >> 2] | 0) + (c[(c[b >> 2] | 0) + (a << 2) >> 2] << 3) | 0;
      g[i >> 3] = +g[(c[f >> 2] | 0) + (a << 3) >> 3] + +g[i >> 3];
      if ((a | 0) < (c[d >> 2] | 0)) a = a + 1 | 0;else break;
    }
    return;
  }
  function qf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    d = a + 24 | 0;
    if ((c[d >> 2] | 0) < 1) return;
    h = a + 60 | 0;
    i = a + 4276 | 0;
    j = a + 48 | 0;
    b = 1;
    while (1) {
      k = c[(c[h >> 2] | 0) + (b << 2) >> 2] | 0;
      a: do if (!(+g[(c[i >> 2] | 0) + (k << 3) >> 3] == -1.0e10)) {
        l = c[j >> 2] | 0;
        e = c[l + (k << 7) + 32 >> 2] | 0;
        f = c[l + (k << 7) + 36 >> 2] | 0;
        switch (c[l + (k << 7) + 104 >> 2] | 0) {
          case 3:
            {
              rf(a, k, e, f);
              break a;
            }
          case 4:
            {
              sf(a, k, e, f);
              break a;
            }
          case 6:
            {
              tf(a, k, e, f);
              break a;
            }
          default:
            break a;
        }
      } while (0);
      if ((b | 0) < (c[d >> 2] | 0)) b = b + 1 | 0;else break;
    }
    return;
  }
  function rf(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    i = a + 4544 | 0;
    h = c[a + 4568 >> 2] | 0;
    j = c[h + (d << 2) >> 2] | 0;
    h = c[h + (e << 2) >> 2] | 0;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) != 4) {
      gf(a, b);
      d = a + 4480 | 0;
      e = (c[a + 4548 >> 2] | 0) + (c[(c[a + 4572 >> 2] | 0) + (b << 2) >> 2] << 3) | 0;
      g[e >> 3] = +g[e >> 3] - +g[(c[d >> 2] | 0) + (b << 3) >> 3];
      e = (c[i >> 2] | 0) + (j << 3) | 0;
      g[e >> 3] = +g[(c[d >> 2] | 0) + (b << 3) >> 3] + +g[e >> 3];
      e = (c[i >> 2] | 0) + (h << 3) | 0;
      g[e >> 3] = +g[(c[d >> 2] | 0) + (b << 3) >> 3] + +g[e >> 3];
      e = a + 4484 | 0;
      i = a + 4272 | 0;
      a = a + 4552 | 0;
      j = (c[a >> 2] | 0) + (j << 3) | 0;
      g[j >> 3] = +g[(c[e >> 2] | 0) + (b << 3) >> 3] - +g[(c[i >> 2] | 0) + (b << 3) >> 3] + +g[j >> 3];
      j = (c[a >> 2] | 0) + (h << 3) | 0;
      g[j >> 3] = +g[j >> 3] - (+g[(c[e >> 2] | 0) + (b << 3) >> 3] - +g[(c[i >> 2] | 0) + (b << 3) >> 3]);
      return;
    }
    f = +g[(c[a + 44 >> 2] | 0) + (e * 96 | 0) + 48 >> 3] + +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
    g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 0.0;
    k = a + 4488 | 0;
    g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3] + +g[(c[k >> 2] | 0) + (e << 3) >> 3];
    d = a + 4552 | 0;
    b = (c[d >> 2] | 0) + (h << 3) | 0;
    g[b >> 3] = f * 1.0e8 + +g[b >> 3];
    i = (c[i >> 2] | 0) + (h << 3) | 0;
    g[i >> 3] = +g[i >> 3] + 1.0e8;
    f = +g[(c[k >> 2] | 0) + (e << 3) >> 3];
    if (!(f < 0.0)) return;
    k = (c[d >> 2] | 0) + (j << 3) | 0;
    g[k >> 3] = f + +g[k >> 3];
    return;
  }
  function sf(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    i = a + 4544 | 0;
    h = c[a + 4568 >> 2] | 0;
    j = c[h + (d << 2) >> 2] | 0;
    h = c[h + (e << 2) >> 2] | 0;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) != 4) {
      gf(a, b);
      e = a + 4480 | 0;
      d = (c[a + 4548 >> 2] | 0) + (c[(c[a + 4572 >> 2] | 0) + (b << 2) >> 2] << 3) | 0;
      g[d >> 3] = +g[d >> 3] - +g[(c[e >> 2] | 0) + (b << 3) >> 3];
      d = (c[i >> 2] | 0) + (j << 3) | 0;
      g[d >> 3] = +g[(c[e >> 2] | 0) + (b << 3) >> 3] + +g[d >> 3];
      d = (c[i >> 2] | 0) + (h << 3) | 0;
      g[d >> 3] = +g[(c[e >> 2] | 0) + (b << 3) >> 3] + +g[d >> 3];
      d = a + 4484 | 0;
      i = a + 4272 | 0;
      a = a + 4552 | 0;
      j = (c[a >> 2] | 0) + (j << 3) | 0;
      g[j >> 3] = +g[(c[d >> 2] | 0) + (b << 3) >> 3] - +g[(c[i >> 2] | 0) + (b << 3) >> 3] + +g[j >> 3];
      j = (c[a >> 2] | 0) + (h << 3) | 0;
      g[j >> 3] = +g[j >> 3] - (+g[(c[d >> 2] | 0) + (b << 3) >> 3] - +g[(c[i >> 2] | 0) + (b << 3) >> 3]);
      return;
    }
    f = +g[(c[a + 44 >> 2] | 0) + (d * 96 | 0) + 48 >> 3] + +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
    g[(c[a + 4480 >> 2] | 0) + (b << 3) >> 3] = 0.0;
    k = a + 4488 | 0;
    g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3] - +g[(c[k >> 2] | 0) + (d << 3) >> 3];
    e = a + 4552 | 0;
    b = (c[e >> 2] | 0) + (j << 3) | 0;
    g[b >> 3] = f * 1.0e8 + +g[b >> 3];
    j = (c[i >> 2] | 0) + (j << 3) | 0;
    g[j >> 3] = +g[j >> 3] + 1.0e8;
    f = +g[(c[k >> 2] | 0) + (d << 3) >> 3];
    if (!(f > 0.0)) return;
    k = (c[e >> 2] | 0) + (h << 3) | 0;
    g[k >> 3] = f + +g[k >> 3];
    return;
  }
  function tf(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      i = 0,
      j = 0.0,
      k = 0;
    i = a + 4544 | 0;
    j = +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
    h = c[a + 4568 >> 2] | 0;
    f = c[h + (d << 2) >> 2] | 0;
    h = c[h + (e << 2) >> 2] | 0;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) == 4) {
      k = a + 4488 | 0;
      d = (c[k >> 2] | 0) + (d << 3) | 0;
      g[d >> 3] = +g[d >> 3] - j;
      e = (c[k >> 2] | 0) + (e << 3) | 0;
      g[e >> 3] = j + +g[e >> 3];
      g[(c[a + 4484 >> 2] | 0) + (b << 3) >> 3] = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3] - j;
      e = a + 4552 | 0;
      d = (c[e >> 2] | 0) + (f << 3) | 0;
      g[d >> 3] = +g[d >> 3] - j;
      e = (c[e >> 2] | 0) + (h << 3) | 0;
      g[e >> 3] = j + +g[e >> 3];
      e = a + 4480 | 0;
      g[(c[e >> 2] | 0) + (b << 3) >> 3] = 1.0e-08;
      d = (c[a + 4548 >> 2] | 0) + (c[(c[a + 4572 >> 2] | 0) + (b << 2) >> 2] << 3) | 0;
      g[d >> 3] = +g[d >> 3] - +g[(c[e >> 2] | 0) + (b << 3) >> 3];
      d = (c[i >> 2] | 0) + (f << 3) | 0;
      g[d >> 3] = +g[(c[e >> 2] | 0) + (b << 3) >> 3] + +g[d >> 3];
      i = (c[i >> 2] | 0) + (h << 3) | 0;
      g[i >> 3] = +g[(c[e >> 2] | 0) + (b << 3) >> 3] + +g[i >> 3];
      return;
    } else {
      gf(a, b);
      k = a + 4480 | 0;
      e = (c[a + 4548 >> 2] | 0) + (c[(c[a + 4572 >> 2] | 0) + (b << 2) >> 2] << 3) | 0;
      g[e >> 3] = +g[e >> 3] - +g[(c[k >> 2] | 0) + (b << 3) >> 3];
      e = (c[i >> 2] | 0) + (f << 3) | 0;
      g[e >> 3] = +g[(c[k >> 2] | 0) + (b << 3) >> 3] + +g[e >> 3];
      e = (c[i >> 2] | 0) + (h << 3) | 0;
      g[e >> 3] = +g[(c[k >> 2] | 0) + (b << 3) >> 3] + +g[e >> 3];
      e = a + 4484 | 0;
      i = a + 4272 | 0;
      k = a + 4552 | 0;
      d = (c[k >> 2] | 0) + (f << 3) | 0;
      g[d >> 3] = +g[(c[e >> 2] | 0) + (b << 3) >> 3] - +g[(c[i >> 2] | 0) + (b << 3) >> 3] + +g[d >> 3];
      k = (c[k >> 2] | 0) + (h << 3) | 0;
      g[k >> 3] = +g[k >> 3] - (+g[(c[e >> 2] | 0) + (b << 3) >> 3] - +g[(c[i >> 2] | 0) + (b << 3) >> 3]);
      return;
    }
  }
  function uf(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = f | 0;
    h = h | 0;
    var i = 0.0,
      j = 0.0,
      k = 0.0;
    k = +g[(c[a + 4264 >> 2] | 0) + (b << 3) >> 3];
    i = +g[(c[a + 4260 >> 2] | 0) + (b << 3) >> 3];
    j = k / i;
    if (j <= 0.0) {
      g[h >> 3] = 1.0e8;
      k = k * 1.0e8;
      g[f >> 3] = k;
      return;
    }
    if (!(j < 1.0)) {
      g[h >> 3] = 1.0e8;
      k = (k - i) * 1.0e8 + d;
      g[f >> 3] = k;
      return;
    }
    j = d * e * +u(+j, +(e + -1.0)) / i;
    g[h >> 3] = j;
    i = +g[a + 4296 >> 3];
    if (j < i) {
      g[h >> 3] = i;
      k = k * i;
      g[f >> 3] = k;
      return;
    } else {
      k = k * j / e;
      g[f >> 3] = k;
      return;
    }
  }
  function vf(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0,
      h = 0.0,
      i = 0.0;
    f = +g[(c[a + 44 >> 2] | 0) + (b * 96 | 0) + 72 >> 3];
    h = +g[(c[a + 4268 >> 2] | 0) + (b << 3) >> 3];
    b = a + 4312 | 0;
    i = +g[b >> 3];
    i = (f <= 1.0e-06 ? 1.0e-06 : f) * i * +u(+ +s(+h), +(i + -1.0));
    g[e >> 3] = i;
    f = +g[a + 4296 >> 3];
    if (i < f) {
      g[e >> 3] = f;
      i = h * f;
      g[d >> 3] = i;
      return;
    } else {
      i = h * i / +g[b >> 3];
      g[d >> 3] = i;
      return;
    }
  }
  function wf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    if ((c[a >> 2] | 0) < 2) {
      a = 223;
      return a | 0;
    }
    if (!(c[a + 4 >> 2] | 0)) {
      a = 224;
      return a | 0;
    }
    b = Wj(a) | 0;
    if ((b | 0) > 100) {
      a = b;
      return a | 0;
    }
    b = xf(a) | 0;
    if (b | 0) {
      a = b;
      return a | 0;
    }
    d = c[a + 8 >> 2] | 0;
    a: do if ((d | 0) >= 1) {
      e = c[a + 88 >> 2] | 0;
      b = 1;
      while (1) {
        if (!(c[e + (b << 2) >> 2] | 0)) {
          b = 233;
          break;
        }
        if ((b | 0) < (d | 0)) b = b + 1 | 0;else break a;
      }
      return b | 0;
    } while (0);
    d = a + 12 | 0;
    if ((c[d >> 2] | 0) < 1) {
      a = 0;
      return a | 0;
    }
    e = a + 48 | 0;
    b = 1;
    while (1) {
      f = c[e >> 2] | 0;
      yf(a, b, c[f + (b << 7) + 108 >> 2] & 255, +g[f + (b << 7) + 56 >> 3]);
      if ((b | 0) < (c[d >> 2] | 0)) b = b + 1 | 0;else {
        b = 0;
        break;
      }
    }
    return b | 0;
  }
  function xf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    f = a + 12 | 0;
    i = gt((c[f >> 2] | 0) + 1 | 0, 8) | 0;
    h = a + 4480 | 0;
    c[h >> 2] = i;
    i = gt((c[f >> 2] | 0) + 1 | 0, 8) | 0;
    g = a + 4484 | 0;
    c[g >> 2] = i;
    i = gt((c[a >> 2] | 0) + 1 | 0, 8) | 0;
    b = a + 4264 | 0;
    c[b >> 2] = i;
    i = gt((c[a >> 2] | 0) + 1 | 0, 8) | 0;
    d = a + 4268 | 0;
    c[d >> 2] = i;
    i = c[a >> 2] | 0;
    e = c[f >> 2] | 0;
    i = gt(((i | 0) < (e | 0) ? e : i) + 1 | 0, 8) | 0;
    e = a + 4488 | 0;
    c[e >> 2] = i;
    f = gt((c[f >> 2] | 0) + 1 + (c[a + 4 >> 2] | 0) | 0, 4) | 0;
    c[a + 4540 >> 2] = f;
    if (!(c[h >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    if (!(c[g >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    if (!(c[b >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    if (!(c[d >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    if (!(c[e >> 2] | 0)) {
      i = 101;
      return i | 0;
    }
    i = (f | 0) == 0 ? 101 : 0;
    return i | 0;
  }
  function yf(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var f = 0;
    f = c[a + 48 >> 2] | 0;
    do if (d << 24 >> 24 != 2) {
      if ((c[f + (b << 7) + 104 >> 2] | 0) == 2) {
        f = c[a + 56 >> 2] | 0;
        f = f + ((Rh(a, b) | 0) << 7) + 8 | 0;
        e = +g[f >> 3] * e;
        break;
      } else {
        e = +g[f + (b << 7) + 40 >> 3];
        e = e * e * 3.141592653589793 * .25;
        break;
      }
    } else e = 1.0e-06; while (0);
    g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3] = e;
    return;
  }
  function zf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0;
    e = a + 4 | 0;
    if ((c[e >> 2] | 0) >= 1) {
      f = a + 52 | 0;
      h = a + 4256 | 0;
      i = a + 4260 | 0;
      j = a + 4540 | 0;
      k = a + 12 | 0;
      d = 1;
      while (1) {
        l = c[f >> 2] | 0;
        g[l + (d * 120 | 0) + 72 >> 3] = +g[l + (d * 120 | 0) + 56 >> 3];
        m = l + (d * 120 | 0) | 0;
        g[(c[h >> 2] | 0) + (c[m >> 2] << 3) >> 3] = +g[l + (d * 120 | 0) + 32 >> 3];
        g[(c[i >> 2] | 0) + (c[m >> 2] << 3) >> 3] = 0.0;
        c[(c[j >> 2] | 0) + ((c[k >> 2] | 0) + d << 2) >> 2] = 1;
        if ((d | 0) < (c[e >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    e = a + 4268 | 0;
    vt(c[e >> 2] | 0, 0, (c[a >> 2] << 3) + 8 | 0) | 0;
    if ((c[a >> 2] | 0) >= 1) {
      f = a + 44 | 0;
      d = 1;
      while (1) {
        c[(c[f >> 2] | 0) + (d * 96 | 0) + 84 >> 2] = d;
        if (+g[(c[f >> 2] | 0) + (d * 96 | 0) + 72 >> 3] > 0.0) g[(c[e >> 2] | 0) + (d << 3) >> 3] = 1.0;
        if ((d | 0) < (c[a >> 2] | 0)) d = d + 1 | 0;else break;
      }
    }
    h = a + 12 | 0;
    a: do if ((c[h >> 2] | 0) >= 1) {
      i = a + 48 | 0;
      j = a + 4536 | 0;
      k = a + 4276 | 0;
      l = a + 4272 | 0;
      m = a + 4540 | 0;
      if ((b | 0) > 0) {
        e = 1;
        while (1) {
          b = c[i >> 2] | 0;
          c[b + (e << 7) + 120 >> 2] = e;
          c[(c[j >> 2] | 0) + (e << 2) >> 2] = c[b + (e << 7) + 108 >> 2];
          d = b + (e << 7) + 56 | 0;
          g[(c[k >> 2] | 0) + (e << 3) >> 3] = +g[d >> 3];
          $e(a, e);
          switch (c[b + (e << 7) + 104 >> 2] | 0) {
            case 6:
            case 4:
            case 3:
              {
                if (+g[d >> 3] != -1.0e10) c[(c[j >> 2] | 0) + (e << 2) >> 2] = 4;
                break;
              }
            default:
              {}
          }
          d = c[(c[j >> 2] | 0) + (e << 2) >> 2] | 0;
          if (d >>> 0 < 3) g[(c[l >> 2] | 0) + (e << 3) >> 3] = 1.0e-06;else yf(a, e, d & 255, +g[(c[k >> 2] | 0) + (e << 3) >> 3]);
          c[(c[m >> 2] | 0) + (e << 2) >> 2] = c[(c[j >> 2] | 0) + (e << 2) >> 2];
          if ((e | 0) < (c[h >> 2] | 0)) e = e + 1 | 0;else break a;
        }
      }
      f = 1;
      while (1) {
        b = c[i >> 2] | 0;
        c[b + (f << 7) + 120 >> 2] = f;
        c[(c[j >> 2] | 0) + (f << 2) >> 2] = c[b + (f << 7) + 108 >> 2];
        d = b + (f << 7) + 56 | 0;
        g[(c[k >> 2] | 0) + (f << 3) >> 3] = +g[d >> 3];
        $e(a, f);
        switch (c[b + (f << 7) + 104 >> 2] | 0) {
          case 6:
          case 4:
          case 3:
            {
              if (+g[d >> 3] != -1.0e10) c[(c[j >> 2] | 0) + (f << 2) >> 2] = 4;
              break;
            }
          default:
            {}
        }
        d = c[(c[j >> 2] | 0) + (f << 2) >> 2] | 0;
        e = (c[l >> 2] | 0) + (f << 3) | 0;
        if (d >>> 0 >= 3) {
          n = +g[e >> 3];
          if ((n < 0.0 ? -n : n) <= 1.0e-06) yf(a, f, d & 255, +g[(c[k >> 2] | 0) + (f << 3) >> 3]);
        } else g[e >> 3] = 1.0e-06;
        c[(c[m >> 2] | 0) + (f << 2) >> 2] = c[(c[j >> 2] | 0) + (f << 2) >> 2];
        if ((f | 0) < (c[h >> 2] | 0)) f = f + 1 | 0;else break a;
      }
    } while (0);
    f = a + 20 | 0;
    if ((c[f >> 2] | 0) >= 1) {
      h = a + 56 | 0;
      d = 1;
      do {
        e = d;
        d = d + 1 | 0;
        i = (c[h >> 2] | 0) + (e << 7) + 80 | 0;
        j = i + 48 | 0;
        do {
          c[i >> 2] = 0;
          i = i + 4 | 0;
        } while ((i | 0) < (j | 0));
      } while ((e | 0) < (c[f >> 2] | 0));
    }
    if (!(c[a + 4200 >> 2] | 0)) {
      b = a + 4528 | 0;
      c[b >> 2] = 0;
      b = a + 1172 | 0;
      c[b >> 2] = 0;
      b = a + 1176 | 0;
      c[b >> 2] = 0;
      b = a + 1160 | 0;
      b = c[b >> 2] | 0;
      a = a + 1168 | 0;
      c[a >> 2] = b;
      return;
    }
    dr(c[a + 4220 >> 2] | 0, c[a + 4204 >> 2] | 0, 0);
    b = a + 4528 | 0;
    c[b >> 2] = 0;
    b = a + 1172 | 0;
    c[b >> 2] = 0;
    b = a + 1176 | 0;
    c[b >> 2] = 0;
    b = a + 1160 | 0;
    b = c[b >> 2] | 0;
    a = a + 1168 | 0;
    c[a >> 2] = b;
    return;
  }
  function Af(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0,
      h = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    f = h + 8 | 0;
    e = h;
    c[b >> 2] = c[a + 1172 >> 2];
    Bf(a);
    Cf(a);
    b = Sf(a, f, e) | 0;
    if (b | 0) {
      f = b;
      Ib = h;
      return f | 0;
    }
    if (!(c[a + 1228 >> 2] | 0)) d = +g[e >> 3];else {
      d = +g[e >> 3];
      fj(a, c[f >> 2] | 0, d);
    }
    if (d > +g[a + 4352 >> 3] ? (c[a + 4512 >> 2] | 0) == -1 : 0) c[a + 4528 >> 2] = 1;
    f = lj(a, c[f >> 2] | 0, d) | 0;
    Ib = h;
    return f | 0;
  }
  function Bf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0.0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0,
      o = 0.0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    r = ((c[a + 1156 >> 2] | 0) + (c[a + 1172 >> 2] | 0) | 0) / (c[a + 1152 >> 2] | 0) | 0;
    p = a + 4408 | 0;
    g[p >> 3] = 0.0;
    h = a + 8 | 0;
    if ((c[h >> 2] | 0) >= 1) {
      i = a + 44 | 0;
      j = a + 4260 | 0;
      k = a + 4264 | 0;
      l = a + 64 | 0;
      m = a + 4344 | 0;
      e = 1;
      while (1) {
        b = c[(c[i >> 2] | 0) + (e * 96 | 0) + 56 >> 2] | 0;
        if (!b) f = 0.0;else {
          d = c[l >> 2] | 0;
          o = +g[m >> 3];
          f = 0.0;
          do {
            s = c[b + 8 >> 2] | 0;
            n = +g[b >> 3] * +g[(c[d + (s * 44 | 0) + 40 >> 2] | 0) + (((r | 0) % (c[d + (s * 44 | 0) + 36 >> 2] | 0) | 0) << 3) >> 3] * o;
            if (n > 0.0) g[p >> 3] = n + +g[p >> 3];
            f = f + n;
            b = c[b + 16 >> 2] | 0;
          } while ((b | 0) != 0);
        }
        g[(c[j >> 2] | 0) + (e << 3) >> 3] = f;
        g[(c[k >> 2] | 0) + (e << 3) >> 3] = f;
        if ((e | 0) < (c[h >> 2] | 0)) e = e + 1 | 0;else break;
      }
    }
    h = a + 4 | 0;
    b = c[h >> 2] | 0;
    if ((b | 0) >= 1) {
      i = a + 52 | 0;
      j = a + 64 | 0;
      k = a + 44 | 0;
      l = a + 4256 | 0;
      e = 1;
      while (1) {
        d = c[i >> 2] | 0;
        if (+g[d + (e * 120 | 0) + 8 >> 3] == 0.0 ? (q = c[d + (e * 120 | 0) + 88 >> 2] | 0, (q | 0) > 0) : 0) {
          s = c[j >> 2] | 0;
          b = c[d + (e * 120 | 0) >> 2] | 0;
          g[(c[l >> 2] | 0) + (b << 3) >> 3] = +g[(c[k >> 2] | 0) + (b * 96 | 0) + 48 >> 3] * +g[(c[s + (q * 44 | 0) + 40 >> 2] | 0) + (((r | 0) % (c[s + (q * 44 | 0) + 36 >> 2] | 0) | 0) << 3) >> 3];
          b = c[h >> 2] | 0;
        }
        if ((e | 0) < (b | 0)) e = e + 1 | 0;else break;
      }
    }
    i = a + 20 | 0;
    b = c[i >> 2] | 0;
    if ((b | 0) < 1) return;
    j = a + 56 | 0;
    k = a + 64 | 0;
    l = a + 4536 | 0;
    m = a + 4276 | 0;
    h = 1;
    while (1) {
      d = c[j >> 2] | 0;
      e = c[d + (h << 7) + 64 >> 2] | 0;
      if ((e | 0) > 0) {
        b = c[d + (h << 7) >> 2] | 0;
        s = c[k >> 2] | 0;
        Ff(a, b, +g[(c[s + (e * 44 | 0) + 40 >> 2] | 0) + (((r | 0) % (c[s + (e * 44 | 0) + 36 >> 2] | 0) | 0) << 3) >> 3], (c[l >> 2] | 0) + (b << 2) | 0, (c[m >> 2] | 0) + (b << 3) | 0);
        b = c[i >> 2] | 0;
      }
      if ((h | 0) < (b | 0)) h = h + 1 | 0;else break;
    }
    return;
  }
  function Cf(a) {
    a = a | 0;
    var b = 0,
      d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0.0;
    l = a + 28 | 0;
    if ((c[l >> 2] | 0) < 1) return;
    s = a + 72 | 0;
    t = a + 48 | 0;
    u = a + 8 | 0;
    v = a + 4256 | 0;
    w = a + 4260 | 0;
    x = a + 4536 | 0;
    m = a + 4276 | 0;
    n = a + 1172 | 0;
    o = a + 1144 | 0;
    p = a + 1228 | 0;
    k = 1;
    while (1) {
      f = c[s >> 2] | 0;
      q = c[f + (k * 40 | 0) >> 2] | 0;
      a: do if ((q | 0) >= 1) {
        e = c[t >> 2] | 0;
        b = c[f + (k * 40 | 0) + 4 >> 2] | 0;
        if ((b | 0) > 0 ? (r = c[u >> 2] | 0, (b | 0) > (r | 0)) : 0) {
          j = +g[(c[w >> 2] | 0) + (b << 3) >> 3];
          j = j < 0.0 ? -j : j;
          i = b - r | 0;
          y = +Df(a, i, +g[(c[v >> 2] | 0) + (b << 3) >> 3]);
          d = +Df(a, i, +g[f + (k * 40 | 0) + 16 >> 3]);
          b = c[f + (k * 40 | 0) + 36 >> 2] | 0;
          b = (y <= j + d & (b | 0) == 0 | y >= d - j & (b | 0) == 1) & 1;
        } else b = 0;
        switch (c[f + (k * 40 | 0) + 36 >> 2] | 0) {
          case 2:
            {
              if (!((b | 0) == 1 ? 1 : (c[f + (k * 40 | 0) + 8 >> 2] | 0) == (c[n >> 2] | 0))) break a;
              break;
            }
          case 3:
            {
              if (!((b | 0) == 1 ? 1 : (((c[o >> 2] | 0) + (c[n >> 2] | 0) | 0) % 86400 | 0 | 0) == (c[f + (k * 40 | 0) + 8 >> 2] | 0))) break a;
              break;
            }
          default:
            if ((b | 0) != 1) break a;
        }
        i = (c[(c[x >> 2] | 0) + (q << 2) >> 2] | 0) >>> 0 < 3;
        h = c[f + (k * 40 | 0) + 32 >> 2] | 0;
        j = +g[(c[m >> 2] | 0) + (q << 3) >> 3];
        b = c[e + (q << 7) + 104 >> 2] | 0;
        if (b >>> 0 > 1) {
          d = +g[f + (k * 40 | 0) + 24 >> 3];
          if ((h & 255 | 0) == 3 & (i & (b | 0) == 2)) Ef(a, q);
        } else d = j;
        b = h << 24 >> 24;
        if ((b | 0) != ((i ? 2 : 3) | 0) | j != d ? (c[(c[x >> 2] | 0) + (q << 2) >> 2] = b, g[(c[m >> 2] | 0) + (q << 3) >> 3] = d, c[p >> 2] | 0) : 0) jj(a, q, k);
      } while (0);
      if ((k | 0) < (c[l >> 2] | 0)) k = k + 1 | 0;else break;
    }
    return;
  }
  function Df(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    var e = 0,
      f = 0,
      h = 0;
    e = c[a + 52 >> 2] | 0;
    f = c[e + (b * 120 | 0) + 92 >> 2] | 0;
    if (!f) {
      d = +g[e + (b * 120 | 0) + 40 >> 3] + (d - +g[e + (b * 120 | 0) + 16 >> 3]) * +g[e + (b * 120 | 0) + 8 >> 3];
      return +d;
    } else {
      h = c[a + 68 >> 2] | 0;
      d = +bi(c[h + (f * 56 | 0) + 40 >> 2] | 0, c[h + (f * 56 | 0) + 48 >> 2] | 0, c[h + (f * 56 | 0) + 52 >> 2] | 0, (d - +g[(c[a + 44 >> 2] | 0) + ((c[e + (b * 120 | 0) >> 2] | 0) * 96 | 0) + 48 >> 3]) * +g[a + 4920 >> 3]);
      d = d / +g[a + 5040 >> 3];
      return +d;
    }
    return 0.0;
  }
  function Ef(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = c[a + 56 >> 2] | 0;
    e = Rh(a, b) | 0;
    if (c[d + (e << 7) + 4 >> 2] | 0) return;
    g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3] = +g[d + (e << 7) + 8 >> 3];
    return;
  }
  function Ff(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = e | 0;
    f = f | 0;
    switch (c[(c[a + 48 >> 2] | 0) + (b << 7) + 104 >> 2] | 0) {
      case 2:
        {
          g[f >> 3] = d;
          if (d > 0.0 ? (c[e >> 2] | 0) >>> 0 < 3 : 0) {
            Ef(a, b);
            c[e >> 2] = 3;
          }
          if (!(d == 0.0)) return;
          if ((c[e >> 2] | 0) >>> 0 <= 2) return;
          c[e >> 2] = 2;
          return;
        }
      case 6:
        {
          g[f >> 3] = d;
          c[e >> 2] = 4;
          return;
        }
      default:
        {
          if (+g[f >> 3] == -1.0e10 ? (c[e >> 2] | 0) >>> 0 < 3 : 0) c[e >> 2] = 3;
          g[f >> 3] = d;
          return;
        }
    }
  }
  function Gf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    e = a + 4200 | 0;
    if (!(c[e >> 2] | 0)) d = 0;else d = kh(a, a + 1172 | 0) | 0;
    if (!(c[a + 4528 >> 2] | 0)) {
      f = a + 1192 | 0;
      h = a + 1172 | 0;
    } else {
      f = a + 1192 | 0;
      h = a + 1172 | 0;
      c[h >> 2] = c[f >> 2];
    }
    c[b >> 2] = 0;
    if ((c[h >> 2] | 0) < (c[f >> 2] | 0)) i = Hf(a) | 0;else i = 0;
    if (c[e >> 2] | 0) d = lh(a, i) | 0;
    e = c[f >> 2] | 0;
    if (e) {
      if ((c[h >> 2] | 0) < (e | 0)) If(a, i);
    } else If(a, 0);
    e = c[h >> 2] | 0;
    if ((e | 0) >= (c[f >> 2] | 0)) {
      c[h >> 2] = e + 1;
      if (!(c[a + 4604 >> 2] | 0)) {
        c[b >> 2] = i;
        return d | 0;
      }
      a = a + 1184 | 0;
      c[a >> 2] = (c[a >> 2] | 0) + 1;
      c[b >> 2] = i;
      return d | 0;
    }
    g = i + e | 0;
    c[h >> 2] = g;
    if (c[a + 4604 >> 2] | 0) {
      c[b >> 2] = i;
      return d | 0;
    }
    e = a + 1168 | 0;
    f = c[e >> 2] | 0;
    if ((g | 0) < (f | 0)) {
      c[b >> 2] = i;
      return d | 0;
    }
    c[e >> 2] = (c[a + 1160 >> 2] | 0) + f;
    c[b >> 2] = i;
    return d | 0;
  }
  function Hf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    g = Ib;
    Ib = Ib + 16 | 0;
    f = g;
    d = c[a + 1148 >> 2] | 0;
    c[f >> 2] = d;
    e = c[a + 1172 >> 2] | 0;
    b = c[a + 1152 >> 2] | 0;
    b = (w((((c[a + 1156 >> 2] | 0) + e | 0) / (b | 0) | 0) + 1 | 0, b) | 0) - e | 0;
    if ((b | 0) > 0 & (b | 0) < (d | 0)) {
      c[f >> 2] = b;
      d = b;
    }
    b = (c[a + 1168 >> 2] | 0) - e | 0;
    if ((b | 0) > 0 & (b | 0) < (d | 0)) c[f >> 2] = b;
    Kf(a, f) | 0;
    Lf(a, f);
    if ((c[a + 32 >> 2] | 0) > 0) {
      Mf(a, f);
      f = c[f >> 2] | 0;
      Ib = g;
      return f | 0;
    } else {
      f = c[f >> 2] | 0;
      Nf(a, f);
      Ib = g;
      return f | 0;
    }
    return 0;
  }
  function If(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0,
      h = 0.0,
      i = 0.0,
      j = 0.0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0.0,
      t = 0.0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0.0;
    w = Ib;
    Ib = Ib + 16 | 0;
    u = w + 8 | 0;
    v = w;
    e = c[a + 1192 >> 2] | 0;
    f = c[a + 1172 >> 2] | 0;
    if (e) {
      d = +(b | 0) / 3600.0;
      if (d == 0.0 | (f | 0) >= (e | 0)) {
        Ib = w;
        return;
      } else t = d;
    } else t = 1.0;
    r = ((c[a + 1156 >> 2] | 0) + f | 0) / (c[a + 1152 >> 2] | 0) | 0;
    s = +g[a + 4416 >> 3];
    b = c[a + 4492 >> 2] | 0;
    if ((b | 0) > 0) {
      q = c[a + 64 >> 2] | 0;
      k = +g[(c[q + (b * 44 | 0) + 40 >> 2] | 0) + (((r | 0) % (c[q + (b * 44 | 0) + 36 >> 2] | 0) | 0) << 3) >> 3];
    } else k = 1.0;
    m = a + 20 | 0;
    b = c[m >> 2] | 0;
    if ((b | 0) < 1) d = 0.0;else {
      n = a + 56 | 0;
      o = a + 4536 | 0;
      p = a + 4272 | 0;
      q = a + 64 | 0;
      d = 0.0;
      l = 1;
      while (1) {
        e = c[n >> 2] | 0;
        f = c[e + (l << 7) >> 2] | 0;
        if ((c[(c[o >> 2] | 0) + (f << 2) >> 2] | 0) >>> 0 >= 3) {
          i = +g[(c[p >> 2] | 0) + (f << 3) >> 3];
          i = i < 0.0 ? -i : i;
          j = +g[e + (l << 7) + 72 >> 3];
          b = c[e + (l << 7) + 68 >> 2] | 0;
          if ((b | 0) > 0) {
            x = c[q >> 2] | 0;
            h = +g[(c[x + (b * 44 | 0) + 40 >> 2] | 0) + (((r | 0) % (c[x + (b * 44 | 0) + 36 >> 2] | 0) | 0) << 3) >> 3];
          } else h = k;
          Jf(a, f, v, u);
          y = +g[v >> 3];
          b = e + (l << 7) + 80 | 0;
          g[b >> 3] = t + +g[b >> 3];
          b = e + (l << 7) + 88 | 0;
          g[b >> 3] = +g[b >> 3] + t * +g[u >> 3];
          b = e + (l << 7) + 96 | 0;
          g[b >> 3] = t * (y / (i <= 1.0e-06 ? 1.0e-06 : i)) + +g[b >> 3];
          b = e + (l << 7) + 104 | 0;
          g[b >> 3] = t * y + +g[b >> 3];
          b = e + (l << 7) + 112 | 0;
          i = +g[b >> 3];
          g[b >> 3] = i >= y ? i : y;
          b = e + (l << 7) + 120 | 0;
          g[b >> 3] = t * ((j > 0.0 ? j : s) * h * y) + +g[b >> 3];
          d = d + y;
          b = c[m >> 2] | 0;
        }
        if ((l | 0) < (b | 0)) l = l + 1 | 0;else break;
      }
    }
    x = a + 4432 | 0;
    y = +g[x >> 3];
    g[x >> 3] = y >= d ? y : d;
    Ib = w;
    return;
  }
  function Jf(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0.0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0.0,
      l = 0;
    h = c[a + 48 >> 2] | 0;
    if ((c[(c[a + 4536 >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 < 3) {
      k = 0.0;
      j = 0.0;
      g[d >> 3] = j;
      g[e >> 3] = k;
      return;
    }
    j = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    j = j < 0.0 ? -j : j;
    l = c[a + 4256 >> 2] | 0;
    k = +g[l + (c[h + (b << 7) + 32 >> 2] << 3) >> 3] - +g[l + (c[h + (b << 7) + 36 >> 2] << 3) >> 3];
    k = k < 0.0 ? -k : k;
    if ((c[h + (b << 7) + 104 >> 2] | 0) == 2) {
      h = Rh(a, b) | 0;
      f = +g[a + 4400 >> 3];
      i = +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
      h = c[(c[a + 56 >> 2] | 0) + (h << 7) + 60 >> 2] | 0;
      if ((h | 0) > 0) {
        l = c[a + 68 >> 2] | 0;
        f = 100.0 - +u(+(1.0 / i), .1) * (100.0 - +bi(c[l + (h * 56 | 0) + 40 >> 2] | 0, c[l + (h * 56 | 0) + 48 >> 2] | 0, c[l + (h * 56 | 0) + 52 >> 2] | 0, j / i * +g[a + 4960 >> 3]));
      }
      f = f <= 100.0 ? f : 100.0;
      f = (f >= 1.0 ? f : 1.0) / 100.0;
    } else f = 1.0;
    i = f;
    k = j * k * +g[a + 4392 >> 3] / 8.814 / f * .7457;
    g[d >> 3] = k;
    g[e >> 3] = i;
    return;
  }
  function Kf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0.0;
    m = a + 4 | 0;
    d = c[m >> 2] | 0;
    if ((d | 0) < 1) {
      p = 0;
      return p | 0;
    }
    o = a + 52 | 0;
    p = a + 4256 | 0;
    i = a + 4260 | 0;
    a = 0;
    h = 1;
    while (1) {
      f = c[o >> 2] | 0;
      do if (!(+g[f + (h * 120 | 0) + 8 >> 3] == 0.0) ? (j = c[f + (h * 120 | 0) >> 2] | 0, k = +g[(c[p >> 2] | 0) + (j << 3) >> 3], l = +g[(c[i >> 2] | 0) + (j << 3) >> 3], n = l < 0.0, !((n ? -l : l) <= 1.0e-06)) : 0) {
        if (l > 0.0 ? k < +g[f + (h * 120 | 0) + 24 >> 3] : 0) e = f + (h * 120 | 0) + 48 | 0;else {
          if (!n) break;
          if (!(k > +g[f + (h * 120 | 0) + 16 >> 3])) break;
          e = f + (h * 120 | 0) + 40 | 0;
        }
        q = (+g[e >> 3] - +g[f + (h * 120 | 0) + 72 >> 3]) / l;
        e = ~~(q + (q >= 0.0 ? .5 : -.5));
        if ((e | 0) > 0 ? (c[b >> 2] | 0) > (e | 0) : 0) {
          c[b >> 2] = e;
          a = j;
          d = c[m >> 2] | 0;
        }
      } while (0);
      if ((h | 0) < (d | 0)) h = h + 1 | 0;else break;
    }
    return a | 0;
  }
  function Lf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0.0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0.0,
      s = 0.0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0;
    q = a + 28 | 0;
    d = c[q >> 2] | 0;
    if ((d | 0) < 1) return;
    u = a + 72 | 0;
    v = a + 8 | 0;
    w = a + 4256 | 0;
    x = a + 4260 | 0;
    y = a + 1172 | 0;
    l = a + 1144 | 0;
    m = a + 52 | 0;
    n = a + 48 | 0;
    o = a + 4276 | 0;
    p = a + 4536 | 0;
    k = 1;
    while (1) {
      i = c[u >> 2] | 0;
      e = c[i + (k * 40 | 0) + 4 >> 2] | 0;
      do if ((e | 0) > 0) {
        h = e - (c[v >> 2] | 0) | 0;
        if ((h | 0) >= 1 ? (r = +g[(c[w >> 2] | 0) + (e << 3) >> 3], s = +g[(c[x >> 2] | 0) + (e << 3) >> 3], t = s < 0.0, !((t ? -s : s) <= 1.0e-06)) : 0) {
          f = +g[i + (k * 40 | 0) + 16 >> 3];
          if (!(r < f ? s > 0.0 ? (c[i + (k * 40 | 0) + 36 >> 2] | 0) == 1 : 0 : 0)) {
            if (!(r > f)) {
              e = 0;
              j = 11;
              break;
            }
            if (!(t & (c[i + (k * 40 | 0) + 36 >> 2] | 0) == 0)) {
              e = 0;
              j = 11;
              break;
            }
          }
          f = +Df(a, h, f);
          f = (f - +g[(c[m >> 2] | 0) + (h * 120 | 0) + 72 >> 3]) / s;
          e = ~~(f + (f >= 0.0 ? .5 : -.5));
          j = 11;
        }
      } else {
        e = 0;
        j = 11;
      } while (0);
      do if ((j | 0) == 11) {
        j = 0;
        a: do switch (c[i + (k * 40 | 0) + 36 >> 2] | 0) {
          case 2:
            {
              z = c[i + (k * 40 | 0) + 8 >> 2] | 0;
              h = c[y >> 2] | 0;
              e = (z | 0) > (h | 0) ? z - h | 0 : e;
              break;
            }
          case 3:
            {
              e = ((c[l >> 2] | 0) + (c[y >> 2] | 0) | 0) % 86400 | 0;
              h = c[i + (k * 40 | 0) + 8 >> 2] | 0;
              if ((h | 0) < (e | 0)) {
                e = h + 86400 - e | 0;
                break a;
              } else {
                e = h - e | 0;
                break a;
              }
            }
          default:
            {}
        } while (0);
        if ((e | 0) > 0 ? (e | 0) < (c[b >> 2] | 0) : 0) {
          h = c[i + (k * 40 | 0) >> 2] | 0;
          if (!((c[(c[n >> 2] | 0) + (h << 7) + 104 >> 2] | 0) >>> 0 > 1 ? +g[(c[o >> 2] | 0) + (h << 3) >> 3] != +g[i + (k * 40 | 0) + 24 >> 3] : 0)) j = 20;
          if ((j | 0) == 20 ? (j = 0, (c[(c[p >> 2] | 0) + (h << 2) >> 2] | 0) == (c[i + (k * 40 | 0) + 32 >> 2] | 0)) : 0) break;
          c[b >> 2] = e;
          d = c[q >> 2] | 0;
        }
      } while (0);
      if ((k | 0) < (d | 0)) k = k + 1 | 0;else break;
    }
    return;
  }
  function Mf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    i = a + 1172 | 0;
    j = c[i >> 2] | 0;
    f = c[b >> 2] | 0;
    h = f + j | 0;
    if (!(c[a + 32 >> 2] | 0)) {
      d = f;
      e = f;
    } else {
      e = c[a + 1188 >> 2] | 0;
      d = e - ((j | 0) % (e | 0) | 0) | 0;
    }
    g = (e | 0) > (f | 0) ? f : e;
    e = (d | 0) > (f | 0) ? f : d;
    f = g;
    e = (e | 0) == 0 ? g : e;
    d = j;
    while (1) {
      c[i >> 2] = d + e;
      Nf(a, e);
      e = (Mj(a, e) | 0) == 0;
      g = c[i >> 2] | 0;
      if (!e) {
        d = 6;
        break;
      }
      d = h - g | 0;
      d = (f | 0) > (d | 0) ? d : f;
      if ((d | 0) > 0) {
        f = d;
        e = d;
        d = g;
      } else {
        d = 6;
        break;
      }
    }
    if ((d | 0) == 6) {
      c[b >> 2] = g - j;
      c[i >> 2] = j;
      return;
    }
  }
  function Nf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0.0,
      f = 0.0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    m = a + 4 | 0;
    d = c[m >> 2] | 0;
    if ((d | 0) < 1) return;
    n = a + 52 | 0;
    o = a + 4260 | 0;
    k = +(b | 0);
    l = a + 4256 | 0;
    j = 1;
    b = d;
    while (1) {
      d = c[n >> 2] | 0;
      if (!(+g[d + (j * 120 | 0) + 8 >> 3] == 0.0)) {
        i = c[d + (j * 120 | 0) >> 2] | 0;
        b = d + (j * 120 | 0) + 72 | 0;
        f = +g[b >> 3] + +g[(c[o >> 2] | 0) + (i << 3) >> 3] * k;
        g[b >> 3] = f;
        h = +g[(c[o >> 2] | 0) + (i << 3) >> 3];
        e = +g[d + (j * 120 | 0) + 48 >> 3];
        if (!(f + h >= e)) {
          e = +g[d + (j * 120 | 0) + 40 >> 3];
          if (!(f - h <= e)) e = f;else p = 6;
        } else p = 6;
        if ((p | 0) == 6) {
          p = 0;
          g[b >> 3] = e;
        }
        h = +Of(a, j, e);
        g[(c[l >> 2] | 0) + (i << 3) >> 3] = h;
        b = c[m >> 2] | 0;
      }
      if ((j | 0) < (b | 0)) j = j + 1 | 0;else break;
    }
    return;
  }
  function Of(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    var e = 0,
      f = 0,
      h = 0.0,
      i = 0.0,
      j = 0;
    e = c[a + 52 >> 2] | 0;
    f = c[e + (b * 120 | 0) + 92 >> 2] | 0;
    if (!f) {
      a = e + (b * 120 | 0) + 16 | 0;
      i = d - +g[e + (b * 120 | 0) + 40 >> 3];
      f = e + (b * 120 | 0) + 8 | 0;
      h = +g[a >> 3];
      d = +g[f >> 3];
      d = i / d;
      d = h + d;
      return +d;
    } else {
      j = c[a + 68 >> 2] | 0;
      d = +bi(c[j + (f * 56 | 0) + 40 >> 2] | 0, c[j + (f * 56 | 0) + 52 >> 2] | 0, c[j + (f * 56 | 0) + 48 >> 2] | 0, +g[a + 5040 >> 3] * d);
      e = (c[a + 44 >> 2] | 0) + ((c[e + (b * 120 | 0) >> 2] | 0) * 96 | 0) + 48 | 0;
      f = a + 4920 | 0;
      h = +g[e >> 3];
      i = +g[f >> 3];
      i = d / i;
      i = h + i;
      return +i;
    }
    return 0.0;
  }
  function Pf(a) {
    a = a | 0;
    jk(a);
    Qf(a);
    return;
  }
  function Qf(a) {
    a = a | 0;
    ft(c[a + 4480 >> 2] | 0);
    ft(c[a + 4484 >> 2] | 0);
    ft(c[a + 4264 >> 2] | 0);
    ft(c[a + 4268 >> 2] | 0);
    ft(c[a + 4488 >> 2] | 0);
    ft(c[a + 4540 >> 2] | 0);
    return;
  }
  function Rf(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var h = 0;
    h = c[(c[a + 48 >> 2] | 0) + (b << 7) + 104 >> 2] | 0;
    a: do switch (d << 24 >> 24) {
      case 1:
        {
          switch (h | 0) {
            case 0:
            case 1:
            case 8:
              {
                a = 3;
                break a;
              }
            case 2:
              break;
            default:
              {
                g[f >> 3] = -1.0e10;
                a = 3;
                break a;
              }
          }
          g[f >> 3] = 1.0;
          if ((c[e >> 2] | 0) == 2) {
            Ef(a, b);
            a = 3;
          } else a = 3;
          break;
        }
      case 0:
        switch (h | 0) {
          case 0:
          case 1:
          case 8:
            {
              a = 2;
              break a;
            }
          case 2:
            {
              g[f >> 3] = 0.0;
              a = 2;
              break a;
            }
          default:
            {
              g[f >> 3] = -1.0e10;
              a = 2;
              break a;
            }
        }
      default:
        return;
    } while (0);
    c[e >> 2] = a;
    return;
  }
  function Sf(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0;
    B = Ib;
    Ib = Ib + 48 | 0;
    z = B;
    t = a + 4544 | 0;
    u = a + 4516 | 0;
    e = c[u >> 2] | 0;
    v = a + 4472 | 0;
    g[v >> 3] = 1.0;
    g[z >> 3] = 0.0;
    A = z + 16 | 0;
    g[A >> 3] = 0.0;
    c[a + 4532 >> 2] = 0;
    g[a + 4464 >> 3] = 0.0;
    j = a + 1228 | 0;
    if ((c[j >> 2] | 0) == 2) hj(a, 0, 0.0);
    m = a + 4508 | 0;
    w = c[a + 4512 >> 2] | 0;
    w = ((w | 0) > 0 ? w : 0) + (c[m >> 2] | 0) | 0;
    c[b >> 2] = 1;
    y = a + 8 | 0;
    a: do if ((w | 0) < 1) f = 0;else {
      n = a + 4564 | 0;
      o = a + 4552 | 0;
      p = a + 4568 | 0;
      q = a + 4256 | 0;
      r = a + 4376 | 0;
      s = a + 4520 | 0;
      b: while (1) {
        while (1) {
          af(a);
          lf(a);
          f = kk(t, c[y >> 2] | 0) | 0;
          if ((f | 0) <= 0) break;
          if (!(Tf(a, c[(c[n >> 2] | 0) + (f << 2) >> 2] | 0) | 0)) break b;
          if ((c[b >> 2] | 0) > (w | 0)) break b;
        }
        if ((c[y >> 2] | 0) >= 1) {
          h = 1;
          while (1) {
            g[(c[q >> 2] | 0) + (h << 3) >> 3] = +g[(c[o >> 2] | 0) + (c[(c[p >> 2] | 0) + (h << 2) >> 2] << 3) >> 3];
            if ((h | 0) < (c[y >> 2] | 0)) h = h + 1 | 0;else break;
          }
        }
        k = +Uf(a, z);
        g[d >> 3] = k;
        if ((c[j >> 2] | 0) == 2) hj(a, c[b >> 2] | 0, k);
        g[v >> 3] = 1.0;
        l = +g[r >> 3];
        if (l > 0.0) {
          k = +g[d >> 3];
          if (!(k <= l)) i = 0;else {
            g[v >> 3] = .6;
            x = 17;
          }
        } else x = 17;
        if ((x | 0) == 17) {
          x = 0;
          i = bg(a) | 0;
          k = +g[d >> 3];
        }
        C = (Vf(a, k, z) | 0) == 0;
        h = c[b >> 2] | 0;
        if (C) {
          if ((h | 0) == (e | 0) ? (h | 0) <= (c[s >> 2] | 0) : 0) {
            eg(a) | 0;
            e = (c[u >> 2] | 0) + e | 0;
            h = c[b >> 2] | 0;
          }
        } else {
          if ((h | 0) > (c[m >> 2] | 0)) break a;
          C = eg(a) | 0 | i;
          if (!(C | (Wf(a) | 0))) break a;
          h = c[b >> 2] | 0;
          e = (c[u >> 2] | 0) + h | 0;
        }
        c[b >> 2] = h + 1;
        if ((h | 0) >= (w | 0)) break a;
      }
      pj(a, c[(c[n >> 2] | 0) + (f << 2) >> 2] | 0);
      f = 110;
    } while (0);
    if ((c[y >> 2] | 0) < 1) {
      l = +g[d >> 3];
      C = a + 4440 | 0;
      g[C >> 3] = l;
      l = +g[z >> 3];
      C = a + 4448 | 0;
      g[C >> 3] = l;
      l = +g[A >> 3];
      A = a + 4456 | 0;
      g[A >> 3] = l;
      A = c[b >> 2] | 0;
      C = a + 4504 | 0;
      c[C >> 2] = A;
      Ib = B;
      return f | 0;
    }
    h = a + 4260 | 0;
    i = a + 4264 | 0;
    j = a + 4268 | 0;
    e = 1;
    while (1) {
      C = (c[h >> 2] | 0) + (e << 3) | 0;
      l = +g[C >> 3];
      g[C >> 3] = +g[(c[i >> 2] | 0) + (e << 3) >> 3] + +g[(c[j >> 2] | 0) + (e << 3) >> 3];
      g[(c[i >> 2] | 0) + (e << 3) >> 3] = l;
      if ((e | 0) < (c[y >> 2] | 0)) e = e + 1 | 0;else break;
    }
    l = +g[d >> 3];
    C = a + 4440 | 0;
    g[C >> 3] = l;
    l = +g[z >> 3];
    C = a + 4448 | 0;
    g[C >> 3] = l;
    l = +g[A >> 3];
    A = a + 4456 | 0;
    g[A >> 3] = l;
    A = c[b >> 2] | 0;
    C = a + 4504 | 0;
    c[C >> 2] = A;
    Ib = B;
    return f | 0;
  }
  function Tf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    k = Ib;
    Ib = Ib + 16 | 0;
    j = k;
    e = c[a + 24 >> 2] | 0;
    if ((e | 0) < 1) {
      j = 0;
      Ib = k;
      return j | 0;
    }
    f = c[a + 60 >> 2] | 0;
    i = c[a + 48 >> 2] | 0;
    d = 1;
    while (1) {
      h = c[f + (d << 2) >> 2] | 0;
      if ((c[i + (h << 7) + 32 >> 2] | 0) == (b | 0)) break;
      if ((c[i + (h << 7) + 36 >> 2] | 0) == (b | 0)) break;
      if ((d | 0) < (e | 0)) d = d + 1 | 0;else {
        d = 0;
        g = 11;
        break;
      }
    }
    if ((g | 0) == 11) {
      Ib = k;
      return d | 0;
    }
    g = i + (h << 7) + 104 | 0;
    d = c[g >> 2] | 0;
    switch (d | 0) {
      case 3:
      case 4:
      case 6:
        break;
      default:
        {
          j = 0;
          Ib = k;
          return j | 0;
        }
    }
    e = a + 4536 | 0;
    b = (c[e >> 2] | 0) + (h << 2) | 0;
    if ((c[b >> 2] | 0) != 4) {
      j = 0;
      Ib = k;
      return j | 0;
    }
    f = a + 5080 | 0;
    if ((c[a + 1228 >> 2] | 0) == 2) {
      b = dj(a + 1256 | 0, c[a + 1172 >> 2] | 0) | 0;
      c[j >> 2] = b;
      c[j + 4 >> 2] = i + (h << 7);
      bq(f, 5224, j);
      Ti(a, f);
      b = (c[e >> 2] | 0) + (h << 2) | 0;
      d = c[g >> 2] | 0;
    }
    c[b >> 2] = (d | 0) == 6 ? 6 : 7;
    j = 1;
    Ib = k;
    return j | 0;
  }
  function Uf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0;
    f = Ib;
    Ib = Ib + 16 | 0;
    h = f + 8 | 0;
    i = f;
    g[i >> 3] = 0.0;
    g[h >> 3] = 0.0;
    g[b + 16 >> 3] = 0.0;
    c[b + 32 >> 2] = 1;
    c[b + 28 >> 2] = -1;
    _f(a, b, i, h);
    $f(a, b, i, h);
    ag(a, b, i, h);
    e = +g[i >> 3];
    d = +g[h >> 3];
    Ib = f;
    return +(e > +g[a + 4352 >> 3] ? d / e : d);
  }
  function Vf(a, b, d) {
    a = a | 0;
    b = +b;
    d = d | 0;
    if (+g[a + 4352 >> 3] < b) {
      d = 0;
      return d | 0;
    }
    Xf(a, d);
    if ((c[a + 1228 >> 2] | 0) == 2) Yf(a, d);
    b = +g[a + 4368 >> 3];
    if (b > 0.0 ? +g[d >> 3] > b : 0) {
      d = 0;
      return d | 0;
    }
    b = +g[a + 4360 >> 3];
    if (b > 0.0 ? +g[d + 16 >> 3] > b : 0) {
      d = 0;
      return d | 0;
    }
    if ((c[a + 4496 >> 2] | 0) != 1) {
      d = 1;
      return d | 0;
    }
    d = Zf(a) | 0;
    return d | 0;
  }
  function Wf(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0;
    n = a + 28 | 0;
    if ((c[n >> 2] | 0) < 1) {
      w = 0;
      return w | 0;
    }
    r = a + 72 | 0;
    s = a + 8 | 0;
    t = a + 4256 | 0;
    u = a + 4280 | 0;
    v = a + 48 | 0;
    w = a + 4536 | 0;
    o = a + 4276 | 0;
    p = a + 1228 | 0;
    b = 0;
    m = 1;
    while (1) {
      f = c[r >> 2] | 0;
      h = c[f + (m * 40 | 0) >> 2] | 0;
      a: do if (((h | 0) >= 1 ? (q = c[f + (m * 40 | 0) + 4 >> 2] | 0, (q | 0) > 0) : 0) ? (q | 0) <= (c[s >> 2] | 0) : 0) {
        switch (c[f + (m * 40 | 0) + 36 >> 2] | 0) {
          case 0:
            {
              if (!(+g[(c[t >> 2] | 0) + (q << 3) >> 3] <= +g[f + (m * 40 | 0) + 16 >> 3] + +g[u >> 3])) break a;
              break;
            }
          case 1:
            {
              if (!(+g[(c[t >> 2] | 0) + (q << 3) >> 3] >= +g[f + (m * 40 | 0) + 16 >> 3] - +g[u >> 3])) break a;
              break;
            }
          default:
            break a;
        }
        i = (c[w >> 2] | 0) + (h << 2) | 0;
        j = c[i >> 2] | 0;
        k = j & 255;
        l = (c[v >> 2] | 0) + (h << 7) + 104 | 0;
        d = c[l >> 2] | 0;
        switch (d | 0) {
          case 1:
            {
              if ((j << 24 >> 24 | 0) == (c[f + (m * 40 | 0) + 32 >> 2] | 0)) break a;
              break;
            }
          case 2:
            {
              if (!(+g[(c[o >> 2] | 0) + (h << 3) >> 3] != +g[f + (m * 40 | 0) + 24 >> 3])) break a;
              break;
            }
          default:
            {
              if (d >>> 0 <= 2) break a;
              e = +g[(c[o >> 2] | 0) + (h << 3) >> 3];
              if (!(e != +g[f + (m * 40 | 0) + 24 >> 3])) {
                if (!(e == -1.0e10)) break a;
                if ((j << 24 >> 24 | 0) == (c[f + (m * 40 | 0) + 32 >> 2] | 0)) break a;
              }
            }
        }
        c[i >> 2] = c[f + (m * 40 | 0) + 32 >> 2];
        if ((c[l >> 2] | 0) >>> 0 > 1) g[(c[o >> 2] | 0) + (h << 3) >> 3] = +g[(c[r >> 2] | 0) + (m * 40 | 0) + 24 >> 3];
        if ((c[p >> 2] | 0) == 2) {
          ij(a, h, k, c[(c[w >> 2] | 0) + (h << 2) >> 2] & 255);
          b = 1;
        } else b = 1;
      } while (0);
      if ((m | 0) < (c[n >> 2] | 0)) m = m + 1 | 0;else break;
    }
    return b | 0;
  }
  function Xf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    g[b >> 3] = 0.0;
    i = b + 24 | 0;
    c[i >> 2] = 1;
    af(a);
    j = a + 12 | 0;
    d = c[j >> 2] | 0;
    if ((d | 0) < 1) return;
    l = a + 4536 | 0;
    m = a + 4480 | 0;
    n = a + 48 | 0;
    o = a + 4256 | 0;
    f = a + 4484 | 0;
    e = 1;
    a = d;
    while (1) {
      if (((c[(c[l >> 2] | 0) + (e << 2) >> 2] | 0) >>> 0 >= 3 ? (h = +g[(c[m >> 2] | 0) + (e << 3) >> 3], !(h == 0.0)) : 0) ? (d = c[n >> 2] | 0, p = c[o >> 2] | 0, k = +g[p + (c[d + (e << 7) + 32 >> 2] << 3) >> 3] - +g[p + (c[d + (e << 7) + 36 >> 2] << 3) >> 3] - +g[(c[f >> 2] | 0) + (e << 3) >> 3] / h, k = k < 0.0 ? -k : k, k > +g[b >> 3]) : 0) {
        g[b >> 3] = k;
        c[i >> 2] = e;
        a = c[j >> 2] | 0;
      }
      if ((e | 0) < (a | 0)) e = e + 1 | 0;else break;
    }
    return;
  }
  function Yf(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 48 | 0;
    k = l + 32 | 0;
    j = l + 16 | 0;
    i = l;
    h = +g[b + 16 >> 3] * +g[a + 4960 >> 3];
    d = +g[b >> 3] * +g[a + 4920 >> 3];
    e = c[b + 32 >> 2] | 0;
    f = c[b + 28 >> 2] | 0;
    b = c[b + 24 >> 2] | 0;
    if ((e | 0) <= 0) {
      if ((f | 0) > 0) {
        i = a + 5080 | 0;
        f = (c[a + 44 >> 2] | 0) + (f * 96 | 0) | 0;
        g[j >> 3] = h;
        c[j + 8 >> 2] = f;
        bq(i, 5099, j);
        Ti(a, i);
      }
    } else {
      j = a + 5080 | 0;
      f = (c[a + 48 >> 2] | 0) + (e << 7) | 0;
      g[i >> 3] = h;
      c[i + 8 >> 2] = f;
      bq(j, 5037, i);
      Ti(a, j);
    }
    if ((b | 0) <= 0) {
      Ib = l;
      return;
    }
    j = a + 5080 | 0;
    i = (c[a + 48 >> 2] | 0) + (b << 7) | 0;
    g[k >> 3] = d;
    c[k + 8 >> 2] = i;
    bq(j, 5161, k);
    Ti(a, j);
    Ib = l;
    return;
  }
  function Zf(a) {
    a = a | 0;
    var b = 0.0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0.0,
      i = 0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0;
    m = a + 4532 | 0;
    c[m >> 2] = 0;
    o = a + 4464 | 0;
    g[o >> 3] = 0.0;
    p = c[a + 8 >> 2] | 0;
    if ((p | 0) < 1) {
      s = 1;
      return s | 0;
    }
    q = a + 4264 | 0;
    r = a + 4256 | 0;
    s = a + 44 | 0;
    n = a + 4328 | 0;
    l = c[a + 4260 >> 2] | 0;
    b = 0.0;
    a = 1;
    k = 1;
    e = 0.0;
    d = 0;
    while (1) {
      f = l + (k << 3) | 0;
      h = +g[f >> 3];
      if (!(h <= 0.0)) {
        i = (c[q >> 2] | 0) + (k << 3) | 0;
        j = +g[i >> 3];
        a = j < -.001 ? 0 : a;
        if (j > .001 ? +g[(c[r >> 2] | 0) + (k << 3) >> 3] - +g[(c[s >> 2] | 0) + (k * 96 | 0) + 48 >> 3] - +g[n >> 3] < -.001 : 0) a = 0;
        if (j + .0001 < h) {
          d = d + 1 | 0;
          c[m >> 2] = d;
          j = +g[f >> 3];
          e = e + (j - +g[i >> 3]);
          b = b + j;
        }
      }
      if ((k | 0) == (p | 0)) break;else k = k + 1 | 0;
    }
    if (!(b > 0.0)) {
      s = a;
      return s | 0;
    }
    g[o >> 3] = e / b * 100.0;
    s = a;
    return s | 0;
  }
  function _f(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0.0,
      z = 0,
      A = 0.0;
    x = a + 8 | 0;
    f = c[x >> 2] | 0;
    if ((f | 0) < (c[a >> 2] | 0)) {
      h = a + 4260 | 0;
      do {
        f = f + 1 | 0;
        g[(c[h >> 2] | 0) + (f << 3) >> 3] = 0.0;
      } while ((f | 0) < (c[a >> 2] | 0));
    }
    n = a + 12 | 0;
    if ((c[n >> 2] | 0) < 1) return;
    o = a + 48 | 0;
    p = a + 4256 | 0;
    q = a + 4484 | 0;
    r = a + 4480 | 0;
    s = a + 4472 | 0;
    t = a + 56 | 0;
    u = a + 4272 | 0;
    v = b + 16 | 0;
    w = b + 32 | 0;
    j = b + 28 | 0;
    k = a + 4536 | 0;
    l = a + 4260 | 0;
    b = 1;
    while (1) {
      f = c[o >> 2] | 0;
      h = c[f + (b << 7) + 32 >> 2] | 0;
      m = c[f + (b << 7) + 36 >> 2] | 0;
      z = c[p >> 2] | 0;
      i = +g[s >> 3] * (+g[(c[q >> 2] | 0) + (b << 3) >> 3] - (+g[z + (h << 3) >> 3] - +g[z + (m << 3) >> 3]) * +g[(c[r >> 2] | 0) + (b << 3) >> 3]);
      if (((c[f + (b << 7) + 104 >> 2] | 0) == 2 ? (z = Rh(a, b) | 0, (c[(c[t >> 2] | 0) + (z << 7) + 4 >> 2] | 0) == 0) : 0) ? (y = +g[(c[u >> 2] | 0) + (b << 3) >> 3], i > y) : 0) i = y * .5;
      z = (c[u >> 2] | 0) + (b << 3) | 0;
      g[z >> 3] = +g[z >> 3] - i;
      A = +g[(c[u >> 2] | 0) + (b << 3) >> 3];
      g[d >> 3] = +g[d >> 3] + (A < 0.0 ? -A : A);
      i = i < 0.0 ? -i : i;
      g[e >> 3] = i + +g[e >> 3];
      if (i > +g[v >> 3]) {
        g[v >> 3] = i;
        c[w >> 2] = b;
        c[j >> 2] = -1;
      }
      if ((c[(c[k >> 2] | 0) + (b << 2) >> 2] | 0) >>> 0 > 2) {
        f = c[x >> 2] | 0;
        if ((h | 0) > (f | 0)) {
          f = (c[l >> 2] | 0) + (h << 3) | 0;
          g[f >> 3] = +g[f >> 3] - +g[(c[u >> 2] | 0) + (b << 3) >> 3];
          f = c[x >> 2] | 0;
        }
        if ((m | 0) > (f | 0)) {
          z = (c[l >> 2] | 0) + (m << 3) | 0;
          g[z >> 3] = +g[(c[u >> 2] | 0) + (b << 3) >> 3] + +g[z >> 3];
        }
      }
      if ((b | 0) < (c[n >> 2] | 0)) b = b + 1 | 0;else break;
    }
    return;
  }
  function $f(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0.0,
      t = 0;
    r = Ib;
    Ib = Ib + 16 | 0;
    m = r + 8 | 0;
    o = r;
    p = a + 8 | 0;
    if ((c[p >> 2] | 0) < 1) {
      Ib = r;
      return;
    }
    q = a + 44 | 0;
    h = a + 4256 | 0;
    i = a + 4472 | 0;
    j = a + 4268 | 0;
    k = b + 16 | 0;
    l = b + 28 | 0;
    f = b + 32 | 0;
    b = 1;
    while (1) {
      if (!(+g[(c[q >> 2] | 0) + (b * 96 | 0) + 72 >> 3] == 0.0) ? (vf(a, b, m, o), n = (+g[m >> 3] - (+g[(c[h >> 2] | 0) + (b << 3) >> 3] - +g[(c[q >> 2] | 0) + (b * 96 | 0) + 48 >> 3])) / +g[o >> 3] * +g[i >> 3], t = (c[j >> 2] | 0) + (b << 3) | 0, g[t >> 3] = +g[t >> 3] - n, s = +g[(c[j >> 2] | 0) + (b << 3) >> 3], g[d >> 3] = +g[d >> 3] + (s < 0.0 ? -s : s), n = n < 0.0 ? -n : n, g[e >> 3] = n + +g[e >> 3], n > +g[k >> 3]) : 0) {
        g[k >> 3] = n;
        c[l >> 2] = b;
        c[f >> 2] = -1;
      }
      if ((b | 0) < (c[p >> 2] | 0)) b = b + 1 | 0;else break;
    }
    Ib = r;
    return;
  }
  function ag(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0,
      i = 0.0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0.0,
      v = 0,
      w = 0.0,
      x = 0;
    v = Ib;
    Ib = Ib + 16 | 0;
    s = v + 8 | 0;
    t = v;
    if (!(c[a + 4496 >> 2] | 0)) {
      Ib = v;
      return;
    }
    h = a + 4328 | 0;
    i = +g[a + 4336 >> 3] - +g[h >> 3];
    i = i >= .1 ? i : .1;
    j = 1.0 / +g[a + 4320 >> 3];
    k = a + 8 | 0;
    if ((c[k >> 2] | 0) < 1) {
      Ib = v;
      return;
    }
    l = a + 4260 | 0;
    m = a + 4256 | 0;
    n = a + 44 | 0;
    o = a + 4472 | 0;
    p = a + 4264 | 0;
    q = b + 16 | 0;
    r = b + 28 | 0;
    f = b + 32 | 0;
    b = 1;
    while (1) {
      if (!(+g[(c[l >> 2] | 0) + (b << 3) >> 3] <= 0.0) ? (uf(a, b, i, j, s, t), u = (+g[s >> 3] - (+g[(c[m >> 2] | 0) + (b << 3) >> 3] - +g[(c[n >> 2] | 0) + (b * 96 | 0) + 48 >> 3] - +g[h >> 3])) / +g[t >> 3] * +g[o >> 3], x = (c[p >> 2] | 0) + (b << 3) | 0, g[x >> 3] = +g[x >> 3] - u, w = +g[(c[p >> 2] | 0) + (b << 3) >> 3], g[d >> 3] = +g[d >> 3] + (w < 0.0 ? -w : w), u = u < 0.0 ? -u : u, g[e >> 3] = u + +g[e >> 3], u > +g[q >> 3]) : 0) {
        g[q >> 3] = u;
        c[r >> 2] = b;
        c[f >> 2] = -1;
      }
      if ((b | 0) < (c[k >> 2] | 0)) b = b + 1 | 0;else break;
    }
    Ib = v;
    return;
  }
  function bg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    m = a + 24 | 0;
    if ((c[m >> 2] | 0) < 1) {
      t = 0;
      return t | 0;
    }
    o = a + 60 | 0;
    p = a + 48 | 0;
    q = a + 4276 | 0;
    r = a + 4536 | 0;
    s = a + 44 | 0;
    t = a + 4256 | 0;
    n = a + 1228 | 0;
    l = 1;
    b = 0;
    while (1) {
      j = c[(c[o >> 2] | 0) + (l << 2) >> 2] | 0;
      d = c[p >> 2] | 0;
      e = +g[(c[q >> 2] | 0) + (j << 3) >> 3];
      a: do if (!(e == -1.0e10)) {
        f = c[d + (j << 7) + 32 >> 2] | 0;
        h = c[d + (j << 7) + 36 >> 2] | 0;
        i = (c[r >> 2] | 0) + (j << 2) | 0;
        k = c[i >> 2] | 0;
        switch (c[d + (j << 7) + 104 >> 2] | 0) {
          case 3:
            {
              d = c[t >> 2] | 0;
              d = cg(a, j, k, e + +g[(c[s >> 2] | 0) + (h * 96 | 0) + 48 >> 3], +g[d + (f << 3) >> 3], +g[d + (h << 3) >> 3]) | 0;
              break;
            }
          case 4:
            {
              d = c[t >> 2] | 0;
              d = dg(a, j, k, e + +g[(c[s >> 2] | 0) + (f * 96 | 0) + 48 >> 3], +g[d + (f << 3) >> 3], +g[d + (h << 3) >> 3]) | 0;
              break;
            }
          default:
            break a;
        }
        c[i >> 2] = d;
        d = c[(c[r >> 2] | 0) + (j << 2) >> 2] | 0;
        if ((k | 0) != (d | 0)) if ((c[n >> 2] | 0) == 2) {
          ij(a, j, k & 255, d & 255);
          b = 1;
        } else b = 1;
      } while (0);
      if ((l | 0) < (c[m >> 2] | 0)) l = l + 1 | 0;else break;
    }
    return b | 0;
  }
  function cg(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    h = +h;
    var i = 0.0,
      j = 0.0;
    j = +g[a + 4280 >> 3];
    i = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    switch (d | 0) {
      case 4:
        {
          if (i < -+g[a + 4288 >> 3]) {
            d = 2;
            return d | 0;
          }
          d = f - i * i * +g[(c[a + 48 >> 2] | 0) + (b << 7) + 64 >> 3] < e - j ? 3 : 4;
          return d | 0;
        }
      case 3:
        {
          if (i < -+g[a + 4288 >> 3]) {
            d = 2;
            return d | 0;
          }
          d = !(j + e <= h) ? 3 : 4;
          return d | 0;
        }
      case 2:
        {
          i = e - j;
          if (j + e <= f & i > h) {
            d = 4;
            return d | 0;
          } else return (i > f & j + h < f ? 3 : 2) | 0;
        }
      case 7:
        {
          if (!(i < -+g[a + 4288 >> 3])) {
            d = 7;
            return d | 0;
          }
          d = 2;
          return d | 0;
        }
      default:
        return d | 0;
    }
    return 0;
  }
  function dg(a, b, d, e, f, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    h = +h;
    var i = 0.0,
      j = 0.0;
    j = +g[a + 4280 >> 3];
    i = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    switch (d | 0) {
      case 4:
        {
          if (i < -+g[a + 4288 >> 3]) {
            d = 2;
            return d | 0;
          }
          d = i * i * +g[(c[a + 48 >> 2] | 0) + (b << 7) + 64 >> 3] + h > j + e ? 3 : 4;
          return d | 0;
        }
      case 3:
        {
          if (i < -+g[a + 4288 >> 3]) {
            d = 2;
            return d | 0;
          }
          d = e - j > f ? 4 : 3;
          return d | 0;
        }
      case 2:
        {
          i = j + e;
          a = j + h < f;
          if (i < h & a) {
            d = 3;
            return d | 0;
          } else return (i <= f & a ? 4 : 2) | 0;
        }
      case 7:
        {
          if (!(i < -+g[a + 4288 >> 3])) {
            d = 7;
            return d | 0;
          }
          d = 2;
          return d | 0;
        }
      default:
        return d | 0;
    }
    return 0;
  }
  function eg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0;
    l = a + 12 | 0;
    if ((c[l >> 2] | 0) < 1) {
      u = 0;
      return u | 0;
    }
    n = a + 48 | 0;
    p = a + 4256 | 0;
    q = a + 4536 | 0;
    r = a + 4272 | 0;
    s = a + 4276 | 0;
    t = a + 8 | 0;
    m = a + 1228 | 0;
    k = 1;
    b = 0;
    while (1) {
      d = c[n >> 2] | 0;
      f = c[d + (k << 7) + 32 >> 2] | 0;
      h = c[d + (k << 7) + 36 >> 2] | 0;
      e = c[p >> 2] | 0;
      i = +g[e + (f << 3) >> 3] - +g[e + (h << 3) >> 3];
      e = (c[q >> 2] | 0) + (k << 2) | 0;
      j = c[e >> 2] | 0;
      if (j >>> 0 < 2) c[e >> 2] = 3;
      e = d + (k << 7) + 104 | 0;
      d = c[e >> 2] | 0;
      if (!d) {
        d = (c[q >> 2] | 0) + (k << 2) | 0;
        v = fg(a, c[d >> 2] | 0, i, +g[(c[r >> 2] | 0) + (k << 3) >> 3]) | 0;
        c[d >> 2] = v;
        d = c[e >> 2] | 0;
      }
      if ((d | 0) == 2) {
        d = (c[q >> 2] | 0) + (k << 2) | 0;
        if ((c[d >> 2] | 0) >>> 0 > 2 ? +g[(c[s >> 2] | 0) + (k << 3) >> 3] > 0.0 : 0) {
          o = gg(a, k, -i) | 0;
          c[d >> 2] = o;
          o = c[e >> 2] | 0;
          u = 11;
        }
      } else {
        o = d;
        u = 11;
      }
      if (((u | 0) == 11 ? (u = 0, (o | 0) == 6) : 0) ? +g[(c[s >> 2] | 0) + (k << 3) >> 3] != -1.0e10 : 0) {
        v = c[p >> 2] | 0;
        v = hg(a, k, j, +g[v + (f << 3) >> 3], +g[v + (h << 3) >> 3]) | 0;
        c[(c[q >> 2] | 0) + (k << 2) >> 2] = v;
      }
      v = c[t >> 2] | 0;
      if ((f | 0) > (v | 0) | (h | 0) > (v | 0)) ig(a, k, f, h);
      d = c[(c[q >> 2] | 0) + (k << 2) >> 2] | 0;
      if ((j | 0) != (d | 0)) if ((c[m >> 2] | 0) == 2) {
        ij(a, k, j & 255, d & 255);
        b = 1;
      } else b = 1;
      if ((k | 0) < (c[l >> 2] | 0)) k = k + 1 | 0;else break;
    }
    return b | 0;
  }
  function fg(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = +d;
    var e = 0.0;
    e = +g[a + 4280 >> 3];
    if ((c < 0.0 ? -c : c) > e) if (-e > c) {
      a = 2;
      return a | 0;
    } else b = 3;
    a = -+g[a + 4288 >> 3] > d ? 2 : b;
    return a | 0;
  }
  function gg(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    var e = 0.0,
      f = 0,
      h = 0;
    f = Rh(a, b) | 0;
    h = c[a + 56 >> 2] | 0;
    if (!(c[h + (f << 7) + 4 >> 2] | 0)) e = 1.0e10;else {
      e = +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3];
      e = e * e * +g[h + (f << 7) + 24 >> 3];
    }
    return (e + +g[a + 4280 >> 3] < d ? 0 : 3) | 0;
  }
  function hg(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    if (e - f < -+g[a + 4280 >> 3]) {
      d = 6;
      return d | 0;
    }
    e = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    if (e < -+g[a + 4288 >> 3]) {
      d = 6;
      return d | 0;
    }
    if ((d | 0) != 6) return d | 0;
    if (!(e >= +g[(c[a + 4276 >> 2] | 0) + (b << 3) >> 3])) {
      d = 6;
      return d | 0;
    }
    d = 4;
    return d | 0;
  }
  function ig(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0.0,
      i = 0,
      j = 0.0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0.0,
      p = 0;
    l = c[a + 48 >> 2] | 0;
    m = a + 4536 | 0;
    n = (c[m >> 2] | 0) + (b << 2) | 0;
    if ((c[n >> 2] | 0) >>> 0 < 3) return;
    h = +g[(c[a + 4272 >> 2] | 0) + (b << 3) >> 3];
    f = c[a + 8 >> 2] | 0;
    i = d - f | 0;
    do if ((i | 0) < 1) {
      f = e - f | 0;
      if ((f | 0) < 1) return;else {
        k = e;
        j = -h;
        break;
      }
    } else {
      k = d;
      d = e;
      j = h;
      f = i;
    } while (0);
    e = c[a + 52 >> 2] | 0;
    if (+g[e + (f * 120 | 0) + 8 >> 3] == 0.0) return;
    i = a + 4256 | 0;
    p = c[i >> 2] | 0;
    o = +g[p + (k << 3) >> 3];
    h = o - +g[p + (d << 3) >> 3];
    d = a + 4280 | 0;
    do if (o >= +g[e + (f * 120 | 0) + 24 >> 3] - +g[d >> 3] ? (c[e + (f * 120 | 0) + 112 >> 2] | 0) == 0 : 0) if ((c[l + (b << 7) + 104 >> 2] | 0) == 2) {
      if ((c[l + (b << 7) + 36 >> 2] | 0) != (k | 0)) break;
      c[n >> 2] = 1;
      break;
    } else {
      if ((fg(a, 3, h, j) | 0) != 2) break;
      c[n >> 2] = 1;
      break;
    } while (0);
    if (!(+g[(c[i >> 2] | 0) + (k << 3) >> 3] <= +g[e + (f * 120 | 0) + 16 >> 3] + +g[d >> 3])) return;
    if ((c[l + (b << 7) + 104 >> 2] | 0) == 2) {
      if ((c[l + (b << 7) + 32 >> 2] | 0) != (k | 0)) return;
      c[(c[m >> 2] | 0) + (b << 2) >> 2] = 1;
      return;
    } else {
      if ((fg(a, 2, h, j) | 0) != 3) return;
      c[(c[m >> 2] | 0) + (b << 2) >> 2] = 1;
      return;
    }
  }
  function jg(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    m = Ib;
    Ib = Ib + 2080 | 0;
    l = m + 2072 | 0;
    j = m + 1040 | 0;
    k = m;
    e = c[b + 92 >> 2] | 0;
    if (!e) {
      e = Vq(b + 128 | 0, 8672) | 0;
      if (!e) {
        Ib = m;
        return;
      }
    }
    wr(e);
    a: do if (cr(j, 1024, e) | 0) {
      i = b + 80 | 0;
      h = b + 84 | 0;
      b = -1;
      do {
        while (1) {
          Oq(k, j) | 0;
          f = Gr(k, 8047) | 0;
          if (f | 0) break;
          if (!(cr(j, 1024, e) | 0)) break a;
        }
        g = a[f >> 0] | 0;
        b: do if (g << 24 >> 24 == 91) {
          f = ug(f, 304) | 0;
          if ((f | 0) > -1) {
            if ((f | 0) == 28) break a;
            if ((f + -25 | 0) >>> 0 < 3) {
              c[l >> 2] = j;
              er(d, 14950, l) | 0;
              b = f;
            } else b = f;
          }
        } else {
          c: do switch (b | 0) {
            case 27:
              {
                if (g << 24 >> 24 != 59) {
                  if (wg(14354, f) | 0 ? (g = Gr(0, 8047) | 0, Oh(c[i >> 2] | 0, g) | 0) : 0) break c;
                  if (!(wg(14359, f) | 0)) {
                    b = 27;
                    break b;
                  }
                  g = Gr(0, 8047) | 0;
                  if (!(Ph(c[h >> 2] | 0, g) | 0)) {
                    b = 27;
                    break b;
                  }
                }
                break;
              }
            case 26:
            case 25:
              break;
            default:
              break b;
          } while (0);
          Rq(j, d) | 0;
        } while (0);
      } while ((cr(j, 1024, e) | 0) != 0);
    } while (0);
    $q(e);
    Ib = m;
    return;
  }
  function kg(d, e) {
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0.0,
      i = 0.0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      v = 0,
      w = 0.0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0,
      J = 0,
      K = 0,
      L = 0,
      M = 0,
      N = 0,
      O = 0,
      P = 0,
      Q = 0,
      R = 0,
      S = 0,
      T = 0,
      U = 0,
      V = 0,
      W = 0,
      X = 0,
      Y = 0,
      Z = 0,
      _ = 0,
      $ = 0,
      aa = 0,
      ba = 0,
      ca = 0,
      da = 0,
      ea = 0,
      fa = 0,
      ga = 0,
      ha = 0,
      ia = 0,
      ja = 0,
      ka = 0,
      la = 0,
      ma = 0,
      na = 0,
      oa = 0,
      pa = 0,
      qa = 0,
      ra = 0,
      sa = 0,
      ta = 0,
      ua = 0,
      va = 0,
      wa = 0,
      xa = 0,
      ya = 0,
      za = 0,
      Aa = 0,
      Ba = 0,
      Ca = 0,
      Da = 0,
      Ea = 0,
      Fa = 0,
      Ga = 0,
      Ha = 0,
      Ia = 0,
      Ja = 0,
      Ka = 0,
      La = 0,
      Ma = 0,
      Na = 0,
      Oa = 0,
      Pa = 0,
      Qa = 0,
      Ra = 0,
      Sa = 0,
      Ta = 0,
      Ua = 0,
      Va = 0,
      Wa = 0,
      Xa = 0,
      Ya = 0,
      Za = 0,
      _a = 0,
      $a = 0,
      ab = 0,
      bb = 0,
      cb = 0,
      db = 0,
      eb = 0,
      fb = 0,
      gb = 0,
      hb = 0,
      ib = 0,
      jb = 0,
      kb = 0,
      lb = 0,
      mb = 0,
      nb = 0,
      ob = 0,
      pb = 0,
      qb = 0,
      rb = 0,
      sb = 0,
      tb = 0,
      ub = 0,
      vb = 0,
      wb = 0,
      xb = 0,
      yb = 0,
      zb = 0,
      Ab = 0,
      Bb = 0,
      Cb = 0,
      Db = 0,
      Eb = 0,
      Fb = 0,
      Gb = 0,
      Hb = 0,
      Jb = 0,
      Kb = 0,
      Lb = 0.0,
      Mb = 0.0,
      Nb = 0.0,
      Ob = 0.0,
      Pb = 0.0;
    Kb = Ib;
    Ib = Ib + 4432 | 0;
    k = Kb + 4416 | 0;
    j = Kb + 4408 | 0;
    Jb = Kb + 4400 | 0;
    Hb = Kb + 4376 | 0;
    Fb = Kb + 4352 | 0;
    Eb = Kb + 4344 | 0;
    Db = Kb + 4328 | 0;
    Cb = Kb + 4312 | 0;
    Bb = Kb + 4304 | 0;
    Ab = Kb + 4296 | 0;
    zb = Kb + 4288 | 0;
    yb = Kb + 4280 | 0;
    xb = Kb + 4272 | 0;
    wb = Kb + 4264 | 0;
    vb = Kb + 4256 | 0;
    ub = Kb + 4248 | 0;
    tb = Kb + 4240 | 0;
    sb = Kb + 4232 | 0;
    rb = Kb + 4224 | 0;
    qb = Kb + 4216 | 0;
    pb = Kb + 4208 | 0;
    ob = Kb + 4200 | 0;
    nb = Kb + 4192 | 0;
    mb = Kb + 4184 | 0;
    lb = Kb + 4176 | 0;
    kb = Kb + 4168 | 0;
    jb = Kb + 4160 | 0;
    ib = Kb + 4152 | 0;
    hb = Kb + 4144 | 0;
    gb = Kb + 4136 | 0;
    fb = Kb + 4128 | 0;
    eb = Kb + 4120 | 0;
    db = Kb + 4112 | 0;
    cb = Kb + 4104 | 0;
    bb = Kb + 4096 | 0;
    ab = Kb + 4088 | 0;
    _a = Kb + 4080 | 0;
    Za = Kb + 4072 | 0;
    Ya = Kb + 4064 | 0;
    Xa = Kb + 4056 | 0;
    Wa = Kb + 4048 | 0;
    Va = Kb + 4040 | 0;
    Ua = Kb + 4032 | 0;
    Ta = Kb + 4024 | 0;
    Sa = Kb + 4016 | 0;
    Ra = Kb + 4008 | 0;
    Qa = Kb + 4e3 | 0;
    Pa = Kb + 3992 | 0;
    Oa = Kb + 3984 | 0;
    Na = Kb + 3976 | 0;
    Ma = Kb + 3968 | 0;
    La = Kb + 3960 | 0;
    Ka = Kb + 3952 | 0;
    Ja = Kb + 3936 | 0;
    Ha = Kb + 3928 | 0;
    Ga = Kb + 3920 | 0;
    Fa = Kb + 3912 | 0;
    Ea = Kb + 3904 | 0;
    Da = Kb + 3888 | 0;
    Ca = Kb + 3872 | 0;
    Ba = Kb + 3856 | 0;
    za = Kb + 3848 | 0;
    ya = Kb + 3840 | 0;
    xa = Kb + 3832 | 0;
    wa = Kb + 3824 | 0;
    va = Kb + 3816 | 0;
    ua = Kb + 3808 | 0;
    ta = Kb + 3800 | 0;
    sa = Kb + 3784 | 0;
    ra = Kb + 3776 | 0;
    qa = Kb + 3760 | 0;
    na = Kb + 3744 | 0;
    ma = Kb + 3736 | 0;
    ka = Kb + 3720 | 0;
    ja = Kb + 3704 | 0;
    ia = Kb + 3680 | 0;
    ha = Kb + 3664 | 0;
    ga = Kb + 3656 | 0;
    ea = Kb + 3632 | 0;
    da = Kb + 3624 | 0;
    ca = Kb + 3616 | 0;
    ba = Kb + 3608 | 0;
    aa = Kb + 3600 | 0;
    $ = Kb + 3592 | 0;
    _ = Kb + 3584 | 0;
    Z = Kb + 3568 | 0;
    Y = Kb + 3560 | 0;
    V = Kb + 3544 | 0;
    U = Kb + 3536 | 0;
    T = Kb + 3528 | 0;
    S = Kb + 3520 | 0;
    R = Kb + 3504 | 0;
    M = Kb + 3496 | 0;
    Q = Kb + 3488 | 0;
    P = Kb + 3472 | 0;
    O = Kb + 3456 | 0;
    N = Kb + 3424 | 0;
    K = Kb + 3416 | 0;
    J = Kb + 3408 | 0;
    I = Kb + 3400 | 0;
    H = Kb + 3392 | 0;
    G = Kb + 3352 | 0;
    F = Kb + 3344 | 0;
    E = Kb + 3336 | 0;
    D = Kb + 3320 | 0;
    C = Kb + 3312 | 0;
    B = Kb + 3304 | 0;
    A = Kb + 3256 | 0;
    y = Kb + 3248 | 0;
    x = Kb + 3240 | 0;
    v = Kb + 3184 | 0;
    r = Kb + 3176 | 0;
    q = Kb + 3168 | 0;
    p = Kb + 3160 | 0;
    s = Kb + 3144 | 0;
    m = Kb + 3136 | 0;
    l = Kb + 3120 | 0;
    f = Kb + 3112 | 0;
    oa = Kb + 2080 | 0;
    pa = Kb + 1040 | 0;
    z = Kb;
    Ia = d + 3664 | 0;
    Gb = Vq(e, 10976) | 0;
    if (!Gb) {
      Jb = 302;
      Ib = Kb;
      return Jb | 0;
    }
    Sq(5263, 7, 1, Gb) | 0;
    e = d + 5336 | 0;
    if (Kq(e) | 0) {
      c[f >> 2] = e;
      er(Gb, 14950, f) | 0;
    }
    e = d + 5416 | 0;
    if (Kq(e) | 0) {
      c[j >> 2] = e;
      er(Gb, 14950, j) | 0;
    }
    e = d + 5496 | 0;
    if (Kq(e) | 0) {
      c[k >> 2] = e;
      er(Gb, 14950, k) | 0;
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5274, 11, 1, Gb) | 0;
    fa = d + 8 | 0;
    if ((c[fa >> 2] | 0) >= 1) {
      f = d + 44 | 0;
      j = d + 4904 | 0;
      e = 1;
      while (1) {
        k = c[f >> 2] | 0;
        w = +g[k + (e * 96 | 0) + 48 >> 3] * +g[j >> 3];
        c[l >> 2] = k + (e * 96 | 0);
        g[l + 8 >> 3] = w;
        er(Gb, 5286, l) | 0;
        k = c[k + (e * 96 | 0) + 92 >> 2] | 0;
        if (k | 0) {
          c[m >> 2] = k;
          er(Gb, 5301, m) | 0;
        }
        if ((e | 0) < (c[fa >> 2] | 0)) e = e + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5307, 12, 1, Gb) | 0;
    Aa = d + 4 | 0;
    if ((c[Aa >> 2] | 0) >= 1) {
      l = d + 52 | 0;
      m = d + 44 | 0;
      n = d + 4904 | 0;
      o = d + 64 | 0;
      k = 1;
      while (1) {
        e = c[l >> 2] | 0;
        if (+g[e + (k * 120 | 0) + 8 >> 3] == 0.0) {
          f = c[m >> 2] | 0;
          j = c[e + (k * 120 | 0) >> 2] | 0;
          w = +g[f + (j * 96 | 0) + 48 >> 3] * +g[n >> 3];
          c[s >> 2] = f + (j * 96 | 0);
          g[s + 8 >> 3] = w;
          bq(oa, 5320, s);
          e = c[e + (k * 120 | 0) + 88 >> 2] | 0;
          if ((e | 0) > 0) {
            c[p >> 2] = (c[o >> 2] | 0) + (e * 44 | 0);
            bq(pa, 5334, p);
          } else b[pa >> 1] = 32;
          c[q >> 2] = oa;
          c[q + 4 >> 2] = pa;
          er(Gb, 5338, q) | 0;
          e = c[f + (j * 96 | 0) + 92 >> 2] | 0;
          if (e | 0) {
            c[r >> 2] = e;
            er(Gb, 5348, r) | 0;
          }
        }
        if ((k | 0) < (c[Aa >> 2] | 0)) k = k + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5353, 7, 1, Gb) | 0;
    if ((c[Aa >> 2] | 0) >= 1) {
      m = d + 52 | 0;
      n = d + 44 | 0;
      o = d + 4904 | 0;
      p = d + 68 | 0;
      l = 1;
      while (1) {
        f = c[m >> 2] | 0;
        h = +g[f + (l * 120 | 0) + 8 >> 3];
        if (h > 0.0) {
          j = c[n >> 2] | 0;
          k = c[f + (l * 120 | 0) >> 2] | 0;
          Pb = +g[j + (k * 96 | 0) + 48 >> 3];
          Ob = +g[o >> 3];
          Nb = Ob * (+g[f + (l * 120 | 0) + 32 >> 3] - Pb);
          Mb = Ob * (+g[f + (l * 120 | 0) + 16 >> 3] - Pb);
          Lb = Ob * (+g[f + (l * 120 | 0) + 24 >> 3] - Pb);
          i = +t(+(h * 4.0 / 3.141592653589793)) * Ob;
          w = Ob * (Ob * Ob * +g[f + (l * 120 | 0) + 40 >> 3]);
          c[v >> 2] = j + (k * 96 | 0);
          g[v + 8 >> 3] = Pb * Ob;
          g[v + 16 >> 3] = Nb;
          g[v + 24 >> 3] = Mb;
          g[v + 32 >> 3] = Lb;
          g[v + 40 >> 3] = i;
          g[v + 48 >> 3] = w;
          bq(oa, 5361, v);
          e = c[f + (l * 120 | 0) + 92 >> 2] | 0;
          do if ((e | 0) <= 0) {
            e = f + (l * 120 | 0) + 112 | 0;
            if (!(c[e >> 2] | 0)) {
              b[pa >> 1] = 32;
              break;
            } else {
              b[pa >> 1] = 42;
              break;
            }
          } else {
            e = (c[p >> 2] | 0) + (e * 56 | 0) | 0;
            ut(pa | 0, e | 0, (Kq(e) | 0) + 1 | 0) | 0;
            e = f + (l * 120 | 0) + 112 | 0;
          } while (0);
          c[x >> 2] = oa;
          c[x + 4 >> 2] = pa;
          er(Gb, 5338, x) | 0;
          if (c[e >> 2] | 0) Sq(5410, 7, 1, Gb) | 0;
          e = c[j + (k * 96 | 0) + 92 >> 2] | 0;
          if (e | 0) {
            c[y >> 2] = e;
            er(Gb, 5348, y) | 0;
          }
        }
        if ((l | 0) < (c[Aa >> 2] | 0)) l = l + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5418, 7, 1, Gb) | 0;
    $a = d + 12 | 0;
    if ((c[$a >> 2] | 0) >= 1) {
      k = d + 48 | 0;
      l = d + 4500 | 0;
      m = d + 4904 | 0;
      n = d + 44 | 0;
      o = d + 4944 | 0;
      p = d + 4952 | 0;
      j = 1;
      while (1) {
        e = c[k >> 2] | 0;
        f = e + (j << 7) + 104 | 0;
        if ((c[f >> 2] | 0) >>> 0 < 2) {
          i = +g[e + (j << 7) + 40 >> 3];
          h = +g[e + (j << 7) + 56 >> 3];
          if ((c[l >> 2] | 0) == 1) h = h * +g[m >> 3] * 1.0e3;
          Pb = i * i;
          Pb = Pb * (Pb * +g[e + (j << 7) + 64 >> 3]) / .02517;
          y = c[n >> 2] | 0;
          x = y + ((c[e + (j << 7) + 32 >> 2] | 0) * 96 | 0) | 0;
          y = y + ((c[e + (j << 7) + 36 >> 2] | 0) * 96 | 0) | 0;
          Nb = +g[e + (j << 7) + 48 >> 3] * +g[o >> 3];
          Ob = i * +g[p >> 3];
          c[A >> 2] = e + (j << 7);
          c[A + 4 >> 2] = x;
          c[A + 8 >> 2] = y;
          g[A + 16 >> 3] = Nb;
          g[A + 24 >> 3] = Ob;
          g[A + 32 >> 3] = h;
          g[A + 40 >> 3] = Pb;
          bq(oa, 5426, A);
          do if (c[f >> 2] | 0) {
            if ((c[e + (j << 7) + 108 >> 2] | 0) == 2) {
              a[z >> 0] = a[14403] | 0;
              a[z + 1 >> 0] = a[14404] | 0;
              a[z + 2 >> 0] = a[14405] | 0;
              a[z + 3 >> 0] = a[14406] | 0;
              a[z + 4 >> 0] = a[14407] | 0;
              a[z + 5 >> 0] = a[14408] | 0;
              a[z + 6 >> 0] = a[14409] | 0;
              break;
            } else {
              b[z >> 1] = 32;
              break;
            }
          } else {
            a[z >> 0] = a[8169] | 0;
            a[z + 1 >> 0] = a[8170] | 0;
            a[z + 2 >> 0] = a[8171] | 0;
          } while (0);
          c[B >> 2] = oa;
          c[B + 4 >> 2] = z;
          er(Gb, 5473, B) | 0;
          e = c[e + (j << 7) + 124 >> 2] | 0;
          if (e | 0) {
            c[C >> 2] = e;
            er(Gb, 5348, C) | 0;
          }
        }
        if ((j | 0) < (c[$a >> 2] | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5482, 7, 1, Gb) | 0;
    z = d + 20 | 0;
    if ((c[z >> 2] | 0) >= 1) {
      m = d + 56 | 0;
      n = d + 48 | 0;
      o = d + 44 | 0;
      p = d + 64 | 0;
      q = d + 68 | 0;
      r = d + 4920 | 0;
      s = d + 4960 | 0;
      l = 1;
      while (1) {
        e = c[m >> 2] | 0;
        j = c[e + (l << 7) >> 2] | 0;
        k = c[n >> 2] | 0;
        C = c[o >> 2] | 0;
        B = C + ((c[k + (j << 7) + 32 >> 2] | 0) * 96 | 0) | 0;
        C = C + ((c[k + (j << 7) + 36 >> 2] | 0) * 96 | 0) | 0;
        c[D >> 2] = k + (j << 7);
        c[D + 4 >> 2] = B;
        c[D + 8 >> 2] = C;
        bq(oa, 5490, D);
        do if (c[e + (l << 7) + 4 >> 2] | 0) {
          f = c[e + (l << 7) + 56 >> 2] | 0;
          if ((f | 0) > 0) {
            c[F >> 2] = (c[q >> 2] | 0) + (f * 56 | 0);
            bq(pa, 5522, F);
            la = 51;
            break;
          } else {
            Lb = -+g[e + (l << 7) + 32 >> 3];
            w = +g[r >> 3];
            Nb = +g[e + (l << 7) + 8 >> 3];
            Mb = w * (Lb - +g[e + (l << 7) + 40 >> 3] * +u(+Nb, + +g[e + (l << 7) + 48 >> 3]));
            Ob = +g[s >> 3];
            Pb = Ob * +g[e + (l << 7) + 16 >> 3];
            c[G >> 2] = oa;
            g[G + 8 >> 3] = w * Lb;
            g[G + 16 >> 3] = Mb;
            g[G + 24 >> 3] = Nb * Ob;
            g[G + 32 >> 3] = Pb;
            er(Gb, 5532, G) | 0;
            break;
          }
        } else {
          g[E >> 3] = +g[k + (j << 7) + 64 >> 3];
          bq(pa, 5509, E);
          la = 51;
        } while (0);
        if ((la | 0) == 51) {
          la = 0;
          kr(oa, pa) | 0;
          e = c[e + (l << 7) + 64 >> 2] | 0;
          if ((e | 0) > 0) {
            c[H >> 2] = (c[p >> 2] | 0) + (e * 44 | 0);
            bq(pa, 5577, H);
            kr(oa, pa) | 0;
          }
          h = +g[k + (j << 7) + 56 >> 3];
          if (h != 1.0) {
            g[I >> 3] = h;
            bq(pa, 5591, I);
            kr(oa, pa) | 0;
          }
          c[J >> 2] = oa;
          er(Gb, 14950, J) | 0;
          e = c[k + (j << 7) + 124 >> 2] | 0;
          if (e | 0) {
            c[K >> 2] = e;
            er(Gb, 5301, K) | 0;
          }
        }
        if ((l | 0) < (c[z >> 2] | 0)) l = l + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5604, 8, 1, Gb) | 0;
    o = d + 24 | 0;
    a: do if ((c[o >> 2] | 0) >= 1) {
      p = d + 60 | 0;
      q = d + 48 | 0;
      r = d + 44 | 0;
      s = d + 4952 | 0;
      v = d + 4960 | 0;
      x = d + 4928 | 0;
      y = d + 68 | 0;
      n = 1;
      while (1) {
        f = c[(c[p >> 2] | 0) + (n << 2) >> 2] | 0;
        j = c[q >> 2] | 0;
        w = +g[j + (f << 7) + 40 >> 3];
        k = j + (f << 7) + 56 | 0;
        h = +g[k >> 3];
        h = h == -1.0e10 ? 0.0 : h;
        l = j + (f << 7) + 104 | 0;
        m = c[l >> 2] | 0;
        switch (m | 0) {
          case 6:
            {
              e = v;
              la = 62;
              break;
            }
          case 5:
          case 4:
          case 3:
            {
              e = x;
              la = 62;
              break;
            }
          default:
            {}
        }
        if ((la | 0) == 62) {
          la = 0;
          h = h * +g[e >> 3];
        }
        i = w * w;
        i = i * (i * +g[j + (f << 7) + 64 >> 3]) / .02517;
        J = c[r >> 2] | 0;
        I = J + ((c[j + (f << 7) + 32 >> 2] | 0) * 96 | 0) | 0;
        J = J + ((c[j + (f << 7) + 36 >> 2] | 0) * 96 | 0) | 0;
        Pb = w * +g[s >> 3];
        K = c[16 + (m << 2) >> 2] | 0;
        c[N >> 2] = j + (f << 7);
        c[N + 4 >> 2] = I;
        c[N + 8 >> 2] = J;
        g[N + 16 >> 3] = Pb;
        c[N + 24 >> 2] = K;
        bq(oa, 5613, N);
        if ((c[l >> 2] | 0) == 8 ? (Pb = +g[k >> 3], L = ~~(Pb + (Pb >= 0.0 ? .5 : -.5)), (L | 0) > 0) : 0) {
          c[O >> 2] = (c[y >> 2] | 0) + (L * 56 | 0);
          g[O + 8 >> 3] = i;
          bq(pa, 5643, O);
        } else {
          g[P >> 3] = h;
          g[P + 8 >> 3] = i;
          bq(pa, 5656, P);
        }
        c[Q >> 2] = oa;
        c[Q + 4 >> 2] = pa;
        er(Gb, 5670, Q) | 0;
        e = c[j + (f << 7) + 124 >> 2] | 0;
        if (e | 0) {
          c[M >> 2] = e;
          er(Gb, 5348, M) | 0;
        }
        if ((n | 0) < (c[o >> 2] | 0)) n = n + 1 | 0;else break a;
      }
    } while (0);
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5677, 9, 1, Gb) | 0;
    h = +g[d + 4912 >> 3];
    e = c[fa >> 2] | 0;
    if ((e | 0) >= 1) {
      l = d + 44 | 0;
      m = d + 64 | 0;
      k = 1;
      while (1) {
        f = c[l >> 2] | 0;
        j = c[f + (k * 96 | 0) + 56 >> 2] | 0;
        if (j) {
          f = f + (k * 96 | 0) | 0;
          do {
            Pb = h * +g[j >> 3];
            c[R >> 2] = f;
            g[R + 8 >> 3] = Pb;
            bq(oa, 5687, R);
            e = c[j + 8 >> 2] | 0;
            if ((e | 0) > 0) {
              c[S >> 2] = (c[m >> 2] | 0) + (e * 44 | 0);
              bq(pa, 5701, S);
            } else b[pa >> 1] = 32;
            c[T >> 2] = oa;
            c[T + 4 >> 2] = pa;
            er(Gb, 5338, T) | 0;
            e = c[j + 12 >> 2] | 0;
            if (e | 0) {
              c[U >> 2] = e;
              er(Gb, 5348, U) | 0;
            }
            j = c[j + 16 >> 2] | 0;
          } while ((j | 0) != 0);
          e = c[fa >> 2] | 0;
        }
        if ((k | 0) < (e | 0)) k = k + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5708, 10, 1, Gb) | 0;
    e = c[fa >> 2] | 0;
    if ((e | 0) >= 1) {
      k = d + 44 | 0;
      l = d + 4960 | 0;
      m = d + 4928 | 0;
      n = d + 4312 | 0;
      j = 1;
      while (1) {
        f = c[k >> 2] | 0;
        h = +g[f + (j * 96 | 0) + 72 >> 3];
        if (!(h == 0.0)) {
          Pb = +g[l >> 3] / +u(+(h * +g[m >> 3]), +(1.0 / +g[n >> 3]));
          c[V >> 2] = f + (j * 96 | 0);
          g[V + 8 >> 3] = Pb;
          er(Gb, 5719, V) | 0;
          e = c[fa >> 2] | 0;
        }
        if ((j | 0) < (e | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5734, 8, 1, Gb) | 0;
    if ((c[$a >> 2] | 0) >= 1) {
      k = d + 48 | 0;
      l = d + 56 | 0;
      j = 1;
      while (1) {
        e = c[k >> 2] | 0;
        m = e + (j << 7) | 0;
        f = c[e + (j << 7) + 104 >> 2] | 0;
        do if (f >>> 0 < 3) {
          if ((c[e + (j << 7) + 108 >> 2] | 0) == 2) {
            c[Y >> 2] = m;
            c[Y + 4 >> 2] = 4061;
            er(Gb, 5743, Y) | 0;
            break;
          }
          if ((f | 0) == 2 ? (W = Rh(d, j) | 0, X = c[l >> 2] | 0, (c[X + (W << 7) + 56 >> 2] | 0) == 0) : 0) {
            if (!(c[X + (W << 7) + 4 >> 2] | 0)) break;
            h = +g[e + (j << 7) + 56 >> 3];
            if (!(h != 1.0)) break;
            c[Z >> 2] = m;
            g[Z + 8 >> 3] = h;
            er(Gb, 5754, Z) | 0;
          }
        } else if (+g[e + (j << 7) + 56 >> 3] == -1.0e10) {
          f = e + (j << 7) + 108 | 0;
          e = c[f >> 2] | 0;
          if ((e | 0) == 3) {
            c[_ >> 2] = m;
            c[_ + 4 >> 2] = 14981;
            er(Gb, 5743, _) | 0;
            e = c[f >> 2] | 0;
          }
          if ((e | 0) == 2) {
            c[$ >> 2] = m;
            c[$ + 4 >> 2] = 4061;
            er(Gb, 5768, $) | 0;
          }
        } while (0);
        if ((j | 0) < (c[$a >> 2] | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5778, 10, 1, Gb) | 0;
    k = d + 36 | 0;
    if ((c[k >> 2] | 0) >= 1) {
      l = d + 64 | 0;
      j = 1;
      e = c[l >> 2] | 0;
      while (1) {
        f = c[e + (j * 44 | 0) + 32 >> 2] | 0;
        if (f) {
          c[aa >> 2] = f;
          er(Gb, 5789, aa) | 0;
          e = c[l >> 2] | 0;
        }
        if ((c[e + (j * 44 | 0) + 36 >> 2] | 0) > 0) {
          f = 0;
          do {
            if (!((f >>> 0) % 6 | 0)) {
              c[ba >> 2] = e + (j * 44 | 0);
              er(Gb, 5794, ba) | 0;
              e = c[l >> 2] | 0;
            }
            g[ca >> 3] = +g[(c[e + (j * 44 | 0) + 40 >> 2] | 0) + (f << 3) >> 3];
            er(Gb, 5802, ca) | 0;
            f = f + 1 | 0;
            e = c[l >> 2] | 0;
          } while ((f | 0) < (c[e + (j * 44 | 0) + 36 >> 2] | 0));
        }
        if ((j | 0) < (c[k >> 2] | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5810, 8, 1, Gb) | 0;
    k = d + 40 | 0;
    if ((c[k >> 2] | 0) >= 1) {
      l = d + 68 | 0;
      j = 1;
      e = c[l >> 2] | 0;
      while (1) {
        f = c[e + (j * 56 | 0) + 32 >> 2] | 0;
        if (f) {
          c[da >> 2] = f;
          er(Gb, 5789, da) | 0;
          e = c[l >> 2] | 0;
        }
        if ((c[e + (j * 56 | 0) + 40 >> 2] | 0) > 0) {
          f = 0;
          do {
            Ob = +g[(c[e + (j * 56 | 0) + 48 >> 2] | 0) + (f << 3) >> 3];
            Pb = +g[(c[e + (j * 56 | 0) + 52 >> 2] | 0) + (f << 3) >> 3];
            c[ea >> 2] = e + (j * 56 | 0);
            g[ea + 8 >> 3] = Ob;
            g[ea + 16 >> 3] = Pb;
            er(Gb, 5819, ea) | 0;
            f = f + 1 | 0;
            e = c[l >> 2] | 0;
          } while ((f | 0) < (c[e + (j * 56 | 0) + 40 >> 2] | 0));
        }
        if ((j | 0) < (c[k >> 2] | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5841, 10, 1, Gb) | 0;
    l = d + 28 | 0;
    if ((c[l >> 2] | 0) >= 1) {
      m = d + 72 | 0;
      n = d + 48 | 0;
      o = d + 44 | 0;
      p = d + 4920 | 0;
      q = d + 4928 | 0;
      r = d + 1256 | 0;
      s = d + 4960 | 0;
      k = 1;
      while (1) {
        v = c[m >> 2] | 0;
        e = c[v + (k * 40 | 0) >> 2] | 0;
        b: do if ((e | 0) >= 1) {
          f = c[n >> 2] | 0;
          j = f + (e << 7) | 0;
          h = +g[v + (k * 40 | 0) + 24 >> 3];
          if (h == -1.0e10) {
            ea = c[64 + (c[v + (k * 40 | 0) + 32 >> 2] << 2) >> 2] | 0;
            c[ga >> 2] = j;
            c[ga + 4 >> 2] = ea;
            bq(oa, 5852, ga);
          } else {
            switch (c[f + (e << 7) + 104 >> 2] | 0) {
              case 5:
              case 4:
              case 3:
                {
                  e = q;
                  la = 128;
                  break;
                }
              case 6:
                {
                  e = s;
                  la = 128;
                  break;
                }
              default:
                {}
            }
            if ((la | 0) == 128) {
              la = 0;
              h = h * +g[e >> 3];
            }
            c[ha >> 2] = j;
            g[ha + 8 >> 3] = h;
            bq(oa, 5865, ha);
          }
          e = c[v + (k * 40 | 0) + 36 >> 2] | 0;
          switch (e | 0) {
            case 1:
            case 0:
              {
                da = c[v + (k * 40 | 0) + 4 >> 2] | 0;
                ca = c[o >> 2] | 0;
                Pb = (+g[v + (k * 40 | 0) + 16 >> 3] - +g[ca + (da * 96 | 0) + 48 >> 3]) * +g[((da | 0) > (c[fa >> 2] | 0) ? p : q) >> 3];
                ea = c[224 + (e << 2) >> 2] | 0;
                c[ia >> 2] = oa;
                c[ia + 4 >> 2] = ca + (da * 96 | 0);
                c[ia + 8 >> 2] = ea;
                g[ia + 16 >> 3] = Pb;
                er(Gb, 5879, ia) | 0;
                break b;
              }
            case 2:
              {
                Pb = +(c[v + (k * 40 | 0) + 8 >> 2] | 0) / 3600.0;
                c[ja >> 2] = oa;
                c[ja + 4 >> 2] = 14288;
                g[ja + 8 >> 3] = Pb;
                er(Gb, 5902, ja) | 0;
                break b;
              }
            case 3:
              {
                ea = dj(r, c[v + (k * 40 | 0) + 8 >> 2] | 0) | 0;
                c[ka >> 2] = oa;
                c[ka + 4 >> 2] = 14293;
                c[ka + 8 >> 2] = ea;
                er(Gb, 5923, ka) | 0;
                break b;
              }
            default:
              break b;
          }
        } while (0);
        if ((k | 0) < (c[l >> 2] | 0)) k = k + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5936, 7, 1, Gb) | 0;
    f = d + 32 | 0;
    if ((c[f >> 2] | 0) >= 1) {
      j = d + 76 | 0;
      e = 1;
      while (1) {
        c[ma >> 2] = (c[j >> 2] | 0) + (e * 56 | 0);
        er(Gb, 5944, ma) | 0;
        Hj(d, Gb, e);
        or(10, Gb);
        if ((e | 0) < (c[f >> 2] | 0)) e = e + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5953, 9, 1, Gb) | 0;
    e = c[d >> 2] | 0;
    if ((e | 0) >= 1) {
      k = d + 44 | 0;
      l = d + 4936 | 0;
      j = 1;
      while (1) {
        f = c[k >> 2] | 0;
        h = +g[f + (j * 96 | 0) + 64 >> 3];
        if (!(h == 0.0)) {
          Pb = h * +g[l >> 3];
          c[na >> 2] = f + (j * 96 | 0);
          g[na + 8 >> 3] = Pb;
          er(Gb, 5719, na) | 0;
          e = c[d >> 2] | 0;
        }
        if ((j | 0) < (e | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5963, 9, 1, Gb) | 0;
    e = c[d >> 2] | 0;
    if ((e | 0) >= 1) {
      l = d + 44 | 0;
      m = d + 64 | 0;
      k = 1;
      while (1) {
        f = c[l >> 2] | 0;
        j = c[f + (k * 96 | 0) + 60 >> 2] | 0;
        if (j) {
          e = c[208 + (c[j + 24 >> 2] << 2) >> 2] | 0;
          Pb = +g[j >> 3];
          c[qa >> 2] = f + (k * 96 | 0);
          c[qa + 4 >> 2] = e;
          g[qa + 8 >> 3] = Pb;
          bq(oa, 5973, qa);
          e = c[j + 8 >> 2] | 0;
          if ((e | 0) > 0) {
            na = (c[m >> 2] | 0) + (e * 44 | 0) | 0;
            ut(pa | 0, na | 0, (Kq(na) | 0) + 1 | 0) | 0;
          } else a[pa >> 0] = 0;
          c[ra >> 2] = oa;
          c[ra + 4 >> 2] = pa;
          er(Gb, 5670, ra) | 0;
          e = c[d >> 2] | 0;
        }
        if ((k | 0) < (e | 0)) k = k + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(5992, 8, 1, Gb) | 0;
    e = c[Aa >> 2] | 0;
    if ((e | 0) >= 1) {
      k = d + 52 | 0;
      l = d + 44 | 0;
      j = 1;
      while (1) {
        f = c[k >> 2] | 0;
        if (!(+g[f + (j * 120 | 0) + 8 >> 3] == 0.0)) {
          e = c[272 + (c[f + (j * 120 | 0) + 96 >> 2] << 2) >> 2] | 0;
          Pb = +g[f + (j * 120 | 0) + 104 >> 3] / +g[f + (j * 120 | 0) + 48 >> 3];
          c[sa >> 2] = (c[l >> 2] | 0) + ((c[f + (j * 120 | 0) >> 2] | 0) * 96 | 0);
          c[sa + 4 >> 2] = e;
          g[sa + 8 >> 3] = Pb;
          er(Gb, 6001, sa) | 0;
          e = c[Aa >> 2] | 0;
        }
        if ((j | 0) < (e | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(6021, 11, 1, Gb) | 0;
    g[ta >> 3] = +g[d + 4768 >> 3];
    er(Gb, 6033, ta) | 0;
    g[ua >> 3] = +g[d + 4776 >> 3];
    er(Gb, 6064, ua) | 0;
    g[va >> 3] = +g[d + 4784 >> 3];
    er(Gb, 6095, va) | 0;
    m = d + 4792 | 0;
    g[wa >> 3] = +g[m >> 3] * 86400.0;
    er(Gb, 6126, wa) | 0;
    l = d + 4800 | 0;
    g[xa >> 3] = +g[l >> 3] * 86400.0;
    er(Gb, 6157, xa) | 0;
    h = +g[d + 4808 >> 3];
    if (h > 0.0) {
      g[ya >> 3] = h * +g[d + 4936 >> 3];
      er(Gb, 6188, ya) | 0;
    }
    h = +g[d + 4736 >> 3];
    if (h != -1.0e10 & h != 0.0) {
      g[za >> 3] = h;
      er(Gb, 6219, za) | 0;
    }
    if ((c[$a >> 2] | 0) >= 1) {
      j = d + 48 | 0;
      f = 1;
      while (1) {
        e = c[j >> 2] | 0;
        k = e + (f << 7) | 0;
        do if ((c[e + (f << 7) + 104 >> 2] | 0) >>> 0 <= 1) {
          h = +g[e + (f << 7) + 72 >> 3];
          if (h != +g[m >> 3]) {
            c[Ba >> 2] = k;
            g[Ba + 8 >> 3] = h * 86400.0;
            er(Gb, 6250, Ba) | 0;
          }
          h = +g[e + (f << 7) + 80 >> 3];
          if (!(h != +g[l >> 3])) break;
          c[Ca >> 2] = k;
          g[Ca + 8 >> 3] = h * 86400.0;
          er(Gb, 6271, Ca) | 0;
        } while (0);
        if ((f | 0) < (c[$a >> 2] | 0)) f = f + 1 | 0;else break;
      }
    }
    e = c[Aa >> 2] | 0;
    if ((e | 0) >= 1) {
      k = d + 52 | 0;
      l = d + 44 | 0;
      j = 1;
      while (1) {
        f = c[k >> 2] | 0;
        do if (!(+g[f + (j * 120 | 0) + 8 >> 3] == 0.0)) {
          h = +g[f + (j * 120 | 0) + 64 >> 3];
          if (!(h != +g[m >> 3])) break;
          c[Da >> 2] = (c[l >> 2] | 0) + ((c[f + (j * 120 | 0) >> 2] | 0) * 96 | 0);
          g[Da + 8 >> 3] = h * 86400.0;
          er(Gb, 6292, Da) | 0;
          e = c[Aa >> 2] | 0;
        } while (0);
        if ((j | 0) < (e | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(6313, 8, 1, Gb) | 0;
    h = +g[d + 4416 >> 3];
    if (h != 0.0) {
      g[Ea >> 3] = h;
      er(Gb, 6322, Ea) | 0;
    }
    e = c[d + 4492 >> 2] | 0;
    if (e | 0) {
      c[Fa >> 2] = (c[d + 64 >> 2] | 0) + (e * 44 | 0);
      er(Gb, 6350, Fa) | 0;
    }
    g[Ga >> 3] = +g[d + 4400 >> 3];
    er(Gb, 6375, Ga) | 0;
    g[Ha >> 3] = +g[d + 4424 >> 3];
    er(Gb, 6403, Ha) | 0;
    if ((c[z >> 2] | 0) >= 1) {
      k = d + 56 | 0;
      l = d + 48 | 0;
      m = d + 64 | 0;
      n = d + 68 | 0;
      j = 1;
      while (1) {
        f = c[k >> 2] | 0;
        o = f + (j << 7) | 0;
        h = +g[f + (j << 7) + 72 >> 3];
        if (h > 0.0) {
          c[Ja >> 2] = (c[l >> 2] | 0) + (c[o >> 2] << 7);
          g[Ja + 8 >> 3] = h;
          er(Gb, 6431, Ja) | 0;
        }
        e = c[f + (j << 7) + 68 >> 2] | 0;
        if ((e | 0) > 0) {
          Ha = (c[m >> 2] | 0) + (e * 44 | 0) | 0;
          c[Ka >> 2] = (c[l >> 2] | 0) + (c[o >> 2] << 7);
          c[Ka + 4 >> 2] = Ha;
          er(Gb, 6458, Ka) | 0;
        }
        e = c[f + (j << 7) + 60 >> 2] | 0;
        if ((e | 0) > 0) {
          Ha = (c[n >> 2] | 0) + (e * 56 | 0) | 0;
          c[La >> 2] = (c[l >> 2] | 0) + (c[o >> 2] << 7);
          c[La + 4 >> 2] = Ha;
          er(Gb, 6482, La) | 0;
        }
        if ((j | 0) < (c[z >> 2] | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(6506, 7, 1, Gb) | 0;
    La = d + 1256 | 0;
    Ka = dj(La, c[d + 1192 >> 2] | 0) | 0;
    c[Ma >> 2] = Ka;
    er(Gb, 6514, Ma) | 0;
    Ma = dj(La, c[d + 1148 >> 2] | 0) | 0;
    c[Na >> 2] = Ma;
    er(Gb, 6539, Na) | 0;
    Na = dj(La, c[d + 1180 >> 2] | 0) | 0;
    c[Oa >> 2] = Na;
    er(Gb, 6564, Oa) | 0;
    Oa = dj(La, c[d + 1160 >> 2] | 0) | 0;
    c[Pa >> 2] = Oa;
    er(Gb, 6589, Pa) | 0;
    Pa = dj(La, c[d + 1164 >> 2] | 0) | 0;
    c[Qa >> 2] = Pa;
    er(Gb, 6614, Qa) | 0;
    Qa = dj(La, c[d + 1152 >> 2] | 0) | 0;
    c[Ra >> 2] = Qa;
    er(Gb, 6639, Ra) | 0;
    Ra = dj(La, c[d + 1156 >> 2] | 0) | 0;
    c[Sa >> 2] = Ra;
    er(Gb, 6664, Sa) | 0;
    Sa = dj(La, c[d + 1188 >> 2] | 0) | 0;
    c[Ta >> 2] = Sa;
    er(Gb, 6689, Ta) | 0;
    Ta = dj(La, c[d + 1144 >> 2] | 0) | 0;
    c[Ua >> 2] = Ta;
    er(Gb, 6714, Ua) | 0;
    c[Va >> 2] = c[240 + (c[d + 1216 >> 2] << 2) >> 2];
    er(Gb, 6739, Va) | 0;
    Sq(5271, 2, 1, Gb) | 0;
    Sq(6764, 9, 1, Gb) | 0;
    c[Wa >> 2] = c[160 + (c[d + 1120 >> 2] << 2) >> 2];
    er(Gb, 6774, Wa) | 0;
    c[Xa >> 2] = c[3452 + (c[d + 1124 >> 2] << 2) >> 2];
    er(Gb, 6799, Xa) | 0;
    c[Ya >> 2] = c[3428 + (c[d + 4500 >> 2] << 2) >> 2];
    er(Gb, 6824, Ya) | 0;
    switch (c[d + 4188 >> 2] | 0) {
      case 0:
        {
          c[Za >> 2] = Ia;
          er(Gb, 6849, Za) | 0;
          break;
        }
      case 1:
        {
          c[_a >> 2] = Ia;
          er(Gb, 6874, _a) | 0;
          break;
        }
      default:
        {}
    }
    f = d + 4512 | 0;
    e = c[f >> 2] | 0;
    if ((e | 0) == -1) {
      Sq(6899, 26, 1, Gb) | 0;
      e = c[f >> 2] | 0;
    }
    if ((e | 0) > -1) {
      c[ab >> 2] = e;
      er(Gb, 6926, ab) | 0;
    }
    switch (c[d + 4600 >> 2] | 0) {
      case 1:
        {
          c[bb >> 2] = d + 4624;
          c[bb + 4 >> 2] = d + 4656;
          er(Gb, 6960, bb) | 0;
          break;
        }
      case 3:
        {
          c[cb >> 2] = (c[d + 44 >> 2] | 0) + ((c[d + 4616 >> 2] | 0) * 96 | 0);
          er(Gb, 6988, cb) | 0;
          break;
        }
      case 2:
        {
          Sq(7022, 25, 1, Gb) | 0;
          break;
        }
      case 0:
        {
          Sq(7048, 26, 1, Gb) | 0;
          break;
        }
      default:
        {}
    }
    g[db >> 3] = +g[d + 4344 >> 3];
    er(Gb, 7075, db) | 0;
    g[eb >> 3] = 1.0 / +g[d + 4312 >> 3];
    er(Gb, 7103, eb) | 0;
    g[fb >> 3] = +g[d + 4384 >> 3] / .000011;
    er(Gb, 7131, fb) | 0;
    g[gb >> 3] = +g[d + 4696 >> 3] / 1.3e-08;
    er(Gb, 7159, gb) | 0;
    g[hb >> 3] = +g[d + 4392 >> 3];
    er(Gb, 7187, hb) | 0;
    c[ib >> 2] = c[d + 4508 >> 2];
    er(Gb, 7215, ib) | 0;
    g[jb >> 3] = +g[d + 4352 >> 3];
    er(Gb, 7241, jb) | 0;
    g[kb >> 3] = +g[d + 4688 >> 3] * +g[d + 4936 >> 3];
    er(Gb, 7269, kb) | 0;
    c[lb >> 2] = c[d + 4516 >> 2];
    er(Gb, 7297, lb) | 0;
    c[mb >> 2] = c[d + 4520 >> 2];
    er(Gb, 7323, mb) | 0;
    g[nb >> 3] = +g[d + 4376 >> 3];
    er(Gb, 7349, nb) | 0;
    h = +g[d + 4368 >> 3];
    if (h > 0.0) {
      g[ob >> 3] = h * +g[d + 4920 >> 3];
      er(Gb, 7377, ob) | 0;
    }
    h = +g[d + 4360 >> 3];
    if (h > 0.0) {
      g[pb >> 3] = h * +g[d + 4960 >> 3];
      er(Gb, 7405, pb) | 0;
    }
    if ((c[d + 4496 >> 2] | 0) == 1) {
      Sq(7433, 25, 1, Gb) | 0;
      pb = d + 4928 | 0;
      g[qb >> 3] = +g[d + 4328 >> 3] * +g[pb >> 3];
      er(Gb, 7459, qb) | 0;
      g[rb >> 3] = +g[d + 4336 >> 3] * +g[pb >> 3];
      er(Gb, 7487, rb) | 0;
      g[sb >> 3] = +g[d + 4320 >> 3];
      er(Gb, 7515, sb) | 0;
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(7543, 8, 1, Gb) | 0;
    c[tb >> 2] = c[d + 1208 >> 2];
    er(Gb, 7552, tb) | 0;
    c[ub >> 2] = c[3476 + (c[d + 1228 >> 2] << 2) >> 2];
    er(Gb, 7577, ub) | 0;
    c[vb >> 2] = c[3476 + (c[d + 1220 >> 2] << 2) >> 2];
    er(Gb, 7602, vb) | 0;
    c[wb >> 2] = c[3476 + (c[d + 1232 >> 2] << 2) >> 2];
    er(Gb, 7627, wb) | 0;
    c[xb >> 2] = c[3476 + (c[d + 1224 >> 2] << 2) >> 2];
    er(Gb, 7652, xb) | 0;
    e = d + 1529 | 0;
    if (Kq(e) | 0) {
      c[yb >> 2] = e;
      er(Gb, 7677, yb) | 0;
    }
    c: do switch (c[d + 1236 >> 2] | 0) {
      case 0:
        {
          Sq(7702, 26, 1, Gb) | 0;
          break;
        }
      case 1:
        {
          Sq(7729, 25, 1, Gb) | 0;
          break;
        }
      default:
        {
          e = c[d >> 2] | 0;
          if ((e | 0) < 1) break c;
          l = d + 44 | 0;
          k = 1;
          f = 0;
          while (1) {
            j = c[l >> 2] | 0;
            if ((c[j + (k * 96 | 0) + 80 >> 2] | 0) == 1) {
              if (!((f | 0) % 5 | 0)) Sq(7755, 22, 1, Gb) | 0;
              c[zb >> 2] = j + (k * 96 | 0);
              er(Gb, 7778, zb) | 0;
              f = f + 1 | 0;
              e = c[d >> 2] | 0;
            }
            if ((k | 0) < (e | 0)) k = k + 1 | 0;else break;
          }
        }
    } while (0);
    d: do switch (c[d + 1240 >> 2] | 0) {
      case 0:
        {
          Sq(7782, 26, 1, Gb) | 0;
          break;
        }
      case 1:
        {
          Sq(7809, 25, 1, Gb) | 0;
          break;
        }
      default:
        {
          e = c[$a >> 2] | 0;
          if ((e | 0) < 1) break d;
          l = d + 48 | 0;
          k = 1;
          f = 0;
          while (1) {
            j = c[l >> 2] | 0;
            if ((c[j + (k << 7) + 116 >> 2] | 0) == 1) {
              if (!((f | 0) % 5 | 0)) Sq(7835, 22, 1, Gb) | 0;
              c[Ab >> 2] = j + (k << 7);
              er(Gb, 7778, Ab) | 0;
              f = f + 1 | 0;
              e = c[$a >> 2] | 0;
            }
            if ((k | 0) < (e | 0)) k = k + 1 | 0;else break;
          }
        }
    } while (0);
    e = 0;
    do {
      f = d + 1816 + (e * 88 | 0) | 0;
      do if ((c[d + 1816 + (e * 88 | 0) + 64 >> 2] | 0) == 1) {
        Ab = c[d + 1816 + (e * 88 | 0) + 68 >> 2] | 0;
        c[Bb >> 2] = f;
        c[Bb + 4 >> 2] = Ab;
        er(Gb, 7858, Bb) | 0;
        h = +g[d + 1816 + (e * 88 | 0) + 72 >> 3];
        if (h < 1.0e10) {
          c[Cb >> 2] = f;
          g[Cb + 8 >> 3] = h;
          er(Gb, 7878, Cb) | 0;
        }
        h = +g[d + 1816 + (e * 88 | 0) + 80 >> 3];
        if (!(h > -1.0e10)) break;
        c[Db >> 2] = f;
        g[Db + 8 >> 3] = h;
        er(Gb, 7896, Db) | 0;
      } else {
        c[Eb >> 2] = f;
        er(Gb, 7914, Eb) | 0;
      } while (0);
      e = e + 1 | 0;
    } while ((e | 0) != 14);
    Sq(5271, 2, 1, Gb) | 0;
    Sq(7924, 13, 1, Gb) | 0;
    e = c[d >> 2] | 0;
    if ((e | 0) >= 1) {
      k = d + 44 | 0;
      j = 1;
      while (1) {
        f = c[k >> 2] | 0;
        h = +g[f + (j * 96 | 0) + 32 >> 3];
        do if (!(h == -1.0e10)) {
          i = +g[f + (j * 96 | 0) + 40 >> 3];
          if (i == -1.0e10) break;
          c[Fb >> 2] = f + (j * 96 | 0);
          g[Fb + 8 >> 3] = h;
          g[Fb + 16 >> 3] = i;
          er(Gb, 7938, Fb) | 0;
          e = c[d >> 2] | 0;
        } while (0);
        if ((j | 0) < (e | 0)) j = j + 1 | 0;else break;
      }
    }
    Sq(5271, 2, 1, Gb) | 0;
    Sq(7960, 10, 1, Gb) | 0;
    e = c[$a >> 2] | 0;
    if ((e | 0) >= 1) {
      n = d + 48 | 0;
      m = 1;
      while (1) {
        f = c[n >> 2] | 0;
        l = f + (m << 7) + 112 | 0;
        k = c[l >> 2] | 0;
        do if (k) {
          if ((c[k + 8 >> 2] | 0) <= 0) break;
          j = f + (m << 7) | 0;
          f = 0;
          e = k;
          do {
            Ob = +g[(c[e >> 2] | 0) + (f << 3) >> 3];
            Pb = +g[(c[e + 4 >> 2] | 0) + (f << 3) >> 3];
            c[Hb >> 2] = j;
            g[Hb + 8 >> 3] = Ob;
            g[Hb + 16 >> 3] = Pb;
            er(Gb, 7938, Hb) | 0;
            f = f + 1 | 0;
            e = c[l >> 2] | 0;
          } while ((f | 0) < (c[e + 8 >> 2] | 0));
          e = c[$a >> 2] | 0;
        } while (0);
        if ((m | 0) < (e | 0)) m = m + 1 | 0;else break;
      }
    }
    or(10, Gb);
    jg(d, Gb);
    c[Jb >> 2] = 7976;
    er(Gb, 7971, Jb) | 0;
    $q(Gb);
    Jb = 0;
    Ib = Kb;
    return Jb | 0;
  }
  function lg(a) {
    a = a | 0;
    var b = 0;
    mg(a);
    ng(a + 1200 | 0);
    wr(c[a + 92 >> 2] | 0);
    b = xg(a) | 0;
    if (b) {
      if ((b | 0) > 100) {
        a = b;
        return a | 0;
      }
    } else {
      og(a);
      pg(a);
    }
    b = qg(a) | 0;
    if (b | 0) {
      a = b;
      return a | 0;
    }
    rg(a);
    a = 0;
    return a | 0;
  }
  function mg(b) {
    b = b | 0;
    var d = 0,
      e = 0;
    d = b + 5336 | 0;
    e = d + 79 | 0;
    do {
      a[d >> 0] = 0;
      d = d + 1 | 0;
    } while ((d | 0) < (e | 0));
    d = b + 5416 | 0;
    e = d + 79 | 0;
    do {
      a[d >> 0] = 0;
      d = d + 1 | 0;
    } while ((d | 0) < (e | 0));
    d = b + 5496 | 0;
    e = d + 79 | 0;
    do {
      a[d >> 0] = 0;
      d = d + 1 | 0;
    } while ((d | 0) < (e | 0));
    vt(b + 3664 | 0, 0, 259) | 0;
    vt(b + 5576 | 0, 0, 259) | 0;
    hr(b + 4624 | 0, 8031, 31) | 0;
    hr(b + 4656 | 0, 8040, 31) | 0;
    hr(b + 96 | 0, 8045, 31) | 0;
    c[b + 5076 >> 2] = 0;
    c[b + 1116 >> 2] = 0;
    c[b + 1120 >> 2] = 1;
    c[b + 1124 >> 2] = 0;
    c[b + 1128 >> 2] = 0;
    c[b + 4188 >> 2] = 2;
    c[b + 1216 >> 2] = 0;
    c[b + 4500 >> 2] = 0;
    g[b + 4280 >> 3] = .0005;
    g[b + 4288 >> 3] = .0001;
    g[b + 4352 >> 3] = .001;
    e = b + 4360 | 0;
    c[b + 4496 >> 2] = 0;
    g[b + 4328 >> 3] = 0.0;
    c[e >> 2] = 0;
    c[e + 4 >> 2] = 0;
    c[e + 8 >> 2] = 0;
    c[e + 12 >> 2] = 0;
    g[b + 4336 >> 3] = .1;
    g[b + 4320 >> 3] = .5;
    c[b + 4508 >> 2] = 200;
    c[b + 4512 >> 2] = -1;
    g[b + 4384 >> 3] = -1.0e10;
    g[b + 4392 >> 3] = 1.0;
    c[b + 4492 >> 2] = 0;
    e = b + 4416 | 0;
    c[e >> 2] = 0;
    c[e + 4 >> 2] = 0;
    c[e + 8 >> 2] = 0;
    c[e + 12 >> 2] = 0;
    g[b + 4400 >> 3] = 75.0;
    g[b + 4432 >> 3] = 0.0;
    g[b + 4312 >> 3] = 2.0;
    g[b + 4344 >> 3] = 1.0;
    g[b + 4296 >> 3] = 1.0e-07;
    c[b + 4516 >> 2] = 2;
    c[b + 4520 >> 2] = 10;
    g[b + 4376 >> 3] = 0.0;
    c[b + 4600 >> 2] = 0;
    g[b + 4688 >> 3] = -1.0e10;
    c[b + 4616 >> 2] = 0;
    g[b + 4768 >> 3] = 1.0;
    g[b + 4776 >> 3] = 1.0;
    g[b + 4784 >> 3] = 1.0;
    e = b + 4792 | 0;
    c[e >> 2] = 0;
    c[e + 4 >> 2] = 0;
    c[e + 8 >> 2] = 0;
    c[e + 12 >> 2] = 0;
    c[e + 16 >> 2] = 0;
    c[e + 20 >> 2] = 0;
    g[b + 4696 >> 3] = -1.0e10;
    g[b + 4736 >> 3] = 0.0;
    g[b + 4896 >> 3] = 0.0;
    c[b + 1192 >> 2] = 0;
    c[b + 1144 >> 2] = 0;
    c[b + 1156 >> 2] = 0;
    c[b + 1148 >> 2] = 3600;
    c[b + 1180 >> 2] = 0;
    c[b + 1152 >> 2] = 3600;
    c[b + 1160 >> 2] = 3600;
    c[b + 1188 >> 2] = 0;
    c[b + 1164 >> 2] = 0;
    return;
  }
  function ng(a) {
    a = a | 0;
    var b = 0;
    vt(a + 329 | 0, 0, 259) | 0;
    c[a + 8 >> 2] = 0;
    c[a + 20 >> 2] = 1;
    c[a + 24 >> 2] = 1;
    b = a + 28 | 0;
    c[b >> 2] = 0;
    c[b + 4 >> 2] = 0;
    c[b + 8 >> 2] = 0;
    c[b + 12 >> 2] = 0;
    b = 0;
    do {
      hr(a + 616 + (b * 88 | 0) | 0, c[432 + (b << 2) >> 2] | 0, 31) | 0;
      c[a + 616 + (b * 88 | 0) + 64 >> 2] = 0;
      c[a + 616 + (b * 88 | 0) + 68 >> 2] = 2;
      g[a + 616 + (b * 88 | 0) + 72 >> 3] = 1.0e20;
      g[a + 616 + (b * 88 | 0) + 80 >> 3] = -1.0e20;
      b = b + 1 | 0;
    } while ((b | 0) != 21);
    c[a + 1916 >> 2] = 3;
    c[a + 768 >> 2] = 1;
    c[a + 856 >> 2] = 1;
    c[a + 944 >> 2] = 1;
    c[a + 1032 >> 2] = 1;
    c[a + 1296 >> 2] = 1;
    c[a + 1384 >> 2] = 1;
    c[a + 1472 >> 2] = 1;
    return;
  }
  function og(a) {
    a = a | 0;
    var b = 0.0,
      d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0.0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    q = a + 4600 | 0;
    d = a + 1152 | 0;
    e = c[d >> 2] | 0;
    if ((e | 0) < 1) {
      c[d >> 2] = 3600;
      e = 3600;
    }
    f = a + 1160 | 0;
    d = c[f >> 2] | 0;
    if (!d) {
      c[f >> 2] = e;
      d = e;
    }
    f = a + 1148 | 0;
    i = c[f >> 2] | 0;
    n = (i | 0) < 1;
    i = n ? 3600 : i;
    o = (i | 0) > (e | 0);
    i = o ? e : i;
    p = (i | 0) > (d | 0);
    i = p ? d : i;
    if (n | o | p) c[f >> 2] = i;
    d = a + 1164 | 0;
    e = c[a + 1192 >> 2] | 0;
    if ((c[d >> 2] | 0) > (e | 0)) c[d >> 2] = 0;
    if (!e) c[q >> 2] = 0;
    h = a + 1180 | 0;
    d = c[h >> 2] | 0;
    if (!d) {
      d = (i | 0) / 10 | 0;
      c[h >> 2] = d;
    }
    f = a + 1188 | 0;
    e = c[f >> 2] | 0;
    if (!e) {
      e = (i | 0) / 10 | 0;
      c[f >> 2] = e;
    }
    c[f >> 2] = (e | 0) > (i | 0) ? i : e;
    c[h >> 2] = (d | 0) > (i | 0) ? i : d;
    d = a + 4688 | 0;
    if (+g[d >> 3] == -1.0e10) g[d >> 3] = .01;
    f = ((c[a + 1120 >> 2] | 0) + -5 | 0) >>> 0 < 5;
    c[a + 1116 >> 2] = f & 1;
    e = a + 1124 | 0;
    if (f) {
      if (!(c[e >> 2] | 0)) {
        d = 2;
        k = 19;
      }
    } else {
      d = 0;
      k = 19;
    }
    if ((k | 0) == 19) c[e >> 2] = d;
    j = f ? .09290304 : 1.0;
    d = a + 4384 | 0;
    b = +g[d >> 3];
    do if (!(b == -1.0e10)) {
      if (b > .001) {
        b = b * .000011;
        break;
      } else {
        b = b / j;
        break;
      }
    } else b = .000011; while (0);
    g[d >> 3] = b;
    d = a + 4696 | 0;
    b = +g[d >> 3];
    do if (!(b == -1.0e10)) {
      if (b > .0001) {
        b = b * 1.3e-08;
        break;
      } else {
        b = b / j;
        break;
      }
    } else b = 1.3e-08; while (0);
    g[d >> 3] = b;
    i = a + 4500 | 0;
    g[a + 4304 >> 3] = (c[i >> 2] | 0) == 0 ? 1.852 : 2.0;
    k = a + 12 | 0;
    if ((c[k >> 2] | 0) >= 1) {
      m = a + 48 | 0;
      n = a + 4792 | 0;
      o = a + 4736 | 0;
      p = a + 4800 | 0;
      h = 1;
      while (1) {
        e = c[m >> 2] | 0;
        a: do if ((c[e + (h << 7) + 104 >> 2] | 0) >>> 0 <= 1) {
          d = e + (h << 7) + 72 | 0;
          if (+g[d >> 3] == -1.0e10) g[d >> 3] = +g[n >> 3];
          f = e + (h << 7) + 80 | 0;
          if (+g[f >> 3] == -1.0e10) {
            b = +g[o >> 3];
            if (b == 0.0) {
              g[f >> 3] = +g[p >> 3];
              break;
            }
            l = +g[e + (h << 7) + 56 >> 3];
            do if (l > 0.0) {
              j = +g[e + (h << 7) + 40 >> 3];
              if (!(j > 0.0)) break;
              d = c[i >> 2] | 0;
              if (!d) {
                g[f >> 3] = b / l;
                d = c[i >> 2] | 0;
              }
              if ((d | 0) == 1) {
                j = +v(+(l / j));
                g[f >> 3] = +g[o >> 3] / (j < 0.0 ? -j : j);
                d = c[i >> 2] | 0;
              }
              if ((d | 0) != 2) break a;
              g[f >> 3] = l * +g[o >> 3];
              break a;
            } while (0);
            g[f >> 3] = 0.0;
          }
        } while (0);
        if ((h | 0) < (c[k >> 2] | 0)) h = h + 1 | 0;else break;
      }
    }
    h = a + 4 | 0;
    d = c[h >> 2] | 0;
    if ((d | 0) >= 1) {
      i = a + 52 | 0;
      k = a + 4792 | 0;
      f = 1;
      while (1) {
        e = (c[i >> 2] | 0) + (f * 120 | 0) + 64 | 0;
        if (+g[e >> 3] == -1.0e10) {
          g[e >> 3] = +g[k >> 3];
          d = c[h >> 2] | 0;
        }
        if ((f | 0) < (d | 0)) f = f + 1 | 0;else break;
      }
    }
    p = Th(a, a + 96 | 0) | 0;
    h = a + 1128 | 0;
    c[h >> 2] = p;
    if ((p | 0) > 0 ? (c[a >> 2] | 0) >= 1 : 0) {
      i = a + 44 | 0;
      f = 1;
      while (1) {
        d = c[(c[i >> 2] | 0) + (f * 96 | 0) + 56 >> 2] | 0;
        if (d | 0) do {
          e = d + 8 | 0;
          if (!(c[e >> 2] | 0)) c[e >> 2] = c[h >> 2];
          d = c[d + 16 >> 2] | 0;
        } while ((d | 0) != 0);
        if ((f | 0) < (c[a >> 2] | 0)) f = f + 1 | 0;else break;
      }
    }
    if (c[q >> 2] | 0) return;
    c[a + 2232 >> 2] = 0;
    return;
  }
  function pg(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0.0,
      h = 0.0,
      i = 0,
      j = 0.0,
      k = 0.0,
      l = 0.0,
      m = 0.0;
    i = (c[b + 1116 >> 2] | 0) == 1;
    e = b + 1120 | 0;
    Oq(b + 1936 | 0, c[112 + (c[e >> 2] << 2) >> 2] | 0) | 0;
    d = b + 1848 | 0;
    if (i) {
      a[d >> 0] = 109;
      a[d + 1 >> 0] = 0;
      i = b + 2024 | 0;
      a[i >> 0] = 109;
      a[i + 1 >> 0] = 0;
      i = b + 1124 | 0;
      d = b + 2112 | 0;
      if ((c[i >> 2] | 0) == 2) {
        a[d >> 0] = 109;
        a[d + 1 >> 0] = 0;
      } else {
        a[d >> 0] = 107;
        a[d + 1 >> 0] = 80;
        a[d + 2 >> 0] = 97;
        a[d + 3 >> 0] = 0;
      }
      d = b + 2288 | 0;
      a[d >> 0] = 109;
      a[d + 1 >> 0] = 0;
      d = b + 2376 | 0;
      a[d >> 0] = a[8004] | 0;
      a[d + 1 >> 0] = a[8005] | 0;
      a[d + 2 >> 0] = a[8006] | 0;
      Oq(b + 2464 | 0, c[112 + (c[e >> 2] << 2) >> 2] | 0) | 0;
      d = b + 2552 | 0;
      a[d >> 0] = 109;
      a[d + 1 >> 0] = 47;
      a[d + 2 >> 0] = 115;
      a[d + 3 >> 0] = 0;
      d = b + 2640 | 0;
      a[d >> 0] = a[8007] | 0;
      a[d + 1 >> 0] = a[8008] | 0;
      a[d + 2 >> 0] = a[8009] | 0;
      a[d + 3 >> 0] = a[8010] | 0;
      a[d + 4 >> 0] = a[8011] | 0;
      a[d + 5 >> 0] = a[8012] | 0;
      a[d + 6 >> 0] = a[8013] | 0;
      a[b + 3080 >> 0] = 0;
      d = b + 3168 | 0;
      a[d >> 0] = a[8014] | 0;
      a[d + 1 >> 0] = a[8015] | 0;
      a[d + 2 >> 0] = a[8016] | 0;
      e = c[e >> 2] | 0;
      j = .7457;
      k = .3048;
      l = (e | 0) == 9 ? 2446.6 : (e | 0) == 8 ? 101.94 : (e | 0) == 7 ? 2.4466 : (e | 0) == 6 ? 1699.0 : 28.317;
      m = 304.8;
      h = +g[b + 4392 >> 3] * ((c[i >> 2] | 0) == 2 ? .3048 : 2.9876035);
    } else {
      a[d >> 0] = a[8017] | 0;
      a[d + 1 >> 0] = a[8018] | 0;
      a[d + 2 >> 0] = a[8019] | 0;
      i = b + 2024 | 0;
      a[i >> 0] = a[8017] | 0;
      a[i + 1 >> 0] = a[8018] | 0;
      a[i + 2 >> 0] = a[8019] | 0;
      i = b + 2112 | 0;
      a[i >> 0] = 112;
      a[i + 1 >> 0] = 115;
      a[i + 2 >> 0] = 105;
      a[i + 3 >> 0] = 0;
      i = b + 2288 | 0;
      a[i >> 0] = a[8017] | 0;
      a[i + 1 >> 0] = a[8018] | 0;
      a[i + 2 >> 0] = a[8019] | 0;
      i = b + 2376 | 0;
      a[i >> 0] = a[8020] | 0;
      a[i + 1 >> 0] = a[8021] | 0;
      a[i + 2 >> 0] = a[8022] | 0;
      Oq(b + 2464 | 0, c[112 + (c[e >> 2] << 2) >> 2] | 0) | 0;
      i = b + 2552 | 0;
      a[i >> 0] = 102;
      a[i + 1 >> 0] = 112;
      a[i + 2 >> 0] = 115;
      a[i + 3 >> 0] = 0;
      i = b + 2640 | 0;
      d = i;
      a[d >> 0] = 47;
      a[d + 1 >> 0] = 49;
      a[d + 2 >> 0] = 48;
      a[d + 3 >> 0] = 48;
      i = i + 4 | 0;
      a[i >> 0] = 48;
      a[i + 1 >> 0] = 102;
      a[i + 2 >> 0] = 116;
      a[i + 3 >> 0] = 0;
      a[b + 3080 >> 0] = 0;
      i = b + 3168 | 0;
      a[i >> 0] = a[8023] | 0;
      a[i + 1 >> 0] = a[8024] | 0;
      a[i + 2 >> 0] = a[8025] | 0;
      i = c[e >> 2] | 0;
      j = 1.0;
      k = 1.0;
      l = (i | 0) == 4 ? 1.9837 : (i | 0) == 3 ? .5382 : (i | 0) == 2 ? .64632 : (i | 0) == 1 ? 448.831 : 1.0;
      m = 12.0;
      h = +g[b + 4392 >> 3] * .4333;
    }
    d = b + 2200 | 0;
    a[d >> 0] = 0;
    switch (c[b + 4600 >> 2] | 0) {
      case 1:
        {
          e = b + 4656 | 0;
          hr(d, e, 31) | 0;
          i = b + 2992 | 0;
          hr(i, e, 31) | 0;
          i = (Kq(i) | 0) + (b + 2992) | 0;
          a[i >> 0] = a[8026] | 0;
          a[i + 1 >> 0] = a[8027] | 0;
          a[i + 2 >> 0] = a[8028] | 0;
          a[i + 3 >> 0] = a[8029] | 0;
          a[i + 4 >> 0] = a[8030] | 0;
          f = .03531447540346788;
          break;
        }
      case 2:
        {
          a[d >> 0] = 104;
          a[d + 1 >> 0] = 114;
          a[d + 2 >> 0] = 115;
          a[d + 3 >> 0] = 0;
          f = 1.0;
          break;
        }
      case 3:
        {
          a[d >> 0] = a[8631] | 0;
          a[d + 1 >> 0] = a[8632] | 0;
          a[d + 2 >> 0] = a[8633] | 0;
          a[d + 3 >> 0] = a[8634] | 0;
          a[d + 4 >> 0] = a[8635] | 0;
          a[d + 5 >> 0] = a[8636] | 0;
          a[d + 6 >> 0] = a[8637] | 0;
          f = 1.0;
          break;
        }
      default:
        f = 1.0;
    }
    g[b + 4912 >> 3] = l;
    g[b + 4904 >> 3] = k;
    g[b + 4920 >> 3] = k;
    g[b + 4928 >> 3] = h;
    g[b + 4936 >> 3] = f;
    g[b + 4944 >> 3] = k;
    g[b + 4952 >> 3] = m;
    g[b + 4960 >> 3] = l;
    g[b + 4968 >> 3] = k;
    g[b + 4976 >> 3] = k;
    g[b + 4984 >> 3] = f;
    g[b + 5008 >> 3] = f;
    g[b + 5016 >> 3] = 1.0;
    g[b + 5024 >> 3] = j;
    g[b + 5040 >> 3] = k * (k * k);
    e = (c[b + 1148 >> 2] | 0) < 1800;
    i = e ? 7235949 : 7565928;
    g[b + 5032 >> 3] = e ? .016666666666666666 : 2.777777777777778e-04;
    b = b + 3256 | 0;
    a[b >> 0] = i;
    a[b + 1 >> 0] = i >> 8;
    a[b + 2 >> 0] = i >> 16;
    a[b + 3 >> 0] = i >> 24;
    return;
  }
  function qg(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0.0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0.0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0;
    B = Ib;
    Ib = Ib + 272 | 0;
    z = B + 256 | 0;
    s = B;
    vt(s | 0, 0, 256) | 0;
    u = a + 4 | 0;
    if ((c[u >> 2] | 0) < 1) {
      A = 0;
      Ib = B;
      return A | 0;
    }
    v = a + 52 | 0;
    w = a + 68 | 0;
    x = a + 5080 | 0;
    y = a + 44 | 0;
    b = 0;
    r = 1;
    while (1) {
      q = c[v >> 2] | 0;
      e = q + (r * 120 | 0) + 8 | 0;
      do if (!(+g[e >> 3] == 0.0)) {
        f = +g[q + (r * 120 | 0) + 32 >> 3];
        h = +g[q + (r * 120 | 0) + 24 >> 3];
        if (!(f > h) ? (n = +g[q + (r * 120 | 0) + 16 >> 3], !(n > h | f < n)) : 0) d = 0;else d = 1;
        i = c[q + (r * 120 | 0) + 92 >> 2] | 0;
        if ((i | 0) > 0) {
          j = c[w >> 2] | 0;
          k = j + (i * 56 | 0) + 40 | 0;
          l = c[k >> 2] | 0;
          m = l + -1 | 0;
          n = +g[q + (r * 120 | 0) + 16 >> 3];
          o = j + (i * 56 | 0) + 48 | 0;
          p = c[o >> 2] | 0;
          if (!(n < +g[p >> 3]) ? !(h > +g[p + (m << 3) >> 3]) : 0) {
            A = j + (i * 56 | 0) + 52 | 0;
            n = +bi(l, p, c[A >> 2] | 0, n);
            g[q + (r * 120 | 0) + 40 >> 3] = n;
            n = +bi(c[k >> 2] | 0, c[o >> 2] | 0, c[A >> 2] | 0, h);
            g[q + (r * 120 | 0) + 48 >> 3] = n;
            n = +bi(c[k >> 2] | 0, c[o >> 2] | 0, c[A >> 2] | 0, f);
            g[q + (r * 120 | 0) + 56 >> 3] = n;
            p = c[A >> 2] | 0;
            A = c[o >> 2] | 0;
            n = +t(+((+g[p + (m << 3) >> 3] - +g[p >> 3]) / (+g[A + (m << 3) >> 3] - +g[A >> 3]) * 4.0 / 3.141592653589793));
            g[e >> 3] = n;
            A = 11;
          }
        } else A = 11;
        if ((A | 0) == 11 ? (A = 0, (d | 0) == 0) : 0) break;
        p = ci(225, s) | 0;
        b = (c[y >> 2] | 0) + ((c[q + (r * 120 | 0) >> 2] | 0) * 96 | 0) | 0;
        c[z >> 2] = p;
        c[z + 4 >> 2] = b;
        bq(x, 7982, z);
        Ti(a, x);
        b = 200;
      } while (0);
      if ((r | 0) < (c[u >> 2] | 0)) r = r + 1 | 0;else break;
    }
    Ib = B;
    return b | 0;
  }
  function Hj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 16 | 0;
    m = n + 8 | 0;
    k = n;
    l = c[a + 76 >> 2] | 0;
    j = c[l + (d * 56 | 0) + 40 >> 2] | 0;
    Sq(14779, 6, 1, b) | 0;
    if (j | 0 ? (Ij(j, b, a), i = c[j + 32 >> 2] | 0, i | 0) : 0) do {
      c[k >> 2] = c[544 + (c[i >> 2] << 2) >> 2];
      er(b, 14786, k) | 0;
      Ij(i, b, a);
      i = c[i + 32 >> 2] | 0;
    } while ((i | 0) != 0);
    i = c[l + (d * 56 | 0) + 44 >> 2] | 0;
    if (i | 0 ? (Sq(14792, 6, 1, b) | 0, Jj(i, b, a), h = c[i + 16 >> 2] | 0, h | 0) : 0) do {
      Sq(14799, 6, 1, b) | 0;
      Jj(h, b, a);
      h = c[h + 16 >> 2] | 0;
    } while ((h | 0) != 0);
    h = c[l + (d * 56 | 0) + 48 >> 2] | 0;
    if (h | 0 ? (Sq(14806, 6, 1, b) | 0, Jj(h, b, a), f = c[h + 16 >> 2] | 0, f | 0) : 0) do {
      Sq(14799, 6, 1, b) | 0;
      Jj(f, b, a);
      f = c[f + 16 >> 2] | 0;
    } while ((f | 0) != 0);
    e = +g[l + (d * 56 | 0) + 32 >> 3];
    if (!(e > 0.0)) {
      Ib = n;
      return;
    }
    g[m >> 3] = e;
    er(b, 14813, m) | 0;
    Ib = n;
    return;
  }
  function Ij(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    m = Ib;
    Ib = Ib + 128 | 0;
    l = m + 96 | 0;
    i = m + 88 | 0;
    j = m + 64 | 0;
    k = m + 32 | 0;
    f = m;
    switch (c[b + 4 >> 2] | 0) {
      case 6:
        {
          n = e + 44 | 0;
          e = b + 8 | 0;
          Kj(6, c[(c[n >> 2] | 0) + ((c[e >> 2] | 0) * 96 | 0) + 88 >> 2] | 0, j);
          Oq(k, (c[n >> 2] | 0) + ((c[e >> 2] | 0) * 96 | 0) | 0) | 0;
          break;
        }
      case 7:
        {
          e = e + 48 | 0;
          n = b + 8 | 0;
          Kj(7, c[(c[e >> 2] | 0) + (c[n >> 2] << 7) + 104 >> 2] | 0, j);
          Oq(k, (c[e >> 2] | 0) + (c[n >> 2] << 7) | 0) | 0;
          break;
        }
      default:
        {
          a[j >> 0] = a[14364] | 0;
          a[j + 1 >> 0] = a[14365] | 0;
          a[j + 2 >> 0] = a[14366] | 0;
          a[j + 3 >> 0] = a[14367] | 0;
          a[j + 4 >> 0] = a[14368] | 0;
          a[j + 5 >> 0] = a[14369] | 0;
          a[j + 6 >> 0] = a[14370] | 0;
          a[k >> 0] = 0;
        }
    }
    h = +g[b + 24 >> 3];
    do if (!(h == -1.0e10)) {
      e = b + 12 | 0;
      if (((c[e >> 2] | 0) + -9 | 0) >>> 0 < 4) {
        Lj(h, f);
        break;
      } else {
        g[i >> 3] = h;
        bq(f, 14826, i);
        break;
      }
    } else {
      Oq(f, c[736 + (c[b + 20 >> 2] << 2) >> 2] | 0) | 0;
      e = b + 12 | 0;
    } while (0);
    i = c[576 + (c[e >> 2] << 2) >> 2] | 0;
    n = c[688 + (c[b + 16 >> 2] << 2) >> 2] | 0;
    c[l >> 2] = j;
    c[l + 4 >> 2] = k;
    c[l + 8 >> 2] = i;
    c[l + 12 >> 2] = n;
    c[l + 16 >> 2] = f;
    er(d, 14885, l) | 0;
    Ib = m;
    return;
  }
  function Jj(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 160 | 0;
    m = n + 136 | 0;
    i = n + 128 | 0;
    j = n + 96 | 0;
    k = n + 64 | 0;
    l = n + 32 | 0;
    f = n;
    e = e + 48 | 0;
    Kj(7, c[(c[e >> 2] | 0) + (c[b >> 2] << 7) + 104 >> 2] | 0, k);
    Oq(j, (c[e >> 2] | 0) + (c[b >> 2] << 7) | 0) | 0;
    h = +g[b + 8 >> 3];
    if (h == -1.0e10) {
      a[l >> 0] = a[14267] | 0;
      a[l + 1 >> 0] = a[14268] | 0;
      a[l + 2 >> 0] = a[14269] | 0;
      a[l + 3 >> 0] = a[14270] | 0;
      a[l + 4 >> 0] = a[14271] | 0;
      a[l + 5 >> 0] = a[14272] | 0;
      a[l + 6 >> 0] = a[14273] | 0;
      Oq(f, c[736 + (c[b + 4 >> 2] << 2) >> 2] | 0) | 0;
    } else {
      b = l;
      c[b >> 2] = 1414808915;
      c[b + 4 >> 2] = 4673097;
      g[i >> 3] = h;
      bq(f, 14826, i);
    }
    c[m >> 2] = k;
    c[m + 4 >> 2] = j;
    c[m + 8 >> 2] = l;
    c[m + 12 >> 2] = f;
    er(d, 14831, m) | 0;
    Ib = n;
    return;
  }
  function Kj(b, c, d) {
    b = b | 0;
    c = c | 0;
    d = d | 0;
    switch (b | 0) {
      case 6:
        switch (c | 0) {
          case 0:
            {
              b = 14845;
              c = d + 9 | 0;
              do {
                a[d >> 0] = a[b >> 0] | 0;
                d = d + 1 | 0;
                b = b + 1 | 0;
              } while ((d | 0) < (c | 0));
              return;
            }
          case 1:
            {
              b = 14854;
              c = d + 10 | 0;
              do {
                a[d >> 0] = a[b >> 0] | 0;
                d = d + 1 | 0;
                b = b + 1 | 0;
              } while ((d | 0) < (c | 0));
              return;
            }
          case 2:
            {
              a[d >> 0] = a[14864] | 0;
              a[d + 1 >> 0] = a[14865] | 0;
              a[d + 2 >> 0] = a[14866] | 0;
              a[d + 3 >> 0] = a[14867] | 0;
              a[d + 4 >> 0] = a[14868] | 0;
              return;
            }
          default:
            {
              a[d >> 0] = a[14354] | 0;
              a[d + 1 >> 0] = a[14355] | 0;
              a[d + 2 >> 0] = a[14356] | 0;
              a[d + 3 >> 0] = a[14357] | 0;
              a[d + 4 >> 0] = a[14358] | 0;
              return;
            }
        }
      case 7:
        switch (c | 0) {
          case 1:
          case 0:
            {
              a[d >> 0] = a[14869] | 0;
              a[d + 1 >> 0] = a[14870] | 0;
              a[d + 2 >> 0] = a[14871] | 0;
              a[d + 3 >> 0] = a[14872] | 0;
              a[d + 4 >> 0] = a[14873] | 0;
              return;
            }
          case 2:
            {
              a[d >> 0] = a[14874] | 0;
              a[d + 1 >> 0] = a[14875] | 0;
              a[d + 2 >> 0] = a[14876] | 0;
              a[d + 3 >> 0] = a[14877] | 0;
              a[d + 4 >> 0] = a[14878] | 0;
              return;
            }
          default:
            {
              a[d >> 0] = a[14879] | 0;
              a[d + 1 >> 0] = a[14880] | 0;
              a[d + 2 >> 0] = a[14881] | 0;
              a[d + 3 >> 0] = a[14882] | 0;
              a[d + 4 >> 0] = a[14883] | 0;
              a[d + 5 >> 0] = a[14884] | 0;
              return;
            }
        }
      default:
        {
          a[d >> 0] = a[14364] | 0;
          a[d + 1 >> 0] = a[14365] | 0;
          a[d + 2 >> 0] = a[14366] | 0;
          a[d + 3 >> 0] = a[14367] | 0;
          a[d + 4 >> 0] = a[14368] | 0;
          a[d + 5 >> 0] = a[14369] | 0;
          a[d + 6 >> 0] = a[14370] | 0;
          return;
        }
    }
  }
  function Lj(a, b) {
    a = +a;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      h = 0,
      i = 0;
    h = Ib;
    Ib = Ib + 32 | 0;
    f = h + 8 | 0;
    e = h;
    i = ~~a;
    d = (i | 0) / 3600 | 0;
    if ((i | 0) > 608399) {
      g[e >> 3] = a / 3600.0;
      bq(b, 14826, e);
      Ib = h;
      return;
    } else {
      a = a - +(d * 3600 | 0);
      i = ~~(a / 60.0);
      c[f >> 2] = d;
      c[f + 4 >> 2] = i;
      c[f + 8 >> 2] = ~~(a - +(i * 60 | 0));
      bq(b, 14900, f);
      Ib = h;
      return;
    }
  }
  function Mj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    c[a + 4240 >> 2] = 1 - b + (c[a + 1172 >> 2] | 0);
    f = a + 4228 | 0;
    c[f >> 2] = 0;
    g = a + 32 | 0;
    if ((c[g >> 2] | 0) < 1) {
      a = 0;
      g = 0;
      Qj(g);
      return a | 0;
    }
    e = a + 76 | 0;
    d = 1;
    while (1) {
      h = (Nj(a, d) | 0) == 1;
      b = c[e >> 2] | 0;
      if (!h) {
        b = c[b + (d * 56 | 0) + 48 >> 2] | 0;
        if (b | 0) Oj(a, d, b);
      } else Oj(a, d, c[b + (d * 56 | 0) + 44 >> 2] | 0);
      if ((d | 0) < (c[g >> 2] | 0)) d = d + 1 | 0;else break;
    }
    if (!(c[f >> 2] | 0)) {
      h = 0;
      a = 0;
      Qj(a);
      return h | 0;
    }
    h = Pj(a) | 0;
    a = c[f >> 2] | 0;
    Qj(a);
    return h | 0;
  }
  function Nj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    d = c[(c[a + 76 >> 2] | 0) + (b * 56 | 0) + 40 >> 2] | 0;
    if (!d) {
      f = 1;
      return f | 0;
    }
    b = 1;
    while (1) {
      e = (b | 0) == 0;
      if ((c[d >> 2] | 0) == 3) {
        if (e) f = 6;
      } else if (e) {
        b = 0;
        f = 8;
        break;
      } else f = 6;
      if ((f | 0) == 6) {
        f = 0;
        b = Sj(a, d) | 0;
      }
      d = c[d + 32 >> 2] | 0;
      if (!d) {
        f = 8;
        break;
      }
    }
    if ((f | 0) == 8) return b | 0;
    return 0;
  }
  function Oj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    if (!d) return;
    e = a + 4228 | 0;
    do {
      if ((Rj(a, b, d) | 0) == 0 ? (f = et(12) | 0, f | 0) : 0) {
        c[f + 4 >> 2] = d;
        c[f >> 2] = b;
        c[f + 8 >> 2] = c[e >> 2];
        c[e >> 2] = f;
      }
      d = c[d + 16 >> 2] | 0;
    } while ((d | 0) != 0);
    return;
  }
  function Pj(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0.0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    d = c[a + 4228 >> 2] | 0;
    if (!d) {
      t = 0;
      return t | 0;
    }
    m = a + 4536 | 0;
    n = a + 4276 | 0;
    o = a + 1228 | 0;
    p = a + 76 | 0;
    q = a + 48 | 0;
    r = a + 4928 | 0;
    s = a + 4960 | 0;
    b = 0;
    do {
      h = c[d + 4 >> 2] | 0;
      l = c[h >> 2] | 0;
      i = (c[m >> 2] | 0) + (l << 2) | 0;
      f = c[i >> 2] | 0;
      j = (c[n >> 2] | 0) + (l << 3) | 0;
      k = +g[j >> 3];
      e = +g[h + 8 >> 3];
      h = c[h + 4 >> 2] | 0;
      do if (!((f | 0) < 3 & (h | 0) == 1)) {
        if ((f | 0) > 2 & (h | 0) == 2) {
          Rf(a, l, 0, i, j);
          t = 13;
          break;
        }
        if (e != -1.0e10) {
          switch (c[(c[q >> 2] | 0) + (l << 7) + 104 >> 2] | 0) {
            case 5:
            case 4:
            case 3:
              {
                f = r;
                t = 10;
                break;
              }
            case 6:
              {
                f = s;
                t = 10;
                break;
              }
            default:
              {}
          }
          if ((t | 0) == 10) {
            t = 0;
            e = e / +g[f >> 3];
          }
          k = e - k;
          if ((k < 0.0 ? -k : k) > .001) {
            Ff(a, l, e, i, j);
            t = 13;
          }
        }
      } else {
        Rf(a, l, 1, i, j);
        t = 13;
      } while (0);
      if ((t | 0) == 13) {
        t = 0;
        b = b + 1 | 0;
        if (c[o >> 2] | 0) kj(a, l, (c[p >> 2] | 0) + ((c[d >> 2] | 0) * 56 | 0) | 0);
      }
      d = c[d + 8 >> 2] | 0;
    } while ((d | 0) != 0);
    return b | 0;
  }
  function Qj(a) {
    a = a | 0;
    var b = 0;
    if (!a) return;
    do {
      b = a;
      a = c[a + 8 >> 2] | 0;
      ft(b);
    } while ((a | 0) != 0);
    return;
  }
  function Rj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0,
      i = 0;
    h = c[d >> 2] | 0;
    e = c[a + 4228 >> 2] | 0;
    if (!e) {
      i = 0;
      return i | 0;
    }
    while (1) {
      f = e + 4 | 0;
      if ((h | 0) == (c[c[f >> 2] >> 2] | 0)) break;
      e = c[e + 8 >> 2] | 0;
      if (!e) {
        e = 0;
        i = 7;
        break;
      }
    }
    if ((i | 0) == 7) return e | 0;
    i = c[a + 76 >> 2] | 0;
    if (!(+g[i + (b * 56 | 0) + 32 >> 3] > +g[i + ((c[e >> 2] | 0) * 56 | 0) + 32 >> 3])) {
      i = 1;
      return i | 0;
    }
    c[f >> 2] = d;
    c[e >> 2] = b;
    i = 1;
    return i | 0;
  }
  function Sj(a, b) {
    a = a | 0;
    b = b | 0;
    if (((c[b + 12 >> 2] | 0) + -9 | 0) >>> 0 < 2) {
      b = Tj(a, b) | 0;
      return b | 0;
    }
    if ((c[b + 20 >> 2] | 0) > 0) {
      b = Uj(a, b) | 0;
      return b | 0;
    } else {
      b = Vj(a, b) | 0;
      return b | 0;
    }
    return 0;
  }
  function Tj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    switch (c[b + 12 >> 2] | 0) {
      case 9:
        {
          e = c[a + 1172 >> 2] | 0;
          a = c[a + 4240 >> 2] | 0;
          break;
        }
      case 10:
        {
          d = c[a + 1144 >> 2] | 0;
          e = ((c[a + 1172 >> 2] | 0) + d | 0) % 86400 | 0;
          a = (d + (c[a + 4240 >> 2] | 0) | 0) % 86400 | 0;
          break;
        }
      default:
        {
          e = 0;
          return e | 0;
        }
    }
    d = ~~+g[b + 24 >> 3];
    b = c[b + 16 >> 2] | 0;
    switch (b | 0) {
      case 4:
        {
          if ((e | 0) >= (d | 0)) {
            e = 0;
            return e | 0;
          }
          break;
        }
      case 2:
        {
          if ((e | 0) > (d | 0)) {
            e = 0;
            return e | 0;
          }
          break;
        }
      case 5:
        {
          if ((e | 0) <= (d | 0)) {
            e = 0;
            return e | 0;
          }
          break;
        }
      case 3:
        {
          if ((e | 0) < (d | 0)) {
            e = 0;
            return e | 0;
          }
          break;
        }
      case 1:
      case 0:
        {
          f = (a | 0) > (d | 0);
          d = (e | 0) < (d | 0);
          a = (e | 0) < (a | 0) ? f & d : f | d;
          if ((b | 0) == 0 & a) {
            f = 0;
            return f | 0;
          }
          if ((b | 0) == 1 & (a ^ 1)) {
            f = 0;
            return f | 0;
          }
          break;
        }
      default:
        {}
    }
    f = 1;
    return f | 0;
  }
  function Uj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = c[b + 20 >> 2] | 0;
    do if ((d + -1 | 0) >>> 0 < 3) {
      e = c[(c[a + 4536 >> 2] | 0) + (c[b + 8 >> 2] << 2) >> 2] << 24;
      a = c[b + 16 >> 2] | 0;
      if ((((e | 0) < 50331648 ? 2 : (e | 0) == 67108864 ? 3 : 1) | 0) == (d | 0)) {
        if (!a) a = 1;else break;
        return a | 0;
      } else {
        if ((a | 0) == 1) a = 1;else break;
        return a | 0;
      }
    } while (0);
    e = 0;
    return e | 0;
  }
  function Vj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    e = a + 4256 | 0;
    f = c[a + 8 >> 2] | 0;
    i = c[a + 4260 >> 2] | 0;
    h = c[a + 44 >> 2] | 0;
    k = c[a + 52 >> 2] | 0;
    j = c[b + 8 >> 2] | 0;
    a: do switch (c[b + 12 >> 2] | 0) {
      case 0:
        if ((c[b + 4 >> 2] | 0) == 8) {
          d = +g[a + 4408 >> 3] * +g[a + 4912 >> 3];
          break a;
        } else {
          d = +g[i + (j << 3) >> 3] * +g[a + 4912 >> 3];
          break a;
        }
      case 2:
      case 1:
        {
          d = +g[(c[e >> 2] | 0) + (j << 3) >> 3] * +g[a + 4920 >> 3];
          break;
        }
      case 4:
        {
          d = (+g[(c[e >> 2] | 0) + (j << 3) >> 3] - +g[h + (j * 96 | 0) + 48 >> 3]) * +g[a + 4928 >> 3];
          break;
        }
      case 3:
        {
          d = (+g[(c[e >> 2] | 0) + (j << 3) >> 3] - +g[h + (j * 96 | 0) + 48 >> 3]) * +g[a + 4920 >> 3];
          break;
        }
      case 5:
        {
          d = +g[(c[a + 4272 >> 2] | 0) + (j << 3) >> 3];
          d = +g[a + 4960 >> 3] * (d < 0.0 ? -d : d);
          break;
        }
      case 7:
        {
          d = +g[(c[a + 4276 >> 2] | 0) + (j << 3) >> 3];
          if (d == -1.0e10) {
            b = 0;
            return b | 0;
          }
          switch (c[(c[a + 48 >> 2] | 0) + (j << 7) + 104 >> 2] | 0) {
            case 5:
            case 4:
            case 3:
              {
                d = d * +g[a + 4928 >> 3];
                break a;
              }
            case 6:
              {
                d = d * +g[a + 4960 >> 3];
                break a;
              }
            default:
              break a;
          }
        }
      case 11:
        {
          if ((j | 0) <= (f | 0)) {
            b = 0;
            return b | 0;
          }
          e = j - f | 0;
          if (+g[k + (e * 120 | 0) + 8 >> 3] == 0.0) {
            b = 0;
            return b | 0;
          }
          d = +g[i + (j << 3) >> 3];
          if (!(d <= 1.0e-06)) {
            d = (+g[k + (e * 120 | 0) + 48 >> 3] - +g[k + (e * 120 | 0) + 72 >> 3]) / d;
            break a;
          } else {
            b = 0;
            return b | 0;
          }
        }
      case 12:
        {
          if ((j | 0) <= (f | 0)) {
            b = 0;
            return b | 0;
          }
          e = j - f | 0;
          if (+g[k + (e * 120 | 0) + 8 >> 3] == 0.0) {
            b = 0;
            return b | 0;
          }
          d = +g[i + (j << 3) >> 3];
          if (!(d >= -1.0e-06)) {
            d = (+g[k + (e * 120 | 0) + 40 >> 3] - +g[k + (e * 120 | 0) + 72 >> 3]) / d;
            break a;
          } else {
            b = 0;
            return b | 0;
          }
        }
      default:
        {
          b = 0;
          return b | 0;
        }
    } while (0);
    switch (c[b + 16 >> 2] | 0) {
      case 0:
        {
          d = d - +g[b + 24 >> 3];
          if ((d < 0.0 ? -d : d) > .001) {
            b = 0;
            return b | 0;
          }
          break;
        }
      case 1:
        {
          d = d - +g[b + 24 >> 3];
          if ((d < 0.0 ? -d : d) < .001) {
            b = 0;
            return b | 0;
          }
          break;
        }
      case 4:
        {
          if (d > +g[b + 24 >> 3] + .001) {
            b = 0;
            return b | 0;
          }
          break;
        }
      case 2:
        {
          if (d > +g[b + 24 >> 3] + -.001) {
            b = 0;
            return b | 0;
          }
          break;
        }
      case 5:
        {
          if (d < +g[b + 24 >> 3] + -.001) {
            b = 0;
            return b | 0;
          }
          break;
        }
      case 3:
        {
          if (d < +g[b + 24 >> 3] + .001) {
            b = 0;
            return b | 0;
          }
          break;
        }
      default:
        {}
    }
    b = 1;
    return b | 0;
  }
  function Wj(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    e = a + 4544 | 0;
    d = a + 12 | 0;
    b = Xj(e, c[a >> 2] | 0, c[d >> 2] | 0) | 0;
    if (b | 0) {
      a = b;
      return a | 0;
    }
    b = Yj(a, e) | 0;
    if (b | 0) {
      a = b;
      return a | 0;
    }
    b = Zj(a) | 0;
    c[a + 4560 >> 2] = c[d >> 2];
    if ((b | 0) <= 100) {
      b = _j(a) | 0;
      if ((b | 0) <= 100) {
        b = a + 8 | 0;
        d = $j(a, c[b >> 2] | 0) | 0;
        Eh(a);
        if ((d | 0) > 100) {
          a = d;
          return a | 0;
        }
        b = ak(e, c[b >> 2] | 0) | 0;
        if ((b | 0) > 100) {
          a = b;
          return a | 0;
        }
        b = bk(e, c[a >> 2] | 0) | 0;
        if ((b | 0) > 100) {
          a = b;
          return a | 0;
        }
        a = Lh(a) | 0;
        return a | 0;
      }
    }
    Eh(a);
    a = b;
    return a | 0;
  }
  function Xj(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    c[a + 48 >> 2] = 0;
    c[a + 52 >> 2] = 0;
    b = b + 1 | 0;
    c[a >> 2] = 0;
    c[a + 4 >> 2] = 0;
    c[a + 8 >> 2] = 0;
    c[a + 12 >> 2] = 0;
    e = gt(b, 4) | 0;
    f = a + 20 | 0;
    c[f >> 2] = e;
    b = gt(b, 4) | 0;
    e = a + 24 | 0;
    c[e >> 2] = b;
    b = gt(d + 1 | 0, 4) | 0;
    c[a + 28 >> 2] = b;
    if (!(c[f >> 2] | 0)) {
      f = 101;
      return f | 0;
    }
    if (!(c[e >> 2] | 0)) {
      f = 101;
      return f | 0;
    }
    f = (b | 0) == 0 ? 101 : 0;
    return f | 0;
  }
  function Yj(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    Eh(a);
    d = gt((c[a >> 2] | 0) + 1 | 0, 4) | 0;
    k = a + 88 | 0;
    c[k >> 2] = d;
    if (!d) {
      a = 101;
      return a | 0;
    }
    l = a + 12 | 0;
    a: do if ((c[l >> 2] | 0) >= 1) {
      j = a + 48 | 0;
      e = c[j >> 2] | 0;
      g = c[e + 160 >> 2] | 0;
      e = c[e + 164 >> 2] | 0;
      d = hk(d, b, g, e, 1) | 0;
      f = et(12) | 0;
      if (!f) {
        a = 101;
        return a | 0;
      }
      i = 1;
      h = e;
      while (1) {
        e = (d | 0) != 0;
        c[f >> 2] = e ? 0 : h;
        c[f + 4 >> 2] = i;
        c[f + 8 >> 2] = c[(c[k >> 2] | 0) + (g << 2) >> 2];
        c[(c[k >> 2] | 0) + (g << 2) >> 2] = f;
        d = et(12) | 0;
        if (!d) {
          d = 101;
          e = 9;
          break;
        }
        c[d >> 2] = e ? 0 : g;
        c[d + 4 >> 2] = i;
        c[d + 8 >> 2] = c[(c[k >> 2] | 0) + (h << 2) >> 2];
        c[(c[k >> 2] | 0) + (h << 2) >> 2] = d;
        if ((i | 0) >= (c[l >> 2] | 0)) break a;
        i = i + 1 | 0;
        h = c[j >> 2] | 0;
        g = c[h + (i << 7) + 32 >> 2] | 0;
        h = c[h + (i << 7) + 36 >> 2] | 0;
        d = hk(c[k >> 2] | 0, b, g, h, i) | 0;
        f = et(12) | 0;
        if (!f) {
          d = 101;
          e = 9;
          break;
        }
      }
      if ((e | 0) == 9) return d | 0;
    } while (0);
    ik(a);
    a = 0;
    return a | 0;
  }
  function Zj(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    t = Ib;
    Ib = Ib + 16 | 0;
    p = t + 12 | 0;
    q = t + 8 | 0;
    r = t + 4 | 0;
    s = t;
    c[q >> 2] = -1;
    c[r >> 2] = 0;
    c[s >> 2] = 2147483647;
    if ((c[a >> 2] | 0) >= 1) {
      d = a + 4568 | 0;
      e = a + 4564 | 0;
      b = 1;
      while (1) {
        c[(c[d >> 2] | 0) + (b << 2) >> 2] = b;
        c[(c[e >> 2] | 0) + (b << 2) >> 2] = b;
        if ((b | 0) < (c[a >> 2] | 0)) b = b + 1 | 0;else break;
      }
    }
    g = c[a + 8 >> 2] | 0;
    c[p >> 2] = g;
    h = gt(c[a + 12 >> 2] << 1 | 1, 4) | 0;
    i = gt(g + 2 | 0, 4) | 0;
    j = g + 1 | 0;
    k = gt(j, 4) | 0;
    l = gt(j, 4) | 0;
    m = gt(j, 4) | 0;
    n = gt(j, 4) | 0;
    if (!((h | 0) != 0 & (i | 0) != 0 & (k | 0) != 0 & (l | 0) != 0 & (m | 0) != 0 & (n | 0) != 0)) {
      s = 101;
      ft(h);
      ft(i);
      ft(k);
      ft(l);
      ft(m);
      ft(n);
      Ib = t;
      return s | 0;
    }
    c[i + 4 >> 2] = 1;
    if ((g | 0) >= 1) {
      o = a + 88 | 0;
      b = 1;
      f = 1;
      do {
        d = c[(c[o >> 2] | 0) + (f << 2) >> 2] | 0;
        if (d) do {
          e = c[d >> 2] | 0;
          if (!((e | 0) < 1 | (e | 0) > (g | 0))) {
            c[h + (b << 2) >> 2] = e;
            b = b + 1 | 0;
          }
          d = c[d + 8 >> 2] | 0;
        } while ((d | 0) != 0);
        f = f + 1 | 0;
        c[i + (f << 2) >> 2] = b;
      } while ((f | 0) != (j | 0));
    }
    lk(p, i, h, c[a + 4568 >> 2] | 0, c[a + 4564 >> 2] | 0, q, k, l, m, n, s, r);
    s = 0;
    ft(h);
    ft(i);
    ft(k);
    ft(l);
    ft(m);
    ft(n);
    Ib = t;
    return s | 0;
  }
  function _j(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    f = gt((c[a >> 2] | 0) + 1 | 0, 4) | 0;
    g = a + 4588 | 0;
    c[g >> 2] = f;
    if (!f) {
      g = 101;
      return g | 0;
    }
    f = a + 8 | 0;
    a: do if ((c[f >> 2] | 0) >= 1) {
      e = a + 88 | 0;
      d = 1;
      while (1) {
        b = c[(c[e >> 2] | 0) + (d << 2) >> 2] | 0;
        if (b | 0) do {
          if ((c[b >> 2] | 0) > 0) {
            h = (c[g >> 2] | 0) + (d << 2) | 0;
            c[h >> 2] = (c[h >> 2] | 0) + 1;
          }
          b = c[b + 8 >> 2] | 0;
        } while ((b | 0) != 0);
        b = c[f >> 2] | 0;
        if ((d | 0) < (b | 0)) d = d + 1 | 0;else break;
      }
      e = a + 4564 | 0;
      if ((b | 0) >= 1) {
        b = 1;
        while (1) {
          d = c[(c[e >> 2] | 0) + (b << 2) >> 2] | 0;
          if (!(dk(a, d) | 0)) {
            b = 101;
            break a;
          }
          c[(c[g >> 2] | 0) + (d << 2) >> 2] = 0;
          if ((b | 0) < (c[f >> 2] | 0)) b = b + 1 | 0;else {
            b = 0;
            break;
          }
        }
      } else b = 0;
    } else b = 0; while (0);
    ft(c[g >> 2] | 0);
    h = b;
    return h | 0;
  }
  function $j(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    d = gt(b + 2 | 0, 4) | 0;
    m = a + 4576 | 0;
    c[m >> 2] = d;
    d = a + 4560 | 0;
    k = gt((c[d >> 2] | 0) + 2 | 0, 4) | 0;
    n = a + 4580 | 0;
    c[n >> 2] = k;
    d = gt((c[d >> 2] | 0) + 2 | 0, 4) | 0;
    k = a + 4584 | 0;
    c[k >> 2] = d;
    e = c[m >> 2] | 0;
    if (!e) {
      n = 101;
      return n | 0;
    }
    if ((c[n >> 2] | 0) == 0 | (d | 0) == 0) {
      n = 101;
      return n | 0;
    }
    c[e + 4 >> 2] = 1;
    if ((b | 0) < 1) {
      n = 0;
      return n | 0;
    }
    i = a + 4564 | 0;
    j = a + 88 | 0;
    h = a + 4568 | 0;
    d = 0;
    g = 1;
    do {
      e = c[(c[j >> 2] | 0) + (c[(c[i >> 2] | 0) + (g << 2) >> 2] << 2) >> 2] | 0;
      if (!e) e = 0;else {
        a = 0;
        do {
          f = c[e >> 2] | 0;
          if ((f | 0) != 0 ? (l = c[(c[h >> 2] | 0) + (f << 2) >> 2] | 0, !((l | 0) <= (g | 0) | (l | 0) > (b | 0))) : 0) {
            f = c[e + 4 >> 2] | 0;
            d = d + 1 | 0;
            c[(c[n >> 2] | 0) + (d << 2) >> 2] = l;
            c[(c[k >> 2] | 0) + (d << 2) >> 2] = f;
            a = a + 1 | 0;
          }
          e = c[e + 8 >> 2] | 0;
        } while ((e | 0) != 0);
        e = a;
      }
      a = c[m >> 2] | 0;
      f = g;
      g = g + 1 | 0;
      c[a + (g << 2) >> 2] = (c[a + (f << 2) >> 2] | 0) + e;
    } while ((f | 0) != (b | 0));
    d = 0;
    return d | 0;
  }
  function ak(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    l = c[a + 40 >> 2] | 0;
    m = c[a + 32 >> 2] | 0;
    n = c[a + 36 >> 2] | 0;
    j = b + 2 | 0;
    o = gt(j, 4) | 0;
    i = a + 16 | 0;
    h = gt((c[i >> 2] | 0) + 2 | 0, 4) | 0;
    i = gt((c[i >> 2] | 0) + 2 | 0, 4) | 0;
    j = gt(j, 4) | 0;
    g = (o | 0) == 0 | (h | 0) == 0 | (i | 0) == 0 | (j | 0) == 0;
    k = g ? 101 : 0;
    if (g) {
      ft(o);
      ft(h);
      ft(i);
      ft(j);
      return k | 0;
    }
    if ((b | 0) < 1) c[o + 4 >> 2] = 1;else {
      vt(j + 4 | 0, 0, b << 2 | 0) | 0;
      f = 1;
      d = c[m + 4 >> 2] | 0;
      while (1) {
        g = f;
        f = f + 1 | 0;
        e = m + (f << 2) | 0;
        a = c[e >> 2] | 0;
        if ((d | 0) < (a | 0)) do {
          a = j + (c[n + (d << 2) >> 2] << 2) | 0;
          c[a >> 2] = (c[a >> 2] | 0) + 1;
          d = d + 1 | 0;
          a = c[e >> 2] | 0;
        } while ((d | 0) < (a | 0));
        if ((g | 0) == (b | 0)) break;else d = a;
      }
      c[o + 4 >> 2] = 1;
      a = 1;
      d = 1;
      do {
        d = (c[j + (a << 2) >> 2] | 0) + d | 0;
        g = a;
        a = a + 1 | 0;
        c[o + (a << 2) >> 2] = d;
      } while ((g | 0) != (b | 0));
    }
    ck(b, m, n, l, o, h, i, j);
    ck(b, o, h, i, m, n, l, j);
    ft(o);
    ft(h);
    ft(i);
    ft(j);
    return k | 0;
  }
  function bk(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    f = b + 1 | 0;
    h = gt((c[a + 16 >> 2] | 0) + 1 | 0, 8) | 0;
    g = a + 4 | 0;
    c[g >> 2] = h;
    h = gt(f, 8) | 0;
    c[a >> 2] = h;
    h = gt(f, 8) | 0;
    b = a + 8 | 0;
    c[b >> 2] = h;
    h = gt(f, 8) | 0;
    d = a + 12 | 0;
    c[d >> 2] = h;
    h = gt(f, 4) | 0;
    e = a + 48 | 0;
    c[e >> 2] = h;
    f = gt(f, 4) | 0;
    c[a + 52 >> 2] = f;
    if (!(c[g >> 2] | 0)) {
      h = 101;
      return h | 0;
    }
    if (!(c[a >> 2] | 0)) {
      h = 101;
      return h | 0;
    }
    if (!(c[b >> 2] | 0)) {
      h = 101;
      return h | 0;
    }
    if (!(c[d >> 2] | 0)) {
      h = 101;
      return h | 0;
    }
    if (!(c[e >> 2] | 0)) {
      h = 101;
      return h | 0;
    }
    h = (f | 0) == 0 ? 101 : 0;
    return h | 0;
  }
  function ck(a, b, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    var j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    if ((a | 0) < 1) return;
    vt(i + 4 | 0, 0, a << 2 | 0) | 0;
    m = 1;
    k = c[b + 4 >> 2] | 0;
    while (1) {
      n = m;
      m = m + 1 | 0;
      l = b + (m << 2) | 0;
      j = c[l >> 2] | 0;
      if ((k | 0) < (j | 0)) do {
        o = c[d + (k << 2) >> 2] | 0;
        j = i + (o << 2) | 0;
        o = (c[j >> 2] | 0) + (c[f + (o << 2) >> 2] | 0) | 0;
        c[g + (o << 2) >> 2] = n;
        c[h + (o << 2) >> 2] = c[e + (k << 2) >> 2];
        c[j >> 2] = (c[j >> 2] | 0) + 1;
        k = k + 1 | 0;
        j = c[l >> 2] | 0;
      } while ((k | 0) < (j | 0));
      if ((n | 0) == (a | 0)) break;else k = j;
    }
    return;
  }
  function dk(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    b = c[(c[a + 88 >> 2] | 0) + (b << 2) >> 2] | 0;
    if (!b) {
      g = 1;
      return g | 0;
    }
    e = a + 4588 | 0;
    while (1) {
      d = c[b >> 2] | 0;
      if (((d | 0) > 0 ? (f = (c[e >> 2] | 0) + (d << 2) | 0, g = c[f >> 2] | 0, (g | 0) > 0) : 0) ? (c[f >> 2] = g + -1, (ek(a, c[b >> 2] | 0, c[b + 8 >> 2] | 0) | 0) == 0) : 0) {
        b = 0;
        d = 7;
        break;
      }
      b = c[b + 8 >> 2] | 0;
      if (!b) {
        b = 1;
        d = 7;
        break;
      }
    }
    if ((d | 0) == 7) return b | 0;
    return 0;
  }
  function ek(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    g = a + 4560 | 0;
    if (!d) {
      h = 1;
      return h | 0;
    }
    h = a + 4588 | 0;
    f = a + 88 | 0;
    while (1) {
      e = c[d >> 2] | 0;
      if (((e | 0) > 0 ? (c[(c[h >> 2] | 0) + (e << 2) >> 2] | 0) > 0 : 0) ? (fk(c[f >> 2] | 0, b, e) | 0) == 0 : 0) {
        i = (c[g >> 2] | 0) + 1 | 0;
        c[g >> 2] = i;
        if (!(gk(a, b, e, i) | 0)) {
          d = 0;
          e = 10;
          break;
        }
        if (!(gk(a, e, b, c[g >> 2] | 0) | 0)) {
          d = 0;
          e = 10;
          break;
        }
        i = (c[h >> 2] | 0) + (b << 2) | 0;
        c[i >> 2] = (c[i >> 2] | 0) + 1;
        i = (c[h >> 2] | 0) + (e << 2) | 0;
        c[i >> 2] = (c[i >> 2] | 0) + 1;
      }
      d = c[d + 8 >> 2] | 0;
      if (!d) {
        d = 1;
        e = 10;
        break;
      }
    }
    if ((e | 0) == 10) return d | 0;
    return 0;
  }
  function fk(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    a = c[a + (b << 2) >> 2] | 0;
    if (!a) {
      d = 0;
      return d | 0;
    }
    while (1) {
      if ((c[a >> 2] | 0) == (d | 0)) {
        a = 1;
        b = 5;
        break;
      }
      a = c[a + 8 >> 2] | 0;
      if (!a) {
        a = 0;
        b = 5;
        break;
      }
    }
    if ((b | 0) == 5) return a | 0;
    return 0;
  }
  function gk(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = et(12) | 0;
    if (!f) {
      f = 0;
      return f | 0;
    }
    c[f >> 2] = d;
    c[f + 4 >> 2] = e;
    e = a + 88 | 0;
    c[f + 8 >> 2] = c[(c[e >> 2] | 0) + (b << 2) >> 2];
    c[(c[e >> 2] | 0) + (b << 2) >> 2] = f;
    f = 1;
    return f | 0;
  }
  function hk(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    a = c[a + (d << 2) >> 2] | 0;
    a: do if (!a) {
      d = 0;
      a = f;
    } else {
      while (1) {
        if ((c[a >> 2] | 0) == (e | 0)) break;
        a = c[a + 8 >> 2] | 0;
        if (!a) {
          d = 0;
          a = f;
          break a;
        }
      }
      d = 1;
      a = c[a + 4 >> 2] | 0;
    } while (0);
    c[(c[b + 28 >> 2] | 0) + (f << 2) >> 2] = a;
    return d | 0;
  }
  function ik(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    b = c[a >> 2] | 0;
    if ((b | 0) < 1) return;
    g = a + 88 | 0;
    f = 1;
    while (1) {
      d = c[(c[g >> 2] | 0) + (f << 2) >> 2] | 0;
      if (d) {
        b = 0;
        while (1) {
          do if (!(c[d >> 2] | 0)) {
            e = c[d + 8 >> 2] | 0;
            if (!b) {
              c[(c[g >> 2] | 0) + (f << 2) >> 2] = e;
              ft(d);
              e = 0;
              b = (c[g >> 2] | 0) + (f << 2) | 0;
              break;
            } else {
              h = b + 8 | 0;
              c[h >> 2] = e;
              ft(d);
              e = b;
              b = h;
              break;
            }
          } else {
            e = d;
            b = d + 8 | 0;
          } while (0);
          d = c[b >> 2] | 0;
          if (!d) break;else b = e;
        }
        b = c[a >> 2] | 0;
      }
      if ((f | 0) < (b | 0)) f = f + 1 | 0;else break;
    }
    return;
  }
  function jk(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = a + 4544 | 0;
    d = a + 4564 | 0;
    ft(c[d >> 2] | 0);
    c[d >> 2] = 0;
    d = a + 4568 | 0;
    ft(c[d >> 2] | 0);
    c[d >> 2] = 0;
    d = a + 4572 | 0;
    ft(c[d >> 2] | 0);
    c[d >> 2] = 0;
    d = a + 4576 | 0;
    ft(c[d >> 2] | 0);
    c[d >> 2] = 0;
    d = a + 4580 | 0;
    ft(c[d >> 2] | 0);
    c[d >> 2] = 0;
    d = a + 4584 | 0;
    ft(c[d >> 2] | 0);
    c[d >> 2] = 0;
    d = a + 4548 | 0;
    ft(c[d >> 2] | 0);
    c[d >> 2] = 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    b = a + 4552 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    b = a + 4556 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    b = a + 4592 | 0;
    ft(c[b >> 2] | 0);
    c[b >> 2] = 0;
    a = a + 4596 | 0;
    ft(c[a >> 2] | 0);
    c[a >> 2] = 0;
    return;
  }
  function kk(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0,
      f = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0;
    w = c[a >> 2] | 0;
    x = c[a + 4 >> 2] | 0;
    y = c[a + 8 >> 2] | 0;
    p = c[a + 12 >> 2] | 0;
    s = c[a + 40 >> 2] | 0;
    u = c[a + 32 >> 2] | 0;
    v = c[a + 36 >> 2] | 0;
    o = c[a + 48 >> 2] | 0;
    n = c[a + 52 >> 2] | 0;
    r = b + 1 | 0;
    vt(p | 0, 0, r << 3 | 0) | 0;
    m = r << 2;
    vt(o | 0, 0, m | 0) | 0;
    vt(n | 0, 0, m | 0) | 0;
    if ((b | 0) < 1) {
      y = 0;
      return y | 0;
    }
    a = 1;
    do {
      m = o + (a << 2) | 0;
      e = c[m >> 2] | 0;
      if (!e) d = 0.0;else {
        d = 0.0;
        do {
          i = o + (e << 2) | 0;
          h = e;
          e = c[i >> 2] | 0;
          j = n + (h << 2) | 0;
          f = c[j >> 2] | 0;
          l = +g[x + (c[s + (f << 2) >> 2] << 3) >> 3];
          d = d + l * l;
          f = f + 1 | 0;
          k = c[u + (h + 1 << 2) >> 2] | 0;
          if ((k | 0) > (f | 0)) {
            c[j >> 2] = f;
            j = o + (c[v + (f << 2) >> 2] << 2) | 0;
            c[i >> 2] = c[j >> 2];
            c[j >> 2] = h;
            do {
              j = p + (c[v + (f << 2) >> 2] << 3) | 0;
              g[j >> 3] = +g[j >> 3] + l * +g[x + (c[s + (f << 2) >> 2] << 3) >> 3];
              f = f + 1 | 0;
            } while ((f | 0) != (k | 0));
          }
        } while ((e | 0) != 0);
      }
      e = w + (a << 3) | 0;
      d = +g[e >> 3] - d;
      if (d <= 0.0) {
        q = 25;
        break;
      }
      d = +t(+d);
      g[e >> 3] = d;
      e = c[u + (a << 2) >> 2] | 0;
      f = a;
      a = a + 1 | 0;
      h = c[u + (a << 2) >> 2] | 0;
      if ((h | 0) > (e | 0)) {
        c[n + (f << 2) >> 2] = e;
        k = o + (c[v + (e << 2) >> 2] << 2) | 0;
        c[m >> 2] = c[k >> 2];
        c[k >> 2] = f;
        do {
          k = x + (c[s + (e << 2) >> 2] << 3) | 0;
          m = p + (c[v + (e << 2) >> 2] << 3) | 0;
          g[k >> 3] = (+g[k >> 3] - +g[m >> 3]) / d;
          g[m >> 3] = 0.0;
          e = e + 1 | 0;
        } while ((e | 0) != (h | 0));
      }
    } while ((f | 0) < (b | 0));
    if ((q | 0) == 25) return a | 0;
    e = 1;
    do {
      a = y + (e << 3) | 0;
      d = +g[a >> 3] / +g[w + (e << 3) >> 3];
      g[a >> 3] = d;
      a = c[u + (e << 2) >> 2] | 0;
      e = e + 1 | 0;
      f = c[u + (e << 2) >> 2] | 0;
      if ((f | 0) > (a | 0)) do {
        q = y + (c[v + (a << 2) >> 2] << 3) | 0;
        g[q >> 3] = +g[q >> 3] - d * +g[x + (c[s + (a << 2) >> 2] << 3) >> 3];
        a = a + 1 | 0;
      } while ((a | 0) != (f | 0));
    } while ((e | 0) != (r | 0));
    if ((b | 0) <= 0) {
      y = 0;
      return y | 0;
    }
    f = b;
    while (1) {
      h = y + (f << 3) | 0;
      d = +g[h >> 3];
      a = c[u + (f << 2) >> 2] | 0;
      e = c[u + (f + 1 << 2) >> 2] | 0;
      if ((e | 0) > (a | 0)) do {
        d = d - +g[x + (c[s + (a << 2) >> 2] << 3) >> 3] * +g[y + (c[v + (a << 2) >> 2] << 3) >> 3];
        a = a + 1 | 0;
      } while ((a | 0) != (e | 0));
      g[h >> 3] = d / +g[w + (f << 3) >> 3];
      if ((f | 0) > 1) f = f + -1 | 0;else {
        a = 0;
        break;
      }
    }
    return a | 0;
  }
  function lk(a, b, d, e, f, g, h, i, j, k, l, m) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = l | 0;
    m = m | 0;
    var n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0;
    B = Ib;
    Ib = Ib + 16 | 0;
    x = B + 8 | 0;
    y = B + 4 | 0;
    z = B;
    c[x >> 2] = 0;
    c[y >> 2] = 0;
    c[z >> 2] = 0;
    if ((c[a >> 2] | 0) < 1) {
      Ib = B;
      return;
    }
    c[m >> 2] = 0;
    mk(a, b, h, e, f, i, j, k);
    q = h + 4 | 0;
    o = c[q >> 2] | 0;
    if ((o | 0) < 1) n = 1;else {
      n = 1;
      while (1) {
        w = e + (o << 2) | 0;
        p = c[w >> 2] | 0;
        c[k + (o << 2) >> 2] = c[l >> 2];
        c[w >> 2] = 0 - n;
        n = n + 1 | 0;
        if ((p | 0) < 1) break;else o = p;
      }
      c[y >> 2] = o;
    }
    a: do if ((n | 0) <= (c[a >> 2] | 0)) {
      c[z >> 2] = 1;
      c[q >> 2] = 0;
      c[x >> 2] = 2;
      o = 2;
      while (1) {
        if ((c[h + (o << 2) >> 2] | 0) <= 0) {
          do o = o + 1 | 0; while ((c[h + (o << 2) >> 2] | 0) <= 0);
          c[x >> 2] = o;
        }
        r = c[g >> 2] | 0;
        w = r + o | 0;
        v = 0;
        b: while (1) {
          q = h + (o << 2) | 0;
          p = c[q >> 2] | 0;
          c[y >> 2] = p;
          if ((p | 0) <= 0) {
            do {
              u = o;
              o = o + 1 | 0;
              if ((u | 0) >= (w | 0)) {
                A = 29;
                break b;
              }
              q = h + (o << 2) | 0;
              p = c[q >> 2] | 0;
            } while ((p | 0) <= 0);
            c[x >> 2] = o;
            c[y >> 2] = p;
          }
          r = e + (p << 2) | 0;
          s = c[r >> 2] | 0;
          c[q >> 2] = s;
          if ((s | 0) > 0) c[f + (s << 2) >> 2] = 0 - o;
          c[r >> 2] = 0 - n;
          t = i + (p << 2) | 0;
          c[m >> 2] = o + -2 + (c[m >> 2] | 0) + (c[t >> 2] | 0);
          u = c[a >> 2] | 0;
          if (((c[t >> 2] | 0) + n | 0) > (u | 0)) break a;
          s = (c[z >> 2] | 0) + 1 | 0;
          c[z >> 2] = s;
          q = c[l >> 2] | 0;
          c: do if ((s | 0) >= (q | 0) ? (c[z >> 2] = 1, (u | 0) >= 1) : 0) {
            s = 1;
            while (1) {
              r = k + (s << 2) | 0;
              if ((c[r >> 2] | 0) < (q | 0)) c[r >> 2] = 0;
              if ((s | 0) == (u | 0)) break c;
              s = s + 1 | 0;
              q = c[l >> 2] | 0;
            }
          } while (0);
          nk(y, b, d, h, e, f, i, j, k, l, z);
          n = (c[t >> 2] | 0) + n | 0;
          c[j + (p << 2) >> 2] = v;
          q = c[g >> 2] | 0;
          if ((q | 0) > -1) {
            v = p;
            r = q;
          } else {
            o = q;
            break;
          }
        }
        if ((A | 0) == 29) {
          A = 0;
          c[x >> 2] = o;
          c[y >> 2] = p;
          p = v;
          o = r;
        }
        if ((n | 0) > (c[a >> 2] | 0)) break a;
        ok(p, a, b, d, o, x, h, e, f, i, j, k, l, z);
        o = c[x >> 2] | 0;
      }
    } while (0);
    pk(a, f, e, i);
    Ib = B;
    return;
  }
  function mk(a, b, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    var j = 0,
      k = 0;
    k = c[a >> 2] | 0;
    if ((k | 0) < 1) return;
    j = 1;
    while (1) {
      c[d + (j << 2) >> 2] = 0;
      c[g + (j << 2) >> 2] = 1;
      c[i + (j << 2) >> 2] = 0;
      c[h + (j << 2) >> 2] = 0;
      if ((j | 0) == (k | 0)) break;else j = j + 1 | 0;
    }
    g = c[a >> 2] | 0;
    if ((g | 0) < 1) return;
    j = 1;
    do {
      a = j;
      j = j + 1 | 0;
      h = (c[b + (j << 2) >> 2] | 0) - (c[b + (a << 2) >> 2] | 0) | 0;
      k = d + (h + 1 << 2) | 0;
      i = c[k >> 2] | 0;
      c[e + (a << 2) >> 2] = i;
      c[k >> 2] = a;
      if ((i | 0) > 0) c[f + (i << 2) >> 2] = a;
      c[f + (a << 2) >> 2] = ~h;
    } while ((a | 0) != (g | 0));
    return;
  }
  function nk(a, b, d, e, f, g, h, i, j, k, l) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = l | 0;
    var m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0;
    c[j + (c[a >> 2] << 2) >> 2] = c[l >> 2];
    t = c[a >> 2] | 0;
    m = c[b + (t << 2) >> 2] | 0;
    t = c[b + (t + 1 << 2) >> 2] | 0;
    n = t + -1 | 0;
    if ((m | 0) < (t | 0)) {
      o = 0;
      s = m;
      do {
        p = c[d + (s << 2) >> 2] | 0;
        if (!p) break;
        q = j + (p << 2) | 0;
        r = c[l >> 2] | 0;
        do if ((c[q >> 2] | 0) < (r | 0)) {
          c[q >> 2] = r;
          if ((c[f + (p << 2) >> 2] | 0) < 0) {
            c[i + (p << 2) >> 2] = o;
            o = p;
            break;
          } else {
            c[d + (m << 2) >> 2] = p;
            m = m + 1 | 0;
            break;
          }
        } while (0);
        s = s + 1 | 0;
      } while ((s | 0) < (t | 0));
      if ((o | 0) >= 1) do {
        c[d + (n << 2) >> 2] = 0 - o;
        p = c[b + (o << 2) >> 2] | 0;
        q = c[b + (o + 1 << 2) >> 2] | 0;
        a: do if ((p | 0) < (q | 0)) do {
          while (1) {
            t = c[d + (p << 2) >> 2] | 0;
            if ((t | 0) < 0) break;
            if (!t) break a;
            r = j + (t << 2) | 0;
            s = c[l >> 2] | 0;
            if ((c[r >> 2] | 0) < (s | 0) ? (c[f + (t << 2) >> 2] | 0) >= 0 : 0) {
              c[r >> 2] = s;
              if ((m | 0) >= (n | 0)) do {
                n = c[d + (n << 2) >> 2] | 0;
                m = c[b + (0 - n << 2) >> 2] | 0;
                n = (c[b + (1 - n << 2) >> 2] | 0) + -1 | 0;
              } while ((m | 0) >= (n | 0));
              c[d + (m << 2) >> 2] = t;
              m = m + 1 | 0;
            }
            p = p + 1 | 0;
            if ((p | 0) >= (q | 0)) break a;
          }
          p = c[b + (0 - t << 2) >> 2] | 0;
          q = c[b + (1 - t << 2) >> 2] | 0;
        } while ((p | 0) < (q | 0)); while (0);
        o = c[i + (o << 2) >> 2] | 0;
      } while ((o | 0) >= 1);
    }
    if ((m | 0) <= (n | 0)) c[d + (m << 2) >> 2] = 0;
    m = c[a >> 2] | 0;
    n = c[b + (m << 2) >> 2] | 0;
    m = c[b + (m + 1 << 2) >> 2] | 0;
    if ((n | 0) >= (m | 0)) return;
    b: while (1) {
      while (1) {
        u = c[d + (n << 2) >> 2] | 0;
        if ((u | 0) < 0) break;
        if (!u) {
          m = 51;
          break b;
        }
        i = g + (u << 2) | 0;
        o = c[i >> 2] | 0;
        do if (o | 0 ? (o | 0) != (0 - (c[k >> 2] | 0) | 0) : 0) {
          p = c[f + (u << 2) >> 2] | 0;
          if ((p | 0) > 0) c[g + (p << 2) >> 2] = o;
          if ((o | 0) > 0) {
            c[f + (o << 2) >> 2] = p;
            break;
          } else {
            c[e + (0 - o << 2) >> 2] = p;
            break;
          }
        } while (0);
        s = c[b + (u << 2) >> 2] | 0;
        r = c[b + (u + 1 << 2) >> 2] | 0;
        t = r + -1 | 0;
        c: do if ((s | 0) < (r | 0)) {
          p = s;
          q = s;
          do {
            o = c[d + (q << 2) >> 2] | 0;
            if (!o) break c;
            if ((c[j + (o << 2) >> 2] | 0) < (c[l >> 2] | 0)) {
              c[d + (p << 2) >> 2] = o;
              p = p + 1 | 0;
            }
            q = q + 1 | 0;
          } while ((q | 0) < (r | 0));
        } else p = s; while (0);
        o = p - s | 0;
        if ((o | 0) > 0) {
          c[f + (u << 2) >> 2] = o + 1;
          c[i >> 2] = 0;
          c[d + (p << 2) >> 2] = c[a >> 2];
          if ((p | 0) < (t | 0)) c[d + (p + 1 << 2) >> 2] = 0;
        } else {
          t = h + (u << 2) | 0;
          s = h + (c[a >> 2] << 2) | 0;
          c[s >> 2] = (c[s >> 2] | 0) + (c[t >> 2] | 0);
          c[t >> 2] = 0;
          c[j + (u << 2) >> 2] = c[k >> 2];
          c[f + (u << 2) >> 2] = 0 - (c[a >> 2] | 0);
          c[i >> 2] = 0 - (c[k >> 2] | 0);
        }
        n = n + 1 | 0;
        if ((n | 0) >= (m | 0)) {
          m = 51;
          break b;
        }
      }
      n = c[b + (0 - u << 2) >> 2] | 0;
      m = c[b + (1 - u << 2) >> 2] | 0;
      if ((n | 0) >= (m | 0)) {
        m = 51;
        break;
      }
    }
    if ((m | 0) == 51) return;
  }
  function ok(a, b, d, e, f, g, h, i, j, k, l, m, n, o) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = l | 0;
    m = m | 0;
    n = n | 0;
    o = o | 0;
    var p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      A = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0;
    E = (c[g >> 2] | 0) + f | 0;
    if ((a | 0) < 1) return;
    f = c[o >> 2] | 0;
    while (1) {
      f = f + E | 0;
      if ((f | 0) >= (c[n >> 2] | 0)) {
        c[o >> 2] = 1;
        p = c[b >> 2] | 0;
        if ((p | 0) < 1) f = 1;else {
          f = 1;
          while (1) {
            q = m + (f << 2) | 0;
            if ((c[q >> 2] | 0) < (c[n >> 2] | 0)) c[q >> 2] = 0;
            if ((f | 0) == (p | 0)) break;else f = f + 1 | 0;
          }
          f = c[o >> 2] | 0;
        }
        f = f + E | 0;
      }
      q = c[d + (a << 2) >> 2] | 0;
      r = c[d + (a + 1 << 2) >> 2] | 0;
      a: do if ((q | 0) < (r | 0)) {
        t = 0;
        p = 0;
        s = 0;
        while (1) {
          v = t;
          while (1) {
            u = c[e + (q << 2) >> 2] | 0;
            if ((u | 0) < 0) break;
            if (!u) {
              D = v;
              break a;
            }
            t = c[k + (u << 2) >> 2] | 0;
            do if (t) {
              s = t + s | 0;
              c[m + (u << 2) >> 2] = f;
              if (!(c[j + (u << 2) >> 2] | 0)) {
                t = l + (u << 2) | 0;
                if ((c[i + (u << 2) >> 2] | 0) == 2) {
                  c[t >> 2] = p;
                  t = v;
                  p = u;
                  break;
                } else {
                  c[t >> 2] = v;
                  t = u;
                  break;
                }
              } else t = v;
            } else t = v; while (0);
            q = q + 1 | 0;
            if ((q | 0) >= (r | 0)) {
              D = t;
              break a;
            } else v = t;
          }
          q = c[d + (0 - u << 2) >> 2] | 0;
          r = c[d + (1 - u << 2) >> 2] | 0;
          if ((q | 0) >= (r | 0)) {
            D = v;
            break;
          } else t = v;
        }
      } else {
        s = 0;
        D = 0;
        p = 0;
      } while (0);
      b: while (1) {
        c: do if ((p | 0) >= 1) {
          u = j + (p << 2) | 0;
          if (c[u >> 2] | 0) {
            p = c[l + (p << 2) >> 2] | 0;
            r = 28;
            break;
          }
          c[o >> 2] = (c[o >> 2] | 0) + 1;
          q = c[d + (p << 2) >> 2] | 0;
          r = c[e + (q << 2) >> 2] | 0;
          if ((r | 0) == (a | 0)) r = c[e + (q + 1 << 2) >> 2] | 0;
          if ((c[i + (r << 2) >> 2] | 0) >= 0) {
            v = 1;
            q = (c[k + (r << 2) >> 2] | 0) + s | 0;
            r = 67;
            break;
          }
          t = c[d + (r << 2) >> 2] | 0;
          r = c[d + (r + 1 << 2) >> 2] | 0;
          if ((t | 0) < (r | 0)) {
            B = k + (p << 2) | 0;
            C = 0 - p | 0;
            q = s;
            while (1) {
              d: while (1) {
                A = c[e + (t << 2) >> 2] | 0;
                do if ((A | 0) != (p | 0)) {
                  if ((A | 0) < 0) break d;
                  if (!A) {
                    v = 1;
                    r = 67;
                    break c;
                  }
                  x = k + (A << 2) | 0;
                  y = c[x >> 2] | 0;
                  if (y) {
                    z = m + (A << 2) | 0;
                    v = c[o >> 2] | 0;
                    if ((c[z >> 2] | 0) < (v | 0)) {
                      c[z >> 2] = v;
                      q = (c[x >> 2] | 0) + q | 0;
                      break;
                    }
                    w = j + (A << 2) | 0;
                    if (!(c[w >> 2] | 0)) {
                      v = i + (A << 2) | 0;
                      if ((c[v >> 2] | 0) == 2) {
                        c[B >> 2] = (c[B >> 2] | 0) + y;
                        c[x >> 2] = 0;
                        c[z >> 2] = c[n >> 2];
                        c[v >> 2] = C;
                        c[w >> 2] = 0 - (c[n >> 2] | 0);
                        break;
                      } else {
                        c[w >> 2] = 0 - (c[n >> 2] | 0);
                        break;
                      }
                    }
                  }
                } while (0);
                t = t + 1 | 0;
                if ((t | 0) >= (r | 0)) {
                  v = 1;
                  r = 67;
                  break c;
                }
              }
              t = c[d + (0 - A << 2) >> 2] | 0;
              r = c[d + (1 - A << 2) >> 2] | 0;
              if ((t | 0) >= (r | 0)) {
                v = 1;
                r = 67;
                break;
              }
            }
          } else {
            v = 1;
            q = s;
            r = 67;
          }
        } else {
          A = 0;
          p = D;
          r = 72;
        } while (0);
        e: while (1) if ((r | 0) == 28) continue b;else if ((r | 0) == 67) {
          C = q - (c[k + (p << 2) >> 2] | 0) | 0;
          q = C + 1 | 0;
          r = h + (q << 2) | 0;
          t = c[r >> 2] | 0;
          c[i + (p << 2) >> 2] = t;
          c[u >> 2] = ~C;
          if ((t | 0) > 0) c[j + (t << 2) >> 2] = p;
          c[r >> 2] = p;
          if ((q | 0) < (c[g >> 2] | 0)) c[g >> 2] = q;
          p = c[l + (p << 2) >> 2] | 0;
          if ((v | 0) == 1) {
            r = 28;
            continue;
          } else {
            A = v;
            r = 72;
            continue;
          }
        } else if ((r | 0) == 72) {
          while (1) {
            if ((p | 0) < 1) break b;
            u = j + (p << 2) | 0;
            if (!(c[u >> 2] | 0)) break;
            p = c[l + (p << 2) >> 2] | 0;
          }
          c[o >> 2] = (c[o >> 2] | 0) + 1;
          q = c[d + (p << 2) >> 2] | 0;
          z = c[d + (p + 1 << 2) >> 2] | 0;
          if ((q | 0) >= (z | 0)) {
            v = A;
            q = s;
            r = 67;
            continue;
          }
          r = s;
          while (1) {
            w = c[e + (q << 2) >> 2] | 0;
            if (!w) {
              v = A;
              q = r;
              r = 67;
              continue e;
            }
            t = m + (w << 2) | 0;
            v = c[o >> 2] | 0;
            f: do if ((c[t >> 2] | 0) < (v | 0)) {
              c[t >> 2] = v;
              if ((c[i + (w << 2) >> 2] | 0) >= 0) {
                r = (c[k + (w << 2) >> 2] | 0) + r | 0;
                break;
              }
              v = c[d + (w << 2) >> 2] | 0;
              t = c[d + (w + 1 << 2) >> 2] | 0;
              if ((v | 0) < (t | 0)) do {
                while (1) {
                  y = c[e + (v << 2) >> 2] | 0;
                  if ((y | 0) < 0) break;
                  if (!y) break f;
                  w = m + (y << 2) | 0;
                  x = c[o >> 2] | 0;
                  if ((c[w >> 2] | 0) < (x | 0)) {
                    c[w >> 2] = x;
                    r = (c[k + (y << 2) >> 2] | 0) + r | 0;
                  }
                  v = v + 1 | 0;
                  if ((v | 0) >= (t | 0)) break f;
                }
                v = c[d + (0 - y << 2) >> 2] | 0;
                t = c[d + (1 - y << 2) >> 2] | 0;
              } while ((v | 0) < (t | 0));
            } while (0);
            q = q + 1 | 0;
            if ((q | 0) >= (z | 0)) {
              v = A;
              q = r;
              r = 67;
              continue e;
            }
          }
        }
      }
      c[o >> 2] = f;
      a = c[l + (a << 2) >> 2] | 0;
      if ((a | 0) < 1) break;
    }
    return;
  }
  function pk(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    g = c[a >> 2] | 0;
    if ((g | 0) < 1) return;
    f = 1;
    while (1) {
      j = c[d + (f << 2) >> 2] | 0;
      c[b + (f << 2) >> 2] = (c[e + (f << 2) >> 2] | 0) < 1 ? j : 0 - j | 0;
      if ((f | 0) == (g | 0)) break;else f = f + 1 | 0;
    }
    j = c[a >> 2] | 0;
    if ((j | 0) < 1) return;
    i = 1;
    while (1) {
      g = b + (i << 2) | 0;
      f = c[g >> 2] | 0;
      if ((f | 0) <= 0) {
        while (1) {
          e = b + (0 - f << 2) | 0;
          h = c[e >> 2] | 0;
          if ((h | 0) > 0) break;else f = h;
        }
        c[d + (i << 2) >> 2] = ~h;
        c[e >> 2] = h + 1;
        e = c[g >> 2] | 0;
        if ((e | 0) <= -1) do {
          c[g >> 2] = f;
          g = b + (0 - e << 2) | 0;
          e = c[g >> 2] | 0;
        } while ((e | 0) <= -1);
      }
      if ((i | 0) == (j | 0)) break;else i = i + 1 | 0;
    }
    e = c[a >> 2] | 0;
    if ((e | 0) < 1) return;
    f = 1;
    while (1) {
      j = d + (f << 2) | 0;
      a = 0 - (c[j >> 2] | 0) | 0;
      c[j >> 2] = a;
      c[b + (a << 2) >> 2] = f;
      if ((f | 0) == (e | 0)) break;else f = f + 1 | 0;
    }
    return;
  }
  function qk() {
    var a = 0,
      b = 0;
    a = et(8) | 0;
    if (!a) {
      a = 0;
      return a | 0;
    }
    b = rk() | 0;
    c[a >> 2] = b;
    c[a + 4 >> 2] = b;
    a = (b | 0) == 0 ? 0 : a;
    return a | 0;
  }
  function rk() {
    var a = 0,
      b = 0;
    a = et(16) | 0;
    if (!a) {
      b = a;
      return b | 0;
    }
    b = et(64e3) | 0;
    c[a + 4 >> 2] = b;
    if (!b) {
      ft(a);
      b = 0;
      return b | 0;
    } else {
      c[a + 8 >> 2] = b;
      c[a >> 2] = 0;
      c[a + 12 >> 2] = b + 64e3;
      b = a;
      return b | 0;
    }
    return 0;
  }
  function sk(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    if (!a) return;
    b = c[a >> 2] | 0;
    if (b | 0) {
      d = a + 4 | 0;
      do {
        c[d >> 2] = c[b >> 2];
        tk(b);
        b = c[d >> 2] | 0;
        c[a >> 2] = b;
      } while ((b | 0) != 0);
    }
    ft(a);
    return;
  }
  function tk(a) {
    a = a | 0;
    ft(c[a + 4 >> 2] | 0);
    ft(a);
    return;
  }
  function uk(a) {
    a = a | 0;
    var b = 0;
    b = c[a >> 2] | 0;
    c[a + 4 >> 2] = b;
    c[b + 8 >> 2] = c[b + 4 >> 2];
    return;
  }
  function vk(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    d = a + 4 | 0;
    a = c[d >> 2] | 0;
    if (!a) {
      d = 0;
      return d | 0;
    }
    b = a + 8 | 0;
    a = c[b >> 2] | 0;
    c[b >> 2] = a + 24;
    b = c[d >> 2] | 0;
    if ((c[b + 8 >> 2] | 0) >>> 0 < (c[b + 12 >> 2] | 0) >>> 0) {
      d = a;
      return d | 0;
    }
    a = c[b >> 2] | 0;
    if (!a) {
      a = rk() | 0;
      c[c[d >> 2] >> 2] = a;
      a = c[c[d >> 2] >> 2] | 0;
      if (!a) {
        d = 0;
        return d | 0;
      }
    } else {
      c[a + 8 >> 2] = c[a + 4 >> 2];
      a = c[c[d >> 2] >> 2] | 0;
    }
    c[d >> 2] = a;
    b = a + 8 | 0;
    d = c[b >> 2] | 0;
    c[b >> 2] = d + 24;
    return d | 0;
  }
  function wk(a) {
    a = a | 0;
    gd(a) | 0;
    return 0;
  }
  function xk() {
    var a = 0,
      b = 0,
      d = 0;
    b = Ib;
    Ib = Ib + 272 | 0;
    d = b;
    a = b + 256 | 0;
    vt(d | 0, 0, 256) | 0;
    hd(219, d, 255) | 0;
    ur(d);
    gd(a) | 0;
    Ib = b;
    return c[a >> 2] | 0;
  }
  function yk(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    Cc(f);
    f = c[f >> 2] | 0;
    d = Fc(f, a, b, d, 9) | 0;
    Dc(f);
    Ib = e;
    return d | 0;
  }
  function zk() {
    var a = 0,
      b = 0,
      c = 0;
    a = Ib;
    Ib = Ib + 272 | 0;
    c = a;
    tr(14913, a + 256 | 0);
    cr(c, 256, 2568) | 0;
    b = Vq(14940, 17103) | 0;
    Rq(c, b) | 0;
    $q(b);
    Ib = a;
    return 0;
  }
  function Ak(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = Ib;
    Ib = Ib + 16 | 0;
    d = b;
    c[d >> 2] = a;
    er(2712, 14950, d) | 0;
    Ib = b;
    return;
  }
  function Bk() {
    Ck();
    return;
  }
  function Ck() {
    Dk();
    return;
  }
  function Dk() {
    Fk();
    Hk();
    da(2512, 2496, 2552, 0, 16692, 3, 16690, 0, 16690, 0, 14974, 16687, 10);
    Lk();
    Nk(14981, 3, 0);
    Pk(14986, 4, 0);
    Nk(14992, 4, 0);
    Sk(1, 0);
    Uk(15008, 7, 0);
    Wk(5, 0);
    Nk(15026, 6, 0);
    Zk(15035, 1, 0);
    Pk(15047, 5, 0);
    Zk(15054, 2, 0);
    Pk(15065, 6, 0);
    cl(15071, 3, 0);
    el(15077, 4, 0);
    el(15082, 5, 0);
    Pk(15088, 7, 0);
    Zk(15094, 6, 0);
    Pk(15106, 8, 0);
    Pk(15113, 9, 0);
    cl(15120, 7, 0);
    el(15126, 8, 0);
    Pk(15132, 10, 0);
    el(15138, 9, 0);
    Pk(15143, 11, 0);
    el(15150, 10, 0);
    Pk(15156, 12, 0);
    Zk(15168, 11, 0);
    tl(15179, 7, 0);
    vl(15194, 8, 0);
    Pk(15207, 13, 0);
    Pk(15214, 14, 0);
    Zk(15226, 12, 0);
    cl(15236, 13, 0);
    Zk(15252, 14, 0);
    el(15262, 15, 0);
    Uk(15275, 9, 0);
    El(2, 0);
    Gl(10, 0);
    Uk(15309, 11, 0);
    cl(15322, 16, 0);
    Kl(15335, 1, 0);
    Ml(3, 0);
    vl(15357, 12, 0);
    Pl(8, 0);
    Rl(15378, 13, 0);
    Tl(15389, 9, 0);
    vl(15398, 14, 0);
    Wl(15408, 15, 0);
    vl(15421, 16, 0);
    tl(15433, 10, 0);
    _l(1, 0);
    am(1, 0);
    cm(15467, 17, 0);
    em(15477, 1, 0);
    gm(1, 0);
    im(1, 0);
    Rl(15512, 18, 0);
    tl(15525, 11, 0);
    mm(12, 0);
    om(4, 0);
    tl(15569, 13, 0);
    tl(15583, 14, 0);
    vl(15600, 19, 0);
    em(15614, 2, 0);
    um(1, 0);
    wm(15, 0);
    ym(15657, 16, 0);
    Am(1, 0);
    Rl(15682, 20, 0);
    vl(15693, 21, 0);
    vl(15711, 22, 0);
    Wl(15721, 23, 0);
    Tl(15734, 17, 0);
    vl(15747, 24, 0);
    tl(15759, 18, 0);
    vl(15772, 25, 0);
    Km(15784, 5, 0);
    vl(15794, 26, 0);
    Rl(15809, 27, 0);
    cm(15827, 28, 0);
    ym(15837, 19, 0);
    Qm(20, 0);
    em(15862, 3, 0);
    Tm(1, 0);
    Vm(15887, 6, 0);
    Zk(15899, 17, 0);
    cl(15910, 18, 0);
    vl(15924, 29, 0);
    vl(15947, 30, 0);
    Wl(15960, 31, 0);
    vl(15976, 32, 0);
    tl(15990, 21, 0);
    cn(22, 0);
    cm(16017, 33, 0);
    em(16030, 4, 0);
    Zk(16046, 19, 0);
    cl(16055, 20, 0);
    vl(16067, 34, 0);
    Wl(16078, 35, 0);
    vl(16092, 36, 0);
    vl(16104, 37, 0);
    Km(16117, 7, 0);
    Vm(16131, 8, 0);
    cm(16140, 38, 0);
    qn(1, 0);
    sn(1, 0);
    cl(16176, 21, 0);
    vn(1, 0);
    xn(1, 0);
    Zk(16212, 22, 0);
    cl(16220, 23, 0);
    Bn(16231, 2, 0);
    Dn(1, 0);
    Fn(3, 0);
    vl(16264, 39, 0);
    Bn(16274, 4, 0);
    Jn(16288, 1, 0);
    Ln(1, 0);
    ym(16313, 23, 0);
    ym(16329, 24, 0);
    em(16346, 5, 0);
    Kl(16362, 2, 0);
    Jn(16378, 2, 0);
    return;
  }
  function Ek(a) {
    a = a | 0;
    gd(a) | 0;
    return 0;
  }
  function Fk() {
    ia(14954, 2, 3548, 16683, 24, 15);
    return;
  }
  function Gk(a, b) {
    a = a | 0;
    b = b | 0;
    return hd(a, b, 255) | 0;
  }
  function Hk() {
    ia(14965, 3, 3536, 16678, 40, 25);
    return;
  }
  function Ik(a) {
    a = a | 0;
    return 2512;
  }
  function Jk(a) {
    a = a | 0;
    if (!a) return;
    Ip(c[a >> 2] | 0);
    _r(a);
    return;
  }
  function Kk() {
    var a = 0;
    a = ns(4) | 0;
    Hp(a);
    return a | 0;
  }
  function Lk() {
    ea(2512, 1, 3532, 16692, 16, 1);
    return;
  }
  function Mk(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    g = a[d + 11 >> 0] | 0;
    m = g << 24 >> 24 < 0;
    if (m) g = c[d + 4 >> 2] | 0;else g = g & 255;
    l = os(g + 1 | 0) | 0;
    k = e + 11 | 0;
    g = a[k >> 0] | 0;
    if (g << 24 >> 24 < 0) g = c[e + 4 >> 2] | 0;else g = g & 255;
    i = os(g + 1 | 0) | 0;
    j = f + 11 | 0;
    g = a[j >> 0] | 0;
    if (g << 24 >> 24 < 0) g = c[f + 4 >> 2] | 0;else g = g & 255;
    h = os(g + 1 | 0) | 0;
    if (m) g = c[d >> 2] | 0;else g = d;
    Oq(l, g) | 0;
    if ((a[k >> 0] | 0) < 0) g = c[e >> 2] | 0;else g = e;
    Oq(i, g) | 0;
    if ((a[j >> 0] | 0) < 0) {
      f = c[f >> 2] | 0;
      Oq(h, f) | 0;
      f = c[b >> 2] | 0;
      f = Gc(f, l, i, h) | 0;
      ps(l);
      ps(i);
      ps(h);
      return f | 0;
    } else {
      Oq(h, f) | 0;
      f = c[b >> 2] | 0;
      f = Gc(f, l, i, h) | 0;
      ps(l);
      ps(i);
      ps(h);
      return f | 0;
    }
    return 0;
  }
  function Nk(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 5, 1952, 16491, 9, Dp(f) | 0, 0);
    Ib = e;
    return;
  }
  function Ok(a) {
    a = a | 0;
    Ec(c[a >> 2] | 0);
    return 0;
  }
  function Pk(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 2, 3524, 16683, 26, Bp(f) | 0, 0);
    Ib = e;
    return;
  }
  function Qk(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    g = a[d + 11 >> 0] | 0;
    m = g << 24 >> 24 < 0;
    if (m) g = c[d + 4 >> 2] | 0;else g = g & 255;
    l = os(g + 1 | 0) | 0;
    k = e + 11 | 0;
    g = a[k >> 0] | 0;
    if (g << 24 >> 24 < 0) g = c[e + 4 >> 2] | 0;else g = g & 255;
    i = os(g + 1 | 0) | 0;
    j = f + 11 | 0;
    g = a[j >> 0] | 0;
    if (g << 24 >> 24 < 0) g = c[f + 4 >> 2] | 0;else g = g & 255;
    h = os(g + 1 | 0) | 0;
    if (m) g = c[d >> 2] | 0;else g = d;
    Oq(l, g) | 0;
    if ((a[k >> 0] | 0) < 0) g = c[e >> 2] | 0;else g = e;
    Oq(i, g) | 0;
    if ((a[j >> 0] | 0) < 0) {
      f = c[f >> 2] | 0;
      Oq(h, f) | 0;
      f = c[b >> 2] | 0;
      f = Fc(f, l, i, h, 0) | 0;
      ps(l);
      ps(i);
      ps(h);
      return f | 0;
    } else {
      Oq(h, f) | 0;
      f = c[b >> 2] | 0;
      f = Fc(f, l, i, h, 0) | 0;
      ps(l);
      ps(i);
      ps(h);
      return f | 0;
    }
    return 0;
  }
  function Rk(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    h = a[d + 11 >> 0] | 0;
    l = h << 24 >> 24 < 0;
    if (l) h = c[d + 4 >> 2] | 0;else h = h & 255;
    k = os(h + 1 | 0) | 0;
    j = e + 11 | 0;
    h = a[j >> 0] | 0;
    if (h << 24 >> 24 < 0) h = c[e + 4 >> 2] | 0;else h = h & 255;
    i = os(h + 1 | 0) | 0;
    if (l) h = c[d >> 2] | 0;else h = d;
    Oq(k, h) | 0;
    if ((a[j >> 0] | 0) < 0) e = c[e >> 2] | 0;
    Oq(i, e) | 0;
    g = Kc(c[b >> 2] | 0, k, i, f, g) | 0;
    ps(k);
    ps(i);
    return g | 0;
  }
  function Sk(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15003, 6, 1920, 16498, 5, zp(e) | 0, 0);
    Ib = d;
    return;
  }
  function Tk(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return Nc(c[a >> 2] | 0, b, d) | 0;
  }
  function Uk(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 4, 1904, 16651, 25, xp(f) | 0, 0);
    Ib = e;
    return;
  }
  function Vk(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Lc(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Wk(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15017, 5, 1872, 16491, 10, vp(e) | 0, 0);
    Ib = d;
    return;
  }
  function Xk(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    g = a[d + 11 >> 0] | 0;
    m = g << 24 >> 24 < 0;
    if (m) g = c[d + 4 >> 2] | 0;else g = g & 255;
    l = os(g + 1 | 0) | 0;
    k = e + 11 | 0;
    g = a[k >> 0] | 0;
    if (g << 24 >> 24 < 0) g = c[e + 4 >> 2] | 0;else g = g & 255;
    i = os(g + 1 | 0) | 0;
    j = f + 11 | 0;
    g = a[j >> 0] | 0;
    if (g << 24 >> 24 < 0) g = c[f + 4 >> 2] | 0;else g = g & 255;
    h = os(g + 1 | 0) | 0;
    if (m) g = c[d >> 2] | 0;else g = d;
    Oq(l, g) | 0;
    if ((a[k >> 0] | 0) < 0) g = c[e >> 2] | 0;else g = e;
    Oq(i, g) | 0;
    if ((a[j >> 0] | 0) < 0) {
      f = c[f >> 2] | 0;
      Oq(h, f) | 0;
      f = c[b >> 2] | 0;
      f = Mc(f, l, i, h) | 0;
      ps(l);
      ps(i);
      ps(h);
      return f | 0;
    } else {
      Oq(h, f) | 0;
      f = c[b >> 2] | 0;
      f = Mc(f, l, i, h) | 0;
      ps(l);
      ps(i);
      ps(h);
      return f | 0;
    }
    return 0;
  }
  function Yk(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = Oc(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function Zk(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 3, 3512, 16678, 41, tp(f) | 0, 0);
    Ib = e;
    return;
  }
  function _k(a) {
    a = a | 0;
    return Hc(c[a >> 2] | 0) | 0;
  }
  function $k(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = Wc(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function al(a) {
    a = a | 0;
    return Pc(c[a >> 2] | 0) | 0;
  }
  function bl(a, b) {
    a = a | 0;
    b = b | 0;
    return Qc(c[a >> 2] | 0, b) | 0;
  }
  function cl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 3, 3500, 16678, 42, rp(f) | 0, 0);
    Ib = e;
    return;
  }
  function dl(a, b) {
    a = a | 0;
    b = b | 0;
    return Rc(c[a >> 2] | 0, b) | 0;
  }
  function el(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 3, 3488, 16678, 43, pp(f) | 0, 0);
    Ib = e;
    return;
  }
  function fl(a, b) {
    a = a | 0;
    b = b | 0;
    return Sc(c[a >> 2] | 0, b) | 0;
  }
  function gl(a) {
    a = a | 0;
    return Uc(c[a >> 2] | 0) | 0;
  }
  function hl(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = Vc(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function il(a) {
    a = a | 0;
    return Tc(c[a >> 2] | 0) | 0;
  }
  function jl(a) {
    a = a | 0;
    return $c(c[a >> 2] | 0) | 0;
  }
  function kl(a, b) {
    a = a | 0;
    b = b | 0;
    return Yc(c[a >> 2] | 0, b) | 0;
  }
  function ll(a, b) {
    a = a | 0;
    b = b | 0;
    return _c(c[a >> 2] | 0, b) | 0;
  }
  function ml(a) {
    a = a | 0;
    return Xc(c[a >> 2] | 0) | 0;
  }
  function nl(a, b) {
    a = a | 0;
    b = b | 0;
    return Zc(c[a >> 2] | 0, b) | 0;
  }
  function ol(a) {
    a = a | 0;
    return Ic(c[a >> 2] | 0) | 0;
  }
  function pl(a, b) {
    a = a | 0;
    b = b | 0;
    return ad(c[a >> 2] | 0, b) | 0;
  }
  function ql(a) {
    a = a | 0;
    return dd(c[a >> 2] | 0) | 0;
  }
  function rl(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = cd(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function sl(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return jd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function tl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 5, 1840, 16491, 11, np(f) | 0, 0);
    Ib = e;
    return;
  }
  function ul(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return id(c[a >> 2] | 0, b, d) | 0;
  }
  function vl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 4, 1824, 16651, 26, lp(f) | 0, 0);
    Ib = e;
    return;
  }
  function wl(a) {
    a = a | 0;
    return Jc(c[a >> 2] | 0) | 0;
  }
  function xl(a) {
    a = a | 0;
    return ed(c[a >> 2] | 0) | 0;
  }
  function yl(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = cd(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function zl(a, b) {
    a = a | 0;
    b = b | 0;
    return fd(c[a >> 2] | 0, b) | 0;
  }
  function Al(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = bd(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function Bl(a, b) {
    a = a | 0;
    b = b | 0;
    return nd(c[a >> 2] | 0, b) | 0;
  }
  function Cl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return kd(c[a >> 2] | 0, b, d) | 0;
  }
  function Dl(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    rd(c[a >> 2] | 0, b, d, e, f);
    return 0;
  }
  function El(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15285, 6, 1792, 16498, 6, jp(e) | 0, 0);
    Ib = d;
    return;
  }
  function Fl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return sd(c[a >> 2] | 0, b, d) | 0;
  }
  function Gl(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15297, 4, 1776, 16651, 27, gp(e) | 0, 0);
    Ib = d;
    return;
  }
  function Hl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return pd(c[a >> 2] | 0, b, d) | 0;
  }
  function Il(a, b) {
    a = a | 0;
    b = b | 0;
    return od(c[a >> 2] | 0, b) | 0;
  }
  function Jl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    return ld(c[a >> 2] | 0, b, d) | 0;
  }
  function Kl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 4, 1760, 16672, 6, ep(f) | 0, 0);
    Ib = e;
    return;
  }
  function Ll(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    h = a[e + 11 >> 0] | 0;
    n = h << 24 >> 24 < 0;
    if (n) h = c[e + 4 >> 2] | 0;else h = h & 255;
    m = os(h + 1 | 0) | 0;
    l = f + 11 | 0;
    h = a[l >> 0] | 0;
    if (h << 24 >> 24 < 0) h = c[f + 4 >> 2] | 0;else h = h & 255;
    j = os(h + 1 | 0) | 0;
    k = g + 11 | 0;
    h = a[k >> 0] | 0;
    if (h << 24 >> 24 < 0) h = c[g + 4 >> 2] | 0;else h = h & 255;
    i = os(h + 1 | 0) | 0;
    if (n) h = c[e >> 2] | 0;else h = e;
    Oq(m, h) | 0;
    if ((a[l >> 0] | 0) < 0) h = c[f >> 2] | 0;else h = f;
    Oq(j, h) | 0;
    if ((a[k >> 0] | 0) < 0) {
      g = c[g >> 2] | 0;
      Oq(i, g) | 0;
      g = c[b >> 2] | 0;
      g = td(g, d, m, j, i) | 0;
      ps(m);
      ps(j);
      ps(i);
      return g | 0;
    } else {
      Oq(i, g) | 0;
      g = c[b >> 2] | 0;
      g = td(g, d, m, j, i) | 0;
      ps(m);
      ps(j);
      ps(i);
      return g | 0;
    }
    return 0;
  }
  function Ml(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15345, 6, 1728, 16498, 7, cp(e) | 0, 0);
    Ib = d;
    return;
  }
  function Nl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return qd(c[a >> 2] | 0, b, d) | 0;
  }
  function Ol(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0;
    g = a[d + 11 >> 0] | 0;
    if (g << 24 >> 24 < 0) {
      g = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else g = os((g & 255) + 1 | 0) | 0;
    Oq(g, d) | 0;
    f = ud(c[b >> 2] | 0, g, e, f) | 0;
    ps(g);
    return f | 0;
  }
  function Pl(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15370, 5, 1696, 16491, 12, ap(e) | 0, 0);
    Ib = d;
    return;
  }
  function Ql(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return wd(c[a >> 2] | 0, b, d) | 0;
  }
  function Rl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 4, 1680, 16651, 28, _o(f) | 0, 0);
    Ib = e;
    return;
  }
  function Sl(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Gd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Tl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 5, 1648, 16491, 13, Yo(f) | 0, 0);
    Ib = e;
    return;
  }
  function Ul(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return Ad(c[a >> 2] | 0, b, d) | 0;
  }
  function Vl(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[d + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, d) | 0;
    e = vd(c[b >> 2] | 0, f, e) | 0;
    ps(f);
    return e | 0;
  }
  function Wl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 4, 1632, 16651, 29, Wo(f) | 0, 0);
    Ib = e;
    return;
  }
  function Xl(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return xd(c[a >> 2] | 0, b, d) | 0;
  }
  function Yl(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return md(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Zl(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    return Hd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function _l(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15446, 5, 1600, 16665, 2, Uo(e) | 0, 0);
    Ib = d;
    return;
  }
  function $l(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = g | 0;
    var h = 0;
    h = a[g + 11 >> 0] | 0;
    if (h << 24 >> 24 < 0) {
      h = os((c[g + 4 >> 2] | 0) + 1 | 0) | 0;
      g = c[g >> 2] | 0;
    } else h = os((h & 255) + 1 | 0) | 0;
    Oq(h, g) | 0;
    d = Dd(c[b >> 2] | 0, d, e, f, h) | 0;
    ps(h);
    return d | 0;
  }
  function am(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15455, 6, 1568, 16657, 1, So(e) | 0, 0);
    Ib = d;
    return;
  }
  function bm(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[e + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[e + 4 >> 2] | 0) + 1 | 0) | 0;
      e = c[e >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, e) | 0;
    d = Bd(c[b >> 2] | 0, d, f) | 0;
    ps(f);
    return d | 0;
  }
  function cm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 4, 1552, 16651, 30, Qo(f) | 0, 0);
    Ib = e;
    return;
  }
  function dm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    return Cd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function em(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 5, 1520, 16644, 1, Oo(f) | 0, 0);
    Ib = e;
    return;
  }
  function fm(b, d, e, f, g, h, i, j, k) {
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    i = +i;
    j = +j;
    k = k | 0;
    var l = 0,
      m = 0;
    l = a[k + 11 >> 0] | 0;
    if (l << 24 >> 24 < 0) {
      m = os((c[k + 4 >> 2] | 0) + 1 | 0) | 0;
      l = c[k >> 2] | 0;
    } else {
      m = os((l & 255) + 1 | 0) | 0;
      l = k;
    }
    Oq(m, l) | 0;
    d = Fd(c[b >> 2] | 0, d, e, f, g, h, i, j, m) | 0;
    ps(m);
    return d | 0;
  }
  function gm(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15490, 10, 1472, 16632, 1, Mo(e) | 0, 0);
    Ib = d;
    return;
  }
  function hm(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    h = a[f + 11 >> 0] | 0;
    l = h << 24 >> 24 < 0;
    if (l) h = c[f + 4 >> 2] | 0;else h = h & 255;
    k = os(h + 1 | 0) | 0;
    j = g + 11 | 0;
    h = a[j >> 0] | 0;
    if (h << 24 >> 24 < 0) h = c[g + 4 >> 2] | 0;else h = h & 255;
    i = os(h + 1 | 0) | 0;
    if (l) h = c[f >> 2] | 0;else h = f;
    Oq(k, h) | 0;
    if ((a[j >> 0] | 0) < 0) g = c[g >> 2] | 0;
    Oq(i, g) | 0;
    d = Kd(c[b >> 2] | 0, d, e, k, i) | 0;
    ps(k);
    ps(i);
    return d | 0;
  }
  function im(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15502, 6, 1440, 16624, 1, Ko(e) | 0, 0);
    Ib = d;
    return;
  }
  function jm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return Ld(c[a >> 2] | 0, b, d) | 0;
  }
  function km(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Od(c[a >> 2] | 0, b, d, e) | 0;
  }
  function lm(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0;
    g = a[e + 11 >> 0] | 0;
    if (g << 24 >> 24 < 0) {
      g = os((c[e + 4 >> 2] | 0) + 1 | 0) | 0;
      e = c[e >> 2] | 0;
    } else g = os((g & 255) + 1 | 0) | 0;
    Oq(g, e) | 0;
    f = Md(c[b >> 2] | 0, d, g, f) | 0;
    ps(g);
    return f | 0;
  }
  function mm(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15539, 5, 1408, 16491, 14, Io(e) | 0, 0);
    Ib = d;
    return;
  }
  function nm(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    Id(c[a >> 2] | 0, b, d, e, f);
    return 0;
  }
  function om(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15554, 6, 1376, 16498, 8, Go(e) | 0, 0);
    Ib = d;
    return;
  }
  function pm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Qd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function qm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Sd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function rm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return Nd(c[a >> 2] | 0, b, d) | 0;
  }
  function sm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    return Pd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function tm(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    return Jd(c[a >> 2] | 0, b, d, e, f) | 0;
  }
  function um(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15628, 6, 1344, 16616, 1, Eo(e) | 0, 0);
    Ib = d;
    return;
  }
  function vm(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0;
    g = a[f + 11 >> 0] | 0;
    if (g << 24 >> 24 < 0) {
      g = os((c[f + 4 >> 2] | 0) + 1 | 0) | 0;
      f = c[f >> 2] | 0;
    } else g = os((g & 255) + 1 | 0) | 0;
    Oq(g, f) | 0;
    e = Rd(c[b >> 2] | 0, d, e, g) | 0;
    ps(g);
    return e | 0;
  }
  function wm(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15643, 5, 1312, 16491, 15, Co(e) | 0, 0);
    Ib = d;
    return;
  }
  function xm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Td(c[a >> 2] | 0, b, d, e) | 0;
  }
  function ym(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 5, 1280, 16491, 16, Ao(f) | 0, 0);
    Ib = e;
    return;
  }
  function zm(b, d, e, f, g, h) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    var i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    i = a[d + 11 >> 0] | 0;
    o = i << 24 >> 24 < 0;
    if (o) i = c[d + 4 >> 2] | 0;else i = i & 255;
    n = os(i + 1 | 0) | 0;
    m = f + 11 | 0;
    i = a[m >> 0] | 0;
    if (i << 24 >> 24 < 0) i = c[f + 4 >> 2] | 0;else i = i & 255;
    k = os(i + 1 | 0) | 0;
    l = g + 11 | 0;
    i = a[l >> 0] | 0;
    if (i << 24 >> 24 < 0) i = c[g + 4 >> 2] | 0;else i = i & 255;
    j = os(i + 1 | 0) | 0;
    if (o) i = c[d >> 2] | 0;else i = d;
    Oq(n, i) | 0;
    if ((a[m >> 0] | 0) < 0) i = c[f >> 2] | 0;else i = f;
    Oq(k, i) | 0;
    if ((a[l >> 0] | 0) < 0) {
      g = c[g >> 2] | 0;
      Oq(j, g) | 0;
      g = c[b >> 2] | 0;
      g = Ud(g, n, e, k, j, h) | 0;
      ps(n);
      ps(k);
      ps(j);
      return g | 0;
    } else {
      Oq(j, g) | 0;
      g = c[b >> 2] | 0;
      g = Ud(g, n, e, k, j, h) | 0;
      ps(n);
      ps(k);
      ps(j);
      return g | 0;
    }
    return 0;
  }
  function Am(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15674, 7, 1248, 16431, 2, xo(e) | 0, 0);
    Ib = d;
    return;
  }
  function Bm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return yd(c[a >> 2] | 0, b, d) | 0;
  }
  function Cm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return ie(c[a >> 2] | 0, b, d) | 0;
  }
  function Dm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return Xd(c[a >> 2] | 0, b, d) | 0;
  }
  function Em(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[d + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, d) | 0;
    e = Vd(c[b >> 2] | 0, f, e) | 0;
    ps(f);
    return e | 0;
  }
  function Fm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return _d(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Gm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return Wd(c[a >> 2] | 0, b, d) | 0;
  }
  function Hm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return ae(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Im(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return he(c[a >> 2] | 0, b, d) | 0;
  }
  function Jm(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    return fe(c[a >> 2] | 0, b, d, e, f) | 0;
  }
  function Km(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 6, 1216, 16498, 9, vo(f) | 0, 0);
    Ib = e;
    return;
  }
  function Lm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return ee(c[a >> 2] | 0, b, d) | 0;
  }
  function Mm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return ce(c[a >> 2] | 0, b, d) | 0;
  }
  function Nm(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[e + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[e + 4 >> 2] | 0) + 1 | 0) | 0;
      e = c[e >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, e) | 0;
    d = Yd(c[b >> 2] | 0, d, f) | 0;
    ps(f);
    return d | 0;
  }
  function Om(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return $d(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Pm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Zd(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Qm(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15850, 5, 1184, 16491, 17, to(e) | 0, 0);
    Ib = d;
    return;
  }
  function Rm(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    return be(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Sm(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = +d;
    e = +e;
    f = +f;
    g = +g;
    return de(c[a >> 2] | 0, b, d, e, f, g) | 0;
  }
  function Tm(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 15875, 7, 1152, 16506, 1, ro(e) | 0, 0);
    Ib = d;
    return;
  }
  function Um(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    return ge(c[a >> 2] | 0, b, d, e, f) | 0;
  }
  function Vm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 6, 1120, 16498, 10, po(f) | 0, 0);
    Ib = e;
    return;
  }
  function Wm(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = je(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function Xm(a, b) {
    a = a | 0;
    b = b | 0;
    return ke(c[a >> 2] | 0, b) | 0;
  }
  function Ym(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return qe(c[a >> 2] | 0, b, d) | 0;
  }
  function Zm(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return le(c[a >> 2] | 0, b, d) | 0;
  }
  function _m(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[d + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, d) | 0;
    e = Ed(c[b >> 2] | 0, f, e) | 0;
    ps(f);
    return e | 0;
  }
  function $m(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return ne(c[a >> 2] | 0, b, d) | 0;
  }
  function an(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return oe(c[a >> 2] | 0, b, d, e) | 0;
  }
  function bn(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return re(c[a >> 2] | 0, b, d, e) | 0;
  }
  function cn(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16006, 5, 1088, 16491, 18, no(e) | 0, 0);
    Ib = d;
    return;
  }
  function dn(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[e + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[e + 4 >> 2] | 0) + 1 | 0) | 0;
      e = c[e >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, e) | 0;
    d = me(c[b >> 2] | 0, d, f) | 0;
    ps(f);
    return d | 0;
  }
  function en(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    return pe(c[a >> 2] | 0, b, d, e) | 0;
  }
  function fn(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = se(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function gn(a, b) {
    a = a | 0;
    b = b | 0;
    return ue(c[a >> 2] | 0, b) | 0;
  }
  function hn(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return ve(c[a >> 2] | 0, b, d) | 0;
  }
  function jn(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[d + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, d) | 0;
    e = te(c[b >> 2] | 0, f, e) | 0;
    ps(f);
    return e | 0;
  }
  function kn(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return xe(c[a >> 2] | 0, b, d) | 0;
  }
  function ln(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return ye(c[a >> 2] | 0, b, d) | 0;
  }
  function mn(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    return ze(c[a >> 2] | 0, b, d, e, f) | 0;
  }
  function nn(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    return Be(c[a >> 2] | 0, b, d, e, f) | 0;
  }
  function on(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0;
    f = a[e + 11 >> 0] | 0;
    if (f << 24 >> 24 < 0) {
      f = os((c[e + 4 >> 2] | 0) + 1 | 0) | 0;
      e = c[e >> 2] | 0;
    } else f = os((f & 255) + 1 | 0) | 0;
    Oq(f, e) | 0;
    d = we(c[b >> 2] | 0, d, f) | 0;
    ps(f);
    return d | 0;
  }
  function pn(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    return Ae(c[a >> 2] | 0, b, d, e, f) | 0;
  }
  function qn(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16151, 6, 1056, 16483, 1, lo(e) | 0, 0);
    Ib = d;
    return;
  }
  function rn(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    g = +g;
    h = h | 0;
    return Ce(c[a >> 2] | 0, b, d, e, f, g, h) | 0;
  }
  function sn(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16165, 8, 1024, 16473, 1, jo(e) | 0, 0);
    Ib = d;
    return;
  }
  function tn(a, b) {
    a = a | 0;
    b = b | 0;
    return zd(c[a >> 2] | 0, b) | 0;
  }
  function un(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    return De(c[a >> 2] | 0, b, d, e, f, g, h) | 0;
  }
  function vn(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16190, 8, 992, 16463, 1, ho(e) | 0, 0);
    Ib = d;
    return;
  }
  function wn(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    g = g | 0;
    h = +h;
    return Ee(c[a >> 2] | 0, b, d, e, f, g, h) | 0;
  }
  function xn(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16201, 8, 960, 16453, 1, fo(e) | 0, 0);
    Ib = d;
    return;
  }
  function yn(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    e = a[d + 11 >> 0] | 0;
    if (e << 24 >> 24 < 0) {
      e = os((c[d + 4 >> 2] | 0) + 1 | 0) | 0;
      d = c[d >> 2] | 0;
    } else e = os((e & 255) + 1 | 0) | 0;
    Oq(e, d) | 0;
    b = Fe(c[b >> 2] | 0, e) | 0;
    ps(e);
    return b | 0;
  }
  function zn(a, b) {
    a = a | 0;
    b = b | 0;
    return Ge(c[a >> 2] | 0, b) | 0;
  }
  function An(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    return Qe(c[a >> 2] | 0, b, d, e, f, g) | 0;
  }
  function Bn(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 7, 928, 16431, 3, co(f) | 0, 0);
    Ib = e;
    return;
  }
  function Cn(a, b, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    return Je(c[a >> 2] | 0, b, d, e, f, g, h, i, j, k) | 0;
  }
  function Dn(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16245, 11, 880, 16440, 1, ao(e) | 0, 0);
    Ib = d;
    return;
  }
  function En(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    return He(c[a >> 2] | 0, b, d, e, f, g) | 0;
  }
  function Fn(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16256, 7, 848, 16431, 4, Zn(e) | 0, 0);
    Ib = d;
    return;
  }
  function Gn(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    return Ie(c[a >> 2] | 0, b, d) | 0;
  }
  function Hn(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    return Oe(c[a >> 2] | 0, b, d, e, f, g) | 0;
  }
  function In(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = +g;
    return Re(c[a >> 2] | 0, b, d, e, f, g) | 0;
  }
  function Jn(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = b;
    c[f + 4 >> 2] = d;
    fa(2512, a | 0, 7, 816, 16422, 1, Xn(f) | 0, 0);
    Ib = e;
    return;
  }
  function Kn(a, b, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = +k;
    return Ke(c[a >> 2] | 0, b, d, e, f, g, h, i, j, k) | 0;
  }
  function Ln(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = a;
    c[e + 4 >> 2] = b;
    fa(2512, 16302, 11, 768, 16392, 1, Rn(e) | 0, 0);
    Ib = d;
    return;
  }
  function Mn(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Le(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Nn(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    return Me(c[a >> 2] | 0, b, d, e) | 0;
  }
  function On(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    return Ne(c[a >> 2] | 0, b, d, e) | 0;
  }
  function Pn(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = +d;
    return Se(c[a >> 2] | 0, b, d) | 0;
  }
  function Qn(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = +g;
    return Pe(c[a >> 2] | 0, b, d, e, f, g) | 0;
  }
  function Rn(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Sn(a, b, d, e, f, g, h, i, j, k, l) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = +l;
    var m = 0,
      n = 0;
    Tn(b) | 0;
    m = c[a >> 2] | 0;
    n = c[a + 4 >> 2] | 0;
    a = b + (n >> 1) | 0;
    if (n & 1) m = c[(c[a >> 2] | 0) + m >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    f = Un(f) | 0;
    g = Un(g) | 0;
    h = Un(h) | 0;
    i = Un(i) | 0;
    j = Un(j) | 0;
    n = Un(k) | 0;
    l = +Vn(l);
    return Wn(pc[m & 1](a, d, e, f, g, h, i, j, n, l) | 0) | 0;
  }
  function Tn(a) {
    a = a | 0;
    return a | 0;
  }
  function Un(a) {
    a = a | 0;
    return a | 0;
  }
  function Vn(a) {
    a = +a;
    return +a;
  }
  function Wn(a) {
    a = a | 0;
    return a | 0;
  }
  function Xn(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Yn(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = +h;
    var i = 0,
      j = 0;
    Tn(b) | 0;
    i = c[a >> 2] | 0;
    j = c[a + 4 >> 2] | 0;
    a = b + (j >> 1) | 0;
    if (j & 1) i = c[(c[a >> 2] | 0) + i >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    f = Un(f) | 0;
    j = Un(g) | 0;
    h = +Vn(h);
    return Wn(jc[i & 3](a, d, e, f, j, h) | 0) | 0;
  }
  function Zn(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function _n(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    var i = 0,
      j = 0;
    Tn(b) | 0;
    i = c[a >> 2] | 0;
    j = c[a + 4 >> 2] | 0;
    a = b + (j >> 1) | 0;
    if (j & 1) i = c[(c[a >> 2] | 0) + i >> 2] | 0;
    d = Un(d) | 0;
    e = $n(e) | 0;
    f = $n(f) | 0;
    g = $n(g) | 0;
    j = $n(h) | 0;
    return Wn(lc[i & 15](a, d, e, f, g, j) | 0) | 0;
  }
  function $n(a) {
    a = a | 0;
    return a | 0;
  }
  function ao(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function bo(a, b, d, e, f, g, h, i, j, k, l) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = l | 0;
    var m = 0,
      n = 0;
    Tn(b) | 0;
    m = c[a >> 2] | 0;
    n = c[a + 4 >> 2] | 0;
    a = b + (n >> 1) | 0;
    if (n & 1) m = c[(c[a >> 2] | 0) + m >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    f = $n(f) | 0;
    g = $n(g) | 0;
    h = $n(h) | 0;
    i = $n(i) | 0;
    j = $n(j) | 0;
    k = $n(k) | 0;
    n = $n(l) | 0;
    return Wn(qc[m & 1](a, d, e, f, g, h, i, j, k, n) | 0) | 0;
  }
  function co(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function eo(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    var i = 0,
      j = 0;
    Tn(b) | 0;
    i = c[a >> 2] | 0;
    j = c[a + 4 >> 2] | 0;
    a = b + (j >> 1) | 0;
    if (j & 1) i = c[(c[a >> 2] | 0) + i >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    f = $n(f) | 0;
    g = $n(g) | 0;
    j = $n(h) | 0;
    return Wn(lc[i & 15](a, d, e, f, g, j) | 0) | 0;
  }
  function fo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function go(a, b, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = +g;
    h = h | 0;
    i = +i;
    var j = 0,
      k = 0;
    Tn(b) | 0;
    j = c[a >> 2] | 0;
    k = c[a + 4 >> 2] | 0;
    a = b + (k >> 1) | 0;
    if (k & 1) j = c[(c[a >> 2] | 0) + j >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    f = Un(f) | 0;
    g = +Vn(g);
    k = Un(h) | 0;
    i = +Vn(i);
    return Wn(gc[j & 1](a, d, e, f, g, k, i) | 0) | 0;
  }
  function ho(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function io(a, b, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    var j = 0,
      k = 0;
    Tn(b) | 0;
    j = c[a >> 2] | 0;
    k = c[a + 4 >> 2] | 0;
    a = b + (k >> 1) | 0;
    if (k & 1) j = c[(c[a >> 2] | 0) + j >> 2] | 0;
    d = Un(d) | 0;
    e = $n(e) | 0;
    f = $n(f) | 0;
    g = $n(g) | 0;
    h = $n(h) | 0;
    k = $n(i) | 0;
    return Wn(nc[j & 7](a, d, e, f, g, h, k) | 0) | 0;
  }
  function jo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function ko(a, b, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    g = g | 0;
    h = +h;
    i = i | 0;
    var j = 0,
      k = 0;
    Tn(b) | 0;
    j = c[a >> 2] | 0;
    k = c[a + 4 >> 2] | 0;
    a = b + (k >> 1) | 0;
    if (k & 1) j = c[(c[a >> 2] | 0) + j >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    f = +Vn(f);
    g = Un(g) | 0;
    h = +Vn(h);
    k = $n(i) | 0;
    return Wn(bc[j & 1](a, d, e, f, g, h, k) | 0) | 0;
  }
  function lo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function mo(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    g = +g;
    var h = 0,
      i = 0;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    d = Un(d) | 0;
    i = Un(e) | 0;
    f = +Vn(f);
    g = +Vn(g);
    return Wn(Yb[h & 3](a, d, i, f, g) | 0) | 0;
  }
  function no(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function oo(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = Un(d) | 0;
    e = $n(e) | 0;
    h = Un(f) | 0;
    return Wn(dc[g & 31](a, d, e, h) | 0) | 0;
  }
  function po(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function qo(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    d = Un(d) | 0;
    e = $n(e) | 0;
    f = $n(f) | 0;
    i = Un(g) | 0;
    return Wn(ic[h & 31](a, d, e, f, i) | 0) | 0;
  }
  function ro(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function so(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    var i = 0,
      j = 0;
    Tn(b) | 0;
    i = c[a >> 2] | 0;
    j = c[a + 4 >> 2] | 0;
    a = b + (j >> 1) | 0;
    if (j & 1) i = c[(c[a >> 2] | 0) + i >> 2] | 0;
    j = Un(d) | 0;
    e = +Vn(e);
    f = +Vn(f);
    g = +Vn(g);
    h = +Vn(h);
    return Wn(Sb[i & 1](a, j, e, f, g, h) | 0) | 0;
  }
  function to(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function uo(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = $n(d) | 0;
    e = Un(e) | 0;
    h = Un(f) | 0;
    return Wn(dc[g & 31](a, d, e, h) | 0) | 0;
  }
  function vo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function wo(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    f = $n(f) | 0;
    i = $n(g) | 0;
    return Wn(ic[h & 31](a, d, e, f, i) | 0) | 0;
  }
  function xo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function yo(a, b, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    var i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    m = Ib;
    Ib = Ib + 48 | 0;
    j = m + 24 | 0;
    k = m + 12 | 0;
    l = m;
    Tn(b) | 0;
    i = c[a >> 2] | 0;
    n = c[a + 4 >> 2] | 0;
    a = b + (n >> 1) | 0;
    if (n & 1) i = c[(c[a >> 2] | 0) + i >> 2] | 0;
    zo(j, d);
    e = Un(e) | 0;
    zo(k, f);
    zo(l, g);
    n = $n(h) | 0;
    n = Wn(lc[i & 15](a, j, e, k, l, n) | 0) | 0;
    bt(l);
    bt(k);
    bt(j);
    Ib = m;
    return n | 0;
  }
  function zo(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    d = c[b >> 2] | 0;
    c[a >> 2] = 0;
    c[a + 4 >> 2] = 0;
    c[a + 8 >> 2] = 0;
    _s(a, b + 4 | 0, d);
    return;
  }
  function Ao(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Bo(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    h = Un(f) | 0;
    return Wn(dc[g & 31](a, d, e, h) | 0) | 0;
  }
  function Co(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Do(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0;
    i = Ib;
    Ib = Ib + 16 | 0;
    h = i;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    j = c[a + 4 >> 2] | 0;
    a = b + (j >> 1) | 0;
    if (j & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = Un(d) | 0;
    j = Un(e) | 0;
    zo(h, f);
    j = Wn(dc[g & 31](a, d, j, h) | 0) | 0;
    bt(h);
    Ib = i;
    return j | 0;
  }
  function Eo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Fo(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = +g;
    var h = 0,
      i = 0;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    i = Un(d) | 0;
    e = +Vn(e);
    f = +Vn(f);
    g = +Vn(g);
    return Wn(Rb[h & 1](a, i, e, f, g) | 0) | 0;
  }
  function Go(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Ho(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    d = $n(d) | 0;
    e = $n(e) | 0;
    f = $n(f) | 0;
    i = $n(g) | 0;
    return Wn(ic[h & 31](a, d, e, f, i) | 0) | 0;
  }
  function Io(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Jo(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0;
    i = Ib;
    Ib = Ib + 16 | 0;
    h = i;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    j = c[a + 4 >> 2] | 0;
    a = b + (j >> 1) | 0;
    if (j & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = Un(d) | 0;
    zo(h, e);
    j = $n(f) | 0;
    j = Wn(dc[g & 31](a, d, h, j) | 0) | 0;
    bt(h);
    Ib = i;
    return j | 0;
  }
  function Ko(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Lo(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    k = Ib;
    Ib = Ib + 32 | 0;
    i = k + 12 | 0;
    j = k;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    l = c[a + 4 >> 2] | 0;
    a = b + (l >> 1) | 0;
    if (l & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    zo(i, f);
    zo(j, g);
    e = +Vn(e);
    l = Un(d) | 0;
    l = Wn(Vb[h & 1](a, l, e, i, j) | 0) | 0;
    bt(j);
    bt(i);
    Ib = k;
    return l | 0;
  }
  function Mo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function No(a, b, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    i = +i;
    j = +j;
    k = k | 0;
    var l = 0,
      m = 0,
      n = 0,
      o = 0;
    n = Ib;
    Ib = Ib + 16 | 0;
    m = n;
    Tn(b) | 0;
    l = c[a >> 2] | 0;
    o = c[a + 4 >> 2] | 0;
    a = b + (o >> 1) | 0;
    if (o & 1) l = c[(c[a >> 2] | 0) + l >> 2] | 0;
    o = Un(d) | 0;
    e = +Vn(e);
    f = +Vn(f);
    g = +Vn(g);
    h = +Vn(h);
    i = +Vn(i);
    j = +Vn(j);
    zo(m, k);
    o = Wn(Tb[l & 1](a, o, e, f, g, h, i, j, m) | 0) | 0;
    bt(m);
    Ib = n;
    return o | 0;
  }
  function Oo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Po(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = Un(d) | 0;
    h = Un(e) | 0;
    f = +Vn(f);
    return Wn(Xb[g & 7](a, d, h, f) | 0) | 0;
  }
  function Qo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Ro(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    g = h;
    Tn(b) | 0;
    f = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) f = c[(c[a >> 2] | 0) + f >> 2] | 0;
    i = Un(d) | 0;
    zo(g, e);
    i = Wn(Wb[f & 63](a, i, g) | 0) | 0;
    bt(g);
    Ib = h;
    return i | 0;
  }
  function So(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function To(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0;
    j = Ib;
    Ib = Ib + 16 | 0;
    i = j;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    k = c[a + 4 >> 2] | 0;
    a = b + (k >> 1) | 0;
    if (k & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    k = Un(d) | 0;
    e = +Vn(e);
    f = +Vn(f);
    zo(i, g);
    k = Wn(Ub[h & 1](a, k, e, f, i) | 0) | 0;
    bt(i);
    Ib = j;
    return k | 0;
  }
  function Uo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Vo(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    f = +f;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    h = Un(d) | 0;
    e = +Vn(e);
    f = +Vn(f);
    return Wn(Qb[g & 1](a, h, e, f) | 0) | 0;
  }
  function Wo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Xo(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    g = h;
    Tn(b) | 0;
    f = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) f = c[(c[a >> 2] | 0) + f >> 2] | 0;
    zo(g, d);
    i = $n(e) | 0;
    i = Wn(Wb[f & 63](a, g, i) | 0) | 0;
    bt(g);
    Ib = h;
    return i | 0;
  }
  function Yo(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Zo(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = Un(d) | 0;
    e = $n(e) | 0;
    h = $n(f) | 0;
    return Wn(dc[g & 31](a, d, e, h) | 0) | 0;
  }
  function _o(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function $o(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    Tn(b) | 0;
    f = c[a >> 2] | 0;
    g = c[a + 4 >> 2] | 0;
    a = b + (g >> 1) | 0;
    if (g & 1) f = c[(c[a >> 2] | 0) + f >> 2] | 0;
    d = Un(d) | 0;
    g = Un(e) | 0;
    return Wn(Wb[f & 63](a, d, g) | 0) | 0;
  }
  function ap(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function bp(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0;
    i = Ib;
    Ib = Ib + 16 | 0;
    h = i;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    j = c[a + 4 >> 2] | 0;
    a = b + (j >> 1) | 0;
    if (j & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    zo(h, d);
    e = Un(e) | 0;
    j = $n(f) | 0;
    j = Wn(dc[g & 31](a, h, e, j) | 0) | 0;
    bt(h);
    Ib = i;
    return j | 0;
  }
  function cp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function dp(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    l = Ib;
    Ib = Ib + 48 | 0;
    i = l + 24 | 0;
    j = l + 12 | 0;
    k = l;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    m = c[a + 4 >> 2] | 0;
    a = b + (m >> 1) | 0;
    if (m & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    m = Un(d) | 0;
    zo(i, e);
    zo(j, f);
    zo(k, g);
    m = Wn(ic[h & 31](a, m, i, j, k) | 0) | 0;
    bt(k);
    bt(j);
    bt(i);
    Ib = l;
    return m | 0;
  }
  function ep(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function fp(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = +e;
    var f = 0,
      g = 0;
    Tn(b) | 0;
    f = c[a >> 2] | 0;
    g = c[a + 4 >> 2] | 0;
    a = b + (g >> 1) | 0;
    if (g & 1) f = c[(c[a >> 2] | 0) + f >> 2] | 0;
    g = Un(d) | 0;
    e = +Vn(e);
    return Wn(Pb[f & 3](a, g, e) | 0) | 0;
  }
  function gp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function hp(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    Tn(b) | 0;
    f = c[a >> 2] | 0;
    g = c[a + 4 >> 2] | 0;
    a = b + (g >> 1) | 0;
    if (g & 1) f = c[(c[a >> 2] | 0) + f >> 2] | 0;
    d = ip(d) | 0;
    g = ip(e) | 0;
    return Wn(Wb[f & 63](a, d, g) | 0) | 0;
  }
  function ip(a) {
    a = a | 0;
    return a | 0;
  }
  function jp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function kp(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    i = c[a + 4 >> 2] | 0;
    a = b + (i >> 1) | 0;
    if (i & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    d = ip(d) | 0;
    e = ip(e) | 0;
    f = ip(f) | 0;
    i = ip(g) | 0;
    return Wn(ic[h & 31](a, d, e, f, i) | 0) | 0;
  }
  function lp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function mp(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    Tn(b) | 0;
    f = c[a >> 2] | 0;
    g = c[a + 4 >> 2] | 0;
    a = b + (g >> 1) | 0;
    if (g & 1) f = c[(c[a >> 2] | 0) + f >> 2] | 0;
    d = Un(d) | 0;
    g = $n(e) | 0;
    return Wn(Wb[f & 63](a, d, g) | 0) | 0;
  }
  function np(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function op(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = Un(d) | 0;
    e = Un(e) | 0;
    h = $n(f) | 0;
    return Wn(dc[g & 31](a, d, e, h) | 0) | 0;
  }
  function pp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function qp(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    Tn(b) | 0;
    e = c[a >> 2] | 0;
    f = c[a + 4 >> 2] | 0;
    a = b + (f >> 1) | 0;
    if (f & 1) e = c[(c[a >> 2] | 0) + e >> 2] | 0;
    f = ip(d) | 0;
    return Wn(Ob[e & 31](a, f) | 0) | 0;
  }
  function rp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function sp(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    Tn(b) | 0;
    e = c[a >> 2] | 0;
    f = c[a + 4 >> 2] | 0;
    a = b + (f >> 1) | 0;
    if (f & 1) e = c[(c[a >> 2] | 0) + e >> 2] | 0;
    f = Un(d) | 0;
    return Wn(Ob[e & 31](a, f) | 0) | 0;
  }
  function tp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function up(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0;
    g = Ib;
    Ib = Ib + 16 | 0;
    f = g;
    Tn(b) | 0;
    e = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) e = c[(c[a >> 2] | 0) + e >> 2] | 0;
    zo(f, d);
    h = Wn(Ob[e & 31](a, f) | 0) | 0;
    bt(f);
    Ib = g;
    return h | 0;
  }
  function vp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function wp(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    h = c[a + 4 >> 2] | 0;
    a = b + (h >> 1) | 0;
    if (h & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    d = $n(d) | 0;
    e = $n(e) | 0;
    h = $n(f) | 0;
    return Wn(dc[g & 31](a, d, e, h) | 0) | 0;
  }
  function xp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function yp(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    Tn(b) | 0;
    f = c[a >> 2] | 0;
    g = c[a + 4 >> 2] | 0;
    a = b + (g >> 1) | 0;
    if (g & 1) f = c[(c[a >> 2] | 0) + f >> 2] | 0;
    d = Un(d) | 0;
    g = ip(e) | 0;
    return Wn(Wb[f & 63](a, d, g) | 0) | 0;
  }
  function zp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Ap(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    k = Ib;
    Ib = Ib + 32 | 0;
    i = k + 12 | 0;
    j = k;
    Tn(b) | 0;
    h = c[a >> 2] | 0;
    l = c[a + 4 >> 2] | 0;
    a = b + (l >> 1) | 0;
    if (l & 1) h = c[(c[a >> 2] | 0) + h >> 2] | 0;
    zo(i, d);
    zo(j, e);
    f = Un(f) | 0;
    l = Un(g) | 0;
    l = Wn(ic[h & 31](a, i, j, f, l) | 0) | 0;
    bt(j);
    bt(i);
    Ib = k;
    return l | 0;
  }
  function Bp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Cp(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    Tn(b) | 0;
    d = c[a >> 2] | 0;
    e = c[a + 4 >> 2] | 0;
    a = b + (e >> 1) | 0;
    if (e & 1) d = c[(c[a >> 2] | 0) + d >> 2] | 0;
    return Wn(Nb[d & 31](a) | 0) | 0;
  }
  function Dp(a) {
    a = a | 0;
    var b = 0,
      d = 0;
    b = ns(8) | 0;
    d = c[a + 4 >> 2] | 0;
    c[b >> 2] = c[a >> 2];
    c[b + 4 >> 2] = d;
    return b | 0;
  }
  function Ep(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    k = Ib;
    Ib = Ib + 48 | 0;
    h = k + 24 | 0;
    i = k + 12 | 0;
    j = k;
    Tn(b) | 0;
    g = c[a >> 2] | 0;
    l = c[a + 4 >> 2] | 0;
    a = b + (l >> 1) | 0;
    if (l & 1) g = c[(c[a >> 2] | 0) + g >> 2] | 0;
    zo(h, d);
    zo(i, e);
    zo(j, f);
    l = Wn(dc[g & 31](a, h, i, j) | 0) | 0;
    bt(j);
    bt(i);
    bt(h);
    Ib = k;
    return l | 0;
  }
  function Fp(a) {
    a = a | 0;
    return Gp(Mb[a & 1]() | 0) | 0;
  }
  function Gp(a) {
    a = a | 0;
    return a | 0;
  }
  function Hp(a) {
    a = a | 0;
    Cc(a);
    return;
  }
  function Ip(a) {
    a = a | 0;
    Dc(a);
    return;
  }
  function Jp(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    b = Un(b) | 0;
    c = $n(c) | 0;
    return Wn(Ob[a & 31](b, c) | 0) | 0;
  }
  function Kp(a, b) {
    a = a | 0;
    b = b | 0;
    b = ip(b) | 0;
    return Wn(Nb[a & 31](b) | 0) | 0;
  }
  function Lp(a) {
    a = a | 0;
    return (_(Qp(c[a + 60 >> 2] | 0) | 0) | 0) & 65535 | 0;
  }
  function Mp(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    l = Ib;
    Ib = Ib + 32 | 0;
    h = l;
    i = l + 16 | 0;
    j = a + 28 | 0;
    f = c[j >> 2] | 0;
    c[h >> 2] = f;
    k = a + 20 | 0;
    f = (c[k >> 2] | 0) - f | 0;
    c[h + 4 >> 2] = f;
    c[h + 8 >> 2] = b;
    c[h + 12 >> 2] = d;
    e = a + 60 | 0;
    g = 2;
    b = f + d | 0;
    while (1) {
      if (!(Op(ba(c[e >> 2] | 0, h | 0, g | 0, i | 0) | 0) | 0)) f = c[i >> 2] | 0;else {
        c[i >> 2] = -1;
        f = -1;
      }
      if ((b | 0) == (f | 0)) {
        b = 6;
        break;
      }
      if ((f | 0) < 0) {
        b = 8;
        break;
      }
      p = c[h + 4 >> 2] | 0;
      n = f >>> 0 > p >>> 0;
      m = n ? h + 8 | 0 : h;
      p = f - (n ? p : 0) | 0;
      c[m >> 2] = (c[m >> 2] | 0) + p;
      o = m + 4 | 0;
      c[o >> 2] = (c[o >> 2] | 0) - p;
      g = g + (n << 31 >> 31) | 0;
      b = b - f | 0;
      h = m;
    }
    if ((b | 0) == 6) {
      p = c[a + 44 >> 2] | 0;
      c[a + 16 >> 2] = p + (c[a + 48 >> 2] | 0);
      c[j >> 2] = p;
      c[k >> 2] = p;
    } else if ((b | 0) == 8) {
      c[a + 16 >> 2] = 0;
      c[j >> 2] = 0;
      c[k >> 2] = 0;
      c[a >> 2] = c[a >> 2] | 32;
      if ((g | 0) == 2) d = 0;else d = d - (c[h + 4 >> 2] | 0) | 0;
    }
    Ib = l;
    return d | 0;
  }
  function Np(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    g = Ib;
    Ib = Ib + 16 | 0;
    f = g;
    if (!(Op(aa(c[a + 60 >> 2] | 0, b | 0, d | 0, e & 255 | 0, f | 0) | 0) | 0)) {
      b = f;
      a = c[b + 4 >> 2] | 0;
      b = c[b >> 2] | 0;
    } else {
      a = f;
      c[a >> 2] = -1;
      c[a + 4 >> 2] = -1;
      a = -1;
      b = -1;
    }
    z(a | 0);
    Ib = g;
    return b | 0;
  }
  function Op(a) {
    a = a | 0;
    if (!(a << 16 >> 16)) a = 0;else {
      c[5160] = a & 65535;
      a = -1;
    }
    return a | 0;
  }
  function Pp() {
    return 20640;
  }
  function Qp(a) {
    a = a | 0;
    return a | 0;
  }
  function Rp(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    l = Ib;
    Ib = Ib + 32 | 0;
    i = l;
    f = l + 16 | 0;
    c[i >> 2] = d;
    g = i + 4 | 0;
    j = b + 48 | 0;
    m = c[j >> 2] | 0;
    c[g >> 2] = e - ((m | 0) != 0 & 1);
    h = b + 44 | 0;
    c[i + 8 >> 2] = c[h >> 2];
    c[i + 12 >> 2] = m;
    if (!(Op($(c[b + 60 >> 2] | 0, i | 0, 2, f | 0) | 0) | 0)) {
      f = c[f >> 2] | 0;
      if ((f | 0) >= 1) {
        i = c[g >> 2] | 0;
        if (f >>> 0 > i >>> 0) {
          g = c[h >> 2] | 0;
          h = b + 4 | 0;
          c[h >> 2] = g;
          c[b + 8 >> 2] = g + (f - i);
          if (!(c[j >> 2] | 0)) f = e;else {
            c[h >> 2] = g + 1;
            a[d + (e + -1) >> 0] = a[g >> 0] | 0;
            f = e;
          }
        }
      } else k = 4;
    } else {
      c[f >> 2] = -1;
      f = -1;
      k = 4;
    }
    if ((k | 0) == 4) c[b >> 2] = f & 48 ^ 16 | c[b >> 2];
    Ib = l;
    return f | 0;
  }
  function Sp(a) {
    a = a | 0;
    return 0;
  }
  function Tp(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    z(0);
    return 0;
  }
  function Up(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    b = a + 112 | 0;
    c[b >> 2] = 0;
    c[b + 4 >> 2] = 0;
    b = c[a + 8 >> 2] | 0;
    e = b - (c[a + 4 >> 2] | 0) | 0;
    d = a + 120 | 0;
    c[d >> 2] = e;
    c[d + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
    c[a + 104 >> 2] = b;
    return;
  }
  function Vp(b) {
    b = b | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    g = b + 112 | 0;
    f = g;
    e = c[f >> 2] | 0;
    f = c[f + 4 >> 2] | 0;
    if (!((e | 0) == 0 & (f | 0) == 0) ? (j = b + 120 | 0, i = c[j + 4 >> 2] | 0, !((i | 0) < (f | 0) | ((i | 0) == (f | 0) ? (c[j >> 2] | 0) >>> 0 < e >>> 0 : 0))) : 0) k = 4;else {
      e = Xp(b) | 0;
      if ((e | 0) >= 0) {
        h = g;
        f = c[h >> 2] | 0;
        h = c[h + 4 >> 2] | 0;
        j = c[b + 8 >> 2] | 0;
        if (!((f | 0) == 0 & (h | 0) == 0)) {
          g = b + 4 | 0;
          i = c[g >> 2] | 0;
          l = j - i | 0;
          m = ((l | 0) < 0) << 31 >> 31;
          n = b + 120 | 0;
          h = nt(f | 0, h | 0, c[n >> 2] | 0, c[n + 4 >> 2] | 0) | 0;
          n = A() | 0;
          f = j;
          if ((n | 0) > (m | 0) | (n | 0) == (m | 0) & h >>> 0 > l >>> 0) k = 9;else c[b + 104 >> 2] = i + (h + -1);
        } else {
          g = b + 4 | 0;
          f = j;
          k = 9;
        }
        if ((k | 0) == 9) c[b + 104 >> 2] = j;
        if (!f) f = c[g >> 2] | 0;else {
          n = c[g >> 2] | 0;
          l = f + 1 - n | 0;
          f = b + 120 | 0;
          m = f;
          l = mt(c[m >> 2] | 0, c[m + 4 >> 2] | 0, l | 0, ((l | 0) < 0) << 31 >> 31 | 0) | 0;
          m = A() | 0;
          c[f >> 2] = l;
          c[f + 4 >> 2] = m;
          f = n;
        }
        f = f + -1 | 0;
        if ((e | 0) != (d[f >> 0] | 0 | 0)) a[f >> 0] = e;
      } else k = 4;
    }
    if ((k | 0) == 4) {
      c[b + 104 >> 2] = 0;
      e = -1;
    }
    return e | 0;
  }
  function Wp(a) {
    a = a | 0;
    return ((a | 0) == 32 | (a + -9 | 0) >>> 0 < 5) & 1 | 0;
  }
  function Xp(a) {
    a = a | 0;
    var b = 0,
      e = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    b = e;
    if ((Yp(a) | 0) == 0 ? (Wb[c[a + 32 >> 2] & 63](a, b, 1) | 0) == 1 : 0) a = d[b >> 0] | 0;else a = -1;
    Ib = e;
    return a | 0;
  }
  function Yp(b) {
    b = b | 0;
    var d = 0,
      e = 0;
    d = b + 74 | 0;
    e = a[d >> 0] | 0;
    a[d >> 0] = e + 255 | e;
    d = b + 20 | 0;
    e = b + 28 | 0;
    if ((c[d >> 2] | 0) >>> 0 > (c[e >> 2] | 0) >>> 0) Wb[c[b + 36 >> 2] & 63](b, 0, 0) | 0;
    c[b + 16 >> 2] = 0;
    c[e >> 2] = 0;
    c[d >> 2] = 0;
    d = c[b >> 2] | 0;
    if (!(d & 4)) {
      e = (c[b + 44 >> 2] | 0) + (c[b + 48 >> 2] | 0) | 0;
      c[b + 8 >> 2] = e;
      c[b + 4 >> 2] = e;
      d = d << 27 >> 31;
    } else {
      c[b >> 2] = d | 32;
      d = -1;
    }
    return d | 0;
  }
  function Zp(a, b) {
    a = +a;
    b = +b;
    var d = 0,
      e = 0;
    g[h >> 3] = a;
    e = c[h >> 2] | 0;
    d = c[h + 4 >> 2] | 0;
    g[h >> 3] = b;
    d = c[h + 4 >> 2] & -2147483648 | d & 2147483647;
    c[h >> 2] = e;
    c[h + 4 >> 2] = d;
    return + +g[h >> 3];
  }
  function _p(b, c) {
    b = b | 0;
    c = c | 0;
    var d = 0,
      e = 0;
    d = a[b >> 0] | 0;
    e = a[c >> 0] | 0;
    if (d << 24 >> 24 == 0 ? 1 : d << 24 >> 24 != e << 24 >> 24) b = e;else {
      do {
        b = b + 1 | 0;
        c = c + 1 | 0;
        d = a[b >> 0] | 0;
        e = a[c >> 0] | 0;
      } while (!(d << 24 >> 24 == 0 ? 1 : d << 24 >> 24 != e << 24 >> 24));
      b = e;
    }
    return (d & 255) - (b & 255) | 0;
  }
  function $p(b) {
    b = b | 0;
    var c = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    c = 6;
    d = 16773;
    while (1) {
      e = a[b >> 0] | 0;
      f = a[d >> 0] | 0;
      if (e << 24 >> 24 != f << 24 >> 24) {
        g = 4;
        break;
      }
      c = c + -1 | 0;
      if (!c) {
        b = 0;
        break;
      } else {
        b = b + 1 | 0;
        d = d + 1 | 0;
      }
    }
    if ((g | 0) == 4) b = (e & 255) - (f & 255) | 0;
    return b | 0;
  }
  function aq(a) {
    a = a | 0;
    return (a + -48 | 0) >>> 0 < 10 | 0;
  }
  function bq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = d;
    cq(a, b, f);
    Ib = e;
    return;
  }
  function cq(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    dq(a, 2147483647, b, c);
    return;
  }
  function dq(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 160 | 0;
    k = n + 144 | 0;
    l = n;
    ut(l | 0, 2856, 144) | 0;
    if ((d + -1 | 0) >>> 0 > 2147483646) {
      if (!d) {
        g = k;
        h = 1;
        m = 4;
      } else c[5160] = 61;
    } else {
      g = b;
      h = d;
      m = 4;
    }
    if ((m | 0) == 4 ? (m = -2 - g | 0, m = h >>> 0 > m >>> 0 ? m : h, c[l + 48 >> 2] = m, i = l + 20 | 0, c[i >> 2] = g, c[l + 44 >> 2] = g, k = g + m | 0, j = l + 16 | 0, c[j >> 2] = k, c[l + 28 >> 2] = k, eq(l, e, f) | 0, m | 0) : 0) {
      m = c[i >> 2] | 0;
      a[m + (((m | 0) == (c[j >> 2] | 0)) << 31 >> 31) >> 0] = 0;
    }
    Ib = n;
    return;
  }
  function eq(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    return hq(a, b, c) | 0;
  }
  function fq(b, e, f, g, h, i) {
    b = b | 0;
    e = +e;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    var j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0.0,
      u = 0,
      v = 0,
      x = 0,
      y = 0,
      z = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0,
      I = 0;
    I = Ib;
    Ib = Ib + 560 | 0;
    l = I + 32 | 0;
    u = I + 536 | 0;
    H = I;
    G = H;
    E = 0 - G | 0;
    m = I + 540 | 0;
    c[u >> 2] = 0;
    F = m + 12 | 0;
    vq(e) | 0;
    j = A() | 0;
    if ((j | 0) < 0) {
      e = -e;
      vq(e) | 0;
      D = 1;
      C = 16715;
      j = A() | 0;
    } else {
      D = (h & 2049 | 0) != 0 & 1;
      C = (h & 2048 | 0) == 0 ? (h & 1 | 0) == 0 ? 16716 : 16721 : 16718;
    }
    do if (0 == 0 & (j & 2146435072 | 0) == 2146435072) {
      H = (i & 32 | 0) != 0;
      j = D + 3 | 0;
      qq(b, 32, f, j, h & -65537);
      jq(b, C, D);
      jq(b, e != e | 0.0 != 0.0 ? H ? 16755 : 16742 : H ? 16734 : 16738, 3);
      qq(b, 32, f, j, h ^ 8192);
    } else {
      t = +wq(e, u) * 2.0;
      j = t != 0.0;
      if (j) c[u >> 2] = (c[u >> 2] | 0) + -1;
      s = i | 32;
      if ((s | 0) == 97) {
        o = i & 32;
        q = (o | 0) == 0 ? C : C + 9 | 0;
        p = D | 2;
        j = 12 - g | 0;
        do if (!(g >>> 0 > 11 | (j | 0) == 0)) {
          e = 8.0;
          do {
            j = j + -1 | 0;
            e = e * 16.0;
          } while ((j | 0) != 0);
          if ((a[q >> 0] | 0) == 45) {
            e = -(e + (-t - e));
            break;
          } else {
            e = t + e - e;
            break;
          }
        } else e = t; while (0);
        k = c[u >> 2] | 0;
        j = (k | 0) < 0 ? 0 - k | 0 : k;
        j = oq(j, ((j | 0) < 0) << 31 >> 31, F) | 0;
        if ((j | 0) == (F | 0)) {
          j = m + 11 | 0;
          a[j >> 0] = 48;
        }
        a[j + -1 >> 0] = (k >> 31 & 2) + 43;
        n = j + -2 | 0;
        a[n >> 0] = i + 15;
        k = (g | 0) < 1;
        l = (h & 8 | 0) == 0;
        m = H;
        do {
          E = ~~e;
          j = m + 1 | 0;
          a[m >> 0] = o | d[2448 + E >> 0];
          e = (e - +(E | 0)) * 16.0;
          if ((j - G | 0) == 1 ? !(l & (k & e == 0.0)) : 0) {
            a[j >> 0] = 46;
            m = m + 2 | 0;
          } else m = j;
        } while (e != 0.0);
        if ((g | 0) != 0 ? (-2 - G + m | 0) < (g | 0) : 0) {
          k = F;
          l = n;
          j = g + 2 + k - l | 0;
        } else {
          k = F;
          l = n;
          j = k - G - l + m | 0;
        }
        F = j + p | 0;
        qq(b, 32, f, F, h);
        jq(b, q, p);
        qq(b, 48, f, F, h ^ 65536);
        G = m - G | 0;
        jq(b, H, G);
        H = k - l | 0;
        qq(b, 48, j - (H + G) | 0, 0, 0);
        jq(b, n, H);
        qq(b, 32, f, F, h ^ 8192);
        j = F;
        break;
      }
      k = (g | 0) < 0 ? 6 : g;
      if (j) {
        j = (c[u >> 2] | 0) + -28 | 0;
        c[u >> 2] = j;
        e = t * 268435456.0;
      } else {
        e = t;
        j = c[u >> 2] | 0;
      }
      B = (j | 0) < 0 ? l : l + 288 | 0;
      l = B;
      do {
        y = ~~e >>> 0;
        c[l >> 2] = y;
        l = l + 4 | 0;
        e = (e - +(y >>> 0)) * 1.0e9;
      } while (e != 0.0);
      y = B;
      if ((j | 0) > 0) {
        o = B;
        while (1) {
          n = (j | 0) < 29 ? j : 29;
          j = l + -4 | 0;
          if (j >>> 0 >= o >>> 0) {
            m = 0;
            do {
              v = st(c[j >> 2] | 0, 0, n | 0) | 0;
              v = mt(v | 0, A() | 0, m | 0, 0) | 0;
              x = A() | 0;
              m = qt(v | 0, x | 0, 1e9, 0) | 0;
              r = lt(m | 0, A() | 0, -1e9, -1) | 0;
              x = mt(r | 0, A() | 0, v | 0, x | 0) | 0;
              A() | 0;
              c[j >> 2] = x;
              j = j + -4 | 0;
            } while (j >>> 0 >= o >>> 0);
            if (m) {
              x = o + -4 | 0;
              c[x >> 2] = m;
              m = x;
            } else m = o;
          } else m = o;
          a: do if (l >>> 0 > m >>> 0) {
            j = l;
            while (1) {
              l = j + -4 | 0;
              if (c[l >> 2] | 0) {
                l = j;
                break a;
              }
              if (l >>> 0 > m >>> 0) j = l;else break;
            }
          } while (0);
          j = (c[u >> 2] | 0) - n | 0;
          c[u >> 2] = j;
          if ((j | 0) > 0) o = m;else break;
        }
      } else m = B;
      if ((j | 0) < 0) {
        g = ((k + 25 | 0) / 9 | 0) + 1 | 0;
        r = (s | 0) == 102;
        do {
          q = 0 - j | 0;
          q = (q | 0) < 9 ? q : 9;
          if (m >>> 0 < l >>> 0) {
            n = (1 << q) + -1 | 0;
            o = 1e9 >>> q;
            p = 0;
            j = m;
            do {
              x = c[j >> 2] | 0;
              c[j >> 2] = (x >>> q) + p;
              p = w(x & n, o) | 0;
              j = j + 4 | 0;
            } while (j >>> 0 < l >>> 0);
            m = (c[m >> 2] | 0) == 0 ? m + 4 | 0 : m;
            if (p) {
              c[l >> 2] = p;
              l = l + 4 | 0;
            }
          } else m = (c[m >> 2] | 0) == 0 ? m + 4 | 0 : m;
          j = r ? B : m;
          l = (l - j >> 2 | 0) > (g | 0) ? j + (g << 2) | 0 : l;
          j = (c[u >> 2] | 0) + q | 0;
          c[u >> 2] = j;
        } while ((j | 0) < 0);
        r = m;
      } else r = m;
      if (r >>> 0 < l >>> 0) {
        j = (y - r >> 2) * 9 | 0;
        n = c[r >> 2] | 0;
        if (n >>> 0 >= 10) {
          m = 10;
          do {
            m = m * 10 | 0;
            j = j + 1 | 0;
          } while (n >>> 0 >= m >>> 0);
        }
      } else j = 0;
      u = (s | 0) == 103;
      v = (k | 0) != 0;
      m = k - ((s | 0) == 102 ? 0 : j) + ((v & u) << 31 >> 31) | 0;
      if ((m | 0) < (((l - y >> 2) * 9 | 0) + -9 | 0)) {
        m = m + 9216 | 0;
        x = (m | 0) / 9 | 0;
        g = B + 4 + (x + -1024 << 2) | 0;
        m = (w(x, -9) | 0) + m | 0;
        if ((m | 0) < 8) {
          n = 10;
          while (1) {
            n = n * 10 | 0;
            if ((m | 0) < 7) m = m + 1 | 0;else break;
          }
        } else n = 10;
        o = c[g >> 2] | 0;
        m = (o >>> 0) / (n >>> 0) | 0;
        q = w(m, n) | 0;
        o = o - q | 0;
        p = (g + 4 | 0) == (l | 0);
        if (!(p & (o | 0) == 0)) {
          e = (m & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
          x = n >>> 1;
          t = o >>> 0 < x >>> 0 ? .5 : p & (o | 0) == (x | 0) ? 1.0 : 1.5;
          if (D) {
            x = (a[C >> 0] | 0) == 45;
            t = x ? -t : t;
            e = x ? -e : e;
          }
          c[g >> 2] = q;
          if (e + t != e) {
            x = q + n | 0;
            c[g >> 2] = x;
            if (x >>> 0 > 999999999) {
              n = g;
              j = r;
              while (1) {
                m = n + -4 | 0;
                c[n >> 2] = 0;
                if (m >>> 0 < j >>> 0) {
                  j = j + -4 | 0;
                  c[j >> 2] = 0;
                }
                x = (c[m >> 2] | 0) + 1 | 0;
                c[m >> 2] = x;
                if (x >>> 0 > 999999999) n = m;else {
                  n = j;
                  break;
                }
              }
            } else {
              m = g;
              n = r;
            }
            j = (y - n >> 2) * 9 | 0;
            p = c[n >> 2] | 0;
            if (p >>> 0 >= 10) {
              o = 10;
              do {
                o = o * 10 | 0;
                j = j + 1 | 0;
              } while (p >>> 0 >= o >>> 0);
            }
          } else {
            m = g;
            n = r;
          }
        } else {
          m = g;
          n = r;
        }
        x = m + 4 | 0;
        l = l >>> 0 > x >>> 0 ? x : l;
      } else n = r;
      g = 0 - j | 0;
      b: do if (l >>> 0 > n >>> 0) while (1) {
        m = l + -4 | 0;
        if (c[m >> 2] | 0) {
          x = l;
          s = 1;
          break b;
        }
        if (m >>> 0 > n >>> 0) l = m;else {
          x = m;
          s = 0;
          break;
        }
      } else {
        x = l;
        s = 0;
      } while (0);
      do if (u) {
        k = k + ((v ^ 1) & 1) | 0;
        if ((k | 0) > (j | 0) & (j | 0) > -5) {
          o = i + -1 | 0;
          k = k + -1 - j | 0;
        } else {
          o = i + -2 | 0;
          k = k + -1 | 0;
        }
        if (!(h & 8)) {
          if (s ? (z = c[x + -4 >> 2] | 0, (z | 0) != 0) : 0) {
            if (!((z >>> 0) % 10 | 0)) {
              m = 0;
              l = 10;
              do {
                l = l * 10 | 0;
                m = m + 1 | 0;
              } while (!((z >>> 0) % (l >>> 0) | 0 | 0));
            } else m = 0;
          } else m = 9;
          l = ((x - y >> 2) * 9 | 0) + -9 | 0;
          if ((o | 32 | 0) == 102) {
            i = l - m | 0;
            i = (i | 0) > 0 ? i : 0;
            k = (k | 0) < (i | 0) ? k : i;
            break;
          } else {
            i = l + j - m | 0;
            i = (i | 0) > 0 ? i : 0;
            k = (k | 0) < (i | 0) ? k : i;
            break;
          }
        }
      } else o = i; while (0);
      r = (k | 0) != 0;
      p = r ? 1 : h >>> 3 & 1;
      q = (o | 32 | 0) == 102;
      if (q) {
        u = 0;
        j = (j | 0) > 0 ? j : 0;
      } else {
        l = (j | 0) < 0 ? g : j;
        l = oq(l, ((l | 0) < 0) << 31 >> 31, F) | 0;
        m = F;
        if ((m - l | 0) < 2) do {
          l = l + -1 | 0;
          a[l >> 0] = 48;
        } while ((m - l | 0) < 2);
        a[l + -1 >> 0] = (j >> 31 & 2) + 43;
        j = l + -2 | 0;
        a[j >> 0] = o;
        u = j;
        j = m - j | 0;
      }
      j = D + 1 + k + p + j | 0;
      qq(b, 32, f, j, h);
      jq(b, C, D);
      qq(b, 48, f, j, h ^ 65536);
      if (q) {
        p = n >>> 0 > B >>> 0 ? B : n;
        q = H + 9 | 0;
        n = q;
        o = H + 8 | 0;
        m = p;
        do {
          l = oq(c[m >> 2] | 0, 0, q) | 0;
          if ((m | 0) == (p | 0)) {
            if ((l | 0) == (q | 0)) {
              a[o >> 0] = 48;
              l = o;
            }
          } else if (l >>> 0 > H >>> 0) {
            vt(H | 0, 48, l - G | 0) | 0;
            do l = l + -1 | 0; while (l >>> 0 > H >>> 0);
          }
          jq(b, l, n - l | 0);
          m = m + 4 | 0;
        } while (m >>> 0 <= B >>> 0);
        if (!((h & 8 | 0) == 0 & (r ^ 1))) jq(b, 17175, 1);
        if ((k | 0) > 0 & m >>> 0 < x >>> 0) while (1) {
          l = oq(c[m >> 2] | 0, 0, q) | 0;
          if (l >>> 0 > H >>> 0) {
            vt(H | 0, 48, l - G | 0) | 0;
            do l = l + -1 | 0; while (l >>> 0 > H >>> 0);
          }
          jq(b, l, (k | 0) < 9 ? k : 9);
          m = m + 4 | 0;
          l = k + -9 | 0;
          if (!((k | 0) > 9 & m >>> 0 < x >>> 0)) {
            k = l;
            break;
          } else k = l;
        }
        qq(b, 48, k + 9 | 0, 9, 0);
      } else {
        s = s ? x : n + 4 | 0;
        if (n >>> 0 < s >>> 0 & (k | 0) > -1) {
          p = H + 9 | 0;
          q = (h & 8 | 0) == 0;
          g = p;
          r = H + 8 | 0;
          o = n;
          do {
            l = oq(c[o >> 2] | 0, 0, p) | 0;
            if ((l | 0) == (p | 0)) {
              a[r >> 0] = 48;
              l = r;
            }
            do if ((o | 0) == (n | 0)) {
              m = l + 1 | 0;
              jq(b, l, 1);
              if (q & (k | 0) < 1) {
                l = m;
                break;
              }
              jq(b, 17175, 1);
              l = m;
            } else {
              if (l >>> 0 <= H >>> 0) break;
              vt(H | 0, 48, l + E | 0) | 0;
              do l = l + -1 | 0; while (l >>> 0 > H >>> 0);
            } while (0);
            G = g - l | 0;
            jq(b, l, (k | 0) > (G | 0) ? G : k);
            k = k - G | 0;
            o = o + 4 | 0;
          } while (o >>> 0 < s >>> 0 & (k | 0) > -1);
        }
        qq(b, 48, k + 18 | 0, 18, 0);
        jq(b, u, F - u | 0);
      }
      qq(b, 32, f, j, h ^ 8192);
    } while (0);
    Ib = I;
    return ((j | 0) < (f | 0) ? f : j) | 0;
  }
  function gq(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0.0,
      e = 0;
    e = (c[b >> 2] | 0) + (8 - 1) & ~(8 - 1);
    d = +g[e >> 3];
    c[b >> 2] = e + 8;
    g[a >> 3] = d;
    return;
  }
  function hq(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    q = Ib;
    Ib = Ib + 224 | 0;
    m = q + 208 | 0;
    n = q + 160 | 0;
    o = q + 80 | 0;
    p = q;
    f = n;
    g = f + 40 | 0;
    do {
      c[f >> 2] = 0;
      f = f + 4 | 0;
    } while ((f | 0) < (g | 0));
    c[m >> 2] = c[e >> 2];
    if ((iq(0, d, m, o, n) | 0) < 0) e = -1;else {
      e = c[b >> 2] | 0;
      l = e & 32;
      if ((a[b + 74 >> 0] | 0) < 1) c[b >> 2] = e & -33;
      f = b + 48 | 0;
      if (!(c[f >> 2] | 0)) {
        g = b + 44 | 0;
        h = c[g >> 2] | 0;
        c[g >> 2] = p;
        i = b + 28 | 0;
        c[i >> 2] = p;
        j = b + 20 | 0;
        c[j >> 2] = p;
        c[f >> 2] = 80;
        k = b + 16 | 0;
        c[k >> 2] = p + 80;
        e = iq(b, d, m, o, n) | 0;
        if (h) {
          Wb[c[b + 36 >> 2] & 63](b, 0, 0) | 0;
          e = (c[j >> 2] | 0) == 0 ? -1 : e;
          c[g >> 2] = h;
          c[f >> 2] = 0;
          c[k >> 2] = 0;
          c[i >> 2] = 0;
          c[j >> 2] = 0;
        }
      } else e = iq(b, d, m, o, n) | 0;
      p = c[b >> 2] | 0;
      c[b >> 2] = p | l;
      e = (p & 32 | 0) == 0 ? e : -1;
    }
    Ib = q;
    return e | 0;
  }
  function iq(d, e, f, h, i) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    h = h | 0;
    i = i | 0;
    var j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0,
      z = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0,
      G = 0,
      H = 0;
    G = Ib;
    Ib = Ib + 64 | 0;
    C = G + 56 | 0;
    D = G + 40 | 0;
    z = G;
    E = G + 48 | 0;
    F = G + 60 | 0;
    c[C >> 2] = e;
    w = (d | 0) != 0;
    x = z + 40 | 0;
    y = x;
    z = z + 39 | 0;
    B = E + 4 | 0;
    k = 0;
    j = 0;
    m = 0;
    a: while (1) {
      s = e;
      while (1) {
        do if ((j | 0) > -1) if ((k | 0) > (2147483647 - j | 0)) {
          c[5160] = 61;
          j = -1;
          break;
        } else {
          j = k + j | 0;
          break;
        } while (0);
        k = a[s >> 0] | 0;
        if (!(k << 24 >> 24)) {
          v = 91;
          break a;
        }
        e = s;
        b: while (1) {
          switch (k << 24 >> 24) {
            case 37:
              {
                v = 10;
                break b;
              }
            case 0:
              {
                k = e;
                break b;
              }
            default:
              {}
          }
          u = e + 1 | 0;
          c[C >> 2] = u;
          k = a[u >> 0] | 0;
          e = u;
        }
        c: do if ((v | 0) == 10) {
          v = 0;
          k = e;
          do {
            if ((a[e + 1 >> 0] | 0) != 37) break c;
            k = k + 1 | 0;
            e = e + 2 | 0;
            c[C >> 2] = e;
          } while ((a[e >> 0] | 0) == 37);
        } while (0);
        k = k - s | 0;
        if (w) jq(d, s, k);
        if (!k) break;else s = e;
      }
      l = e + 1 | 0;
      k = a[l >> 0] | 0;
      if (!(aq(k) | 0)) {
        r = -1;
        n = m;
      } else {
        l = (a[e + 2 >> 0] | 0) == 36;
        r = l ? k + -48 | 0 : -1;
        n = l ? 1 : m;
        l = e + (l ? 3 : 1) | 0;
      }
      c[C >> 2] = l;
      k = a[l >> 0] | 0;
      e = (k << 24 >> 24) + -32 | 0;
      if (e >>> 0 > 31 | (1 << e & 75913 | 0) == 0) m = 0;else {
        m = 0;
        do {
          m = 1 << e | m;
          l = l + 1 | 0;
          c[C >> 2] = l;
          k = a[l >> 0] | 0;
          e = (k << 24 >> 24) + -32 | 0;
        } while (!(e >>> 0 > 31 | (1 << e & 75913 | 0) == 0));
      }
      if (k << 24 >> 24 == 42) {
        e = l + 1 | 0;
        k = a[e >> 0] | 0;
        if ((aq(k) | 0) != 0 ? (a[l + 2 >> 0] | 0) == 36 : 0) {
          c[i + (k + -48 << 2) >> 2] = 10;
          k = c[h + ((a[e >> 0] | 0) + -48 << 3) >> 2] | 0;
          n = 1;
          e = l + 3 | 0;
        } else {
          if (n | 0) {
            j = -1;
            break;
          }
          if (w) {
            n = (c[f >> 2] | 0) + (4 - 1) & ~(4 - 1);
            k = c[n >> 2] | 0;
            c[f >> 2] = n + 4;
            n = 0;
          } else {
            k = 0;
            n = 0;
          }
        }
        c[C >> 2] = e;
        u = (k | 0) < 0;
        t = u ? 0 - k | 0 : k;
        m = u ? m | 8192 : m;
        u = n;
      } else {
        k = kq(C) | 0;
        if ((k | 0) < 0) {
          j = -1;
          break;
        }
        t = k;
        u = n;
        e = c[C >> 2] | 0;
      }
      do if ((a[e >> 0] | 0) == 46) {
        k = e + 1 | 0;
        if ((a[k >> 0] | 0) != 42) {
          c[C >> 2] = k;
          k = kq(C) | 0;
          e = c[C >> 2] | 0;
          break;
        }
        l = e + 2 | 0;
        k = a[l >> 0] | 0;
        if (aq(k) | 0 ? (a[e + 3 >> 0] | 0) == 36 : 0) {
          c[i + (k + -48 << 2) >> 2] = 10;
          k = c[h + ((a[l >> 0] | 0) + -48 << 3) >> 2] | 0;
          e = e + 4 | 0;
          c[C >> 2] = e;
          break;
        }
        if (u | 0) {
          j = -1;
          break a;
        }
        if (w) {
          q = (c[f >> 2] | 0) + (4 - 1) & ~(4 - 1);
          k = c[q >> 2] | 0;
          c[f >> 2] = q + 4;
        } else k = 0;
        c[C >> 2] = l;
        e = l;
      } else k = -1; while (0);
      q = 0;
      l = e;
      while (1) {
        if (((a[l >> 0] | 0) + -65 | 0) >>> 0 > 57) {
          j = -1;
          break a;
        }
        e = l + 1 | 0;
        c[C >> 2] = e;
        n = a[(a[l >> 0] | 0) + -65 + (1984 + (q * 58 | 0)) >> 0] | 0;
        o = n & 255;
        if ((o + -1 | 0) >>> 0 < 8) {
          q = o;
          l = e;
        } else break;
      }
      if (!(n << 24 >> 24)) {
        j = -1;
        break;
      }
      p = (r | 0) > -1;
      do if (n << 24 >> 24 == 19) {
        if (p) {
          j = -1;
          break a;
        } else v = 52;
      } else {
        if (p) {
          c[i + (r << 2) >> 2] = o;
          p = h + (r << 3) | 0;
          r = c[p + 4 >> 2] | 0;
          v = D;
          c[v >> 2] = c[p >> 2];
          c[v + 4 >> 2] = r;
          v = 52;
          break;
        }
        if (!w) {
          j = 0;
          break a;
        }
        lq(D, o, f);
        v = 53;
      } while (0);
      if ((v | 0) == 52) {
        v = 0;
        if (w) v = 53;else k = 0;
      }
      d: do if ((v | 0) == 53) {
        v = 0;
        l = a[l >> 0] | 0;
        l = (q | 0) != 0 & (l & 15 | 0) == 3 ? l & -33 : l;
        p = m & -65537;
        r = (m & 8192 | 0) == 0 ? m : p;
        e: do switch (l | 0) {
          case 110:
            switch ((q & 255) << 24 >> 24) {
              case 0:
                {
                  c[c[D >> 2] >> 2] = j;
                  k = 0;
                  break d;
                }
              case 1:
                {
                  c[c[D >> 2] >> 2] = j;
                  k = 0;
                  break d;
                }
              case 2:
                {
                  k = c[D >> 2] | 0;
                  c[k >> 2] = j;
                  c[k + 4 >> 2] = ((j | 0) < 0) << 31 >> 31;
                  k = 0;
                  break d;
                }
              case 3:
                {
                  b[c[D >> 2] >> 1] = j;
                  k = 0;
                  break d;
                }
              case 4:
                {
                  a[c[D >> 2] >> 0] = j;
                  k = 0;
                  break d;
                }
              case 6:
                {
                  c[c[D >> 2] >> 2] = j;
                  k = 0;
                  break d;
                }
              case 7:
                {
                  k = c[D >> 2] | 0;
                  c[k >> 2] = j;
                  c[k + 4 >> 2] = ((j | 0) < 0) << 31 >> 31;
                  k = 0;
                  break d;
                }
              default:
                {
                  k = 0;
                  break d;
                }
            }
          case 112:
            {
              l = 120;
              k = k >>> 0 > 8 ? k : 8;
              m = r | 8;
              v = 65;
              break;
            }
          case 88:
          case 120:
            {
              m = r;
              v = 65;
              break;
            }
          case 111:
            {
              m = D;
              l = c[m >> 2] | 0;
              m = c[m + 4 >> 2] | 0;
              q = nq(l, m, x) | 0;
              p = y - q | 0;
              n = 0;
              o = 16705;
              k = (r & 8 | 0) == 0 | (k | 0) > (p | 0) ? k : p + 1 | 0;
              p = r;
              v = 71;
              break;
            }
          case 105:
          case 100:
            {
              m = D;
              l = c[m >> 2] | 0;
              m = c[m + 4 >> 2] | 0;
              if ((m | 0) < 0) {
                l = nt(0, 0, l | 0, m | 0) | 0;
                m = A() | 0;
                n = D;
                c[n >> 2] = l;
                c[n + 4 >> 2] = m;
                n = 1;
                o = 16705;
                v = 70;
                break e;
              } else {
                n = (r & 2049 | 0) != 0 & 1;
                o = (r & 2048 | 0) == 0 ? (r & 1 | 0) == 0 ? 16705 : 16707 : 16706;
                v = 70;
                break e;
              }
            }
          case 117:
            {
              m = D;
              n = 0;
              o = 16705;
              l = c[m >> 2] | 0;
              m = c[m + 4 >> 2] | 0;
              v = 70;
              break;
            }
          case 99:
            {
              a[z >> 0] = c[D >> 2];
              q = z;
              n = 0;
              o = 16705;
              m = 1;
              l = p;
              k = y;
              break;
            }
          case 115:
            {
              r = c[D >> 2] | 0;
              r = (r | 0) == 0 ? 16766 : r;
              s = pq(r, 0, k) | 0;
              H = (s | 0) == 0;
              q = r;
              n = 0;
              o = 16705;
              m = H ? k : s - r | 0;
              l = p;
              k = H ? r + k | 0 : s;
              break;
            }
          case 67:
            {
              c[E >> 2] = c[D >> 2];
              c[B >> 2] = 0;
              c[D >> 2] = E;
              p = -1;
              m = E;
              k = E;
              v = 78;
              break;
            }
          case 83:
            if (!k) {
              qq(d, 32, t, 0, r);
              k = 0;
              v = 88;
              break e;
            } else {
              v = c[D >> 2] | 0;
              p = k;
              m = v;
              k = v;
              v = 78;
              break e;
            }
          case 65:
          case 71:
          case 70:
          case 69:
          case 97:
          case 103:
          case 102:
          case 101:
            {
              k = fq(d, +g[D >> 3], t, k, r, l) | 0;
              break d;
            }
          default:
            {
              q = s;
              n = 0;
              o = 16705;
              m = k;
              l = r;
              k = y;
            }
        } while (0);
        f: do if ((v | 0) == 65) {
          H = D;
          s = c[H >> 2] | 0;
          H = c[H + 4 >> 2] | 0;
          q = mq(s, H, x, l & 32) | 0;
          o = (m & 8 | 0) == 0 | (s | 0) == 0 & (H | 0) == 0;
          n = o ? 0 : 2;
          o = o ? 16705 : 16705 + (l >>> 4) | 0;
          p = m;
          l = s;
          m = H;
          v = 71;
        } else if ((v | 0) == 70) {
          q = oq(l, m, x) | 0;
          p = r;
          v = 71;
        } else if ((v | 0) == 78) {
          v = 0;
          o = k;
          k = 0;
          while (1) {
            l = c[o >> 2] | 0;
            if (!l) break;
            l = rq(F, l) | 0;
            n = (l | 0) < 0;
            if (n | l >>> 0 > (p - k | 0) >>> 0) {
              v = 82;
              break;
            }
            k = l + k | 0;
            if (p >>> 0 > k >>> 0) o = o + 4 | 0;else break;
          }
          if ((v | 0) == 82) {
            v = 0;
            if (n) {
              j = -1;
              break a;
            }
          }
          qq(d, 32, t, k, r);
          if (!k) {
            k = 0;
            v = 88;
          } else {
            n = 0;
            while (1) {
              l = c[m >> 2] | 0;
              if (!l) {
                v = 88;
                break f;
              }
              l = rq(F, l) | 0;
              n = l + n | 0;
              if ((n | 0) > (k | 0)) {
                v = 88;
                break f;
              }
              jq(d, F, l);
              if (n >>> 0 >= k >>> 0) {
                v = 88;
                break;
              } else m = m + 4 | 0;
            }
          }
        } while (0);
        if ((v | 0) == 71) {
          v = 0;
          m = (l | 0) != 0 | (m | 0) != 0;
          l = (k | 0) != 0 | m;
          m = y - q + ((m ^ 1) & 1) | 0;
          q = l ? q : x;
          m = l ? (k | 0) > (m | 0) ? k : m : 0;
          l = (k | 0) > -1 ? p & -65537 : p;
          k = y;
        } else if ((v | 0) == 88) {
          v = 0;
          qq(d, 32, t, k, r ^ 8192);
          k = (t | 0) > (k | 0) ? t : k;
          break;
        }
        s = k - q | 0;
        r = (m | 0) < (s | 0) ? s : m;
        H = r + n | 0;
        k = (t | 0) < (H | 0) ? H : t;
        qq(d, 32, k, H, l);
        jq(d, o, n);
        qq(d, 48, k, H, l ^ 65536);
        qq(d, 48, r, s, 0);
        jq(d, q, s);
        qq(d, 32, k, H, l ^ 8192);
      } while (0);
      m = u;
    }
    g: do if ((v | 0) == 91) if (!d) if (!m) j = 0;else {
      j = 1;
      while (1) {
        k = c[i + (j << 2) >> 2] | 0;
        if (!k) break;
        lq(h + (j << 3) | 0, k, f);
        j = j + 1 | 0;
        if (j >>> 0 >= 10) {
          j = 1;
          break g;
        }
      }
      while (1) {
        j = j + 1 | 0;
        if (j >>> 0 >= 10) {
          j = 1;
          break g;
        }
        if (c[i + (j << 2) >> 2] | 0) {
          j = -1;
          break;
        }
      }
    } while (0);
    Ib = G;
    return j | 0;
  }
  function jq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    if (!(c[a >> 2] & 32)) tq(b, d, a) | 0;
    return;
  }
  function kq(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    e = c[b >> 2] | 0;
    f = a[e >> 0] | 0;
    if (!(aq(f << 24 >> 24) | 0)) d = 0;else {
      d = 0;
      do {
        d = (d * 10 | 0) + -48 + (f << 24 >> 24) | 0;
        e = e + 1 | 0;
        c[b >> 2] = e;
        f = a[e >> 0] | 0;
      } while ((aq(f << 24 >> 24) | 0) != 0);
    }
    return d | 0;
  }
  function lq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      h = 0.0;
    a: do if (b >>> 0 <= 20) do switch (b | 0) {
      case 9:
        {
          e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
          b = c[e >> 2] | 0;
          c[d >> 2] = e + 4;
          c[a >> 2] = b;
          break a;
        }
      case 10:
        {
          e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
          b = c[e >> 2] | 0;
          c[d >> 2] = e + 4;
          e = a;
          c[e >> 2] = b;
          c[e + 4 >> 2] = ((b | 0) < 0) << 31 >> 31;
          break a;
        }
      case 11:
        {
          e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
          b = c[e >> 2] | 0;
          c[d >> 2] = e + 4;
          e = a;
          c[e >> 2] = b;
          c[e + 4 >> 2] = 0;
          break a;
        }
      case 12:
        {
          e = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
          b = e;
          f = c[b >> 2] | 0;
          b = c[b + 4 >> 2] | 0;
          c[d >> 2] = e + 8;
          e = a;
          c[e >> 2] = f;
          c[e + 4 >> 2] = b;
          break a;
        }
      case 13:
        {
          f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
          e = c[f >> 2] | 0;
          c[d >> 2] = f + 4;
          e = (e & 65535) << 16 >> 16;
          f = a;
          c[f >> 2] = e;
          c[f + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
          break a;
        }
      case 14:
        {
          f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
          e = c[f >> 2] | 0;
          c[d >> 2] = f + 4;
          f = a;
          c[f >> 2] = e & 65535;
          c[f + 4 >> 2] = 0;
          break a;
        }
      case 15:
        {
          f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
          e = c[f >> 2] | 0;
          c[d >> 2] = f + 4;
          e = (e & 255) << 24 >> 24;
          f = a;
          c[f >> 2] = e;
          c[f + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
          break a;
        }
      case 16:
        {
          f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
          e = c[f >> 2] | 0;
          c[d >> 2] = f + 4;
          f = a;
          c[f >> 2] = e & 255;
          c[f + 4 >> 2] = 0;
          break a;
        }
      case 17:
        {
          f = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
          h = +g[f >> 3];
          c[d >> 2] = f + 8;
          g[a >> 3] = h;
          break a;
        }
      case 18:
        {
          gq(a, d);
          break a;
        }
      default:
        break a;
    } while (0); while (0);
    return;
  }
  function mq(b, c, e, f) {
    b = b | 0;
    c = c | 0;
    e = e | 0;
    f = f | 0;
    if (!((b | 0) == 0 & (c | 0) == 0)) do {
      e = e + -1 | 0;
      a[e >> 0] = d[2448 + (b & 15) >> 0] | 0 | f;
      b = rt(b | 0, c | 0, 4) | 0;
      c = A() | 0;
    } while (!((b | 0) == 0 & (c | 0) == 0));
    return e | 0;
  }
  function nq(b, c, d) {
    b = b | 0;
    c = c | 0;
    d = d | 0;
    if (!((b | 0) == 0 & (c | 0) == 0)) do {
      d = d + -1 | 0;
      a[d >> 0] = b & 7 | 48;
      b = rt(b | 0, c | 0, 3) | 0;
      c = A() | 0;
    } while (!((b | 0) == 0 & (c | 0) == 0));
    return d | 0;
  }
  function oq(b, c, d) {
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    if (c >>> 0 > 0 | (c | 0) == 0 & b >>> 0 > 4294967295) {
      do {
        e = b;
        b = qt(b | 0, c | 0, 10, 0) | 0;
        f = c;
        c = A() | 0;
        g = lt(b | 0, c | 0, -10, -1) | 0;
        g = mt(g | 0, A() | 0, e | 0, f | 0) | 0;
        A() | 0;
        d = d + -1 | 0;
        a[d >> 0] = g & 255 | 48;
      } while (f >>> 0 > 9 | (f | 0) == 9 & e >>> 0 > 4294967295);
      c = b;
    } else c = b;
    if (c) do {
      g = c;
      c = (c >>> 0) / 10 | 0;
      f = ((w(c, -10) | 0) + g | 48) & 255;
      d = d + -1 | 0;
      a[d >> 0] = f;
    } while (g >>> 0 >= 10);
    return d | 0;
  }
  function pq(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    h = d & 255;
    f = (e | 0) != 0;
    a: do if (f & (b & 3 | 0) != 0) {
      g = d & 255;
      while (1) {
        if ((a[b >> 0] | 0) == g << 24 >> 24) break a;
        b = b + 1 | 0;
        e = e + -1 | 0;
        f = (e | 0) != 0;
        if (!(f & (b & 3 | 0) != 0)) {
          i = 5;
          break;
        }
      }
    } else i = 5; while (0);
    b: do if ((i | 0) == 5) {
      do if (f) {
        g = d & 255;
        if ((a[b >> 0] | 0) == g << 24 >> 24) if (!e) break;else break b;
        f = w(h, 16843009) | 0;
        c: do if (e >>> 0 > 3) while (1) {
          h = c[b >> 2] ^ f;
          if ((h & -2139062144 ^ -2139062144) & h + -16843009 | 0) break c;
          b = b + 4 | 0;
          e = e + -4 | 0;
          if (e >>> 0 <= 3) {
            i = 11;
            break;
          }
        } else i = 11; while (0);
        if ((i | 0) == 11) if (!e) break;
        while (1) {
          if ((a[b >> 0] | 0) == g << 24 >> 24) break b;
          e = e + -1 | 0;
          if (!e) break;else b = b + 1 | 0;
        }
      } while (0);
      b = 0;
    } while (0);
    return b | 0;
  }
  function qq(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    g = Ib;
    Ib = Ib + 256 | 0;
    f = g;
    if ((c | 0) > (d | 0) & (e & 73728 | 0) == 0) {
      c = c - d | 0;
      vt(f | 0, b << 24 >> 24 | 0, (c >>> 0 < 256 ? c : 256) | 0) | 0;
      if (c >>> 0 > 255) {
        d = c;
        do {
          jq(a, f, 256);
          d = d + -256 | 0;
        } while (d >>> 0 > 255);
        c = c & 255;
      }
      jq(a, f, c);
    }
    Ib = g;
    return;
  }
  function rq(a, b) {
    a = a | 0;
    b = b | 0;
    if (!a) a = 0;else a = sq(a, b) | 0;
    return a | 0;
  }
  function sq(b, d) {
    b = b | 0;
    d = d | 0;
    do if (b) {
      if (d >>> 0 < 128) {
        a[b >> 0] = d;
        b = 1;
        break;
      }
      if (!(c[c[937] >> 2] | 0)) if ((d & -128 | 0) == 57216) {
        a[b >> 0] = d;
        b = 1;
        break;
      } else {
        c[5160] = 25;
        b = -1;
        break;
      }
      if (d >>> 0 < 2048) {
        a[b >> 0] = d >>> 6 | 192;
        a[b + 1 >> 0] = d & 63 | 128;
        b = 2;
        break;
      }
      if (d >>> 0 < 55296 | (d & -8192 | 0) == 57344) {
        a[b >> 0] = d >>> 12 | 224;
        a[b + 1 >> 0] = d >>> 6 & 63 | 128;
        a[b + 2 >> 0] = d & 63 | 128;
        b = 3;
        break;
      }
      if ((d + -65536 | 0) >>> 0 < 1048576) {
        a[b >> 0] = d >>> 18 | 240;
        a[b + 1 >> 0] = d >>> 12 & 63 | 128;
        a[b + 2 >> 0] = d >>> 6 & 63 | 128;
        a[b + 3 >> 0] = d & 63 | 128;
        b = 4;
        break;
      } else {
        c[5160] = 25;
        b = -1;
        break;
      }
    } else b = 1; while (0);
    return b | 0;
  }
  function tq(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    f = e + 16 | 0;
    g = c[f >> 2] | 0;
    if (!g) {
      if (!(uq(e) | 0)) {
        g = c[f >> 2] | 0;
        h = 5;
      } else f = 0;
    } else h = 5;
    a: do if ((h | 0) == 5) {
      j = e + 20 | 0;
      i = c[j >> 2] | 0;
      f = i;
      if ((g - i | 0) >>> 0 < d >>> 0) {
        f = Wb[c[e + 36 >> 2] & 63](e, b, d) | 0;
        break;
      }
      b: do if ((d | 0) == 0 | (a[e + 75 >> 0] | 0) < 0) {
        h = 0;
        g = b;
      } else {
        i = d;
        while (1) {
          g = i + -1 | 0;
          if ((a[b + g >> 0] | 0) == 10) break;
          if (!g) {
            h = 0;
            g = b;
            break b;
          } else i = g;
        }
        f = Wb[c[e + 36 >> 2] & 63](e, b, i) | 0;
        if (f >>> 0 < i >>> 0) break a;
        h = i;
        g = b + i | 0;
        d = d - i | 0;
        f = c[j >> 2] | 0;
      } while (0);
      ut(f | 0, g | 0, d | 0) | 0;
      c[j >> 2] = (c[j >> 2] | 0) + d;
      f = h + d | 0;
    } while (0);
    return f | 0;
  }
  function uq(b) {
    b = b | 0;
    var d = 0,
      e = 0;
    d = b + 74 | 0;
    e = a[d >> 0] | 0;
    a[d >> 0] = e + 255 | e;
    d = c[b >> 2] | 0;
    if (!(d & 8)) {
      c[b + 8 >> 2] = 0;
      c[b + 4 >> 2] = 0;
      e = c[b + 44 >> 2] | 0;
      c[b + 28 >> 2] = e;
      c[b + 20 >> 2] = e;
      c[b + 16 >> 2] = e + (c[b + 48 >> 2] | 0);
      b = 0;
    } else {
      c[b >> 2] = d | 32;
      b = -1;
    }
    return b | 0;
  }
  function vq(a) {
    a = +a;
    var b = 0;
    g[h >> 3] = a;
    b = c[h >> 2] | 0;
    z(c[h + 4 >> 2] | 0);
    return b | 0;
  }
  function wq(a, b) {
    a = +a;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    g[h >> 3] = a;
    d = c[h >> 2] | 0;
    e = c[h + 4 >> 2] | 0;
    f = rt(d | 0, e | 0, 52) | 0;
    A() | 0;
    switch (f & 2047) {
      case 0:
        {
          if (a != 0.0) {
            a = +wq(a * 18446744073709551616.0, b);
            d = (c[b >> 2] | 0) + -64 | 0;
          } else d = 0;
          c[b >> 2] = d;
          break;
        }
      case 2047:
        break;
      default:
        {
          c[b >> 2] = (f & 2047) + -1022;
          c[h >> 2] = d;
          c[h + 4 >> 2] = e & -2146435073 | 1071644672;
          a = +g[h >> 3];
        }
    }
    return +a;
  }
  function xq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = a + 20 | 0;
    f = c[e >> 2] | 0;
    a = (c[a + 16 >> 2] | 0) - f | 0;
    a = a >>> 0 > d >>> 0 ? d : a;
    ut(f | 0, b | 0, a | 0) | 0;
    c[e >> 2] = (c[e >> 2] | 0) + a;
    return d | 0;
  }
  function yq(a) {
    a = a | 0;
    if (a >>> 0 > 4294963200) {
      c[5160] = 0 - a;
      a = -1;
    }
    return a | 0;
  }
  function zq(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    b = Ib;
    Ib = Ib + 32 | 0;
    e = b + 16 | 0;
    f = b;
    c[f >> 2] = d;
    g = (c[f >> 2] | 0) + (4 - 1) & ~(4 - 1);
    d = c[g >> 2] | 0;
    c[f >> 2] = g + 4;
    c[e >> 2] = a;
    c[e + 4 >> 2] = 32962;
    c[e + 8 >> 2] = d;
    d = yq(W(5, e | 0) | 0) | 0;
    Ib = b;
    return d | 0;
  }
  function Aq(b) {
    b = b | 0;
    var e = 0.0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    j = b + 4 | 0;
    i = b + 104 | 0;
    do {
      f = c[j >> 2] | 0;
      if (f >>> 0 < (c[i >> 2] | 0) >>> 0) {
        c[j >> 2] = f + 1;
        f = d[f >> 0] | 0;
      } else f = Vp(b) | 0;
    } while ((Wp(f) | 0) != 0);
    a: do switch (f | 0) {
      case 43:
      case 45:
        {
          h = 1 - (((f | 0) == 45 & 1) << 1) | 0;
          f = c[j >> 2] | 0;
          if (f >>> 0 < (c[i >> 2] | 0) >>> 0) {
            c[j >> 2] = f + 1;
            g = d[f >> 0] | 0;
            break a;
          } else {
            g = Vp(b) | 0;
            break a;
          }
        }
      default:
        {
          g = f;
          h = 1;
        }
    } while (0);
    f = 0;
    while (1) {
      if ((g | 32 | 0) != (a[16746 + f >> 0] | 0)) break;
      do if (f >>> 0 < 7) {
        g = c[j >> 2] | 0;
        if (g >>> 0 < (c[i >> 2] | 0) >>> 0) {
          c[j >> 2] = g + 1;
          g = d[g >> 0] | 0;
          break;
        } else {
          g = Vp(b) | 0;
          break;
        }
      } while (0);
      f = f + 1 | 0;
      if (f >>> 0 >= 8) {
        f = 8;
        break;
      }
    }
    b: do switch (f & 2147483647 | 0) {
      case 8:
        {
          k = 27;
          break;
        }
      case 3:
        {
          k = 20;
          break;
        }
      default:
        {
          if (f >>> 0 > 3) if ((f | 0) == 8) {
            k = 27;
            break b;
          } else {
            k = 20;
            break b;
          }
          c: do if (!f) {
            f = 0;
            do {
              if ((g | 32 | 0) != (a[16755 + f >> 0] | 0)) {
                k = 36;
                break c;
              }
              do if (f >>> 0 < 2) {
                g = c[j >> 2] | 0;
                if (g >>> 0 < (c[i >> 2] | 0) >>> 0) {
                  c[j >> 2] = g + 1;
                  g = d[g >> 0] | 0;
                  break;
                } else {
                  g = Vp(b) | 0;
                  break;
                }
              } while (0);
              f = f + 1 | 0;
            } while (f >>> 0 < 3);
          } else k = 36; while (0);
          d: do if ((k | 0) == 36) {
            switch (f | 0) {
              case 3:
                break d;
              case 0:
                break;
              default:
                {
                  if (c[i >> 2] | 0) c[j >> 2] = (c[j >> 2] | 0) + -1;
                  c[5160] = 28;
                  Up(b);
                  e = 0.0;
                  break b;
                }
            }
            if ((g | 0) == 48) {
              f = c[j >> 2] | 0;
              if (f >>> 0 < (c[i >> 2] | 0) >>> 0) {
                c[j >> 2] = f + 1;
                f = d[f >> 0] | 0;
              } else f = Vp(b) | 0;
              if ((f | 32 | 0) == 120) {
                e = +Bq(b, h);
                break b;
              }
              if (!(c[i >> 2] | 0)) f = 48;else {
                c[j >> 2] = (c[j >> 2] | 0) + -1;
                f = 48;
              }
            } else f = g;
            e = +Cq(b, f, h);
            break b;
          } while (0);
          f = c[j >> 2] | 0;
          if (f >>> 0 < (c[i >> 2] | 0) >>> 0) {
            c[j >> 2] = f + 1;
            f = d[f >> 0] | 0;
          } else f = Vp(b) | 0;
          if ((f | 0) != 40) {
            if (!(c[i >> 2] | 0)) {
              e = q;
              break b;
            }
            c[j >> 2] = (c[j >> 2] | 0) + -1;
            e = q;
            break b;
          }
          f = 1;
          while (1) {
            g = c[j >> 2] | 0;
            if (g >>> 0 < (c[i >> 2] | 0) >>> 0) {
              c[j >> 2] = g + 1;
              g = d[g >> 0] | 0;
            } else g = Vp(b) | 0;
            if (!((g + -48 | 0) >>> 0 < 10 | (g + -65 | 0) >>> 0 < 26) ? !((g | 0) == 95 | (g + -97 | 0) >>> 0 < 26) : 0) break;
            f = f + 1 | 0;
          }
          if ((g | 0) != 41) {
            g = (c[i >> 2] | 0) == 0;
            if (!g) c[j >> 2] = (c[j >> 2] | 0) + -1;
            if (f) {
              do {
                f = f + -1 | 0;
                if (!g) c[j >> 2] = (c[j >> 2] | 0) + -1;
              } while ((f | 0) != 0);
              e = q;
            } else e = q;
          } else e = q;
        }
    } while (0);
    if ((k | 0) == 20) {
      g = (c[i >> 2] | 0) == 0;
      if (!g) c[j >> 2] = (c[j >> 2] | 0) + -1;
      if (f >>> 0 > 3) {
        do {
          if (!g) c[j >> 2] = (c[j >> 2] | 0) + -1;
          f = f + -1 | 0;
        } while (f >>> 0 > 3);
        k = 27;
      } else k = 27;
    }
    if ((k | 0) == 27) e = +(h | 0) * r;
    return +e;
  }
  function Bq(a, b) {
    a = a | 0;
    b = b | 0;
    var e = 0.0,
      f = 0,
      g = 0,
      h = 0.0,
      i = 0,
      j = 0,
      k = 0,
      l = 0.0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0,
      u = 0,
      v = 0,
      w = 0,
      x = 0,
      y = 0;
    w = a + 4 | 0;
    g = c[w >> 2] | 0;
    x = a + 104 | 0;
    if (g >>> 0 < (c[x >> 2] | 0) >>> 0) {
      c[w >> 2] = g + 1;
      g = d[g >> 0] | 0;
    } else g = Vp(a) | 0;
    i = 0;
    a: while (1) {
      switch (g | 0) {
        case 46:
          {
            y = 10;
            break a;
          }
        case 48:
          break;
        default:
          {
            n = 0;
            k = i;
            j = 0;
            i = 0;
            break a;
          }
      }
      g = c[w >> 2] | 0;
      if (g >>> 0 < (c[x >> 2] | 0) >>> 0) {
        c[w >> 2] = g + 1;
        g = d[g >> 0] | 0;
      } else g = Vp(a) | 0;
      i = 1;
    }
    if ((y | 0) == 10) {
      g = c[w >> 2] | 0;
      if (g >>> 0 < (c[x >> 2] | 0) >>> 0) {
        c[w >> 2] = g + 1;
        g = d[g >> 0] | 0;
      } else g = Vp(a) | 0;
      if ((g | 0) == 48) {
        j = 0;
        i = 0;
        do {
          g = c[w >> 2] | 0;
          if (g >>> 0 < (c[x >> 2] | 0) >>> 0) {
            c[w >> 2] = g + 1;
            g = d[g >> 0] | 0;
          } else g = Vp(a) | 0;
          j = mt(j | 0, i | 0, -1, -1) | 0;
          i = A() | 0;
        } while ((g | 0) == 48);
        n = 1;
        k = 1;
      } else {
        n = 1;
        k = i;
        j = 0;
        i = 0;
      }
    }
    m = 0;
    l = 1.0;
    e = 0.0;
    t = 0;
    q = n;
    r = k;
    k = 0;
    s = 0;
    while (1) {
      o = g + -48 | 0;
      n = g | 32;
      if (o >>> 0 >= 10) {
        p = (g | 0) == 46;
        if (!(p | (n + -97 | 0) >>> 0 < 6)) break;
        if (p) {
          if (!q) {
            q = 1;
            h = l;
            n = t;
            p = r;
            j = s;
            i = k;
            o = s;
          } else {
            g = 46;
            break;
          }
        } else y = 24;
      } else y = 24;
      if ((y | 0) == 24) {
        y = 0;
        g = (g | 0) > 57 ? n + -87 | 0 : o;
        do if (!((k | 0) < 0 | (k | 0) == 0 & s >>> 0 < 8)) {
          if ((k | 0) < 0 | (k | 0) == 0 & s >>> 0 < 14) {
            l = l * .0625;
            h = l;
            e = e + l * +(g | 0);
            g = t;
            break;
          } else {
            g = (m | 0) != 0 | (g | 0) == 0;
            m = g ? m : 1;
            h = l;
            e = g ? e : e + l * .5;
            g = t;
            break;
          }
        } else {
          h = l;
          g = g + (t << 4) | 0;
        } while (0);
        o = mt(s | 0, k | 0, 1, 0) | 0;
        n = g;
        p = 1;
        k = A() | 0;
      }
      g = c[w >> 2] | 0;
      if (g >>> 0 < (c[x >> 2] | 0) >>> 0) {
        c[w >> 2] = g + 1;
        g = d[g >> 0] | 0;
      } else g = Vp(a) | 0;
      l = h;
      t = n;
      r = p;
      s = o;
    }
    do if (!r) {
      if (c[x >> 2] | 0 ? (u = c[w >> 2] | 0, c[w >> 2] = u + -2, q | 0) : 0) c[w >> 2] = u + -3;
      e = +(b | 0) * 0.0;
    } else {
      m = (q | 0) == 0;
      n = m ? s : j;
      m = m ? k : i;
      if ((k | 0) < 0 | (k | 0) == 0 & s >>> 0 < 8) {
        i = t;
        j = s;
        do {
          i = i << 4;
          u = j;
          j = mt(j | 0, k | 0, 1, 0) | 0;
          t = k;
          k = A() | 0;
        } while ((t | 0) < 0 | (t | 0) == 0 & u >>> 0 < 7);
        j = i;
      } else j = t;
      if (!((g | 32 | 0) == 112 ? (v = Dq(a) | 0, f = A() | 0, !((v | 0) == 0 & (f | 0) == -2147483648)) : 0)) {
        if (!(c[x >> 2] | 0)) {
          g = 0;
          f = 0;
        } else {
          c[w >> 2] = (c[w >> 2] | 0) + -1;
          g = 0;
          f = 0;
        }
      } else g = v;
      i = st(n | 0, m | 0, 2) | 0;
      i = mt(i | 0, A() | 0, -32, -1) | 0;
      i = mt(i | 0, A() | 0, g | 0, f | 0) | 0;
      f = A() | 0;
      if (!j) {
        e = +(b | 0) * 0.0;
        break;
      }
      if ((f | 0) > 0 | (f | 0) == 0 & i >>> 0 > 1074) {
        c[5160] = 68;
        e = +(b | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break;
      }
      if ((f | 0) < -1 | (f | 0) == -1 & i >>> 0 < 4294966116) {
        c[5160] = 68;
        e = +(b | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
      }
      if ((j | 0) > -1) {
        g = j;
        do {
          x = !(e >= .5);
          g = g << 1 | (x ^ 1) & 1;
          e = e + (x ? e : e + -1.0);
          i = mt(i | 0, f | 0, -1, -1) | 0;
          f = A() | 0;
        } while ((g | 0) > -1);
        l = e;
        j = g;
      } else l = e;
      g = mt(i | 0, f | 0, 1106, 0) | 0;
      x = A() | 0;
      do if ((x | 0) < 0 | (x | 0) == 0 & g >>> 0 < 53) {
        if ((g | 0) > 0) {
          if ((g | 0) < 53) {
            f = g;
            g = 84 - g | 0;
          } else {
            f = g;
            y = 60;
            break;
          }
        } else {
          f = 0;
          g = 84;
        }
        e = +(b | 0);
        h = +Fq(+Eq(1.0, g), e);
      } else {
        f = 53;
        y = 60;
      } while (0);
      if ((y | 0) == 60) {
        h = 0.0;
        e = +(b | 0);
      }
      y = (j & 1 | 0) == 0 & (l != 0.0 & (f | 0) < 32);
      e = e * (y ? 0.0 : l) + (h + e * +((j + (y & 1) | 0) >>> 0)) - h;
      if (!(e != 0.0)) c[5160] = 68;
      e = +Hq(e, i);
    } while (0);
    return +e;
  }
  function Cq(a, b, e) {
    a = a | 0;
    b = b | 0;
    e = e | 0;
    var f = 0.0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0.0,
      l = 0,
      m = 0,
      n = 0.0,
      o = 0,
      p = 0.0,
      q = 0.0,
      r = 0,
      t = 0,
      u = 0,
      v = 0,
      x = 0,
      y = 0,
      z = 0,
      B = 0,
      C = 0,
      D = 0,
      E = 0,
      F = 0.0;
    E = Ib;
    Ib = Ib + 512 | 0;
    D = E;
    B = a + 4 | 0;
    C = a + 104 | 0;
    g = 0;
    a: while (1) {
      switch (b | 0) {
        case 46:
          {
            x = 7;
            break a;
          }
        case 48:
          break;
        default:
          {
            r = 0;
            m = g;
            g = 0;
            l = 0;
            break a;
          }
      }
      b = c[B >> 2] | 0;
      if (b >>> 0 < (c[C >> 2] | 0) >>> 0) {
        c[B >> 2] = b + 1;
        b = d[b >> 0] | 0;
      } else b = Vp(a) | 0;
      g = 1;
    }
    if ((x | 0) == 7) {
      b = c[B >> 2] | 0;
      if (b >>> 0 < (c[C >> 2] | 0) >>> 0) {
        c[B >> 2] = b + 1;
        b = d[b >> 0] | 0;
      } else b = Vp(a) | 0;
      if ((b | 0) == 48) {
        g = 0;
        b = 0;
        while (1) {
          g = mt(g | 0, b | 0, -1, -1) | 0;
          l = A() | 0;
          b = c[B >> 2] | 0;
          if (b >>> 0 < (c[C >> 2] | 0) >>> 0) {
            c[B >> 2] = b + 1;
            b = d[b >> 0] | 0;
          } else b = Vp(a) | 0;
          if ((b | 0) == 48) b = l;else {
            r = 1;
            m = 1;
            break;
          }
        }
      } else {
        r = 1;
        m = g;
        g = 0;
        l = 0;
      }
    }
    c[D >> 2] = 0;
    j = b + -48 | 0;
    i = (b | 0) == 46;
    b: do if (i | j >>> 0 < 10) {
      y = D + 496 | 0;
      t = 0;
      h = 0;
      x = 0;
      z = m;
      u = i;
      v = j;
      m = 0;
      i = 0;
      c: while (1) {
        do if (u) {
          if (!r) {
            r = 1;
            o = x;
            j = z;
            g = m;
            l = i;
          } else break c;
        } else {
          m = mt(m | 0, i | 0, 1, 0) | 0;
          i = A() | 0;
          o = (b | 0) != 48;
          if ((h | 0) >= 125) {
            if (!o) {
              o = x;
              j = z;
              break;
            }
            c[y >> 2] = c[y >> 2] | 1;
            o = x;
            j = z;
            break;
          }
          j = D + (h << 2) | 0;
          if (!t) b = v;else b = b + -48 + ((c[j >> 2] | 0) * 10 | 0) | 0;
          c[j >> 2] = b;
          t = t + 1 | 0;
          j = (t | 0) == 9;
          t = j ? 0 : t;
          h = h + (j & 1) | 0;
          o = o ? m : x;
          j = 1;
        } while (0);
        b = c[B >> 2] | 0;
        if (b >>> 0 < (c[C >> 2] | 0) >>> 0) {
          c[B >> 2] = b + 1;
          b = d[b >> 0] | 0;
        } else b = Vp(a) | 0;
        v = b + -48 | 0;
        u = (b | 0) == 46;
        if (!(u | v >>> 0 < 10)) {
          x = 31;
          break b;
        } else {
          x = o;
          z = j;
        }
      }
      b = t;
      o = x;
      j = (z | 0) != 0;
      x = 37;
    } else {
      t = 0;
      h = 0;
      o = 0;
      j = m;
      m = 0;
      i = 0;
      x = 31;
    } while (0);
    do if ((x | 0) == 31) {
      z = (r | 0) == 0;
      g = z ? m : g;
      l = z ? i : l;
      j = (j | 0) != 0;
      if (!(j & (b | 32 | 0) == 101)) if ((b | 0) > -1) {
        b = t;
        x = 37;
        break;
      } else {
        b = t;
        x = 39;
        break;
      }
      j = Dq(a) | 0;
      b = A() | 0;
      if ((j | 0) == 0 & (b | 0) == -2147483648) if (!(c[C >> 2] | 0)) {
        j = 0;
        b = 0;
      } else {
        c[B >> 2] = (c[B >> 2] | 0) + -1;
        j = 0;
        b = 0;
      }
      g = mt(j | 0, b | 0, g | 0, l | 0) | 0;
      b = t;
      l = A() | 0;
      x = 41;
    } while (0);
    if ((x | 0) == 37) if (c[C >> 2] | 0) {
      c[B >> 2] = (c[B >> 2] | 0) + -1;
      if (j) x = 41;else x = 40;
    } else x = 39;
    if ((x | 0) == 39) if (j) x = 41;else x = 40;
    do if ((x | 0) == 40) {
      c[5160] = 28;
      Up(a);
      f = 0.0;
    } else if ((x | 0) == 41) {
      j = c[D >> 2] | 0;
      if (!j) {
        f = +(e | 0) * 0.0;
        break;
      }
      if (((i | 0) < 0 | (i | 0) == 0 & m >>> 0 < 10) & ((g | 0) == (m | 0) & (l | 0) == (i | 0))) {
        f = +(e | 0) * +(j >>> 0);
        break;
      }
      if ((l | 0) > 0 | (l | 0) == 0 & g >>> 0 > 537) {
        c[5160] = 68;
        f = +(e | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break;
      }
      if ((l | 0) < -1 | (l | 0) == -1 & g >>> 0 < 4294966116) {
        c[5160] = 68;
        f = +(e | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
      }
      if (b) {
        if ((b | 0) < 9) {
          j = D + (h << 2) | 0;
          i = c[j >> 2] | 0;
          while (1) {
            i = i * 10 | 0;
            if ((b | 0) >= 8) break;else b = b + 1 | 0;
          }
          c[j >> 2] = i;
        }
        h = h + 1 | 0;
      }
      if ((o | 0) < 9 ? (o | 0) <= (g | 0) & (g | 0) < 18 : 0) {
        if ((g | 0) == 9) {
          f = +(e | 0) * +((c[D >> 2] | 0) >>> 0);
          break;
        }
        if ((g | 0) < 9) {
          f = +(e | 0) * +((c[D >> 2] | 0) >>> 0) / +(c[2464 + (8 - g << 2) >> 2] | 0);
          break;
        }
        a = (w(g, -3) | 0) + 80 | 0;
        b = c[D >> 2] | 0;
        if ((a | 0) > 30 | (b >>> a | 0) == 0) {
          f = +(e | 0) * +(b >>> 0) * +(c[2464 + (g + -10 << 2) >> 2] | 0);
          break;
        }
      }
      b = (g | 0) % 9 | 0;
      if (!b) i = 0;else {
        o = (g | 0) > -1 ? b : b + 9 | 0;
        l = c[2464 + (8 - o << 2) >> 2] | 0;
        if (h) {
          m = 1e9 / (l | 0) | 0;
          j = 0;
          i = 0;
          b = 0;
          do {
            B = D + (b << 2) | 0;
            C = c[B >> 2] | 0;
            a = (C >>> 0) / (l >>> 0) | 0;
            C = C - (w(a, l) | 0) | 0;
            a = a + j | 0;
            c[B >> 2] = a;
            j = w(C, m) | 0;
            a = (b | 0) == (i | 0) & (a | 0) == 0;
            g = a ? g + -9 | 0 : g;
            i = a ? i + 1 & 127 : i;
            b = b + 1 | 0;
          } while ((b | 0) != (h | 0));
          if (!j) b = h;else {
            c[D + (h << 2) >> 2] = j;
            b = h + 1 | 0;
          }
        } else {
          i = 0;
          b = 0;
        }
        h = b;
        g = 9 - o + g | 0;
      }
      b = 0;
      d: while (1) {
        r = (g | 0) < 18;
        t = (g | 0) == 18;
        u = D + (i << 2) | 0;
        while (1) {
          if (!r) {
            if (!t) break d;
            if ((c[u >> 2] | 0) >>> 0 >= 9007199) {
              g = 18;
              break d;
            }
          }
          j = 0;
          v = h;
          h = h + 127 | 0;
          while (1) {
            m = h & 127;
            l = D + (m << 2) | 0;
            h = st(c[l >> 2] | 0, 0, 29) | 0;
            h = mt(h | 0, A() | 0, j | 0, 0) | 0;
            j = A() | 0;
            if (j >>> 0 > 0 | (j | 0) == 0 & h >>> 0 > 1e9) {
              o = qt(h | 0, j | 0, 1e9, 0) | 0;
              a = lt(o | 0, A() | 0, -1e9, -1) | 0;
              h = mt(a | 0, A() | 0, h | 0, j | 0) | 0;
              A() | 0;
            } else o = 0;
            c[l >> 2] = h;
            a = (m | 0) == (i | 0);
            l = (m | 0) != (v + 127 & 127 | 0) | a ? v : (h | 0) == 0 ? m : v;
            if (a) break;else {
              j = o;
              v = l;
              h = m + -1 | 0;
            }
          }
          b = b + -29 | 0;
          if (!o) h = v;else break;
        }
        i = i + 127 & 127;
        h = l + 127 & 127;
        j = D + ((l + 126 & 127) << 2) | 0;
        if ((i | 0) == (l | 0)) c[j >> 2] = c[j >> 2] | c[D + (h << 2) >> 2];else h = v;
        c[D + (i << 2) >> 2] = o;
        g = g + 9 | 0;
      }
      e: while (1) {
        t = h + 1 & 127;
        u = D + ((h + 127 & 127) << 2) | 0;
        while (1) {
          m = (g | 0) == 18;
          r = (g | 0) > 27 ? 9 : 1;
          v = i;
          while (1) {
            l = 0;
            while (1) {
              i = l + v & 127;
              if ((i | 0) == (h | 0)) {
                x = 89;
                break;
              }
              i = c[D + (i << 2) >> 2] | 0;
              j = c[3804 + (l << 2) >> 2] | 0;
              if (i >>> 0 < j >>> 0) {
                x = 89;
                break;
              }
              if (i >>> 0 > j >>> 0) break;
              if ((l + 1 | 0) >>> 0 < 2) l = 1;else {
                x = 89;
                break;
              }
            }
            if ((x | 0) == 89 ? (x = 0, m) : 0) break e;
            b = b + r | 0;
            if ((v | 0) == (h | 0)) v = h;else break;
          }
          m = (1 << r) + -1 | 0;
          o = 1e9 >>> r;
          l = 0;
          i = v;
          j = v;
          do {
            B = D + (j << 2) | 0;
            C = c[B >> 2] | 0;
            a = (C >>> r) + l | 0;
            c[B >> 2] = a;
            l = w(C & m, o) | 0;
            a = (j | 0) == (i | 0) & (a | 0) == 0;
            g = a ? g + -9 | 0 : g;
            i = a ? i + 1 & 127 : i;
            j = j + 1 & 127;
          } while ((j | 0) != (h | 0));
          if (l | 0) {
            if ((t | 0) != (i | 0)) break;
            c[u >> 2] = c[u >> 2] | 1;
          }
        }
        c[D + (h << 2) >> 2] = l;
        h = t;
      }
      f = 0.0;
      g = h;
      i = 0;
      do {
        j = i + v & 127;
        h = g + 1 & 127;
        if ((j | 0) == (g | 0)) {
          c[D + (h + -1 << 2) >> 2] = 0;
          g = h;
        }
        f = f * 1.0e9 + +((c[D + (j << 2) >> 2] | 0) >>> 0);
        i = i + 1 | 0;
      } while ((i | 0) != 2);
      p = +(e | 0);
      k = f * p;
      i = b + 53 | 0;
      l = b + 1127 | 0;
      m = (b | 0) < -1074;
      j = m ? (l | 0) > 0 ? l : 0 : 53;
      if ((j | 0) < 53) {
        F = +Fq(+Eq(1.0, 105 - j | 0), k);
        n = +Gq(k, +Eq(1.0, 53 - j | 0));
        q = F;
        f = n;
        n = F + (k - n);
      } else {
        q = 0.0;
        f = 0.0;
        n = k;
      }
      h = v + 2 & 127;
      if ((h | 0) != (g | 0)) {
        h = c[D + (h << 2) >> 2] | 0;
        do if (h >>> 0 >= 5e8) {
          if ((h | 0) != 5e8) {
            f = p * .75 + f;
            break;
          }
          if ((v + 3 & 127 | 0) == (g | 0)) {
            f = p * .5 + f;
            break;
          } else {
            f = p * .75 + f;
            break;
          }
        } else {
          if ((h | 0) == 0 ? (v + 3 & 127 | 0) == (g | 0) : 0) break;
          f = p * .25 + f;
        } while (0);
        if ((53 - j | 0) > 1 ? !(+Gq(f, 1.0) != 0.0) : 0) k = f + 1.0;else k = f;
      } else k = f;
      f = n + k - q;
      do if ((i & 2147483644) >>> 0 > 1019) {
        D = !(+s(+f) >= 9007199254740992.0);
        b = b + ((D ^ 1) & 1) | 0;
        f = D ? f : f * .5;
        if ((b | 0) <= 971 ? !(k != 0.0 & (m & ((j | 0) != (l | 0) | D))) : 0) break;
        c[5160] = 68;
      } while (0);
      f = +Hq(f, b);
    } while (0);
    Ib = E;
    return +f;
  }
  function Dq(a) {
    a = a | 0;
    var b = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    j = a + 4 | 0;
    b = c[j >> 2] | 0;
    i = a + 104 | 0;
    if (b >>> 0 < (c[i >> 2] | 0) >>> 0) {
      c[j >> 2] = b + 1;
      b = d[b >> 0] | 0;
    } else b = Vp(a) | 0;
    switch (b | 0) {
      case 43:
      case 45:
        {
          e = (b | 0) == 45 & 1;
          b = c[j >> 2] | 0;
          if (b >>> 0 < (c[i >> 2] | 0) >>> 0) {
            c[j >> 2] = b + 1;
            b = d[b >> 0] | 0;
          } else b = Vp(a) | 0;
          if ((b + -48 | 0) >>> 0 > 9) {
            if (!(c[i >> 2] | 0)) {
              e = -2147483648;
              b = 0;
            } else {
              b = (c[j >> 2] | 0) + -1 | 0;
              c[j >> 2] = b;
              f = 15;
            }
          } else f = 12;
          break;
        }
      default:
        if ((b + -48 | 0) >>> 0 > 9) {
          if (!(c[i >> 2] | 0)) {
            e = -2147483648;
            b = 0;
          } else {
            b = c[j >> 2] | 0;
            f = 15;
          }
        } else {
          e = 0;
          f = 12;
        }
    }
    if ((f | 0) == 12) {
      h = 0;
      while (1) {
        h = b + -48 + (h * 10 | 0) | 0;
        b = c[j >> 2] | 0;
        if (b >>> 0 < (c[i >> 2] | 0) >>> 0) {
          c[j >> 2] = b + 1;
          f = d[b >> 0] | 0;
        } else f = Vp(a) | 0;
        g = (f + -48 | 0) >>> 0 < 10;
        if (!((h | 0) < 214748364 & g)) break;else b = f;
      }
      b = ((h | 0) < 0) << 31 >> 31;
      if (g) {
        do {
          g = lt(h | 0, b | 0, 10, 0) | 0;
          g = mt(g | 0, A() | 0, -48, -1) | 0;
          h = mt(g | 0, A() | 0, f | 0, ((f | 0) < 0) << 31 >> 31 | 0) | 0;
          b = A() | 0;
          f = c[j >> 2] | 0;
          if (f >>> 0 < (c[i >> 2] | 0) >>> 0) {
            c[j >> 2] = f + 1;
            f = d[f >> 0] | 0;
          } else f = Vp(a) | 0;
          g = (f + -48 | 0) >>> 0 < 10;
        } while (((b | 0) < 21474836 | (b | 0) == 21474836 & h >>> 0 < 2061584302) & g);
        if (g) {
          do {
            f = c[j >> 2] | 0;
            if (f >>> 0 < (c[i >> 2] | 0) >>> 0) {
              c[j >> 2] = f + 1;
              f = d[f >> 0] | 0;
            } else f = Vp(a) | 0;
          } while ((f + -48 | 0) >>> 0 < 10);
          f = h;
        } else f = h;
      } else f = h;
      if (c[i >> 2] | 0) c[j >> 2] = (c[j >> 2] | 0) + -1;
      i = (e | 0) == 0;
      j = nt(0, 0, f | 0, b | 0) | 0;
      e = A() | 0;
      e = i ? b : e;
      b = i ? f : j;
    } else if ((f | 0) == 15) {
      c[j >> 2] = b + -1;
      e = -2147483648;
      b = 0;
    }
    z(e | 0);
    return b | 0;
  }
  function Eq(a, b) {
    a = +a;
    b = b | 0;
    var d = 0,
      e = 0;
    if ((b | 0) <= 1023) {
      if ((b | 0) < -1022) {
        a = a * 2.2250738585072014e-308;
        e = (b | 0) < -2044;
        d = b + 2044 | 0;
        a = e ? a * 2.2250738585072014e-308 : a;
        b = e ? (d | 0) > -1022 ? d : -1022 : b + 1022 | 0;
      }
    } else {
      a = a * 8988465674311579538646525.0e283;
      d = (b | 0) > 2046;
      e = b + -2046 | 0;
      a = d ? a * 8988465674311579538646525.0e283 : a;
      b = d ? (e | 0) < 1023 ? e : 1023 : b + -1023 | 0;
    }
    d = st(b + 1023 | 0, 0, 52) | 0;
    e = A() | 0;
    c[h >> 2] = d;
    c[h + 4 >> 2] = e;
    return +(a * +g[h >> 3]);
  }
  function Fq(a, b) {
    a = +a;
    b = +b;
    return + +Zp(a, b);
  }
  function Gq(a, b) {
    a = +a;
    b = +b;
    return + +Iq(a, b);
  }
  function Hq(a, b) {
    a = +a;
    b = b | 0;
    return + +Eq(a, b);
  }
  function Iq(a, b) {
    a = +a;
    b = +b;
    var d = 0,
      e = 0,
      f = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    g[h >> 3] = a;
    j = c[h >> 2] | 0;
    l = c[h + 4 >> 2] | 0;
    g[h >> 3] = b;
    n = c[h >> 2] | 0;
    o = c[h + 4 >> 2] | 0;
    e = rt(j | 0, l | 0, 52) | 0;
    A() | 0;
    e = e & 2047;
    m = rt(n | 0, o | 0, 52) | 0;
    A() | 0;
    m = m & 2047;
    p = l & -2147483648;
    i = st(n | 0, o | 0, 1) | 0;
    k = A() | 0;
    a: do if (!((i | 0) == 0 & (k | 0) == 0) ? (f = Jq(b) | 0, d = (A() | 0) & 2147483647, !((e | 0) == 2047 | (d >>> 0 > 2146435072 | (d | 0) == 2146435072 & f >>> 0 > 0))) : 0) {
      d = st(j | 0, l | 0, 1) | 0;
      f = A() | 0;
      if (!(f >>> 0 > k >>> 0 | (f | 0) == (k | 0) & d >>> 0 > i >>> 0)) return +((d | 0) == (i | 0) & (f | 0) == (k | 0) ? a * 0.0 : a);
      if (!e) {
        d = st(j | 0, l | 0, 12) | 0;
        f = A() | 0;
        if ((f | 0) > -1 | (f | 0) == -1 & d >>> 0 > 4294967295) {
          e = 0;
          do {
            e = e + -1 | 0;
            d = st(d | 0, f | 0, 1) | 0;
            f = A() | 0;
          } while ((f | 0) > -1 | (f | 0) == -1 & d >>> 0 > 4294967295);
        } else e = 0;
        j = st(j | 0, l | 0, 1 - e | 0) | 0;
        i = A() | 0;
      } else i = l & 1048575 | 1048576;
      if (!m) {
        f = st(n | 0, o | 0, 12) | 0;
        k = A() | 0;
        if ((k | 0) > -1 | (k | 0) == -1 & f >>> 0 > 4294967295) {
          d = 0;
          do {
            d = d + -1 | 0;
            f = st(f | 0, k | 0, 1) | 0;
            k = A() | 0;
          } while ((k | 0) > -1 | (k | 0) == -1 & f >>> 0 > 4294967295);
        } else d = 0;
        n = st(n | 0, o | 0, 1 - d | 0) | 0;
        m = d;
        l = A() | 0;
      } else l = o & 1048575 | 1048576;
      f = nt(j | 0, i | 0, n | 0, l | 0) | 0;
      d = A() | 0;
      k = (d | 0) > -1 | (d | 0) == -1 & f >>> 0 > 4294967295;
      b: do if ((e | 0) > (m | 0)) {
        while (1) {
          if (k) {
            if ((f | 0) == 0 & (d | 0) == 0) break;
          } else {
            f = j;
            d = i;
          }
          j = st(f | 0, d | 0, 1) | 0;
          i = A() | 0;
          e = e + -1 | 0;
          f = nt(j | 0, i | 0, n | 0, l | 0) | 0;
          d = A() | 0;
          k = (d | 0) > -1 | (d | 0) == -1 & f >>> 0 > 4294967295;
          if ((e | 0) <= (m | 0)) break b;
        }
        b = a * 0.0;
        break a;
      } while (0);
      if (k) {
        if ((f | 0) == 0 & (d | 0) == 0) {
          b = a * 0.0;
          break;
        }
      } else {
        d = i;
        f = j;
      }
      if (d >>> 0 < 1048576 | (d | 0) == 1048576 & f >>> 0 < 0) do {
        f = st(f | 0, d | 0, 1) | 0;
        d = A() | 0;
        e = e + -1 | 0;
      } while (d >>> 0 < 1048576 | (d | 0) == 1048576 & f >>> 0 < 0);
      if ((e | 0) > 0) {
        o = mt(f | 0, d | 0, 0, -1048576) | 0;
        d = A() | 0;
        e = st(e | 0, 0, 52) | 0;
        d = d | (A() | 0);
        e = o | e;
      } else {
        e = rt(f | 0, d | 0, 1 - e | 0) | 0;
        d = A() | 0;
      }
      c[h >> 2] = e;
      c[h + 4 >> 2] = d | p;
      b = +g[h >> 3];
    } else q = 3; while (0);
    if ((q | 0) == 3) {
      b = a * b;
      b = b / b;
    }
    return +b;
  }
  function Jq(a) {
    a = +a;
    var b = 0;
    g[h >> 3] = a;
    b = c[h >> 2] | 0;
    z(c[h + 4 >> 2] | 0);
    return b | 0;
  }
  function Kq(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    f = b;
    a: do if (!(f & 3)) e = 5;else {
      d = f;
      while (1) {
        if (!(a[b >> 0] | 0)) {
          b = d;
          break a;
        }
        b = b + 1 | 0;
        d = b;
        if (!(d & 3)) {
          e = 5;
          break;
        }
      }
    } while (0);
    if ((e | 0) == 5) {
      while (1) {
        d = c[b >> 2] | 0;
        if (!((d & -2139062144 ^ -2139062144) & d + -16843009)) b = b + 4 | 0;else break;
      }
      if ((d & 255) << 24 >> 24) do b = b + 1 | 0; while ((a[b >> 0] | 0) != 0);
    }
    return b - f | 0;
  }
  function Lq(b, c) {
    b = b | 0;
    c = c | 0;
    b = Mq(b, c) | 0;
    return ((a[b >> 0] | 0) == (c & 255) << 24 >> 24 ? b : 0) | 0;
  }
  function Mq(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    f = d & 255;
    a: do if (!f) b = b + (Kq(b) | 0) | 0;else {
      if (b & 3) {
        e = d & 255;
        do {
          g = a[b >> 0] | 0;
          if (g << 24 >> 24 == 0 ? 1 : g << 24 >> 24 == e << 24 >> 24) break a;
          b = b + 1 | 0;
        } while ((b & 3 | 0) != 0);
      }
      f = w(f, 16843009) | 0;
      e = c[b >> 2] | 0;
      b: do if (!((e & -2139062144 ^ -2139062144) & e + -16843009)) do {
        g = e ^ f;
        if ((g & -2139062144 ^ -2139062144) & g + -16843009 | 0) break b;
        b = b + 4 | 0;
        e = c[b >> 2] | 0;
      } while (!((e & -2139062144 ^ -2139062144) & e + -16843009 | 0)); while (0);
      e = d & 255;
      while (1) {
        g = a[b >> 0] | 0;
        if (g << 24 >> 24 == 0 ? 1 : g << 24 >> 24 == e << 24 >> 24) break;else b = b + 1 | 0;
      }
    } while (0);
    return b | 0;
  }
  function Nq(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    f = Ib;
    Ib = Ib + 16 | 0;
    g = f;
    c[g >> 2] = e;
    dq(a, b, d, g);
    Ib = f;
    return;
  }
  function Oq(a, b) {
    a = a | 0;
    b = b | 0;
    Pq(a, b);
    return a | 0;
  }
  function Pq(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0;
    f = d;
    a: do if (!((f ^ b) & 3)) {
      if (!(f & 3)) e = d;else while (1) {
        f = a[d >> 0] | 0;
        a[b >> 0] = f;
        if (!(f << 24 >> 24)) break a;
        d = d + 1 | 0;
        b = b + 1 | 0;
        if (!(d & 3)) {
          e = d;
          break;
        }
      }
      d = c[e >> 2] | 0;
      if (!((d & -2139062144 ^ -2139062144) & d + -16843009)) while (1) {
        e = e + 4 | 0;
        f = b + 4 | 0;
        c[b >> 2] = d;
        d = c[e >> 2] | 0;
        if ((d & -2139062144 ^ -2139062144) & d + -16843009 | 0) {
          b = f;
          break;
        } else b = f;
      }
      g = b;
      h = 10;
    } else {
      e = d;
      g = b;
      h = 10;
    } while (0);
    if ((h | 0) == 10 ? (h = a[e >> 0] | 0, a[g >> 0] = h, h << 24 >> 24) : 0) {
      b = g;
      do {
        e = e + 1 | 0;
        b = b + 1 | 0;
        h = a[e >> 0] | 0;
        a[b >> 0] = h;
      } while (h << 24 >> 24 != 0);
    }
    return;
  }
  function Qq(a) {
    a = a | 0;
    var b = 0,
      c = 0;
    b = (Kq(a) | 0) + 1 | 0;
    c = et(b) | 0;
    if (!c) a = 0;else a = ut(c | 0, a | 0, b | 0) | 0;
    return a | 0;
  }
  function Rq(a, b) {
    a = a | 0;
    b = b | 0;
    var c = 0;
    c = Kq(a) | 0;
    return ((Sq(a, 1, c, b) | 0) != (c | 0)) << 31 >> 31 | 0;
  }
  function Sq(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var e = 0;
    e = w(c, b) | 0;
    a = tq(a, e, d) | 0;
    if ((a | 0) != (e | 0)) c = (a >>> 0) / (b >>> 0) | 0;
    return c | 0;
  }
  function Tq(a) {
    a = a | 0;
    var b = 0;
    if (c[a + 68 >> 2] | 0) {
      b = c[a + 132 >> 2] | 0;
      a = a + 128 | 0;
      if (b | 0) c[b + 128 >> 2] = c[a >> 2];
      a = c[a >> 2] | 0;
      c[((a | 0) == 0 ? 3792 : a + 132 | 0) >> 2] = b;
    }
    return;
  }
  function Uq(b, e) {
    b = b | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 16 | 0;
    j = l;
    k = e & 255;
    a[j >> 0] = k;
    g = b + 16 | 0;
    h = c[g >> 2] | 0;
    if (!h) {
      if (!(uq(b) | 0)) {
        h = c[g >> 2] | 0;
        i = 4;
      } else f = -1;
    } else i = 4;
    do if ((i | 0) == 4) {
      i = b + 20 | 0;
      g = c[i >> 2] | 0;
      if (g >>> 0 < h >>> 0 ? (f = e & 255, (f | 0) != (a[b + 75 >> 0] | 0)) : 0) {
        c[i >> 2] = g + 1;
        a[g >> 0] = k;
        break;
      }
      if ((Wb[c[b + 36 >> 2] & 63](b, j, 1) | 0) == 1) f = d[j >> 0] | 0;else f = -1;
    } while (0);
    Ib = l;
    return f | 0;
  }
  function Vq(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    f = Ib;
    Ib = Ib + 16 | 0;
    e = f;
    if (Lq(16762, a[d >> 0] | 0) | 0) {
      g = Wq(d) | 0 | 32768;
      c[e >> 2] = b;
      c[e + 4 >> 2] = g;
      c[e + 8 >> 2] = 438;
      e = yq(W(5, e | 0) | 0) | 0;
      if ((e | 0) >= 0) {
        b = Xq(e, d) | 0;
        if (!b) {
          _(e | 0) | 0;
          b = 0;
        }
      } else b = 0;
    } else {
      c[5160] = 28;
      b = 0;
    }
    Ib = f;
    return b | 0;
  }
  function Wq(b) {
    b = b | 0;
    var c = 0,
      d = 0,
      e = 0;
    d = (Lq(b, 43) | 0) == 0;
    c = a[b >> 0] | 0;
    d = d ? c << 24 >> 24 != 114 & 1 : 2;
    e = (Lq(b, 120) | 0) == 0;
    d = e ? d : d | 128;
    b = (Lq(b, 101) | 0) == 0;
    b = b ? d : d | 524288;
    b = c << 24 >> 24 == 114 ? b : b | 64;
    b = c << 24 >> 24 == 119 ? b | 512 : b;
    return (c << 24 >> 24 == 97 ? b | 1024 : b) | 0;
  }
  function Xq(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0;
    j = Ib;
    Ib = Ib + 48 | 0;
    i = j + 24 | 0;
    g = j + 8 | 0;
    f = j;
    h = j + 40 | 0;
    if (Lq(16762, a[d >> 0] | 0) | 0) {
      e = et(1176) | 0;
      if (!e) e = 0;else {
        vt(e | 0, 0, 144) | 0;
        k = (Lq(d, 43) | 0) == 0;
        d = a[d >> 0] | 0;
        if (k) c[e >> 2] = d << 24 >> 24 == 114 ? 8 : 4;
        if (d << 24 >> 24 == 97) {
          c[f >> 2] = b;
          c[f + 4 >> 2] = 3;
          d = T(221, f | 0) | 0;
          if (!(d & 1024)) {
            c[g >> 2] = b;
            c[g + 4 >> 2] = 4;
            c[g + 8 >> 2] = d | 1024;
            T(221, g | 0) | 0;
          }
          f = c[e >> 2] | 128;
          c[e >> 2] = f;
        } else f = c[e >> 2] | 0;
        c[e + 60 >> 2] = b;
        c[e + 44 >> 2] = e + 152;
        c[e + 48 >> 2] = 1024;
        d = e + 75 | 0;
        a[d >> 0] = -1;
        if ((f & 8 | 0) == 0 ? (c[i >> 2] = b, c[i + 4 >> 2] = 21523, c[i + 8 >> 2] = h, (X(54, i | 0) | 0) == 0) : 0) a[d >> 0] = 10;
        c[e + 32 >> 2] = 1;
        c[e + 36 >> 2] = 2;
        c[e + 40 >> 2] = 1;
        c[e + 12 >> 2] = 1;
        if (!(c[5145] | 0)) c[e + 76 >> 2] = -1;
        Yq(e) | 0;
      }
    } else {
      c[5160] = 28;
      e = 0;
    }
    Ib = j;
    return e | 0;
  }
  function Yq(a) {
    a = a | 0;
    var b = 0;
    Zq();
    b = c[5163] | 0;
    c[a + 56 >> 2] = b;
    if (b | 0) c[b + 52 >> 2] = a;
    c[5163] = a;
    _q();
    return a | 0;
  }
  function Zq() {
    Q(20644);
    return;
  }
  function _q() {
    Z(20644);
    return;
  }
  function $q(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    Tq(a);
    e = (c[a >> 2] & 1 | 0) != 0;
    if (!e) {
      Zq();
      d = c[a + 52 >> 2] | 0;
      b = a + 56 | 0;
      if (d | 0) c[d + 56 >> 2] = c[b >> 2];
      b = c[b >> 2] | 0;
      if (b | 0) c[b + 52 >> 2] = d;
      if ((c[5163] | 0) == (a | 0)) c[5163] = b;
      _q();
    }
    ar(a) | 0;
    Nb[c[a + 12 >> 2] & 31](a) | 0;
    b = c[a + 96 >> 2] | 0;
    if (b | 0) ft(b);
    if (e) return;else {
      ft(a);
      return;
    }
  }
  function ar(a) {
    a = a | 0;
    var b = 0;
    if (a | 0) return br(a) | 0;
    if (!(c[889] | 0)) a = 0;else a = ar(c[889] | 0) | 0;
    Zq();
    b = c[5163] | 0;
    if (b) do {
      if ((c[b + 20 >> 2] | 0) >>> 0 > (c[b + 28 >> 2] | 0) >>> 0) a = br(b) | 0 | a;
      b = c[b + 56 >> 2] | 0;
    } while ((b | 0) != 0);
    _q();
    return a | 0;
  }
  function br(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    b = a + 20 | 0;
    h = a + 28 | 0;
    if ((c[b >> 2] | 0) >>> 0 > (c[h >> 2] | 0) >>> 0 ? (Wb[c[a + 36 >> 2] & 63](a, 0, 0) | 0, (c[b >> 2] | 0) == 0) : 0) a = -1;else {
      d = a + 4 | 0;
      e = c[d >> 2] | 0;
      f = a + 8 | 0;
      g = c[f >> 2] | 0;
      if (e >>> 0 < g >>> 0) {
        g = e - g | 0;
        dc[c[a + 40 >> 2] & 31](a, g, ((g | 0) < 0) << 31 >> 31, 1) | 0;
        A() | 0;
      }
      c[a + 16 >> 2] = 0;
      c[h >> 2] = 0;
      c[b >> 2] = 0;
      c[f >> 2] = 0;
      c[d >> 2] = 0;
      a = 0;
    }
    return a | 0;
  }
  function cr(b, e, f) {
    b = b | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0;
    e = e + -1 | 0;
    a: do if (e) {
      j = f + 4 | 0;
      k = f + 8 | 0;
      i = e;
      e = b;
      while (1) {
        g = c[j >> 2] | 0;
        n = g;
        o = (c[k >> 2] | 0) - n | 0;
        m = pq(g, 10, o) | 0;
        h = (m | 0) == 0;
        m = h ? o : 1 - n + m | 0;
        m = m >>> 0 < i >>> 0 ? m : i;
        ut(e | 0, g | 0, m | 0) | 0;
        g = (c[j >> 2] | 0) + m | 0;
        c[j >> 2] = g;
        e = e + m | 0;
        i = i - m | 0;
        if (!(h & (i | 0) != 0)) {
          l = 10;
          break a;
        }
        if (g >>> 0 >= (c[k >> 2] | 0) >>> 0) {
          g = Xp(f) | 0;
          if ((g | 0) < 0) break;
        } else {
          c[j >> 2] = g + 1;
          g = d[g >> 0] | 0;
        }
        h = e + 1 | 0;
        a[e >> 0] = g;
        i = i + -1 | 0;
        if ((i | 0) == 0 | (g & 255 | 0) == 10) {
          e = h;
          l = 10;
          break a;
        } else e = h;
      }
      if ((e | 0) != (b | 0) ? (c[f >> 2] & 16 | 0) != 0 : 0) l = 10;else b = 0;
    } else {
      e = b;
      l = 10;
    } while (0);
    if ((l | 0) == 10) if (!b) b = 0;else a[e >> 0] = 0;
    return b | 0;
  }
  function dr(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    fr(a, b, ((b | 0) < 0) << 31 >> 31, c);
    return;
  }
  function er(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    f = e;
    c[f >> 2] = d;
    d = eq(a, b, f) | 0;
    Ib = e;
    return d | 0;
  }
  function fr(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    gr(a, b, c, d);
    return;
  }
  function gr(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0;
    if ((e | 0) == 1) {
      g = (c[a + 8 >> 2] | 0) - (c[a + 4 >> 2] | 0) | 0;
      b = nt(b | 0, d | 0, g | 0, ((g | 0) < 0) << 31 >> 31 | 0) | 0;
      d = A() | 0;
    }
    f = a + 20 | 0;
    g = a + 28 | 0;
    if (!((c[f >> 2] | 0) >>> 0 > (c[g >> 2] | 0) >>> 0 ? (Wb[c[a + 36 >> 2] & 63](a, 0, 0) | 0, !(c[f >> 2] | 0)) : 0)) h = 5;
    if ((h | 0) == 5 ? (c[a + 16 >> 2] = 0, c[g >> 2] = 0, c[f >> 2] = 0, dc[c[a + 40 >> 2] & 31](a, b, d, e) | 0, (A() | 0) >= 0) : 0) {
      c[a + 8 >> 2] = 0;
      c[a + 4 >> 2] = 0;
      c[a >> 2] = c[a >> 2] & -17;
    }
    return;
  }
  function hr(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    ir(a, b, c);
    return a | 0;
  }
  function ir(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0;
    g = d;
    a: do if (!((g ^ b) & 3)) {
      f = (e | 0) != 0;
      if (f & (g & 3 | 0) != 0) do {
        g = a[d >> 0] | 0;
        a[b >> 0] = g;
        if (!(g << 24 >> 24)) break a;
        e = e + -1 | 0;
        d = d + 1 | 0;
        b = b + 1 | 0;
        f = (e | 0) != 0;
      } while (f & (d & 3 | 0) != 0);
      if (f) {
        if (a[d >> 0] | 0) {
          b: do if (e >>> 0 > 3) {
            f = d;
            while (1) {
              d = c[f >> 2] | 0;
              if ((d & -2139062144 ^ -2139062144) & d + -16843009 | 0) {
                d = f;
                break b;
              }
              c[b >> 2] = d;
              e = e + -4 | 0;
              d = f + 4 | 0;
              b = b + 4 | 0;
              if (e >>> 0 > 3) f = d;else break;
            }
          } while (0);
          h = 13;
        }
      } else e = 0;
    } else h = 13; while (0);
    c: do if ((h | 0) == 13) if (!e) e = 0;else while (1) {
      h = a[d >> 0] | 0;
      a[b >> 0] = h;
      if (!(h << 24 >> 24)) break c;
      e = e + -1 | 0;
      b = b + 1 | 0;
      if (!e) {
        e = 0;
        break;
      } else d = d + 1 | 0;
    } while (0);
    vt(b | 0, 0, e | 0) | 0;
    return;
  }
  function jr(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    g = Ib;
    Ib = Ib + 32 | 0;
    f = g;
    c[f >> 2] = 0;
    c[f + 4 >> 2] = 0;
    c[f + 8 >> 2] = 0;
    c[f + 12 >> 2] = 0;
    c[f + 16 >> 2] = 0;
    c[f + 20 >> 2] = 0;
    c[f + 24 >> 2] = 0;
    c[f + 28 >> 2] = 0;
    e = a[d >> 0] | 0;
    do if (!(e << 24 >> 24)) d = 0;else {
      if (!(a[d + 1 >> 0] | 0)) {
        d = b;
        while (1) if ((a[d >> 0] | 0) == e << 24 >> 24) d = d + 1 | 0;else break;
        d = d - b | 0;
        break;
      }
      do {
        i = e & 255;
        h = f + (i >>> 5 << 2) | 0;
        c[h >> 2] = 1 << (i & 31) | c[h >> 2];
        d = d + 1 | 0;
        e = a[d >> 0] | 0;
      } while (e << 24 >> 24 != 0);
      e = a[b >> 0] | 0;
      a: do if (!(e << 24 >> 24)) d = b;else {
        d = b;
        do {
          i = e & 255;
          if (!(1 << (i & 31) & c[f + (i >>> 5 << 2) >> 2])) break a;
          d = d + 1 | 0;
          e = a[d >> 0] | 0;
        } while (e << 24 >> 24 != 0);
      } while (0);
      d = d - b | 0;
    } while (0);
    Ib = g;
    return d | 0;
  }
  function kr(a, b) {
    a = a | 0;
    b = b | 0;
    Oq(a + (Kq(a) | 0) | 0, b) | 0;
    return a | 0;
  }
  function lr(a) {
    a = a | 0;
    var b = 0,
      e = 0,
      f = 0;
    b = a + 4 | 0;
    e = c[b >> 2] | 0;
    f = e >>> 0 < (c[a + 8 >> 2] | 0) >>> 0;
    do if ((c[a + 76 >> 2] | 0) < 0) {
      if (f) {
        c[b >> 2] = e + 1;
        a = d[e >> 0] | 0;
        break;
      } else {
        a = Xp(a) | 0;
        break;
      }
    } else if (f) {
      c[b >> 2] = e + 1;
      a = d[e >> 0] | 0;
      break;
    } else {
      a = Xp(a) | 0;
      break;
    } while (0);
    return a | 0;
  }
  function mr(a) {
    a = a | 0;
    a = nr(a) | 0;
    z(A() | 0);
    return a | 0;
  }
  function nr(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0;
    if (!(c[a >> 2] & 128)) b = 1;else b = (c[a + 20 >> 2] | 0) >>> 0 > (c[a + 28 >> 2] | 0) >>> 0 ? 2 : 1;
    b = dc[c[a + 40 >> 2] & 31](a, 0, 0, b) | 0;
    d = A() | 0;
    if ((d | 0) >= 0) {
      e = (c[a + 8 >> 2] | 0) - (c[a + 4 >> 2] | 0) | 0;
      e = nt(b | 0, d | 0, e | 0, ((e | 0) < 0) << 31 >> 31 | 0) | 0;
      d = A() | 0;
      b = (c[a + 20 >> 2] | 0) - (c[a + 28 >> 2] | 0) | 0;
      b = mt(e | 0, d | 0, b | 0, ((b | 0) < 0) << 31 >> 31 | 0) | 0;
      d = A() | 0;
    }
    z(d | 0);
    return b | 0;
  }
  function or(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    j = b & 255;
    e = (b & 255 | 0) == (a[d + 75 >> 0] | 0);
    do if ((c[d + 76 >> 2] | 0) < 0) {
      if (!e ? (f = d + 20 | 0, g = c[f >> 2] | 0, g >>> 0 < (c[d + 16 >> 2] | 0) >>> 0) : 0) {
        c[f >> 2] = g + 1;
        a[g >> 0] = j;
        break;
      }
      Uq(d, b) | 0;
    } else {
      if (!e ? (h = d + 20 | 0, i = c[h >> 2] | 0, i >>> 0 < (c[d + 16 >> 2] | 0) >>> 0) : 0) {
        c[h >> 2] = i + 1;
        a[i >> 0] = j;
        break;
      }
      Uq(d, b) | 0;
    } while (0);
    return;
  }
  function pr(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    i = d << 2;
    f = e + 74 | 0;
    g = a[f >> 0] | 0;
    a[f >> 0] = g + 255 | g;
    f = e + 4 | 0;
    g = c[f >> 2] | 0;
    j = (c[e + 8 >> 2] | 0) - g | 0;
    h = j >>> 0 < i >>> 0 ? j : i;
    if ((j | 0) > 0) {
      ut(b | 0, g | 0, h | 0) | 0;
      c[f >> 2] = (c[f >> 2] | 0) + h;
      f = i - h | 0;
      b = b + h | 0;
    } else f = i;
    a: do if (f | 0) {
      h = e + 32 | 0;
      while (1) {
        if (Yp(e) | 0) break;
        g = Wb[c[h >> 2] & 63](e, b, f) | 0;
        if ((g + 1 | 0) >>> 0 < 2) break;
        f = f - g | 0;
        if (!f) break a;else b = b + g | 0;
      }
      return (i - f | 0) >>> 2 | 0;
    } while (0);
    return d | 0;
  }
  function qr(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    d = h;
    g = Wq(17097) | 0;
    ar(b) | 0;
    do if (!a) {
      c[d >> 2] = c[b + 60 >> 2];
      c[d + 4 >> 2] = 4;
      c[d + 8 >> 2] = g & -524481;
      if ((yq(T(221, d | 0) | 0) | 0) < 0) a = 10;else a = 8;
    } else {
      a = Vq(a, 17097) | 0;
      if (!a) a = 10;else {
        d = a + 60 | 0;
        e = c[d >> 2] | 0;
        f = c[b + 60 >> 2] | 0;
        if ((e | 0) != (f | 0)) {
          if ((rr(e, f, g & 524288) | 0) < 0) {
            $q(a);
            a = 10;
            break;
          }
        } else c[d >> 2] = -1;
        c[b >> 2] = c[b >> 2] & 1 | c[a >> 2];
        c[b + 32 >> 2] = c[a + 32 >> 2];
        c[b + 36 >> 2] = c[a + 36 >> 2];
        c[b + 40 >> 2] = c[a + 40 >> 2];
        c[b + 12 >> 2] = c[a + 12 >> 2];
        $q(a);
        a = 8;
      }
    } while (0);
    if ((a | 0) == 8) {
      Ib = h;
      return b | 0;
    } else if ((a | 0) == 10) {
      $q(b);
      Ib = h;
      return 0;
    }
    return 0;
  }
  function rr(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0;
    h = Ib;
    Ib = Ib + 32 | 0;
    g = h + 16 | 0;
    f = h;
    a: do if ((a | 0) == (b | 0)) e = -28;else {
      b: do if (d & 524288 | 0) while (1) {
        c[f >> 2] = a;
        c[f + 4 >> 2] = b;
        c[f + 8 >> 2] = d;
        e = U(330, f | 0) | 0;
        switch (e | 0) {
          case -52:
            break b;
          case -10:
            break;
          default:
            break a;
        }
      } while (0);
      do {
        c[g >> 2] = a;
        c[g + 4 >> 2] = b;
        e = Y(63, g | 0) | 0;
      } while ((e | 0) == -10);
    } while (0);
    g = yq(e) | 0;
    Ib = h;
    return g | 0;
  }
  function sr(a) {
    a = a | 0;
    var b = 0;
    a = mr(a) | 0;
    b = A() | 0;
    if ((b | 0) > 0 | (b | 0) == 0 & a >>> 0 > 2147483647) {
      c[5160] = 61;
      a = -1;
    }
    return a | 0;
  }
  function tr(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    d = Ib;
    Ib = Ib + 16 | 0;
    e = d;
    c[e >> 2] = b;
    eq(2712, a, e) | 0;
    Ib = d;
    return;
  }
  function ur(b) {
    b = b | 0;
    var d = 0;
    do if ((Rq(b, 2712) | 0) >= 0) {
      if ((a[2787] | 0) != 10 ? (d = c[683] | 0, d >>> 0 < (c[682] | 0) >>> 0) : 0) {
        c[683] = d + 1;
        a[d >> 0] = 10;
        break;
      }
      Uq(2712, 10) | 0;
    } while (0);
    return;
  }
  function vr(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0;
    e = Ib;
    Ib = Ib + 16 | 0;
    d = e + 8 | 0;
    f = e;
    b = a;
    c[f >> 2] = b;
    a = S(10, f | 0) | 0;
    if ((a | 0) == -31) {
      c[d >> 2] = b;
      a = V(40, d | 0) | 0;
    }
    yq(a) | 0;
    Ib = e;
    return;
  }
  function wr(a) {
    a = a | 0;
    gr(a, 0, 0, 0);
    c[a >> 2] = c[a >> 2] & -33;
    return;
  }
  function xr(b) {
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0;
    f = Ib;
    Ib = Ib + 16 | 0;
    e = f;
    O(0, e | 0) | 0;
    d = 0;
    e = (c[e + 4 >> 2] | 0) * 65537 ^ (e >>> 4) + b;
    while (1) {
      a[b + d >> 0] = (e & 15) + 65 | e << 1 & 32;
      d = d + 1 | 0;
      if ((d | 0) == 6) break;else e = e >>> 5;
    }
    Ib = f;
    return b | 0;
  }
  function yr(a) {
    a = a | 0;
    return + +zr(a, 0);
  }
  function zr(a, b) {
    a = a | 0;
    b = b | 0;
    return + +Ar(a, b);
  }
  function Ar(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0.0,
      g = 0,
      h = 0;
    g = Ib;
    Ib = Ib + 144 | 0;
    e = g;
    vt(e | 0, 0, 144) | 0;
    h = e + 4 | 0;
    c[h >> 2] = a;
    d = e + 8 | 0;
    c[d >> 2] = -1;
    c[e + 44 >> 2] = a;
    c[e + 76 >> 2] = -1;
    Up(e);
    f = +Aq(e);
    e = e + 120 | 0;
    d = (c[h >> 2] | 0) - (c[d >> 2] | 0) | 0;
    d = mt(c[e >> 2] | 0, c[e + 4 >> 2] | 0, d | 0, ((d | 0) < 0) << 31 >> 31 | 0) | 0;
    e = A() | 0;
    if (b | 0) c[b >> 2] = (d | 0) == 0 & (e | 0) == 0 ? a : a + d | 0;
    Ib = g;
    return +f;
  }
  function Br(b) {
    b = b | 0;
    var c = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    while (1) {
      c = a[b >> 0] | 0;
      e = c << 24 >> 24;
      d = b + 1 | 0;
      if (!(Wp(e) | 0)) break;else b = d;
    }
    switch (e | 0) {
      case 45:
        {
          b = 1;
          f = 5;
          break;
        }
      case 43:
        {
          b = 0;
          f = 5;
          break;
        }
      default:
        {
          g = 0;
          d = b;
          b = e;
        }
    }
    if ((f | 0) == 5) {
      c = a[d >> 0] | 0;
      g = b;
      b = c << 24 >> 24;
    }
    if (!(aq(b) | 0)) b = 0;else {
      b = 0;
      do {
        d = d + 1 | 0;
        b = (b * 10 | 0) + 48 - (c << 24 >> 24) | 0;
        c = a[d >> 0] | 0;
      } while ((aq(c << 24 >> 24) | 0) != 0);
    }
    return ((g | 0) == 0 ? 0 - b | 0 : b) | 0;
  }
  function Cr(b) {
    b = b | 0;
    var c = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0;
    while (1) {
      c = a[b >> 0] | 0;
      e = c << 24 >> 24;
      d = b + 1 | 0;
      if (!(Wp(e) | 0)) break;else b = d;
    }
    switch (e | 0) {
      case 45:
        {
          b = 1;
          f = 5;
          break;
        }
      case 43:
        {
          b = 0;
          f = 5;
          break;
        }
      default:
        {
          g = 0;
          d = b;
          b = e;
        }
    }
    if ((f | 0) == 5) {
      c = a[d >> 0] | 0;
      g = b;
      b = c << 24 >> 24;
    }
    if (!(aq(b) | 0)) b = 0;else {
      b = 0;
      do {
        d = d + 1 | 0;
        b = (b * 10 | 0) + 48 - (c << 24 >> 24) | 0;
        c = a[d >> 0] | 0;
      } while ((aq(c << 24 >> 24) | 0) != 0);
    }
    return ((g | 0) == 0 ? 0 - b | 0 : b) | 0;
  }
  function Dr(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    h = Ib;
    Ib = Ib + 32 | 0;
    f = h;
    e = a[d >> 0] | 0;
    a: do if (e << 24 >> 24 != 0 ? (a[d + 1 >> 0] | 0) != 0 : 0) {
      vt(f | 0, 0, 32) | 0;
      e = a[d >> 0] | 0;
      if (e << 24 >> 24) do {
        j = e & 255;
        i = f + (j >>> 5 << 2) | 0;
        c[i >> 2] = 1 << (j & 31) | c[i >> 2];
        d = d + 1 | 0;
        e = a[d >> 0] | 0;
      } while (e << 24 >> 24 != 0);
      d = a[b >> 0] | 0;
      if (!(d << 24 >> 24)) e = b;else {
        e = b;
        do {
          j = d & 255;
          if (1 << (j & 31) & c[f + (j >>> 5 << 2) >> 2] | 0) break a;
          e = e + 1 | 0;
          d = a[e >> 0] | 0;
        } while (d << 24 >> 24 != 0);
      }
    } else g = 3; while (0);
    if ((g | 0) == 3) e = Mq(b, e << 24 >> 24) | 0;
    Ib = h;
    return e - b | 0;
  }
  function Er(b, c, d) {
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var e = 0,
      f = 0,
      g = 0;
    g = d;
    d = b + (Kq(b) | 0) | 0;
    while (1) {
      e = a[c >> 0] | 0;
      if (!(e << 24 >> 24)) break;
      g = g + -1 | 0;
      f = d + 1 | 0;
      a[d >> 0] = e;
      if (!g) {
        d = f;
        break;
      } else {
        c = c + 1 | 0;
        d = f;
      }
    }
    a[d >> 0] = 0;
    return b | 0;
  }
  function Fr(b) {
    b = b | 0;
    b = b + (Dr(b, 8679) | 0) | 0;
    return ((a[b >> 0] | 0) == 0 ? 0 : b) | 0;
  }
  function Gr(b, d) {
    b = b | 0;
    d = d | 0;
    var e = 0;
    if (!b) {
      b = c[5164] | 0;
      if (!b) b = 0;else e = 3;
    } else e = 3;
    do if ((e | 0) == 3) {
      b = b + (jr(b, d) | 0) | 0;
      if (!(a[b >> 0] | 0)) {
        c[5164] = 0;
        b = 0;
        break;
      }
      d = b + (Dr(b, d) | 0) | 0;
      c[5164] = d;
      if (!(a[d >> 0] | 0)) {
        c[5164] = 0;
        break;
      } else {
        c[5164] = d + 1;
        a[d >> 0] = 0;
        break;
      }
    } while (0);
    return b | 0;
  }
  function Hr(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0;
    h = Ib;
    Ib = Ib + 16 | 0;
    f = h;
    b = Kq(a) | 0;
    a: do if (b >>> 0 >= 6 ? (e = a + b + -6 | 0, ($p(e) | 0) == 0) : 0) {
      d = 100;
      do {
        xr(e) | 0;
        c[f >> 2] = 384;
        b = zq(a, 0, f) | 0;
        if ((b | 0) > -1) break a;
        d = d + -1 | 0;
      } while ((d | 0) != 0 & (c[5160] | 0) == 20);
      ut(e | 0, 16773, 6) | 0;
      b = -1;
    } else g = 3; while (0);
    if ((g | 0) == 3) {
      c[5160] = 28;
      b = -1;
    }
    Ib = h;
    return b | 0;
  }
  function Ir(a) {
    a = a | 0;
    return Hr(a) | 0;
  }
  function Jr(a) {
    a = a | 0;
    return;
  }
  function Kr(a) {
    a = a | 0;
    _r(a);
    return;
  }
  function Lr(a) {
    a = a | 0;
    return;
  }
  function Mr(a) {
    a = a | 0;
    return;
  }
  function Nr(d, e, f) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0;
    l = Ib;
    Ib = Ib + 64 | 0;
    j = l;
    if (!(Rr(d, e, 0) | 0)) {
      if ((e | 0) != 0 ? (k = Vr(e, 3e3) | 0, (k | 0) != 0) : 0) {
        c[j >> 2] = k;
        c[j + 4 >> 2] = 0;
        c[j + 8 >> 2] = d;
        c[j + 12 >> 2] = -1;
        d = j + 16 | 0;
        e = j + 24 | 0;
        g = j + 48 | 0;
        h = d;
        i = h + 36 | 0;
        do {
          c[h >> 2] = 0;
          h = h + 4 | 0;
        } while ((h | 0) < (i | 0));
        b[d + 36 >> 1] = 0;
        a[d + 38 >> 0] = 0;
        c[g >> 2] = 1;
        uc[c[(c[k >> 2] | 0) + 28 >> 2] & 3](k, j, c[f >> 2] | 0, 1);
        if ((c[e >> 2] | 0) == 1) {
          c[f >> 2] = c[d >> 2];
          d = 1;
        } else d = 0;
      } else d = 0;
    } else d = 1;
    Ib = l;
    return d | 0;
  }
  function Or(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    if (Rr(a, c[b + 8 >> 2] | 0, g) | 0) Ur(b, d, e, f);
    return;
  }
  function Pr(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0;
    do if (!(Rr(b, c[d + 8 >> 2] | 0, g) | 0)) {
      if (Rr(b, c[d >> 2] | 0, g) | 0) {
        if ((c[d + 16 >> 2] | 0) != (e | 0) ? (h = d + 20 | 0, (c[h >> 2] | 0) != (e | 0)) : 0) {
          c[d + 32 >> 2] = f;
          c[h >> 2] = e;
          g = d + 40 | 0;
          c[g >> 2] = (c[g >> 2] | 0) + 1;
          if ((c[d + 36 >> 2] | 0) == 1 ? (c[d + 24 >> 2] | 0) == 2 : 0) a[d + 54 >> 0] = 1;
          c[d + 44 >> 2] = 4;
          break;
        }
        if ((f | 0) == 1) c[d + 32 >> 2] = 1;
      }
    } else Tr(d, e, f); while (0);
    return;
  }
  function Qr(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if (Rr(a, c[b + 8 >> 2] | 0, 0) | 0) Sr(b, d, e);
    return;
  }
  function Rr(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    if (d) a = (_p(c[a + 4 >> 2] | 0, c[b + 4 >> 2] | 0) | 0) == 0;else a = (a | 0) == (b | 0);
    return a | 0;
  }
  function Sr(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    f = b + 16 | 0;
    g = c[f >> 2] | 0;
    do if (g) {
      if ((g | 0) != (d | 0)) {
        e = b + 36 | 0;
        c[e >> 2] = (c[e >> 2] | 0) + 1;
        c[b + 24 >> 2] = 2;
        a[b + 54 >> 0] = 1;
        break;
      }
      b = b + 24 | 0;
      if ((c[b >> 2] | 0) == 2) c[b >> 2] = e;
    } else {
      c[f >> 2] = d;
      c[b + 24 >> 2] = e;
      c[b + 36 >> 2] = 1;
    } while (0);
    return;
  }
  function Tr(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0;
    if ((c[a + 4 >> 2] | 0) == (b | 0) ? (e = a + 28 | 0, (c[e >> 2] | 0) != 1) : 0) c[e >> 2] = d;
    return;
  }
  function Ur(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0;
    a[b + 53 >> 0] = 1;
    do if ((c[b + 4 >> 2] | 0) == (e | 0)) {
      a[b + 52 >> 0] = 1;
      g = b + 16 | 0;
      e = c[g >> 2] | 0;
      if (!e) {
        c[g >> 2] = d;
        c[b + 24 >> 2] = f;
        c[b + 36 >> 2] = 1;
        if (!((f | 0) == 1 ? (c[b + 48 >> 2] | 0) == 1 : 0)) break;
        a[b + 54 >> 0] = 1;
        break;
      }
      if ((e | 0) != (d | 0)) {
        f = b + 36 | 0;
        c[f >> 2] = (c[f >> 2] | 0) + 1;
        a[b + 54 >> 0] = 1;
        break;
      }
      g = b + 24 | 0;
      e = c[g >> 2] | 0;
      if ((e | 0) == 2) {
        c[g >> 2] = f;
        e = f;
      }
      if ((e | 0) == 1 ? (c[b + 48 >> 2] | 0) == 1 : 0) a[b + 54 >> 0] = 1;
    } while (0);
    return;
  }
  function Vr(d, e) {
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0;
    q = Ib;
    Ib = Ib + 64 | 0;
    n = q;
    p = c[d >> 2] | 0;
    o = d + (c[p + -8 >> 2] | 0) | 0;
    p = c[p + -4 >> 2] | 0;
    c[n >> 2] = e;
    c[n + 4 >> 2] = d;
    c[n + 8 >> 2] = 3016;
    d = n + 12 | 0;
    f = n + 16 | 0;
    g = n + 20 | 0;
    h = n + 24 | 0;
    i = n + 28 | 0;
    j = n + 32 | 0;
    k = n + 40 | 0;
    l = d;
    m = l + 40 | 0;
    do {
      c[l >> 2] = 0;
      l = l + 4 | 0;
    } while ((l | 0) < (m | 0));
    b[d + 40 >> 1] = 0;
    a[d + 42 >> 0] = 0;
    a: do if (Rr(p, e, 0) | 0) {
      c[n + 48 >> 2] = 1;
      wc[c[(c[p >> 2] | 0) + 20 >> 2] & 3](p, n, o, o, 1, 0);
      d = (c[h >> 2] | 0) == 1 ? o : 0;
    } else {
      vc[c[(c[p >> 2] | 0) + 24 >> 2] & 3](p, n, o, 1, 0);
      switch (c[n + 36 >> 2] | 0) {
        case 0:
          {
            d = (c[k >> 2] | 0) == 1 & (c[i >> 2] | 0) == 1 & (c[j >> 2] | 0) == 1 ? c[g >> 2] | 0 : 0;
            break a;
          }
        case 1:
          break;
        default:
          {
            d = 0;
            break a;
          }
      }
      if ((c[h >> 2] | 0) != 1 ? !((c[k >> 2] | 0) == 0 & (c[i >> 2] | 0) == 1 & (c[j >> 2] | 0) == 1) : 0) {
        d = 0;
        break;
      }
      d = c[f >> 2] | 0;
    } while (0);
    Ib = q;
    return d | 0;
  }
  function Wr(a) {
    a = a | 0;
    _r(a);
    return;
  }
  function Xr(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    if (Rr(a, c[b + 8 >> 2] | 0, g) | 0) Ur(b, d, e, f);else {
      a = c[a + 8 >> 2] | 0;
      wc[c[(c[a >> 2] | 0) + 20 >> 2] & 3](a, b, d, e, f, g);
    }
    return;
  }
  function Yr(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0;
    a: do if (!(Rr(b, c[d + 8 >> 2] | 0, g) | 0)) {
      if (!(Rr(b, c[d >> 2] | 0, g) | 0)) {
        i = c[b + 8 >> 2] | 0;
        vc[c[(c[i >> 2] | 0) + 24 >> 2] & 3](i, d, e, f, g);
        break;
      }
      if ((c[d + 16 >> 2] | 0) != (e | 0) ? (i = d + 20 | 0, (c[i >> 2] | 0) != (e | 0)) : 0) {
        c[d + 32 >> 2] = f;
        f = d + 44 | 0;
        do if ((c[f >> 2] | 0) != 4) {
          h = d + 52 | 0;
          a[h >> 0] = 0;
          j = d + 53 | 0;
          a[j >> 0] = 0;
          b = c[b + 8 >> 2] | 0;
          wc[c[(c[b >> 2] | 0) + 20 >> 2] & 3](b, d, e, e, 1, g);
          if (a[j >> 0] | 0) {
            j = (a[h >> 0] | 0) == 0;
            c[f >> 2] = 3;
            if (j) break;else break a;
          } else {
            c[f >> 2] = 4;
            break;
          }
        } while (0);
        c[i >> 2] = e;
        j = d + 40 | 0;
        c[j >> 2] = (c[j >> 2] | 0) + 1;
        if ((c[d + 36 >> 2] | 0) != 1) break;
        if ((c[d + 24 >> 2] | 0) != 2) break;
        a[d + 54 >> 0] = 1;
        break;
      }
      if ((f | 0) == 1) c[d + 32 >> 2] = 1;
    } else Tr(d, e, f); while (0);
    return;
  }
  function Zr(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    if (Rr(a, c[b + 8 >> 2] | 0, 0) | 0) Sr(b, d, e);else {
      a = c[a + 8 >> 2] | 0;
      uc[c[(c[a >> 2] | 0) + 28 >> 2] & 3](a, b, d, e);
    }
    return;
  }
  function _r(a) {
    a = a | 0;
    ft(a);
    return;
  }
  function $r(a) {
    a = a | 0;
    _r(a);
    return;
  }
  function as(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    return Rr(a, b, 0) | 0;
  }
  function bs(a) {
    a = a | 0;
    _r(a);
    return;
  }
  function cs(d, e, f) {
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0;
    n = Ib;
    Ib = Ib + 64 | 0;
    l = n;
    do if (!(Rr(e, 3144, 0) | 0)) {
      if (ds(d, e) | 0) {
        e = c[f >> 2] | 0;
        if (!e) {
          e = 1;
          break;
        }
        c[f >> 2] = c[e >> 2];
        e = 1;
        break;
      }
      if ((e | 0) != 0 ? (g = Vr(e, 3072) | 0, (g | 0) != 0) : 0) {
        e = c[f >> 2] | 0;
        if (e | 0) c[f >> 2] = c[e >> 2];
        e = c[g + 8 >> 2] | 0;
        i = d + 8 | 0;
        h = c[i >> 2] | 0;
        if ((e & 7 & (h ^ 7) | 0) == 0 ? ((e & 96 ^ 96) & h | 0) == 0 : 0) {
          h = d + 12 | 0;
          d = c[h >> 2] | 0;
          g = g + 12 | 0;
          e = c[g >> 2] | 0;
          if (!(Rr(d, e, 0) | 0)) {
            if (Rr(d, 3136, 0) | 0) {
              if (!e) {
                e = 1;
                break;
              }
              e = (Vr(e, 3088) | 0) == 0;
              break;
            }
            if (d) {
              e = Vr(d, 3072) | 0;
              if (e | 0) {
                if (!(c[i >> 2] & 1)) {
                  e = 0;
                  break;
                }
                e = es(e, c[g >> 2] | 0) | 0;
                break;
              }
              e = c[h >> 2] | 0;
              if (e) {
                e = Vr(e, 3104) | 0;
                if (e | 0) {
                  if (!(c[i >> 2] & 1)) {
                    e = 0;
                    break;
                  }
                  e = fs(e, c[g >> 2] | 0) | 0;
                  break;
                }
                e = c[h >> 2] | 0;
                if ((((e | 0) != 0 ? (j = Vr(e, 3e3) | 0, (j | 0) != 0) : 0) ? (k = c[g >> 2] | 0, (k | 0) != 0) : 0) ? (m = Vr(k, 3e3) | 0, (m | 0) != 0) : 0) {
                  c[l >> 2] = m;
                  c[l + 4 >> 2] = 0;
                  c[l + 8 >> 2] = j;
                  c[l + 12 >> 2] = -1;
                  e = l + 16 | 0;
                  d = l + 24 | 0;
                  g = l + 48 | 0;
                  h = e;
                  i = h + 36 | 0;
                  do {
                    c[h >> 2] = 0;
                    h = h + 4 | 0;
                  } while ((h | 0) < (i | 0));
                  b[e + 36 >> 1] = 0;
                  a[e + 38 >> 0] = 0;
                  c[g >> 2] = 1;
                  uc[c[(c[m >> 2] | 0) + 28 >> 2] & 3](m, l, c[f >> 2] | 0, 1);
                  do if ((c[d >> 2] | 0) == 1) {
                    if (!(c[f >> 2] | 0)) {
                      e = 1;
                      break;
                    }
                    c[f >> 2] = c[e >> 2];
                    e = 1;
                  } else e = 0; while (0);
                } else e = 0;
              } else e = 0;
            } else e = 0;
          } else e = 1;
        } else e = 0;
      } else e = 0;
    } else {
      c[f >> 2] = 0;
      e = 1;
    } while (0);
    Ib = n;
    return e | 0;
  }
  function ds(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    if (!(c[a + 8 >> 2] & 24)) {
      if ((b | 0) != 0 ? (d = Vr(b, 3056) | 0, (d | 0) != 0) : 0) {
        d = (c[d + 8 >> 2] & 24 | 0) != 0;
        e = 5;
      } else d = 0;
    } else {
      d = 1;
      e = 5;
    }
    if ((e | 0) == 5) d = Rr(a, b, d) | 0;
    return d | 0;
  }
  function es(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0;
    a: do if (b) {
      while (1) {
        d = Vr(b, 3072) | 0;
        if (!d) {
          b = 0;
          break a;
        }
        f = c[a + 8 >> 2] | 0;
        if (c[d + 8 >> 2] & ~f | 0) {
          b = 0;
          break a;
        }
        e = a + 12 | 0;
        b = c[e >> 2] | 0;
        d = d + 12 | 0;
        if (Rr(b, c[d >> 2] | 0, 0) | 0) {
          b = 1;
          break a;
        }
        if ((f & 1 | 0) == 0 | (b | 0) == 0) {
          b = 0;
          break a;
        }
        a = Vr(b, 3072) | 0;
        if (!a) break;
        b = c[d >> 2] | 0;
        if (!b) {
          b = 0;
          break a;
        }
      }
      b = c[e >> 2] | 0;
      if ((b | 0) != 0 ? (g = Vr(b, 3104) | 0, (g | 0) != 0) : 0) b = fs(g, c[d >> 2] | 0) | 0;else b = 0;
    } else b = 0; while (0);
    return b | 0;
  }
  function fs(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    if ((((b | 0) != 0 ? (d = Vr(b, 3104) | 0, (d | 0) != 0) : 0) ? (c[d + 8 >> 2] & ~c[a + 8 >> 2] | 0) == 0 : 0) ? Rr(c[a + 12 >> 2] | 0, c[d + 12 >> 2] | 0, 0) | 0 : 0) a = Rr(c[a + 16 >> 2] | 0, c[d + 16 >> 2] | 0, 0) | 0;else a = 0;
    return a | 0;
  }
  function gs(a) {
    a = a | 0;
    _r(a);
    return;
  }
  function hs(b, d, e, f, g, h) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    var i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0;
    if (Rr(b, c[d + 8 >> 2] | 0, h) | 0) Ur(d, e, f, g);else {
      r = d + 52 | 0;
      j = a[r >> 0] | 0;
      q = d + 53 | 0;
      i = a[q >> 0] | 0;
      p = c[b + 12 >> 2] | 0;
      m = b + 16 + (p << 3) | 0;
      a[r >> 0] = 0;
      a[q >> 0] = 0;
      ls(b + 16 | 0, d, e, f, g, h);
      k = a[r >> 0] | 0;
      j = k | j;
      l = a[q >> 0] | 0;
      i = l | i;
      a: do if ((p | 0) > 1) {
        n = d + 24 | 0;
        o = b + 8 | 0;
        p = d + 54 | 0;
        b = b + 24 | 0;
        do {
          i = i & 1;
          j = j & 1;
          if (a[p >> 0] | 0) break a;
          if (!(k << 24 >> 24)) {
            if (l << 24 >> 24 ? (c[o >> 2] & 1 | 0) == 0 : 0) break a;
          } else {
            if ((c[n >> 2] | 0) == 1) break a;
            if (!(c[o >> 2] & 2)) break a;
          }
          a[r >> 0] = 0;
          a[q >> 0] = 0;
          ls(b, d, e, f, g, h);
          k = a[r >> 0] | 0;
          j = k | j;
          l = a[q >> 0] | 0;
          i = l | i;
          b = b + 8 | 0;
        } while (b >>> 0 < m >>> 0);
      } while (0);
      a[r >> 0] = j << 24 >> 24 != 0 & 1;
      a[q >> 0] = i << 24 >> 24 != 0 & 1;
    }
    return;
  }
  function is(b, d, e, f, g) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    a: do if (!(Rr(b, c[d + 8 >> 2] | 0, g) | 0)) {
      if (!(Rr(b, c[d >> 2] | 0, g) | 0)) {
        p = c[b + 12 >> 2] | 0;
        k = b + 16 + (p << 3) | 0;
        ms(b + 16 | 0, d, e, f, g);
        h = b + 24 | 0;
        if ((p | 0) <= 1) break;
        b = c[b + 8 >> 2] | 0;
        if ((b & 2 | 0) == 0 ? (j = d + 36 | 0, (c[j >> 2] | 0) != 1) : 0) {
          if (!(b & 1)) {
            b = d + 54 | 0;
            while (1) {
              if (a[b >> 0] | 0) break a;
              if ((c[j >> 2] | 0) == 1) break a;
              ms(h, d, e, f, g);
              h = h + 8 | 0;
              if (h >>> 0 >= k >>> 0) break a;
            }
          }
          b = d + 24 | 0;
          i = d + 54 | 0;
          while (1) {
            if (a[i >> 0] | 0) break a;
            if ((c[j >> 2] | 0) == 1 ? (c[b >> 2] | 0) == 1 : 0) break a;
            ms(h, d, e, f, g);
            h = h + 8 | 0;
            if (h >>> 0 >= k >>> 0) break a;
          }
        }
        b = d + 54 | 0;
        while (1) {
          if (a[b >> 0] | 0) break a;
          ms(h, d, e, f, g);
          h = h + 8 | 0;
          if (h >>> 0 >= k >>> 0) break a;
        }
      }
      if ((c[d + 16 >> 2] | 0) != (e | 0) ? (p = d + 20 | 0, (c[p >> 2] | 0) != (e | 0)) : 0) {
        c[d + 32 >> 2] = f;
        o = d + 44 | 0;
        do if ((c[o >> 2] | 0) != 4) {
          i = c[b + 12 >> 2] | 0;
          j = b + 16 + (i << 3) | 0;
          k = d + 52 | 0;
          f = d + 53 | 0;
          l = d + 54 | 0;
          m = b + 8 | 0;
          n = d + 24 | 0;
          if ((i | 0) <= 0) {
            c[o >> 2] = 4;
            break;
          }
          h = 0;
          i = b + 16 | 0;
          b = 0;
          b: while (1) {
            a[k >> 0] = 0;
            a[f >> 0] = 0;
            ls(i, d, e, e, 1, g);
            if (a[l >> 0] | 0) {
              i = 19;
              break;
            }
            do if (a[f >> 0] | 0) {
              if (!(a[k >> 0] | 0)) if (!(c[m >> 2] & 1)) {
                i = 20;
                break b;
              } else {
                b = 1;
                break;
              }
              if ((c[n >> 2] | 0) == 1) {
                h = 1;
                i = 20;
                break b;
              }
              if (!(c[m >> 2] & 2)) {
                h = 1;
                i = 20;
                break b;
              } else {
                h = 1;
                b = 1;
              }
            } while (0);
            i = i + 8 | 0;
            if (i >>> 0 >= j >>> 0) {
              i = 19;
              break;
            }
          }
          if ((i | 0) == 19) if (b) i = 20;else b = 4;
          if ((i | 0) == 20) b = 3;
          c[o >> 2] = b;
          if (h & 1) break a;
        } while (0);
        c[p >> 2] = e;
        e = d + 40 | 0;
        c[e >> 2] = (c[e >> 2] | 0) + 1;
        if ((c[d + 36 >> 2] | 0) != 1) break;
        if ((c[d + 24 >> 2] | 0) != 2) break;
        a[d + 54 >> 0] = 1;
        break;
      }
      if ((f | 0) == 1) c[d + 32 >> 2] = 1;
    } else Tr(d, e, f); while (0);
    return;
  }
  function js(b, d, e, f) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    a: do if (!(Rr(b, c[d + 8 >> 2] | 0, 0) | 0)) {
      h = c[b + 12 >> 2] | 0;
      g = b + 16 + (h << 3) | 0;
      ks(b + 16 | 0, d, e, f);
      if ((h | 0) > 1) {
        h = d + 54 | 0;
        b = b + 24 | 0;
        do {
          ks(b, d, e, f);
          if (a[h >> 0] | 0) break a;
          b = b + 8 | 0;
        } while (b >>> 0 < g >>> 0);
      }
    } else Sr(d, e, f); while (0);
    return;
  }
  function ks(a, b, d, e) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    g = c[a + 4 >> 2] | 0;
    if (d) {
      f = g >> 8;
      if (g & 1) f = c[(c[d >> 2] | 0) + f >> 2] | 0;
    } else f = 0;
    a = c[a >> 2] | 0;
    uc[c[(c[a >> 2] | 0) + 28 >> 2] & 3](a, b, d + f | 0, (g & 2 | 0) == 0 ? 2 : e);
    return;
  }
  function ls(a, b, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    var h = 0,
      i = 0;
    i = c[a + 4 >> 2] | 0;
    h = i >> 8;
    if (i & 1) h = c[(c[e >> 2] | 0) + h >> 2] | 0;
    a = c[a >> 2] | 0;
    wc[c[(c[a >> 2] | 0) + 20 >> 2] & 3](a, b, d, e + h | 0, (i & 2 | 0) == 0 ? 2 : f, g);
    return;
  }
  function ms(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0;
    h = c[a + 4 >> 2] | 0;
    g = h >> 8;
    if (h & 1) g = c[(c[d >> 2] | 0) + g >> 2] | 0;
    a = c[a >> 2] | 0;
    vc[c[(c[a >> 2] | 0) + 24 >> 2] & 3](a, b, d + g | 0, (h & 2 | 0) == 0 ? 2 : e, f);
    return;
  }
  function ns(a) {
    a = a | 0;
    return et((a | 0) == 0 ? 1 : a) | 0;
  }
  function os(a) {
    a = a | 0;
    return ns(a) | 0;
  }
  function ps(a) {
    a = a | 0;
    _r(a);
    return;
  }
  function qs(a, b, d) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    f = Ib;
    Ib = Ib + 16 | 0;
    e = f;
    c[e >> 2] = c[d >> 2];
    a = Wb[c[(c[a >> 2] | 0) + 16 >> 2] & 63](a, b, e) | 0;
    if (a) c[d >> 2] = c[e >> 2];
    Ib = f;
    return a & 1 | 0;
  }
  function rs(a) {
    a = a | 0;
    if (!a) a = 0;else a = (Vr(a, 3072) | 0) != 0 & 1;
    return a | 0;
  }
  function ss() {
    N(20676);
    return;
  }
  function ts() {
    return 20660;
  }
  function us() {
    return 20668;
  }
  function vs() {
    return 20672;
  }
  function ws() {
    xs();
    return;
  }
  function xs() {
    ys();
    return;
  }
  function ys() {
    zs();
    return;
  }
  function zs() {
    na(3136, 17177);
    ca(3152, 17182, 1, 1, 0);
    As();
    Bs();
    Cs();
    Ds();
    Es();
    Fs();
    Gs();
    Hs();
    Is();
    Js();
    Ks();
    la(2520, 17288);
    la(3392, 17300);
    ma(3368, 4, 17333);
    ga(3360, 17346);
    Ls();
    Ms(17392);
    Ns(17429);
    Os(17468);
    Ps(17499);
    Qs(17539);
    Rs(17568);
    Ss();
    Ts();
    Ms(17675);
    Ns(17707);
    Os(17740);
    Ps(17773);
    Qs(17807);
    Rs(17840);
    Us();
    Vs();
    Ws();
    return;
  }
  function As() {
    ja(3160, 17187, 1, -128, 127);
    return;
  }
  function Bs() {
    ja(3176, 17192, 1, -128, 127);
    return;
  }
  function Cs() {
    ja(3168, 17204, 1, 0, 255);
    return;
  }
  function Ds() {
    ja(3184, 17218, 2, -32768, 32767);
    return;
  }
  function Es() {
    ja(3192, 17224, 2, 0, 65535);
    return;
  }
  function Fs() {
    ja(3200, 17239, 4, -2147483648, 2147483647);
    return;
  }
  function Gs() {
    ja(3208, 17243, 4, 0, -1);
    return;
  }
  function Hs() {
    ja(3216, 17256, 4, -2147483648, 2147483647);
    return;
  }
  function Is() {
    ja(3224, 17261, 4, 0, -1);
    return;
  }
  function Js() {
    ha(3232, 17275, 4);
    return;
  }
  function Ks() {
    ha(3240, 17281, 8);
    return;
  }
  function Ls() {
    ka(3352, 0, 17362);
    return;
  }
  function Ms(a) {
    a = a | 0;
    ka(3344, 0, a | 0);
    return;
  }
  function Ns(a) {
    a = a | 0;
    ka(3336, 1, a | 0);
    return;
  }
  function Os(a) {
    a = a | 0;
    ka(3328, 2, a | 0);
    return;
  }
  function Ps(a) {
    a = a | 0;
    ka(3320, 3, a | 0);
    return;
  }
  function Qs(a) {
    a = a | 0;
    ka(3312, 4, a | 0);
    return;
  }
  function Rs(a) {
    a = a | 0;
    ka(3304, 5, a | 0);
    return;
  }
  function Ss() {
    ka(3296, 4, 17606);
    return;
  }
  function Ts() {
    ka(3288, 5, 17636);
    return;
  }
  function Us() {
    ka(3280, 6, 17874);
    return;
  }
  function Vs() {
    ka(3272, 7, 17905);
    return;
  }
  function Ws() {
    ka(3264, 7, 17937);
    return;
  }
  function Xs(a) {
    a = a | 0;
    return Qq(c[a + 4 >> 2] | 0) | 0;
  }
  function Ys() {
    return 0;
  }
  function Zs() {
    qa();
  }
  function _s(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0;
    if (e >>> 0 > 4294967279) Zs();
    if (e >>> 0 < 11) a[b + 11 >> 0] = e;else {
      g = e + 16 & -16;
      f = ns(g) | 0;
      c[b >> 2] = f;
      c[b + 8 >> 2] = g | -2147483648;
      c[b + 4 >> 2] = e;
      b = f;
    }
    $s(b, d, e) | 0;
    at(b + e | 0, 0);
    return;
  }
  function $s(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    if (c | 0) ut(a | 0, b | 0, c | 0) | 0;
    return a | 0;
  }
  function at(b, c) {
    b = b | 0;
    c = c | 0;
    a[b >> 0] = c;
    return;
  }
  function bt(b) {
    b = b | 0;
    if ((a[b + 11 >> 0] | 0) < 0) ct(c[b >> 2] | 0);
    return;
  }
  function ct(a) {
    a = a | 0;
    dt(a);
    return;
  }
  function dt(a) {
    a = a | 0;
    _r(a);
    return;
  }
  function et(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0,
      q = 0,
      r = 0,
      s = 0,
      t = 0;
    t = Ib;
    Ib = Ib + 16 | 0;
    n = t;
    do if (a >>> 0 < 245) {
      k = a >>> 0 < 11 ? 16 : a + 11 & -8;
      a = k >>> 3;
      m = c[5170] | 0;
      d = m >>> a;
      if (d & 3 | 0) {
        b = (d & 1 ^ 1) + a | 0;
        a = 20720 + (b << 1 << 2) | 0;
        d = a + 8 | 0;
        e = c[d >> 2] | 0;
        f = e + 8 | 0;
        g = c[f >> 2] | 0;
        if ((g | 0) == (a | 0)) c[5170] = m & ~(1 << b);else {
          c[g + 12 >> 2] = a;
          c[d >> 2] = g;
        }
        s = b << 3;
        c[e + 4 >> 2] = s | 3;
        s = e + s + 4 | 0;
        c[s >> 2] = c[s >> 2] | 1;
        s = f;
        Ib = t;
        return s | 0;
      }
      l = c[5172] | 0;
      if (k >>> 0 > l >>> 0) {
        if (d | 0) {
          b = 2 << a;
          b = d << a & (b | 0 - b);
          b = (b & 0 - b) + -1 | 0;
          i = b >>> 12 & 16;
          b = b >>> i;
          d = b >>> 5 & 8;
          b = b >>> d;
          g = b >>> 2 & 4;
          b = b >>> g;
          a = b >>> 1 & 2;
          b = b >>> a;
          e = b >>> 1 & 1;
          e = (d | i | g | a | e) + (b >>> e) | 0;
          b = 20720 + (e << 1 << 2) | 0;
          a = b + 8 | 0;
          g = c[a >> 2] | 0;
          i = g + 8 | 0;
          d = c[i >> 2] | 0;
          if ((d | 0) == (b | 0)) {
            a = m & ~(1 << e);
            c[5170] = a;
          } else {
            c[d + 12 >> 2] = b;
            c[a >> 2] = d;
            a = m;
          }
          s = e << 3;
          h = s - k | 0;
          c[g + 4 >> 2] = k | 3;
          f = g + k | 0;
          c[f + 4 >> 2] = h | 1;
          c[g + s >> 2] = h;
          if (l | 0) {
            e = c[5175] | 0;
            b = l >>> 3;
            d = 20720 + (b << 1 << 2) | 0;
            b = 1 << b;
            if (!(a & b)) {
              c[5170] = a | b;
              b = d;
              a = d + 8 | 0;
            } else {
              a = d + 8 | 0;
              b = c[a >> 2] | 0;
            }
            c[a >> 2] = e;
            c[b + 12 >> 2] = e;
            c[e + 8 >> 2] = b;
            c[e + 12 >> 2] = d;
          }
          c[5172] = h;
          c[5175] = f;
          s = i;
          Ib = t;
          return s | 0;
        }
        g = c[5171] | 0;
        if (g) {
          d = (g & 0 - g) + -1 | 0;
          f = d >>> 12 & 16;
          d = d >>> f;
          e = d >>> 5 & 8;
          d = d >>> e;
          h = d >>> 2 & 4;
          d = d >>> h;
          i = d >>> 1 & 2;
          d = d >>> i;
          j = d >>> 1 & 1;
          j = c[20984 + ((e | f | h | i | j) + (d >>> j) << 2) >> 2] | 0;
          d = j;
          i = j;
          j = (c[j + 4 >> 2] & -8) - k | 0;
          while (1) {
            a = c[d + 16 >> 2] | 0;
            if (!a) {
              a = c[d + 20 >> 2] | 0;
              if (!a) break;
            }
            h = (c[a + 4 >> 2] & -8) - k | 0;
            f = h >>> 0 < j >>> 0;
            d = a;
            i = f ? a : i;
            j = f ? h : j;
          }
          h = i + k | 0;
          if (h >>> 0 > i >>> 0) {
            f = c[i + 24 >> 2] | 0;
            b = c[i + 12 >> 2] | 0;
            do if ((b | 0) == (i | 0)) {
              a = i + 20 | 0;
              b = c[a >> 2] | 0;
              if (!b) {
                a = i + 16 | 0;
                b = c[a >> 2] | 0;
                if (!b) {
                  d = 0;
                  break;
                }
              }
              while (1) {
                e = b + 20 | 0;
                d = c[e >> 2] | 0;
                if (!d) {
                  e = b + 16 | 0;
                  d = c[e >> 2] | 0;
                  if (!d) break;else {
                    b = d;
                    a = e;
                  }
                } else {
                  b = d;
                  a = e;
                }
              }
              c[a >> 2] = 0;
              d = b;
            } else {
              d = c[i + 8 >> 2] | 0;
              c[d + 12 >> 2] = b;
              c[b + 8 >> 2] = d;
              d = b;
            } while (0);
            do if (f | 0) {
              b = c[i + 28 >> 2] | 0;
              a = 20984 + (b << 2) | 0;
              if ((i | 0) == (c[a >> 2] | 0)) {
                c[a >> 2] = d;
                if (!d) {
                  c[5171] = g & ~(1 << b);
                  break;
                }
              } else {
                s = f + 16 | 0;
                c[((c[s >> 2] | 0) == (i | 0) ? s : f + 20 | 0) >> 2] = d;
                if (!d) break;
              }
              c[d + 24 >> 2] = f;
              b = c[i + 16 >> 2] | 0;
              if (b | 0) {
                c[d + 16 >> 2] = b;
                c[b + 24 >> 2] = d;
              }
              b = c[i + 20 >> 2] | 0;
              if (b | 0) {
                c[d + 20 >> 2] = b;
                c[b + 24 >> 2] = d;
              }
            } while (0);
            if (j >>> 0 < 16) {
              s = j + k | 0;
              c[i + 4 >> 2] = s | 3;
              s = i + s + 4 | 0;
              c[s >> 2] = c[s >> 2] | 1;
            } else {
              c[i + 4 >> 2] = k | 3;
              c[h + 4 >> 2] = j | 1;
              c[h + j >> 2] = j;
              if (l | 0) {
                e = c[5175] | 0;
                b = l >>> 3;
                d = 20720 + (b << 1 << 2) | 0;
                b = 1 << b;
                if (!(b & m)) {
                  c[5170] = b | m;
                  b = d;
                  a = d + 8 | 0;
                } else {
                  a = d + 8 | 0;
                  b = c[a >> 2] | 0;
                }
                c[a >> 2] = e;
                c[b + 12 >> 2] = e;
                c[e + 8 >> 2] = b;
                c[e + 12 >> 2] = d;
              }
              c[5172] = j;
              c[5175] = h;
            }
            s = i + 8 | 0;
            Ib = t;
            return s | 0;
          } else m = k;
        } else m = k;
      } else m = k;
    } else if (a >>> 0 <= 4294967231) {
      a = a + 11 | 0;
      k = a & -8;
      e = c[5171] | 0;
      if (e) {
        f = 0 - k | 0;
        a = a >>> 8;
        if (a) {
          if (k >>> 0 > 16777215) j = 31;else {
            m = (a + 1048320 | 0) >>> 16 & 8;
            r = a << m;
            i = (r + 520192 | 0) >>> 16 & 4;
            r = r << i;
            j = (r + 245760 | 0) >>> 16 & 2;
            j = 14 - (i | m | j) + (r << j >>> 15) | 0;
            j = k >>> (j + 7 | 0) & 1 | j << 1;
          }
        } else j = 0;
        d = c[20984 + (j << 2) >> 2] | 0;
        a: do if (!d) {
          d = 0;
          a = 0;
          r = 61;
        } else {
          a = 0;
          i = k << ((j | 0) == 31 ? 0 : 25 - (j >>> 1) | 0);
          g = 0;
          while (1) {
            h = (c[d + 4 >> 2] & -8) - k | 0;
            if (h >>> 0 < f >>> 0) if (!h) {
              a = d;
              f = 0;
              r = 65;
              break a;
            } else {
              a = d;
              f = h;
            }
            r = c[d + 20 >> 2] | 0;
            d = c[d + 16 + (i >>> 31 << 2) >> 2] | 0;
            g = (r | 0) == 0 | (r | 0) == (d | 0) ? g : r;
            if (!d) {
              d = g;
              r = 61;
              break;
            } else i = i << 1;
          }
        } while (0);
        if ((r | 0) == 61) {
          if ((d | 0) == 0 & (a | 0) == 0) {
            a = 2 << j;
            a = (a | 0 - a) & e;
            if (!a) {
              m = k;
              break;
            }
            m = (a & 0 - a) + -1 | 0;
            h = m >>> 12 & 16;
            m = m >>> h;
            g = m >>> 5 & 8;
            m = m >>> g;
            i = m >>> 2 & 4;
            m = m >>> i;
            j = m >>> 1 & 2;
            m = m >>> j;
            d = m >>> 1 & 1;
            a = 0;
            d = c[20984 + ((g | h | i | j | d) + (m >>> d) << 2) >> 2] | 0;
          }
          if (!d) {
            i = a;
            h = f;
          } else r = 65;
        }
        if ((r | 0) == 65) {
          g = d;
          while (1) {
            m = (c[g + 4 >> 2] & -8) - k | 0;
            d = m >>> 0 < f >>> 0;
            f = d ? m : f;
            a = d ? g : a;
            d = c[g + 16 >> 2] | 0;
            if (!d) d = c[g + 20 >> 2] | 0;
            if (!d) {
              i = a;
              h = f;
              break;
            } else g = d;
          }
        }
        if (((i | 0) != 0 ? h >>> 0 < ((c[5172] | 0) - k | 0) >>> 0 : 0) ? (l = i + k | 0, l >>> 0 > i >>> 0) : 0) {
          g = c[i + 24 >> 2] | 0;
          b = c[i + 12 >> 2] | 0;
          do if ((b | 0) == (i | 0)) {
            a = i + 20 | 0;
            b = c[a >> 2] | 0;
            if (!b) {
              a = i + 16 | 0;
              b = c[a >> 2] | 0;
              if (!b) {
                b = 0;
                break;
              }
            }
            while (1) {
              f = b + 20 | 0;
              d = c[f >> 2] | 0;
              if (!d) {
                f = b + 16 | 0;
                d = c[f >> 2] | 0;
                if (!d) break;else {
                  b = d;
                  a = f;
                }
              } else {
                b = d;
                a = f;
              }
            }
            c[a >> 2] = 0;
          } else {
            s = c[i + 8 >> 2] | 0;
            c[s + 12 >> 2] = b;
            c[b + 8 >> 2] = s;
          } while (0);
          do if (g) {
            a = c[i + 28 >> 2] | 0;
            d = 20984 + (a << 2) | 0;
            if ((i | 0) == (c[d >> 2] | 0)) {
              c[d >> 2] = b;
              if (!b) {
                e = e & ~(1 << a);
                c[5171] = e;
                break;
              }
            } else {
              s = g + 16 | 0;
              c[((c[s >> 2] | 0) == (i | 0) ? s : g + 20 | 0) >> 2] = b;
              if (!b) break;
            }
            c[b + 24 >> 2] = g;
            a = c[i + 16 >> 2] | 0;
            if (a | 0) {
              c[b + 16 >> 2] = a;
              c[a + 24 >> 2] = b;
            }
            a = c[i + 20 >> 2] | 0;
            if (a) {
              c[b + 20 >> 2] = a;
              c[a + 24 >> 2] = b;
            }
          } while (0);
          b: do if (h >>> 0 < 16) {
            s = h + k | 0;
            c[i + 4 >> 2] = s | 3;
            s = i + s + 4 | 0;
            c[s >> 2] = c[s >> 2] | 1;
          } else {
            c[i + 4 >> 2] = k | 3;
            c[l + 4 >> 2] = h | 1;
            c[l + h >> 2] = h;
            b = h >>> 3;
            if (h >>> 0 < 256) {
              d = 20720 + (b << 1 << 2) | 0;
              a = c[5170] | 0;
              b = 1 << b;
              if (!(a & b)) {
                c[5170] = a | b;
                b = d;
                a = d + 8 | 0;
              } else {
                a = d + 8 | 0;
                b = c[a >> 2] | 0;
              }
              c[a >> 2] = l;
              c[b + 12 >> 2] = l;
              c[l + 8 >> 2] = b;
              c[l + 12 >> 2] = d;
              break;
            }
            b = h >>> 8;
            if (b) {
              if (h >>> 0 > 16777215) d = 31;else {
                r = (b + 1048320 | 0) >>> 16 & 8;
                s = b << r;
                q = (s + 520192 | 0) >>> 16 & 4;
                s = s << q;
                d = (s + 245760 | 0) >>> 16 & 2;
                d = 14 - (q | r | d) + (s << d >>> 15) | 0;
                d = h >>> (d + 7 | 0) & 1 | d << 1;
              }
            } else d = 0;
            b = 20984 + (d << 2) | 0;
            c[l + 28 >> 2] = d;
            a = l + 16 | 0;
            c[a + 4 >> 2] = 0;
            c[a >> 2] = 0;
            a = 1 << d;
            if (!(a & e)) {
              c[5171] = a | e;
              c[b >> 2] = l;
              c[l + 24 >> 2] = b;
              c[l + 12 >> 2] = l;
              c[l + 8 >> 2] = l;
              break;
            }
            b = c[b >> 2] | 0;
            c: do if ((c[b + 4 >> 2] & -8 | 0) != (h | 0)) {
              e = h << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
              while (1) {
                d = b + 16 + (e >>> 31 << 2) | 0;
                a = c[d >> 2] | 0;
                if (!a) break;
                if ((c[a + 4 >> 2] & -8 | 0) == (h | 0)) {
                  b = a;
                  break c;
                } else {
                  e = e << 1;
                  b = a;
                }
              }
              c[d >> 2] = l;
              c[l + 24 >> 2] = b;
              c[l + 12 >> 2] = l;
              c[l + 8 >> 2] = l;
              break b;
            } while (0);
            r = b + 8 | 0;
            s = c[r >> 2] | 0;
            c[s + 12 >> 2] = l;
            c[r >> 2] = l;
            c[l + 8 >> 2] = s;
            c[l + 12 >> 2] = b;
            c[l + 24 >> 2] = 0;
          } while (0);
          s = i + 8 | 0;
          Ib = t;
          return s | 0;
        } else m = k;
      } else m = k;
    } else m = -1; while (0);
    d = c[5172] | 0;
    if (d >>> 0 >= m >>> 0) {
      b = d - m | 0;
      a = c[5175] | 0;
      if (b >>> 0 > 15) {
        s = a + m | 0;
        c[5175] = s;
        c[5172] = b;
        c[s + 4 >> 2] = b | 1;
        c[a + d >> 2] = b;
        c[a + 4 >> 2] = m | 3;
      } else {
        c[5172] = 0;
        c[5175] = 0;
        c[a + 4 >> 2] = d | 3;
        s = a + d + 4 | 0;
        c[s >> 2] = c[s >> 2] | 1;
      }
      s = a + 8 | 0;
      Ib = t;
      return s | 0;
    }
    g = c[5173] | 0;
    if (g >>> 0 > m >>> 0) {
      q = g - m | 0;
      c[5173] = q;
      s = c[5176] | 0;
      r = s + m | 0;
      c[5176] = r;
      c[r + 4 >> 2] = q | 1;
      c[s + 4 >> 2] = m | 3;
      s = s + 8 | 0;
      Ib = t;
      return s | 0;
    }
    if (!(c[5288] | 0)) {
      c[5290] = 4096;
      c[5289] = 4096;
      c[5291] = -1;
      c[5292] = -1;
      c[5293] = 0;
      c[5281] = 0;
      c[5288] = n & -16 ^ 1431655768;
      a = 4096;
    } else a = c[5290] | 0;
    i = m + 48 | 0;
    j = m + 47 | 0;
    f = a + j | 0;
    e = 0 - a | 0;
    k = f & e;
    if (k >>> 0 <= m >>> 0) {
      s = 0;
      Ib = t;
      return s | 0;
    }
    a = c[5280] | 0;
    if (a | 0 ? (l = c[5278] | 0, n = l + k | 0, n >>> 0 <= l >>> 0 | n >>> 0 > a >>> 0) : 0) {
      s = 0;
      Ib = t;
      return s | 0;
    }
    d: do if (!(c[5281] & 4)) {
      d = c[5176] | 0;
      e: do if (d) {
        h = 21128;
        while (1) {
          a = c[h >> 2] | 0;
          if (a >>> 0 <= d >>> 0 ? (q = h + 4 | 0, (a + (c[q >> 2] | 0) | 0) >>> 0 > d >>> 0) : 0) break;
          a = c[h + 8 >> 2] | 0;
          if (!a) {
            r = 128;
            break e;
          } else h = a;
        }
        b = f - g & e;
        if (b >>> 0 < 2147483647) {
          d = tt() | 0;
          a = c[d >> 2] | 0;
          e = a + b | 0;
          do if ((e | 0) < 0) {
            c[5160] = 48;
            a = -1;
          } else {
            if (e >>> 0 > (wa() | 0) >>> 0 ? (Aa(e | 0) | 0) == 0 : 0) {
              c[5160] = 48;
              a = -1;
              break;
            }
            c[d >> 2] = e;
          } while (0);
          if ((a | 0) == ((c[h >> 2] | 0) + (c[q >> 2] | 0) | 0)) {
            if ((a | 0) != (-1 | 0)) {
              e = a;
              r = 183;
              break d;
            }
          } else r = 153;
        } else b = 0;
      } else r = 128; while (0);
      do if ((r | 0) == 128) {
        a = tt() | 0;
        d = c[a >> 2] | 0;
        if ((d | 0) < 0) {
          c[5160] = 48;
          b = 0;
          break;
        }
        if (d >>> 0 > (wa() | 0) >>> 0 ? (Aa(d | 0) | 0) == 0 : 0) {
          c[5160] = 48;
          b = 0;
          break;
        }
        c[a >> 2] = d;
        e = d;
        if ((e | 0) != (-1 | 0) ? (b = c[5289] | 0, o = b + -1 | 0, b = ((o & d | 0) == 0 ? 0 : (o + d & 0 - b) - d | 0) + k | 0, o = c[5278] | 0, p = b + o | 0, b >>> 0 > m >>> 0 & b >>> 0 < 2147483647) : 0) {
          q = c[5280] | 0;
          if (q | 0 ? p >>> 0 <= o >>> 0 | p >>> 0 > q >>> 0 : 0) {
            b = 0;
            break;
          }
          d = tt() | 0;
          a = c[d >> 2] | 0;
          f = a + b | 0;
          do if ((f | 0) < 0) {
            c[5160] = 48;
            a = -1;
          } else {
            if (f >>> 0 > (wa() | 0) >>> 0 ? (Aa(f | 0) | 0) == 0 : 0) {
              c[5160] = 48;
              a = -1;
              break;
            }
            c[d >> 2] = f;
          } while (0);
          if ((a | 0) == (e | 0)) {
            r = 183;
            break d;
          } else r = 153;
        } else b = 0;
      } while (0);
      do if ((r | 0) == 153) {
        if (!(i >>> 0 > b >>> 0 & (b >>> 0 < 2147483647 & (a | 0) != (-1 | 0)))) if ((a | 0) == (-1 | 0)) {
          b = 0;
          break;
        } else {
          e = a;
          r = 183;
          break d;
        }
        d = c[5290] | 0;
        d = j - b + d & 0 - d;
        if (d >>> 0 >= 2147483647) {
          e = a;
          r = 183;
          break d;
        }
        e = tt() | 0;
        f = c[e >> 2] | 0;
        g = f + d | 0;
        do if ((g | 0) >= 0) {
          if (g >>> 0 > (wa() | 0) >>> 0 ? (Aa(g | 0) | 0) == 0 : 0) {
            r = 160;
            break;
          }
          c[e >> 2] = g;
          if ((f | 0) != (-1 | 0)) {
            b = d + b | 0;
            e = a;
            r = 183;
            break d;
          }
        } else r = 160; while (0);
        if ((r | 0) == 160) c[5160] = 48;
        a = tt() | 0;
        b = (c[a >> 2] | 0) - b | 0;
        if ((b | 0) < 0) {
          c[5160] = 48;
          b = 0;
          break;
        }
        if (b >>> 0 > (wa() | 0) >>> 0 ? (Aa(b | 0) | 0) == 0 : 0) {
          c[5160] = 48;
          b = 0;
          break;
        }
        c[a >> 2] = b;
        b = 0;
      } while (0);
      c[5281] = c[5281] | 4;
      r = 169;
    } else {
      b = 0;
      r = 169;
    } while (0);
    if ((r | 0) == 169 ? k >>> 0 < 2147483647 : 0) {
      d = tt() | 0;
      e = c[d >> 2] | 0;
      a = e + k | 0;
      do if ((a | 0) < 0) {
        c[5160] = 48;
        e = -1;
      } else {
        if (a >>> 0 > (wa() | 0) >>> 0 ? (Aa(a | 0) | 0) == 0 : 0) {
          c[5160] = 48;
          e = -1;
          break;
        }
        c[d >> 2] = a;
      } while (0);
      a = tt() | 0;
      d = c[a >> 2] | 0;
      do if ((d | 0) < 0) {
        c[5160] = 48;
        d = -1;
      } else {
        if (d >>> 0 > (wa() | 0) >>> 0 ? (Aa(d | 0) | 0) == 0 : 0) {
          c[5160] = 48;
          d = -1;
          break;
        }
        c[a >> 2] = d;
      } while (0);
      a = d - e | 0;
      f = a >>> 0 > (m + 40 | 0) >>> 0;
      if (!((e | 0) == (-1 | 0) | f ^ 1 | e >>> 0 < d >>> 0 & ((e | 0) != (-1 | 0) & (d | 0) != (-1 | 0)) ^ 1)) {
        b = f ? a : b;
        r = 183;
      }
    }
    if ((r | 0) == 183) {
      a = (c[5278] | 0) + b | 0;
      c[5278] = a;
      if (a >>> 0 > (c[5279] | 0) >>> 0) c[5279] = a;
      j = c[5176] | 0;
      f: do if (j) {
        a = 21128;
        while (1) {
          d = c[a >> 2] | 0;
          f = a + 4 | 0;
          g = c[f >> 2] | 0;
          if ((e | 0) == (d + g | 0)) {
            r = 192;
            break;
          }
          h = c[a + 8 >> 2] | 0;
          if (!h) break;else a = h;
        }
        if (((r | 0) == 192 ? (c[a + 12 >> 2] & 8 | 0) == 0 : 0) ? e >>> 0 > j >>> 0 & d >>> 0 <= j >>> 0 : 0) {
          c[f >> 2] = g + b;
          s = (c[5173] | 0) + b | 0;
          q = j + 8 | 0;
          q = (q & 7 | 0) == 0 ? 0 : 0 - q & 7;
          r = j + q | 0;
          q = s - q | 0;
          c[5176] = r;
          c[5173] = q;
          c[r + 4 >> 2] = q | 1;
          c[j + s + 4 >> 2] = 40;
          c[5177] = c[5292];
          break;
        }
        if (e >>> 0 < (c[5174] | 0) >>> 0) c[5174] = e;
        f = e + b | 0;
        a = 21128;
        while (1) {
          if ((c[a >> 2] | 0) == (f | 0)) {
            r = 200;
            break;
          }
          d = c[a + 8 >> 2] | 0;
          if (!d) break;else a = d;
        }
        if ((r | 0) == 200 ? (c[a + 12 >> 2] & 8 | 0) == 0 : 0) {
          c[a >> 2] = e;
          l = a + 4 | 0;
          c[l >> 2] = (c[l >> 2] | 0) + b;
          l = e + 8 | 0;
          l = e + ((l & 7 | 0) == 0 ? 0 : 0 - l & 7) | 0;
          b = f + 8 | 0;
          b = f + ((b & 7 | 0) == 0 ? 0 : 0 - b & 7) | 0;
          k = l + m | 0;
          i = b - l - m | 0;
          c[l + 4 >> 2] = m | 3;
          g: do if ((j | 0) == (b | 0)) {
            s = (c[5173] | 0) + i | 0;
            c[5173] = s;
            c[5176] = k;
            c[k + 4 >> 2] = s | 1;
          } else {
            if ((c[5175] | 0) == (b | 0)) {
              s = (c[5172] | 0) + i | 0;
              c[5172] = s;
              c[5175] = k;
              c[k + 4 >> 2] = s | 1;
              c[k + s >> 2] = s;
              break;
            }
            a = c[b + 4 >> 2] | 0;
            if ((a & 3 | 0) == 1) {
              h = a & -8;
              e = a >>> 3;
              h: do if (a >>> 0 < 256) {
                a = c[b + 8 >> 2] | 0;
                d = c[b + 12 >> 2] | 0;
                if ((d | 0) == (a | 0)) {
                  c[5170] = c[5170] & ~(1 << e);
                  break;
                } else {
                  c[a + 12 >> 2] = d;
                  c[d + 8 >> 2] = a;
                  break;
                }
              } else {
                g = c[b + 24 >> 2] | 0;
                a = c[b + 12 >> 2] | 0;
                do if ((a | 0) == (b | 0)) {
                  d = b + 16 | 0;
                  e = d + 4 | 0;
                  a = c[e >> 2] | 0;
                  if (!a) {
                    a = c[d >> 2] | 0;
                    if (!a) {
                      a = 0;
                      break;
                    }
                  } else d = e;
                  while (1) {
                    f = a + 20 | 0;
                    e = c[f >> 2] | 0;
                    if (!e) {
                      f = a + 16 | 0;
                      e = c[f >> 2] | 0;
                      if (!e) break;else {
                        a = e;
                        d = f;
                      }
                    } else {
                      a = e;
                      d = f;
                    }
                  }
                  c[d >> 2] = 0;
                } else {
                  s = c[b + 8 >> 2] | 0;
                  c[s + 12 >> 2] = a;
                  c[a + 8 >> 2] = s;
                } while (0);
                if (!g) break;
                d = c[b + 28 >> 2] | 0;
                e = 20984 + (d << 2) | 0;
                do if ((c[e >> 2] | 0) != (b | 0)) {
                  s = g + 16 | 0;
                  c[((c[s >> 2] | 0) == (b | 0) ? s : g + 20 | 0) >> 2] = a;
                  if (!a) break h;
                } else {
                  c[e >> 2] = a;
                  if (a | 0) break;
                  c[5171] = c[5171] & ~(1 << d);
                  break h;
                } while (0);
                c[a + 24 >> 2] = g;
                d = b + 16 | 0;
                e = c[d >> 2] | 0;
                if (e | 0) {
                  c[a + 16 >> 2] = e;
                  c[e + 24 >> 2] = a;
                }
                d = c[d + 4 >> 2] | 0;
                if (!d) break;
                c[a + 20 >> 2] = d;
                c[d + 24 >> 2] = a;
              } while (0);
              b = b + h | 0;
              f = h + i | 0;
            } else f = i;
            b = b + 4 | 0;
            c[b >> 2] = c[b >> 2] & -2;
            c[k + 4 >> 2] = f | 1;
            c[k + f >> 2] = f;
            b = f >>> 3;
            if (f >>> 0 < 256) {
              d = 20720 + (b << 1 << 2) | 0;
              a = c[5170] | 0;
              b = 1 << b;
              if (!(a & b)) {
                c[5170] = a | b;
                b = d;
                a = d + 8 | 0;
              } else {
                a = d + 8 | 0;
                b = c[a >> 2] | 0;
              }
              c[a >> 2] = k;
              c[b + 12 >> 2] = k;
              c[k + 8 >> 2] = b;
              c[k + 12 >> 2] = d;
              break;
            }
            b = f >>> 8;
            do if (!b) e = 0;else {
              if (f >>> 0 > 16777215) {
                e = 31;
                break;
              }
              r = (b + 1048320 | 0) >>> 16 & 8;
              s = b << r;
              q = (s + 520192 | 0) >>> 16 & 4;
              s = s << q;
              e = (s + 245760 | 0) >>> 16 & 2;
              e = 14 - (q | r | e) + (s << e >>> 15) | 0;
              e = f >>> (e + 7 | 0) & 1 | e << 1;
            } while (0);
            b = 20984 + (e << 2) | 0;
            c[k + 28 >> 2] = e;
            a = k + 16 | 0;
            c[a + 4 >> 2] = 0;
            c[a >> 2] = 0;
            a = c[5171] | 0;
            d = 1 << e;
            if (!(a & d)) {
              c[5171] = a | d;
              c[b >> 2] = k;
              c[k + 24 >> 2] = b;
              c[k + 12 >> 2] = k;
              c[k + 8 >> 2] = k;
              break;
            }
            b = c[b >> 2] | 0;
            i: do if ((c[b + 4 >> 2] & -8 | 0) != (f | 0)) {
              e = f << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
              while (1) {
                d = b + 16 + (e >>> 31 << 2) | 0;
                a = c[d >> 2] | 0;
                if (!a) break;
                if ((c[a + 4 >> 2] & -8 | 0) == (f | 0)) {
                  b = a;
                  break i;
                } else {
                  e = e << 1;
                  b = a;
                }
              }
              c[d >> 2] = k;
              c[k + 24 >> 2] = b;
              c[k + 12 >> 2] = k;
              c[k + 8 >> 2] = k;
              break g;
            } while (0);
            r = b + 8 | 0;
            s = c[r >> 2] | 0;
            c[s + 12 >> 2] = k;
            c[r >> 2] = k;
            c[k + 8 >> 2] = s;
            c[k + 12 >> 2] = b;
            c[k + 24 >> 2] = 0;
          } while (0);
          s = l + 8 | 0;
          Ib = t;
          return s | 0;
        }
        a = 21128;
        while (1) {
          d = c[a >> 2] | 0;
          if (d >>> 0 <= j >>> 0 ? (s = d + (c[a + 4 >> 2] | 0) | 0, s >>> 0 > j >>> 0) : 0) break;
          a = c[a + 8 >> 2] | 0;
        }
        f = s + -47 | 0;
        a = f + 8 | 0;
        a = f + ((a & 7 | 0) == 0 ? 0 : 0 - a & 7) | 0;
        f = j + 16 | 0;
        a = a >>> 0 < f >>> 0 ? j : a;
        r = a + 8 | 0;
        d = b + -40 | 0;
        p = e + 8 | 0;
        p = (p & 7 | 0) == 0 ? 0 : 0 - p & 7;
        q = e + p | 0;
        p = d - p | 0;
        c[5176] = q;
        c[5173] = p;
        c[q + 4 >> 2] = p | 1;
        c[e + d + 4 >> 2] = 40;
        c[5177] = c[5292];
        d = a + 4 | 0;
        c[d >> 2] = 27;
        c[r >> 2] = c[5282];
        c[r + 4 >> 2] = c[5283];
        c[r + 8 >> 2] = c[5284];
        c[r + 12 >> 2] = c[5285];
        c[5282] = e;
        c[5283] = b;
        c[5285] = 0;
        c[5284] = r;
        b = a + 24 | 0;
        do {
          r = b;
          b = b + 4 | 0;
          c[b >> 2] = 7;
        } while ((r + 8 | 0) >>> 0 < s >>> 0);
        if ((a | 0) != (j | 0)) {
          g = a - j | 0;
          c[d >> 2] = c[d >> 2] & -2;
          c[j + 4 >> 2] = g | 1;
          c[a >> 2] = g;
          b = g >>> 3;
          if (g >>> 0 < 256) {
            d = 20720 + (b << 1 << 2) | 0;
            a = c[5170] | 0;
            b = 1 << b;
            if (!(a & b)) {
              c[5170] = a | b;
              b = d;
              a = d + 8 | 0;
            } else {
              a = d + 8 | 0;
              b = c[a >> 2] | 0;
            }
            c[a >> 2] = j;
            c[b + 12 >> 2] = j;
            c[j + 8 >> 2] = b;
            c[j + 12 >> 2] = d;
            break;
          }
          b = g >>> 8;
          if (b) {
            if (g >>> 0 > 16777215) e = 31;else {
              r = (b + 1048320 | 0) >>> 16 & 8;
              s = b << r;
              q = (s + 520192 | 0) >>> 16 & 4;
              s = s << q;
              e = (s + 245760 | 0) >>> 16 & 2;
              e = 14 - (q | r | e) + (s << e >>> 15) | 0;
              e = g >>> (e + 7 | 0) & 1 | e << 1;
            }
          } else e = 0;
          d = 20984 + (e << 2) | 0;
          c[j + 28 >> 2] = e;
          c[j + 20 >> 2] = 0;
          c[f >> 2] = 0;
          b = c[5171] | 0;
          a = 1 << e;
          if (!(b & a)) {
            c[5171] = b | a;
            c[d >> 2] = j;
            c[j + 24 >> 2] = d;
            c[j + 12 >> 2] = j;
            c[j + 8 >> 2] = j;
            break;
          }
          b = c[d >> 2] | 0;
          j: do if ((c[b + 4 >> 2] & -8 | 0) != (g | 0)) {
            e = g << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
            a = b;
            while (1) {
              d = a + 16 + (e >>> 31 << 2) | 0;
              b = c[d >> 2] | 0;
              if (!b) break;
              if ((c[b + 4 >> 2] & -8 | 0) == (g | 0)) break j;else {
                e = e << 1;
                a = b;
              }
            }
            c[d >> 2] = j;
            c[j + 24 >> 2] = a;
            c[j + 12 >> 2] = j;
            c[j + 8 >> 2] = j;
            break f;
          } while (0);
          r = b + 8 | 0;
          s = c[r >> 2] | 0;
          c[s + 12 >> 2] = j;
          c[r >> 2] = j;
          c[j + 8 >> 2] = s;
          c[j + 12 >> 2] = b;
          c[j + 24 >> 2] = 0;
        }
      } else {
        s = c[5174] | 0;
        if ((s | 0) == 0 | e >>> 0 < s >>> 0) c[5174] = e;
        c[5282] = e;
        c[5283] = b;
        c[5285] = 0;
        c[5179] = c[5288];
        c[5178] = -1;
        c[5183] = 20720;
        c[5182] = 20720;
        c[5185] = 20728;
        c[5184] = 20728;
        c[5187] = 20736;
        c[5186] = 20736;
        c[5189] = 20744;
        c[5188] = 20744;
        c[5191] = 20752;
        c[5190] = 20752;
        c[5193] = 20760;
        c[5192] = 20760;
        c[5195] = 20768;
        c[5194] = 20768;
        c[5197] = 20776;
        c[5196] = 20776;
        c[5199] = 20784;
        c[5198] = 20784;
        c[5201] = 20792;
        c[5200] = 20792;
        c[5203] = 20800;
        c[5202] = 20800;
        c[5205] = 20808;
        c[5204] = 20808;
        c[5207] = 20816;
        c[5206] = 20816;
        c[5209] = 20824;
        c[5208] = 20824;
        c[5211] = 20832;
        c[5210] = 20832;
        c[5213] = 20840;
        c[5212] = 20840;
        c[5215] = 20848;
        c[5214] = 20848;
        c[5217] = 20856;
        c[5216] = 20856;
        c[5219] = 20864;
        c[5218] = 20864;
        c[5221] = 20872;
        c[5220] = 20872;
        c[5223] = 20880;
        c[5222] = 20880;
        c[5225] = 20888;
        c[5224] = 20888;
        c[5227] = 20896;
        c[5226] = 20896;
        c[5229] = 20904;
        c[5228] = 20904;
        c[5231] = 20912;
        c[5230] = 20912;
        c[5233] = 20920;
        c[5232] = 20920;
        c[5235] = 20928;
        c[5234] = 20928;
        c[5237] = 20936;
        c[5236] = 20936;
        c[5239] = 20944;
        c[5238] = 20944;
        c[5241] = 20952;
        c[5240] = 20952;
        c[5243] = 20960;
        c[5242] = 20960;
        c[5245] = 20968;
        c[5244] = 20968;
        s = b + -40 | 0;
        q = e + 8 | 0;
        q = (q & 7 | 0) == 0 ? 0 : 0 - q & 7;
        r = e + q | 0;
        q = s - q | 0;
        c[5176] = r;
        c[5173] = q;
        c[r + 4 >> 2] = q | 1;
        c[e + s + 4 >> 2] = 40;
        c[5177] = c[5292];
      } while (0);
      b = c[5173] | 0;
      if (b >>> 0 > m >>> 0) {
        q = b - m | 0;
        c[5173] = q;
        s = c[5176] | 0;
        r = s + m | 0;
        c[5176] = r;
        c[r + 4 >> 2] = q | 1;
        c[s + 4 >> 2] = m | 3;
        s = s + 8 | 0;
        Ib = t;
        return s | 0;
      }
    }
    c[5160] = 48;
    s = 0;
    Ib = t;
    return s | 0;
  }
  function ft(a) {
    a = a | 0;
    var b = 0,
      d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0;
    if (!a) return;
    d = a + -8 | 0;
    f = c[5174] | 0;
    a = c[a + -4 >> 2] | 0;
    b = a & -8;
    j = d + b | 0;
    do if (!(a & 1)) {
      e = c[d >> 2] | 0;
      if (!(a & 3)) return;
      h = d + (0 - e) | 0;
      g = e + b | 0;
      if (h >>> 0 < f >>> 0) return;
      if ((c[5175] | 0) == (h | 0)) {
        a = j + 4 | 0;
        b = c[a >> 2] | 0;
        if ((b & 3 | 0) != 3) {
          i = h;
          b = g;
          break;
        }
        c[5172] = g;
        c[a >> 2] = b & -2;
        c[h + 4 >> 2] = g | 1;
        c[h + g >> 2] = g;
        return;
      }
      d = e >>> 3;
      if (e >>> 0 < 256) {
        a = c[h + 8 >> 2] | 0;
        b = c[h + 12 >> 2] | 0;
        if ((b | 0) == (a | 0)) {
          c[5170] = c[5170] & ~(1 << d);
          i = h;
          b = g;
          break;
        } else {
          c[a + 12 >> 2] = b;
          c[b + 8 >> 2] = a;
          i = h;
          b = g;
          break;
        }
      }
      f = c[h + 24 >> 2] | 0;
      a = c[h + 12 >> 2] | 0;
      do if ((a | 0) == (h | 0)) {
        b = h + 16 | 0;
        d = b + 4 | 0;
        a = c[d >> 2] | 0;
        if (!a) {
          a = c[b >> 2] | 0;
          if (!a) {
            a = 0;
            break;
          }
        } else b = d;
        while (1) {
          e = a + 20 | 0;
          d = c[e >> 2] | 0;
          if (!d) {
            e = a + 16 | 0;
            d = c[e >> 2] | 0;
            if (!d) break;else {
              a = d;
              b = e;
            }
          } else {
            a = d;
            b = e;
          }
        }
        c[b >> 2] = 0;
      } else {
        i = c[h + 8 >> 2] | 0;
        c[i + 12 >> 2] = a;
        c[a + 8 >> 2] = i;
      } while (0);
      if (f) {
        b = c[h + 28 >> 2] | 0;
        d = 20984 + (b << 2) | 0;
        if ((c[d >> 2] | 0) == (h | 0)) {
          c[d >> 2] = a;
          if (!a) {
            c[5171] = c[5171] & ~(1 << b);
            i = h;
            b = g;
            break;
          }
        } else {
          i = f + 16 | 0;
          c[((c[i >> 2] | 0) == (h | 0) ? i : f + 20 | 0) >> 2] = a;
          if (!a) {
            i = h;
            b = g;
            break;
          }
        }
        c[a + 24 >> 2] = f;
        b = h + 16 | 0;
        d = c[b >> 2] | 0;
        if (d | 0) {
          c[a + 16 >> 2] = d;
          c[d + 24 >> 2] = a;
        }
        b = c[b + 4 >> 2] | 0;
        if (b) {
          c[a + 20 >> 2] = b;
          c[b + 24 >> 2] = a;
          i = h;
          b = g;
        } else {
          i = h;
          b = g;
        }
      } else {
        i = h;
        b = g;
      }
    } else {
      i = d;
      h = d;
    } while (0);
    if (h >>> 0 >= j >>> 0) return;
    a = j + 4 | 0;
    e = c[a >> 2] | 0;
    if (!(e & 1)) return;
    if (!(e & 2)) {
      if ((c[5176] | 0) == (j | 0)) {
        j = (c[5173] | 0) + b | 0;
        c[5173] = j;
        c[5176] = i;
        c[i + 4 >> 2] = j | 1;
        if ((i | 0) != (c[5175] | 0)) return;
        c[5175] = 0;
        c[5172] = 0;
        return;
      }
      if ((c[5175] | 0) == (j | 0)) {
        j = (c[5172] | 0) + b | 0;
        c[5172] = j;
        c[5175] = h;
        c[i + 4 >> 2] = j | 1;
        c[h + j >> 2] = j;
        return;
      }
      f = (e & -8) + b | 0;
      d = e >>> 3;
      do if (e >>> 0 < 256) {
        b = c[j + 8 >> 2] | 0;
        a = c[j + 12 >> 2] | 0;
        if ((a | 0) == (b | 0)) {
          c[5170] = c[5170] & ~(1 << d);
          break;
        } else {
          c[b + 12 >> 2] = a;
          c[a + 8 >> 2] = b;
          break;
        }
      } else {
        g = c[j + 24 >> 2] | 0;
        a = c[j + 12 >> 2] | 0;
        do if ((a | 0) == (j | 0)) {
          b = j + 16 | 0;
          d = b + 4 | 0;
          a = c[d >> 2] | 0;
          if (!a) {
            a = c[b >> 2] | 0;
            if (!a) {
              d = 0;
              break;
            }
          } else b = d;
          while (1) {
            e = a + 20 | 0;
            d = c[e >> 2] | 0;
            if (!d) {
              e = a + 16 | 0;
              d = c[e >> 2] | 0;
              if (!d) break;else {
                a = d;
                b = e;
              }
            } else {
              a = d;
              b = e;
            }
          }
          c[b >> 2] = 0;
          d = a;
        } else {
          d = c[j + 8 >> 2] | 0;
          c[d + 12 >> 2] = a;
          c[a + 8 >> 2] = d;
          d = a;
        } while (0);
        if (g | 0) {
          a = c[j + 28 >> 2] | 0;
          b = 20984 + (a << 2) | 0;
          if ((c[b >> 2] | 0) == (j | 0)) {
            c[b >> 2] = d;
            if (!d) {
              c[5171] = c[5171] & ~(1 << a);
              break;
            }
          } else {
            e = g + 16 | 0;
            c[((c[e >> 2] | 0) == (j | 0) ? e : g + 20 | 0) >> 2] = d;
            if (!d) break;
          }
          c[d + 24 >> 2] = g;
          a = j + 16 | 0;
          b = c[a >> 2] | 0;
          if (b | 0) {
            c[d + 16 >> 2] = b;
            c[b + 24 >> 2] = d;
          }
          a = c[a + 4 >> 2] | 0;
          if (a | 0) {
            c[d + 20 >> 2] = a;
            c[a + 24 >> 2] = d;
          }
        }
      } while (0);
      c[i + 4 >> 2] = f | 1;
      c[h + f >> 2] = f;
      if ((i | 0) == (c[5175] | 0)) {
        c[5172] = f;
        return;
      }
    } else {
      c[a >> 2] = e & -2;
      c[i + 4 >> 2] = b | 1;
      c[h + b >> 2] = b;
      f = b;
    }
    a = f >>> 3;
    if (f >>> 0 < 256) {
      d = 20720 + (a << 1 << 2) | 0;
      b = c[5170] | 0;
      a = 1 << a;
      if (!(b & a)) {
        c[5170] = b | a;
        a = d;
        b = d + 8 | 0;
      } else {
        b = d + 8 | 0;
        a = c[b >> 2] | 0;
      }
      c[b >> 2] = i;
      c[a + 12 >> 2] = i;
      c[i + 8 >> 2] = a;
      c[i + 12 >> 2] = d;
      return;
    }
    a = f >>> 8;
    if (a) {
      if (f >>> 0 > 16777215) e = 31;else {
        h = (a + 1048320 | 0) >>> 16 & 8;
        j = a << h;
        g = (j + 520192 | 0) >>> 16 & 4;
        j = j << g;
        e = (j + 245760 | 0) >>> 16 & 2;
        e = 14 - (g | h | e) + (j << e >>> 15) | 0;
        e = f >>> (e + 7 | 0) & 1 | e << 1;
      }
    } else e = 0;
    a = 20984 + (e << 2) | 0;
    c[i + 28 >> 2] = e;
    c[i + 20 >> 2] = 0;
    c[i + 16 >> 2] = 0;
    b = c[5171] | 0;
    d = 1 << e;
    a: do if (!(b & d)) {
      c[5171] = b | d;
      c[a >> 2] = i;
      c[i + 24 >> 2] = a;
      c[i + 12 >> 2] = i;
      c[i + 8 >> 2] = i;
    } else {
      a = c[a >> 2] | 0;
      b: do if ((c[a + 4 >> 2] & -8 | 0) != (f | 0)) {
        e = f << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
        while (1) {
          d = a + 16 + (e >>> 31 << 2) | 0;
          b = c[d >> 2] | 0;
          if (!b) break;
          if ((c[b + 4 >> 2] & -8 | 0) == (f | 0)) {
            a = b;
            break b;
          } else {
            e = e << 1;
            a = b;
          }
        }
        c[d >> 2] = i;
        c[i + 24 >> 2] = a;
        c[i + 12 >> 2] = i;
        c[i + 8 >> 2] = i;
        break a;
      } while (0);
      h = a + 8 | 0;
      j = c[h >> 2] | 0;
      c[j + 12 >> 2] = i;
      c[h >> 2] = i;
      c[i + 8 >> 2] = j;
      c[i + 12 >> 2] = a;
      c[i + 24 >> 2] = 0;
    } while (0);
    j = (c[5178] | 0) + -1 | 0;
    c[5178] = j;
    if (j | 0) return;
    a = 21136;
    while (1) {
      a = c[a >> 2] | 0;
      if (!a) break;else a = a + 8 | 0;
    }
    c[5178] = -1;
    return;
  }
  function gt(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0;
    if (a) {
      d = w(b, a) | 0;
      if ((b | a) >>> 0 > 65535) d = ((d >>> 0) / (a >>> 0) | 0 | 0) == (b | 0) ? d : -1;
    } else d = 0;
    a = et(d) | 0;
    if (!a) return a | 0;
    if (!(c[a + -4 >> 2] & 3)) return a | 0;
    vt(a | 0, 0, d | 0) | 0;
    return a | 0;
  }
  function ht(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0;
    if (!a) {
      b = et(b) | 0;
      return b | 0;
    }
    if (b >>> 0 > 4294967231) {
      c[5160] = 48;
      b = 0;
      return b | 0;
    }
    d = it(a + -8 | 0, b >>> 0 < 11 ? 16 : b + 11 & -8) | 0;
    if (d | 0) {
      b = d + 8 | 0;
      return b | 0;
    }
    d = et(b) | 0;
    if (!d) {
      b = 0;
      return b | 0;
    }
    e = c[a + -4 >> 2] | 0;
    e = (e & -8) - ((e & 3 | 0) == 0 ? 8 : 4) | 0;
    ut(d | 0, a | 0, (e >>> 0 < b >>> 0 ? e : b) | 0) | 0;
    ft(a);
    b = d;
    return b | 0;
  }
  function it(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0;
    l = a + 4 | 0;
    m = c[l >> 2] | 0;
    d = m & -8;
    i = a + d | 0;
    if (!(m & 3)) {
      if (b >>> 0 < 256) {
        a = 0;
        return a | 0;
      }
      if (d >>> 0 >= (b + 4 | 0) >>> 0 ? (d - b | 0) >>> 0 <= c[5290] << 1 >>> 0 : 0) return a | 0;
      a = 0;
      return a | 0;
    }
    if (d >>> 0 >= b >>> 0) {
      d = d - b | 0;
      if (d >>> 0 <= 15) return a | 0;
      k = a + b | 0;
      c[l >> 2] = m & 1 | b | 2;
      c[k + 4 >> 2] = d | 3;
      m = i + 4 | 0;
      c[m >> 2] = c[m >> 2] | 1;
      jt(k, d);
      return a | 0;
    }
    if ((c[5176] | 0) == (i | 0)) {
      k = (c[5173] | 0) + d | 0;
      d = k - b | 0;
      e = a + b | 0;
      if (k >>> 0 <= b >>> 0) {
        a = 0;
        return a | 0;
      }
      c[l >> 2] = m & 1 | b | 2;
      c[e + 4 >> 2] = d | 1;
      c[5176] = e;
      c[5173] = d;
      return a | 0;
    }
    if ((c[5175] | 0) == (i | 0)) {
      e = (c[5172] | 0) + d | 0;
      if (e >>> 0 < b >>> 0) {
        a = 0;
        return a | 0;
      }
      d = e - b | 0;
      if (d >>> 0 > 15) {
        k = a + b | 0;
        e = a + e | 0;
        c[l >> 2] = m & 1 | b | 2;
        c[k + 4 >> 2] = d | 1;
        c[e >> 2] = d;
        e = e + 4 | 0;
        c[e >> 2] = c[e >> 2] & -2;
        e = k;
      } else {
        c[l >> 2] = m & 1 | e | 2;
        e = a + e + 4 | 0;
        c[e >> 2] = c[e >> 2] | 1;
        e = 0;
        d = 0;
      }
      c[5172] = d;
      c[5175] = e;
      return a | 0;
    }
    e = c[i + 4 >> 2] | 0;
    if (e & 2 | 0) {
      a = 0;
      return a | 0;
    }
    j = (e & -8) + d | 0;
    if (j >>> 0 < b >>> 0) {
      a = 0;
      return a | 0;
    }
    k = j - b | 0;
    f = e >>> 3;
    do if (e >>> 0 < 256) {
      e = c[i + 8 >> 2] | 0;
      d = c[i + 12 >> 2] | 0;
      if ((d | 0) == (e | 0)) {
        c[5170] = c[5170] & ~(1 << f);
        break;
      } else {
        c[e + 12 >> 2] = d;
        c[d + 8 >> 2] = e;
        break;
      }
    } else {
      h = c[i + 24 >> 2] | 0;
      d = c[i + 12 >> 2] | 0;
      do if ((d | 0) == (i | 0)) {
        e = i + 16 | 0;
        f = e + 4 | 0;
        d = c[f >> 2] | 0;
        if (!d) {
          d = c[e >> 2] | 0;
          if (!d) {
            f = 0;
            break;
          }
        } else e = f;
        while (1) {
          g = d + 20 | 0;
          f = c[g >> 2] | 0;
          if (!f) {
            g = d + 16 | 0;
            f = c[g >> 2] | 0;
            if (!f) break;else {
              d = f;
              e = g;
            }
          } else {
            d = f;
            e = g;
          }
        }
        c[e >> 2] = 0;
        f = d;
      } else {
        f = c[i + 8 >> 2] | 0;
        c[f + 12 >> 2] = d;
        c[d + 8 >> 2] = f;
        f = d;
      } while (0);
      if (h | 0) {
        d = c[i + 28 >> 2] | 0;
        e = 20984 + (d << 2) | 0;
        if ((c[e >> 2] | 0) == (i | 0)) {
          c[e >> 2] = f;
          if (!f) {
            c[5171] = c[5171] & ~(1 << d);
            break;
          }
        } else {
          g = h + 16 | 0;
          c[((c[g >> 2] | 0) == (i | 0) ? g : h + 20 | 0) >> 2] = f;
          if (!f) break;
        }
        c[f + 24 >> 2] = h;
        d = i + 16 | 0;
        e = c[d >> 2] | 0;
        if (e | 0) {
          c[f + 16 >> 2] = e;
          c[e + 24 >> 2] = f;
        }
        d = c[d + 4 >> 2] | 0;
        if (d | 0) {
          c[f + 20 >> 2] = d;
          c[d + 24 >> 2] = f;
        }
      }
    } while (0);
    if (k >>> 0 < 16) {
      c[l >> 2] = m & 1 | j | 2;
      m = a + j + 4 | 0;
      c[m >> 2] = c[m >> 2] | 1;
      return a | 0;
    } else {
      i = a + b | 0;
      c[l >> 2] = m & 1 | b | 2;
      c[i + 4 >> 2] = k | 3;
      m = a + j + 4 | 0;
      c[m >> 2] = c[m >> 2] | 1;
      jt(i, k);
      return a | 0;
    }
    return 0;
  }
  function jt(a, b) {
    a = a | 0;
    b = b | 0;
    var d = 0,
      e = 0,
      f = 0,
      g = 0,
      h = 0,
      i = 0;
    i = a + b | 0;
    d = c[a + 4 >> 2] | 0;
    do if (!(d & 1)) {
      f = c[a >> 2] | 0;
      if (!(d & 3)) return;
      h = a + (0 - f) | 0;
      b = f + b | 0;
      if ((c[5175] | 0) == (h | 0)) {
        a = i + 4 | 0;
        d = c[a >> 2] | 0;
        if ((d & 3 | 0) != 3) break;
        c[5172] = b;
        c[a >> 2] = d & -2;
        c[h + 4 >> 2] = b | 1;
        c[i >> 2] = b;
        return;
      }
      e = f >>> 3;
      if (f >>> 0 < 256) {
        a = c[h + 8 >> 2] | 0;
        d = c[h + 12 >> 2] | 0;
        if ((d | 0) == (a | 0)) {
          c[5170] = c[5170] & ~(1 << e);
          break;
        } else {
          c[a + 12 >> 2] = d;
          c[d + 8 >> 2] = a;
          break;
        }
      }
      g = c[h + 24 >> 2] | 0;
      a = c[h + 12 >> 2] | 0;
      do if ((a | 0) == (h | 0)) {
        d = h + 16 | 0;
        e = d + 4 | 0;
        a = c[e >> 2] | 0;
        if (!a) {
          a = c[d >> 2] | 0;
          if (!a) {
            a = 0;
            break;
          }
        } else d = e;
        while (1) {
          f = a + 20 | 0;
          e = c[f >> 2] | 0;
          if (!e) {
            f = a + 16 | 0;
            e = c[f >> 2] | 0;
            if (!e) break;else {
              a = e;
              d = f;
            }
          } else {
            a = e;
            d = f;
          }
        }
        c[d >> 2] = 0;
      } else {
        f = c[h + 8 >> 2] | 0;
        c[f + 12 >> 2] = a;
        c[a + 8 >> 2] = f;
      } while (0);
      if (g) {
        d = c[h + 28 >> 2] | 0;
        e = 20984 + (d << 2) | 0;
        if ((c[e >> 2] | 0) == (h | 0)) {
          c[e >> 2] = a;
          if (!a) {
            c[5171] = c[5171] & ~(1 << d);
            break;
          }
        } else {
          f = g + 16 | 0;
          c[((c[f >> 2] | 0) == (h | 0) ? f : g + 20 | 0) >> 2] = a;
          if (!a) break;
        }
        c[a + 24 >> 2] = g;
        d = h + 16 | 0;
        e = c[d >> 2] | 0;
        if (e | 0) {
          c[a + 16 >> 2] = e;
          c[e + 24 >> 2] = a;
        }
        d = c[d + 4 >> 2] | 0;
        if (d) {
          c[a + 20 >> 2] = d;
          c[d + 24 >> 2] = a;
        }
      }
    } else h = a; while (0);
    a = i + 4 | 0;
    e = c[a >> 2] | 0;
    if (!(e & 2)) {
      if ((c[5176] | 0) == (i | 0)) {
        i = (c[5173] | 0) + b | 0;
        c[5173] = i;
        c[5176] = h;
        c[h + 4 >> 2] = i | 1;
        if ((h | 0) != (c[5175] | 0)) return;
        c[5175] = 0;
        c[5172] = 0;
        return;
      }
      if ((c[5175] | 0) == (i | 0)) {
        i = (c[5172] | 0) + b | 0;
        c[5172] = i;
        c[5175] = h;
        c[h + 4 >> 2] = i | 1;
        c[h + i >> 2] = i;
        return;
      }
      f = (e & -8) + b | 0;
      d = e >>> 3;
      do if (e >>> 0 < 256) {
        a = c[i + 8 >> 2] | 0;
        b = c[i + 12 >> 2] | 0;
        if ((b | 0) == (a | 0)) {
          c[5170] = c[5170] & ~(1 << d);
          break;
        } else {
          c[a + 12 >> 2] = b;
          c[b + 8 >> 2] = a;
          break;
        }
      } else {
        g = c[i + 24 >> 2] | 0;
        b = c[i + 12 >> 2] | 0;
        do if ((b | 0) == (i | 0)) {
          a = i + 16 | 0;
          d = a + 4 | 0;
          b = c[d >> 2] | 0;
          if (!b) {
            b = c[a >> 2] | 0;
            if (!b) {
              d = 0;
              break;
            }
          } else a = d;
          while (1) {
            e = b + 20 | 0;
            d = c[e >> 2] | 0;
            if (!d) {
              e = b + 16 | 0;
              d = c[e >> 2] | 0;
              if (!d) break;else {
                b = d;
                a = e;
              }
            } else {
              b = d;
              a = e;
            }
          }
          c[a >> 2] = 0;
          d = b;
        } else {
          d = c[i + 8 >> 2] | 0;
          c[d + 12 >> 2] = b;
          c[b + 8 >> 2] = d;
          d = b;
        } while (0);
        if (g | 0) {
          b = c[i + 28 >> 2] | 0;
          a = 20984 + (b << 2) | 0;
          if ((c[a >> 2] | 0) == (i | 0)) {
            c[a >> 2] = d;
            if (!d) {
              c[5171] = c[5171] & ~(1 << b);
              break;
            }
          } else {
            e = g + 16 | 0;
            c[((c[e >> 2] | 0) == (i | 0) ? e : g + 20 | 0) >> 2] = d;
            if (!d) break;
          }
          c[d + 24 >> 2] = g;
          b = i + 16 | 0;
          a = c[b >> 2] | 0;
          if (a | 0) {
            c[d + 16 >> 2] = a;
            c[a + 24 >> 2] = d;
          }
          b = c[b + 4 >> 2] | 0;
          if (b | 0) {
            c[d + 20 >> 2] = b;
            c[b + 24 >> 2] = d;
          }
        }
      } while (0);
      c[h + 4 >> 2] = f | 1;
      c[h + f >> 2] = f;
      if ((h | 0) == (c[5175] | 0)) {
        c[5172] = f;
        return;
      }
    } else {
      c[a >> 2] = e & -2;
      c[h + 4 >> 2] = b | 1;
      c[h + b >> 2] = b;
      f = b;
    }
    b = f >>> 3;
    if (f >>> 0 < 256) {
      d = 20720 + (b << 1 << 2) | 0;
      a = c[5170] | 0;
      b = 1 << b;
      if (!(a & b)) {
        c[5170] = a | b;
        b = d;
        a = d + 8 | 0;
      } else {
        a = d + 8 | 0;
        b = c[a >> 2] | 0;
      }
      c[a >> 2] = h;
      c[b + 12 >> 2] = h;
      c[h + 8 >> 2] = b;
      c[h + 12 >> 2] = d;
      return;
    }
    b = f >>> 8;
    if (b) {
      if (f >>> 0 > 16777215) e = 31;else {
        g = (b + 1048320 | 0) >>> 16 & 8;
        i = b << g;
        d = (i + 520192 | 0) >>> 16 & 4;
        i = i << d;
        e = (i + 245760 | 0) >>> 16 & 2;
        e = 14 - (d | g | e) + (i << e >>> 15) | 0;
        e = f >>> (e + 7 | 0) & 1 | e << 1;
      }
    } else e = 0;
    b = 20984 + (e << 2) | 0;
    c[h + 28 >> 2] = e;
    c[h + 20 >> 2] = 0;
    c[h + 16 >> 2] = 0;
    a = c[5171] | 0;
    d = 1 << e;
    if (!(a & d)) {
      c[5171] = a | d;
      c[b >> 2] = h;
      c[h + 24 >> 2] = b;
      c[h + 12 >> 2] = h;
      c[h + 8 >> 2] = h;
      return;
    }
    b = c[b >> 2] | 0;
    a: do if ((c[b + 4 >> 2] & -8 | 0) != (f | 0)) {
      e = f << ((e | 0) == 31 ? 0 : 25 - (e >>> 1) | 0);
      while (1) {
        d = b + 16 + (e >>> 31 << 2) | 0;
        a = c[d >> 2] | 0;
        if (!a) break;
        if ((c[a + 4 >> 2] & -8 | 0) == (f | 0)) {
          b = a;
          break a;
        } else {
          e = e << 1;
          b = a;
        }
      }
      c[d >> 2] = h;
      c[h + 24 >> 2] = b;
      c[h + 12 >> 2] = h;
      c[h + 8 >> 2] = h;
      return;
    } while (0);
    g = b + 8 | 0;
    i = c[g >> 2] | 0;
    c[i + 12 >> 2] = h;
    c[g >> 2] = h;
    c[h + 8 >> 2] = i;
    c[h + 12 >> 2] = b;
    c[h + 24 >> 2] = 0;
    return;
  }
  function kt(a, b) {
    a = a | 0;
    b = b | 0;
    var c = 0,
      d = 0,
      e = 0,
      f = 0;
    f = a & 65535;
    e = b & 65535;
    c = w(e, f) | 0;
    d = a >>> 16;
    a = (c >>> 16) + (w(e, d) | 0) | 0;
    e = b >>> 16;
    b = w(e, f) | 0;
    return (z((a >>> 16) + (w(e, d) | 0) + (((a & 65535) + b | 0) >>> 16) | 0), a + b << 16 | c & 65535 | 0) | 0;
  }
  function lt(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var e = 0,
      f = 0;
    e = a;
    f = c;
    c = kt(e, f) | 0;
    a = A() | 0;
    return (z((w(b, f) | 0) + (w(d, e) | 0) + a | a & 0 | 0), c | 0 | 0) | 0;
  }
  function mt(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    c = a + c >>> 0;
    return (z(b + d + (c >>> 0 < a >>> 0 | 0) >>> 0 | 0), c | 0) | 0;
  }
  function nt(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    d = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
    return (z(d | 0), a - c >>> 0 | 0) | 0;
  }
  function ot(a) {
    a = a | 0;
    return (a ? 31 - (x(a ^ a - 1) | 0) | 0 : 32) | 0;
  }
  function pt(a, b, d, e, f) {
    a = a | 0;
    b = b | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    var g = 0,
      h = 0,
      i = 0,
      j = 0,
      k = 0,
      l = 0,
      m = 0,
      n = 0,
      o = 0,
      p = 0;
    l = a;
    j = b;
    k = j;
    h = d;
    n = e;
    i = n;
    if (!k) {
      g = (f | 0) != 0;
      if (!i) {
        if (g) {
          c[f >> 2] = (l >>> 0) % (h >>> 0);
          c[f + 4 >> 2] = 0;
        }
        n = 0;
        f = (l >>> 0) / (h >>> 0) >>> 0;
        return (z(n | 0), f) | 0;
      } else {
        if (!g) {
          n = 0;
          f = 0;
          return (z(n | 0), f) | 0;
        }
        c[f >> 2] = a | 0;
        c[f + 4 >> 2] = b & 0;
        n = 0;
        f = 0;
        return (z(n | 0), f) | 0;
      }
    }
    g = (i | 0) == 0;
    do if (h) {
      if (!g) {
        g = (x(i | 0) | 0) - (x(k | 0) | 0) | 0;
        if (g >>> 0 <= 31) {
          m = g + 1 | 0;
          i = 31 - g | 0;
          b = g - 31 >> 31;
          h = m;
          a = l >>> (m >>> 0) & b | k << i;
          b = k >>> (m >>> 0) & b;
          g = 0;
          i = l << i;
          break;
        }
        if (!f) {
          n = 0;
          f = 0;
          return (z(n | 0), f) | 0;
        }
        c[f >> 2] = a | 0;
        c[f + 4 >> 2] = j | b & 0;
        n = 0;
        f = 0;
        return (z(n | 0), f) | 0;
      }
      g = h - 1 | 0;
      if (g & h | 0) {
        i = (x(h | 0) | 0) + 33 - (x(k | 0) | 0) | 0;
        p = 64 - i | 0;
        m = 32 - i | 0;
        j = m >> 31;
        o = i - 32 | 0;
        b = o >> 31;
        h = i;
        a = m - 1 >> 31 & k >>> (o >>> 0) | (k << m | l >>> (i >>> 0)) & b;
        b = b & k >>> (i >>> 0);
        g = l << p & j;
        i = (k << p | l >>> (o >>> 0)) & j | l << m & i - 33 >> 31;
        break;
      }
      if (f | 0) {
        c[f >> 2] = g & l;
        c[f + 4 >> 2] = 0;
      }
      if ((h | 0) == 1) {
        o = j | b & 0;
        p = a | 0 | 0;
        return (z(o | 0), p) | 0;
      } else {
        p = ot(h | 0) | 0;
        o = k >>> (p >>> 0) | 0;
        p = k << 32 - p | l >>> (p >>> 0) | 0;
        return (z(o | 0), p) | 0;
      }
    } else {
      if (g) {
        if (f | 0) {
          c[f >> 2] = (k >>> 0) % (h >>> 0);
          c[f + 4 >> 2] = 0;
        }
        o = 0;
        p = (k >>> 0) / (h >>> 0) >>> 0;
        return (z(o | 0), p) | 0;
      }
      if (!l) {
        if (f | 0) {
          c[f >> 2] = 0;
          c[f + 4 >> 2] = (k >>> 0) % (i >>> 0);
        }
        o = 0;
        p = (k >>> 0) / (i >>> 0) >>> 0;
        return (z(o | 0), p) | 0;
      }
      g = i - 1 | 0;
      if (!(g & i)) {
        if (f | 0) {
          c[f >> 2] = a | 0;
          c[f + 4 >> 2] = g & k | b & 0;
        }
        o = 0;
        p = k >>> ((ot(i | 0) | 0) >>> 0);
        return (z(o | 0), p) | 0;
      }
      g = (x(i | 0) | 0) - (x(k | 0) | 0) | 0;
      if (g >>> 0 <= 30) {
        b = g + 1 | 0;
        i = 31 - g | 0;
        h = b;
        a = k << i | l >>> (b >>> 0);
        b = k >>> (b >>> 0);
        g = 0;
        i = l << i;
        break;
      }
      if (!f) {
        o = 0;
        p = 0;
        return (z(o | 0), p) | 0;
      }
      c[f >> 2] = a | 0;
      c[f + 4 >> 2] = j | b & 0;
      o = 0;
      p = 0;
      return (z(o | 0), p) | 0;
    } while (0);
    if (!h) {
      k = i;
      j = 0;
      i = 0;
    } else {
      m = d | 0 | 0;
      l = n | e & 0;
      k = mt(m | 0, l | 0, -1, -1) | 0;
      d = A() | 0;
      j = i;
      i = 0;
      do {
        e = j;
        j = g >>> 31 | j << 1;
        g = i | g << 1;
        e = a << 1 | e >>> 31 | 0;
        n = a >>> 31 | b << 1 | 0;
        nt(k | 0, d | 0, e | 0, n | 0) | 0;
        p = A() | 0;
        o = p >> 31 | ((p | 0) < 0 ? -1 : 0) << 1;
        i = o & 1;
        a = nt(e | 0, n | 0, o & m | 0, (((p | 0) < 0 ? -1 : 0) >> 31 | ((p | 0) < 0 ? -1 : 0) << 1) & l | 0) | 0;
        b = A() | 0;
        h = h - 1 | 0;
      } while ((h | 0) != 0);
      k = j;
      j = 0;
    }
    h = 0;
    if (f | 0) {
      c[f >> 2] = a;
      c[f + 4 >> 2] = b;
    }
    o = (g | 0) >>> 31 | (k | h) << 1 | (h << 1 | g >>> 31) & 0 | j;
    p = (g << 1 | 0 >>> 31) & -2 | i;
    return (z(o | 0), p) | 0;
  }
  function qt(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    return pt(a, b, c, d, 0) | 0;
  }
  function rt(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    if ((c | 0) < 32) {
      z(b >>> c | 0);
      return a >>> c | (b & (1 << c) - 1) << 32 - c;
    }
    z(0);
    return b >>> c - 32 | 0;
  }
  function st(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    if ((c | 0) < 32) {
      z(b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c | 0);
      return a << c;
    }
    z(a << c - 32 | 0);
    return 0;
  }
  function tt() {
    return 21200;
  }
  function ut(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0;
    if ((e | 0) >= 8192) {
      za(b | 0, d | 0, e | 0) | 0;
      return b | 0;
    }
    h = b | 0;
    g = b + e | 0;
    if ((b & 3) == (d & 3)) {
      while (b & 3) {
        if (!e) return h | 0;
        a[b >> 0] = a[d >> 0] | 0;
        b = b + 1 | 0;
        d = d + 1 | 0;
        e = e - 1 | 0;
      }
      e = g & -4 | 0;
      f = e - 64 | 0;
      while ((b | 0) <= (f | 0)) {
        c[b >> 2] = c[d >> 2];
        c[b + 4 >> 2] = c[d + 4 >> 2];
        c[b + 8 >> 2] = c[d + 8 >> 2];
        c[b + 12 >> 2] = c[d + 12 >> 2];
        c[b + 16 >> 2] = c[d + 16 >> 2];
        c[b + 20 >> 2] = c[d + 20 >> 2];
        c[b + 24 >> 2] = c[d + 24 >> 2];
        c[b + 28 >> 2] = c[d + 28 >> 2];
        c[b + 32 >> 2] = c[d + 32 >> 2];
        c[b + 36 >> 2] = c[d + 36 >> 2];
        c[b + 40 >> 2] = c[d + 40 >> 2];
        c[b + 44 >> 2] = c[d + 44 >> 2];
        c[b + 48 >> 2] = c[d + 48 >> 2];
        c[b + 52 >> 2] = c[d + 52 >> 2];
        c[b + 56 >> 2] = c[d + 56 >> 2];
        c[b + 60 >> 2] = c[d + 60 >> 2];
        b = b + 64 | 0;
        d = d + 64 | 0;
      }
      while ((b | 0) < (e | 0)) {
        c[b >> 2] = c[d >> 2];
        b = b + 4 | 0;
        d = d + 4 | 0;
      }
    } else {
      e = g - 4 | 0;
      while ((b | 0) < (e | 0)) {
        a[b >> 0] = a[d >> 0] | 0;
        a[b + 1 >> 0] = a[d + 1 >> 0] | 0;
        a[b + 2 >> 0] = a[d + 2 >> 0] | 0;
        a[b + 3 >> 0] = a[d + 3 >> 0] | 0;
        b = b + 4 | 0;
        d = d + 4 | 0;
      }
    }
    while ((b | 0) < (g | 0)) {
      a[b >> 0] = a[d >> 0] | 0;
      b = b + 1 | 0;
      d = d + 1 | 0;
    }
    return h | 0;
  }
  function vt(b, d, e) {
    b = b | 0;
    d = d | 0;
    e = e | 0;
    var f = 0,
      g = 0,
      h = 0,
      i = 0;
    h = b + e | 0;
    d = d & 255;
    if ((e | 0) >= 67) {
      while (b & 3) {
        a[b >> 0] = d;
        b = b + 1 | 0;
      }
      f = h & -4 | 0;
      i = d | d << 8 | d << 16 | d << 24;
      g = f - 64 | 0;
      while ((b | 0) <= (g | 0)) {
        c[b >> 2] = i;
        c[b + 4 >> 2] = i;
        c[b + 8 >> 2] = i;
        c[b + 12 >> 2] = i;
        c[b + 16 >> 2] = i;
        c[b + 20 >> 2] = i;
        c[b + 24 >> 2] = i;
        c[b + 28 >> 2] = i;
        c[b + 32 >> 2] = i;
        c[b + 36 >> 2] = i;
        c[b + 40 >> 2] = i;
        c[b + 44 >> 2] = i;
        c[b + 48 >> 2] = i;
        c[b + 52 >> 2] = i;
        c[b + 56 >> 2] = i;
        c[b + 60 >> 2] = i;
        b = b + 64 | 0;
      }
      while ((b | 0) < (f | 0)) {
        c[b >> 2] = i;
        b = b + 4 | 0;
      }
    }
    while ((b | 0) < (h | 0)) {
      a[b >> 0] = d;
      b = b + 1 | 0;
    }
    return h - e | 0;
  }
  function wt(a) {
    a = a | 0;
    return Mb[a & 1]() | 0;
  }
  function xt(a, b) {
    a = a | 0;
    b = b | 0;
    return Nb[a & 31](b | 0) | 0;
  }
  function yt(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    return Ob[a & 31](b | 0, c | 0) | 0;
  }
  function zt(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    return Pb[a & 3](b | 0, c | 0, +d) | 0;
  }
  function At(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    return Qb[a & 1](b | 0, c | 0, +d, +e) | 0;
  }
  function Bt(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = +f;
    return Rb[a & 1](b | 0, c | 0, +d, +e, +f) | 0;
  }
  function Ct(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = +f;
    g = +g;
    return Sb[a & 1](b | 0, c | 0, +d, +e, +f, +g) | 0;
  }
  function Dt(a, b, c, d, e, f, g, h, i, j) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    i = +i;
    j = j | 0;
    return Tb[a & 1](b | 0, c | 0, +d, +e, +f, +g, +h, +i, j | 0) | 0;
  }
  function Et(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = f | 0;
    return Ub[a & 1](b | 0, c | 0, +d, +e, f | 0) | 0;
  }
  function Ft(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = e | 0;
    f = f | 0;
    return Vb[a & 1](b | 0, c | 0, +d, e | 0, f | 0) | 0;
  }
  function Gt(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    return Wb[a & 63](b | 0, c | 0, d | 0) | 0;
  }
  function Ht(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    return Xb[a & 7](b | 0, c | 0, d | 0, +e) | 0;
  }
  function It(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = +f;
    return Yb[a & 3](b | 0, c | 0, d | 0, +e, +f) | 0;
  }
  function Jt(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = +g;
    return Zb[a & 1](b | 0, c | 0, d | 0, +e, +f, +g) | 0;
  }
  function Kt(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    return _b[a & 1](b | 0, c | 0, d | 0, +e, +f, +g, +h) | 0;
  }
  function Lt(a, b, c, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    i = +i;
    j = +j;
    k = k | 0;
    return $b[a & 1](b | 0, c | 0, d | 0, +e, +f, +g, +h, +i, +j, k | 0) | 0;
  }
  function Mt(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = +f;
    g = g | 0;
    return ac[a & 1](b | 0, c | 0, d | 0, +e, +f, g | 0) | 0;
  }
  function Nt(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    g = +g;
    h = h | 0;
    return bc[a & 1](b | 0, c | 0, d | 0, +e, f | 0, +g, h | 0) | 0;
  }
  function Ot(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    g = g | 0;
    return cc[a & 1](b | 0, c | 0, d | 0, +e, f | 0, g | 0) | 0;
  }
  function Pt(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    return dc[a & 31](b | 0, c | 0, d | 0, e | 0) | 0;
  }
  function Qt(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    return ec[a & 1](b | 0, c | 0, d | 0, e | 0, +f) | 0;
  }
  function Rt(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    g = +g;
    return fc[a & 1](b | 0, c | 0, d | 0, e | 0, +f, +g) | 0;
  }
  function St(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    g = g | 0;
    h = +h;
    return gc[a & 1](b | 0, c | 0, d | 0, e | 0, +f, g | 0, +h) | 0;
  }
  function Tt(a, b, c, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    g = g | 0;
    h = +h;
    i = i | 0;
    return hc[a & 1](b | 0, c | 0, d | 0, e | 0, +f, g | 0, +h, i | 0) | 0;
  }
  function Ut(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    return ic[a & 31](b | 0, c | 0, d | 0, e | 0, f | 0) | 0;
  }
  function Vt(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = +g;
    return jc[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0, +g) | 0;
  }
  function Wt(a, b, c, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = +g;
    h = h | 0;
    i = +i;
    return kc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, +g, h | 0, +i) | 0;
  }
  function Xt(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    return lc[a & 15](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0) | 0;
  }
  function Yt(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = +h;
    return mc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, +h) | 0;
  }
  function Zt(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    return nc[a & 7](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0) | 0;
  }
  function _t(a, b, c, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    return oc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0) | 0;
  }
  function $t(a, b, c, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = +k;
    return pc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0, j | 0, +k) | 0;
  }
  function au(a, b, c, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    return qc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0, j | 0, k | 0) | 0;
  }
  function bu(a, b, c, d, e, f, g, h, i, j, k, l) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = +l;
    return rc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0, j | 0, k | 0, +l) | 0;
  }
  function cu(a, b, c, d, e, f, g, h, i, j, k, l) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    l = l | 0;
    return sc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0, j | 0, k | 0, l | 0) | 0;
  }
  function du(a, b) {
    a = a | 0;
    b = b | 0;
    tc[a & 15](b | 0);
  }
  function eu(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    uc[a & 3](b | 0, c | 0, d | 0, e | 0);
  }
  function fu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    vc[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0);
  }
  function gu(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    wc[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0);
  }
  function hu() {
    y(0);
    return 0;
  }
  function iu(a) {
    a = a | 0;
    y(1);
    return 0;
  }
  function ju(a, b) {
    a = a | 0;
    b = b | 0;
    y(2);
    return 0;
  }
  function ku(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = +c;
    y(3);
    return 0;
  }
  function lu(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = +d;
    y(4);
    return 0;
  }
  function mu(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = +d;
    e = +e;
    y(5);
    return 0;
  }
  function nu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = +d;
    e = +e;
    f = +f;
    y(6);
    return 0;
  }
  function ou(a, b, c, d, e, f, g, h, i) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = +d;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    i = i | 0;
    y(7);
    return 0;
  }
  function pu(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = +d;
    e = e | 0;
    y(8);
    return 0;
  }
  function qu(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = +c;
    d = d | 0;
    e = e | 0;
    y(9);
    return 0;
  }
  function ru(a, b, c) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    y(10);
    return 0;
  }
  function su(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    y(11);
    return 0;
  }
  function tu(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    y(12);
    return 0;
  }
  function uu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = +f;
    y(13);
    return 0;
  }
  function vu(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = +f;
    g = +g;
    y(14);
    return 0;
  }
  function wu(a, b, c, d, e, f, g, h, i, j) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = +f;
    g = +g;
    h = +h;
    i = +i;
    j = j | 0;
    y(15);
    return 0;
  }
  function xu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = +e;
    f = f | 0;
    y(16);
    return 0;
  }
  function yu(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = e | 0;
    f = +f;
    g = g | 0;
    y(17);
    return 0;
  }
  function zu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = +d;
    e = e | 0;
    f = f | 0;
    y(18);
    return 0;
  }
  function Au(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    y(19);
    return 0;
  }
  function Bu(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    y(20);
    return 0;
  }
  function Cu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = +f;
    y(21);
    return 0;
  }
  function Du(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    g = +g;
    y(22);
    return 0;
  }
  function Eu(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = +e;
    f = f | 0;
    g = +g;
    h = h | 0;
    y(23);
    return 0;
  }
  function Fu(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    y(24);
    return 0;
  }
  function Gu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    y(25);
    return 0;
  }
  function Hu(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = +f;
    g = g | 0;
    h = +h;
    y(26);
    return 0;
  }
  function Iu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    y(27);
    return 0;
  }
  function Ju(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = +g;
    y(28);
    return 0;
  }
  function Ku(a, b, c, d, e, f, g) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    y(29);
    return 0;
  }
  function Lu(a, b, c, d, e, f, g, h) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    y(30);
    return 0;
  }
  function Mu(a, b, c, d, e, f, g, h, i, j) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = +j;
    y(31);
    return 0;
  }
  function Nu(a, b, c, d, e, f, g, h, i, j) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    y(32);
    return 0;
  }
  function Ou(a, b, c, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = +k;
    y(33);
    return 0;
  }
  function Pu(a, b, c, d, e, f, g, h, i, j, k) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    g = g | 0;
    h = h | 0;
    i = i | 0;
    j = j | 0;
    k = k | 0;
    y(34);
    return 0;
  }
  function Qu(a) {
    a = a | 0;
    y(35);
  }
  function Ru(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    y(36);
  }
  function Su(a, b, c, d, e) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    y(37);
  }
  function Tu(a, b, c, d, e, f) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    e = e | 0;
    f = f | 0;
    y(38);
  }

  // EMSCRIPTEN_END_FUNCS
  var Mb = [hu, Kk];
  var Nb = [iu, Lp, Sp, Ik, Ok, _k, al, gl, il, jl, ml, ol, ql, wl, xl, Ek, Fp, iu, iu, iu, iu, iu, iu, iu, iu, iu, iu, iu, iu, iu, iu, iu];
  var Ob = [ju, Yk, $k, bl, dl, fl, hl, kl, ll, nl, pl, rl, yl, zl, Al, Bl, Il, Wm, Xm, fn, gn, tn, yn, zn, Kp, Gk, Cp, ju, ju, ju, ju, ju];
  var Pb = [ku, Jl, Pn, ku];
  var Qb = [lu, Zl];
  var Rb = [mu, tm];
  var Sb = [nu, Sm];
  var Tb = [ou, fm];
  var Ub = [pu, $l];
  var Vb = [qu, hm];
  var Wb = [ru, Rp, Mp, xq, Nr, as, cs, Tk, ul, Cl, Fl, Hl, Nl, Ql, Ul, Vl, Xl, bm, jm, rm, Bm, Cm, Dm, Em, Gm, Im, Lm, Mm, Nm, Ym, Zm, _m, $m, dn, hn, jn, kn, ln, on, Gn, Jp, up, sp, qp, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru, ru];
  var Xb = [su, dm, sm, Rm, en, On, fp, su];
  var Yb = [tu, pn, Vo, tu];
  var Zb = [uu, Fo];
  var _b = [vu, so];
  var $b = [wu, No];
  var ac = [xu, To];
  var bc = [yu, rn];
  var cc = [zu, Lo];
  var dc = [Au, Np, Tp, Mk, Qk, Vk, Xk, sl, Ol, Sl, Yl, km, lm, pm, qm, vm, xm, Fm, Hm, Om, Pm, an, bn, Mn, Nn, yp, mp, hp, $o, Xo, Ro, Au];
  var ec = [Bu, Po];
  var fc = [Cu, mo];
  var gc = [Du, wn];
  var hc = [Eu, ko];
  var ic = [Fu, Rk, Dl, Ll, nm, Jm, Um, mn, nn, Ep, wp, op, bp, Zo, Jo, Do, Bo, uo, oo, Fu, Fu, Fu, Fu, Fu, Fu, Fu, Fu, Fu, Fu, Fu, Fu, Fu];
  var jc = [Gu, In, Qn, Gu];
  var kc = [Hu, go];
  var lc = [Iu, zm, An, En, Hn, Ap, kp, dp, Ho, wo, qo, Iu, Iu, Iu, Iu, Iu];
  var mc = [Ju, Yn];
  var nc = [Ku, un, yo, eo, _n, Ku, Ku, Ku];
  var oc = [Lu, io];
  var pc = [Mu, Kn];
  var qc = [Nu, Cn];
  var rc = [Ou, Sn];
  var sc = [Pu, bo];
  var tc = [Qu, Jr, Kr, Lr, Mr, Wr, $r, bs, gs, Ak, Jk, Qu, Qu, Qu, Qu, Qu];
  var uc = [Ru, Qr, Zr, js];
  var vc = [Su, Pr, Yr, is];
  var wc = [Tu, Or, Xr, hs];
  return {
    _EN_geterror: hd,
    _EN_getversion: gd,
    __ZSt18uncaught_exceptionv: Ys,
    ___cxa_can_catch: qs,
    ___cxa_is_pointer_type: rs,
    ___embind_register_native_and_builtin_types: zs,
    ___errno_location: Pp,
    ___getTypeName: Xs,
    ___muldi3: lt,
    ___udivdi3: qt,
    __get_daylight: us,
    __get_timezone: vs,
    __get_tzname: ts,
    _bitshift64Lshr: rt,
    _bitshift64Shl: st,
    _emscripten_get_sbrk_ptr: tt,
    _emscripten_replace_memory: Lb,
    _free: ft,
    _getversion2: wk,
    _i64Add: mt,
    _i64Subtract: nt,
    _malloc: et,
    _memcpy: ut,
    _memset: vt,
    _netbuilder: xk,
    _runEpanet: yk,
    _test: zk,
    dynCall_i: wt,
    dynCall_ii: xt,
    dynCall_iii: yt,
    dynCall_iiid: zt,
    dynCall_iiidd: At,
    dynCall_iiiddd: Bt,
    dynCall_iiidddd: Ct,
    dynCall_iiiddddddi: Dt,
    dynCall_iiiddi: Et,
    dynCall_iiidii: Ft,
    dynCall_iiii: Gt,
    dynCall_iiiid: Ht,
    dynCall_iiiidd: It,
    dynCall_iiiiddd: Jt,
    dynCall_iiiidddd: Kt,
    dynCall_iiiiddddddi: Lt,
    dynCall_iiiiddi: Mt,
    dynCall_iiiididi: Nt,
    dynCall_iiiidii: Ot,
    dynCall_iiiii: Pt,
    dynCall_iiiiid: Qt,
    dynCall_iiiiidd: Rt,
    dynCall_iiiiidid: St,
    dynCall_iiiiididi: Tt,
    dynCall_iiiiii: Ut,
    dynCall_iiiiiid: Vt,
    dynCall_iiiiiidid: Wt,
    dynCall_iiiiiii: Xt,
    dynCall_iiiiiiid: Yt,
    dynCall_iiiiiiii: Zt,
    dynCall_iiiiiiiii: _t,
    dynCall_iiiiiiiiiid: $t,
    dynCall_iiiiiiiiiii: au,
    dynCall_iiiiiiiiiiid: bu,
    dynCall_iiiiiiiiiiii: cu,
    dynCall_vi: du,
    dynCall_viiii: eu,
    dynCall_viiiii: fu,
    dynCall_viiiiii: gu,
    establishStackSpace: Bc,
    globalCtors: xc,
    stackAlloc: yc,
    stackRestore: Ac,
    stackSave: zc
  };
}

// EMSCRIPTEN_END_ASM
)(asmGlobalArg, asmLibraryArg, buffer);
var _EN_geterror = Module["_EN_geterror"] = asm["_EN_geterror"];
var _EN_getversion = Module["_EN_getversion"] = asm["_EN_getversion"];
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = asm["___embind_register_native_and_builtin_types"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _free = Module["_free"] = asm["_free"];
var _getversion2 = Module["_getversion2"] = asm["_getversion2"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _netbuilder = Module["_netbuilder"] = asm["_netbuilder"];
var _runEpanet = Module["_runEpanet"] = asm["_runEpanet"];
var _test = Module["_test"] = asm["_test"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_iiidd = Module["dynCall_iiidd"] = asm["dynCall_iiidd"];
var dynCall_iiiddd = Module["dynCall_iiiddd"] = asm["dynCall_iiiddd"];
var dynCall_iiidddd = Module["dynCall_iiidddd"] = asm["dynCall_iiidddd"];
var dynCall_iiiddddddi = Module["dynCall_iiiddddddi"] = asm["dynCall_iiiddddddi"];
var dynCall_iiiddi = Module["dynCall_iiiddi"] = asm["dynCall_iiiddi"];
var dynCall_iiidii = Module["dynCall_iiidii"] = asm["dynCall_iiidii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiid = Module["dynCall_iiiid"] = asm["dynCall_iiiid"];
var dynCall_iiiidd = Module["dynCall_iiiidd"] = asm["dynCall_iiiidd"];
var dynCall_iiiiddd = Module["dynCall_iiiiddd"] = asm["dynCall_iiiiddd"];
var dynCall_iiiidddd = Module["dynCall_iiiidddd"] = asm["dynCall_iiiidddd"];
var dynCall_iiiiddddddi = Module["dynCall_iiiiddddddi"] = asm["dynCall_iiiiddddddi"];
var dynCall_iiiiddi = Module["dynCall_iiiiddi"] = asm["dynCall_iiiiddi"];
var dynCall_iiiididi = Module["dynCall_iiiididi"] = asm["dynCall_iiiididi"];
var dynCall_iiiidii = Module["dynCall_iiiidii"] = asm["dynCall_iiiidii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiidd = Module["dynCall_iiiiidd"] = asm["dynCall_iiiiidd"];
var dynCall_iiiiidid = Module["dynCall_iiiiidid"] = asm["dynCall_iiiiidid"];
var dynCall_iiiiididi = Module["dynCall_iiiiididi"] = asm["dynCall_iiiiididi"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiidid = Module["dynCall_iiiiiidid"] = asm["dynCall_iiiiiidid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiid = Module["dynCall_iiiiiiid"] = asm["dynCall_iiiiiiid"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiiiiiiid = Module["dynCall_iiiiiiiiiid"] = asm["dynCall_iiiiiiiiiid"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_iiiiiiiiiiid = Module["dynCall_iiiiiiiiiiid"] = asm["dynCall_iiiiiiiiiiid"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
Module["asm"] = asm;
Module["intArrayToString"] = intArrayToString;
Module["ccall"] = ccall;
Module["getValue"] = getValue;
Module["getMemory"] = getMemory;
Module["UTF8ToString"] = UTF8ToString;
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
Module["FS"] = FS;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
Module["calledRun"] = calledRun;
if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency("memory initializer");
    var applyMemoryInitializer = function (data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      if (Module["memoryInitializerRequest"]) delete Module["memoryInitializerRequest"].response;
      removeRunDependency("memory initializer");
    };
    var doBrowserLoad = function () {
      readAsync(memoryInitializer, applyMemoryInitializer, function () {
        throw "could not load memory initializer " + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else if (Module["memoryInitializerRequest"]) {
      var useRequest = function () {
        var request = Module["memoryInitializerRequest"];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
          if (data) {
            response = data.buffer;
          } else {
            console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module["memoryInitializerRequest"].response) {
        setTimeout(useRequest, 0);
      } else {
        Module["memoryInitializerRequest"].addEventListener("load", useRequest);
      }
    } else {
      doBrowserLoad();
    }
  }
}
var calledRun;
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}
dependenciesFulfilled = function runCaller() {
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller;
};
function run(args) {
  args = args || arguments_;
  if (runDependencies > 0) {
    return;
  }
  preRun();
  if (runDependencies > 0) return;
  function doRun() {
    if (calledRun) return;
    calledRun = true;
    Module["calledRun"] = true;
    if (ABORT) return;
    initRuntime();
    preMain();
    if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
    postRun();
  }
  if (Module["setStatus"]) {
    Module["setStatus"]("Running...");
    setTimeout(function () {
      setTimeout(function () {
        Module["setStatus"]("");
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module["run"] = run;
if (Module["preInit"]) {
  if (typeof Module["preInit"] == "function") Module["preInit"] = [Module["preInit"]];
  while (Module["preInit"].length > 0) {
    Module["preInit"].pop()();
  }
}
noExitRuntime = true;
run();
},{"fs":"node_modules/parcel-bundler/src/builtins/_empty.js","path":"node_modules/path-browserify/index.js","crypto":"node_modules/crypto-browserify/index.js","process":"node_modules/process/browser.js","buffer":"node_modules/buffer/index.js"}],"node_modules/epanet-js/dist/epanet-js.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Workspace = exports.TimeParameter = exports.StatusReport = exports.StatisticType = exports.SourceType = exports.SizeLimits = exports.RuleVariable = exports.RuleStatus = exports.RuleOperator = exports.RuleObject = exports.QualityType = exports.PumpType = exports.PumpStateType = exports.Project = exports.Option = exports.ObjectType = exports.NodeType = exports.NodeProperty = exports.MixingModel = exports.LinkType = exports.LinkStatusType = exports.LinkProperty = exports.InitHydOption = exports.HeadLossType = exports.FlowUnits = exports.DemandModel = exports.CurveType = exports.CountType = exports.ControlType = exports.AnalysisStatistic = exports.ActionCodeType = void 0;
exports.readBinary = readBinary;
var _epanetEngine = require("@model-create/epanet-engine");
var Workspace = exports.Workspace = /*#__PURE__*/

/** @class */
function () {
  function Workspace() {
    this._instance = _epanetEngine.epanetEngine;
    this._FS = this._instance.FS;
  }
  Object.defineProperty(Workspace.prototype, "version", {
    get: function get() {
      var intPointer = this._instance._malloc(4);
      this._instance.getversion(intPointer);
      var returnValue = this._instance.getValue(intPointer, 'i32');
      this._instance._free(intPointer);
      return returnValue;
    },
    enumerable: true,
    configurable: true
  });
  Workspace.prototype.getError = function (code) {
    var title1Ptr = this._instance._malloc(256); //EN_MAXMSG

    this._instance.geterror(code, title1Ptr);
    var errMessage = this._instance.UTF8ToString(title1Ptr);
    this._instance._free(title1Ptr);
    return errMessage;
  };
  Workspace.prototype.writeFile = function (path, data) {
    this._FS.writeFile(path, data);
  };
  Workspace.prototype.readFile = function (file, encoding) {
    if (!encoding || encoding === 'utf8') {
      encoding = 'utf8';
      return this._FS.readFile(file, {
        encoding: encoding
      });
    }
    return this._FS.readFile(file, {
      encoding: encoding
    });
  };
  return Workspace;
}();

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return _assign.apply(this, arguments);
};
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }
  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }
  return r;
}
var ProjectFunctions = /*#__PURE__*/

/** @class */
function () {
  function ProjectFunctions() {}
  ProjectFunctions.prototype.close = function () {
    this._checkError(this._EN.close());
  };
  ProjectFunctions.prototype.getCount = function (obj) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getcount.apply(_a, __spreadArrays([obj], memory)));
    return this._getValue(memory[0], 'int');
  };
  ProjectFunctions.prototype.getTitle = function () {
    var _a;
    var memory = this._allocateMemory('char-title', 'char-title', 'char-title');
    this._checkError((_a = this._EN).gettitle.apply(_a, memory));
    return {
      line1: this._getValue(memory[0], 'char'),
      line2: this._getValue(memory[1], 'char'),
      line3: this._getValue(memory[2], 'char')
    };
  };
  ProjectFunctions.prototype.init = function (rptFile, outFile, unitType, headLosstype) {
    this._checkError(this._EN.init(rptFile, outFile, unitType, headLosstype));
  };
  ProjectFunctions.prototype.open = function (inputFile, reportFile, outputFile) {
    this._checkError(this._EN.open(inputFile, reportFile, outputFile));
  }; // TODO: Include ability to have callback here

  ProjectFunctions.prototype.runProject = function (inputFile, reportFile, outputFile) {
    this._checkError(this._EN.runproject(inputFile, reportFile, outputFile));
  };
  ProjectFunctions.prototype.saveInpFile = function (filename) {
    this._checkError(this._EN.saveinpfile(filename));
  };
  ProjectFunctions.prototype.setTitle = function (line1, line2, line3) {
    this._checkError(this._EN.settitle(line1, line2, line3));
  };
  return ProjectFunctions;
}();
var NetworkNodeFunctions = /*#__PURE__*/

/** @class */
function () {
  function NetworkNodeFunctions() {}
  NetworkNodeFunctions.prototype.addNode = function (id, nodeType) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).addnode.apply(_a, __spreadArrays([id, nodeType], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkNodeFunctions.prototype.deleteNode = function (index, actionCode) {
    this._checkError(this._EN.deletenode(index, actionCode));
  };
  NetworkNodeFunctions.prototype.getNodeIndex = function (id) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getnodeindex.apply(_a, __spreadArrays([id], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkNodeFunctions.prototype.getNodeId = function (index) {
    var _a;
    var memory = this._allocateMemory('char');
    this._checkError((_a = this._EN).getnodeid.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'char');
  };
  NetworkNodeFunctions.prototype.setNodeId = function (index, newid) {
    this._checkError(this._EN.setnodeid(index, newid));
  };
  NetworkNodeFunctions.prototype.getNodeType = function (index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getnodetype.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkNodeFunctions.prototype.getNodeValue = function (index, property) {
    var _a;
    var memory = this._allocateMemory('double');
    this._checkError((_a = this._EN).getnodevalue.apply(_a, __spreadArrays([index, property], memory)));
    return this._getValue(memory[0], 'double');
  };
  NetworkNodeFunctions.prototype.setNodeValue = function (index, property, value) {
    this._checkError(this._EN.setnodevalue(index, property, value));
  };
  NetworkNodeFunctions.prototype.setJunctionData = function (index, elev, dmnd, dmndpat) {
    this._checkError(this._EN.setjuncdata(index, elev, dmnd, dmndpat));
  };
  NetworkNodeFunctions.prototype.setTankData = function (index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve) {
    this._checkError(this._EN.settankdata(index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve));
  };
  NetworkNodeFunctions.prototype.getCoordinates = function (index) {
    var _a;
    var memory = this._allocateMemory('double', 'double');
    this._checkError((_a = this._EN).getcoord.apply(_a, __spreadArrays([index], memory)));
    return {
      x: this._getValue(memory[0], 'double'),
      y: this._getValue(memory[1], 'double')
    };
  };
  NetworkNodeFunctions.prototype.setCoordinates = function (index, x, y) {
    this._checkError(this._EN.setcoord(index, x, y));
  };
  return NetworkNodeFunctions;
}();
var HydraulicAnalysisFunctions = /*#__PURE__*/

/** @class */
function () {
  function HydraulicAnalysisFunctions() {}
  HydraulicAnalysisFunctions.prototype.solveH = function () {
    this._checkError(this._EN.solveH());
  };
  HydraulicAnalysisFunctions.prototype.useHydFile = function (filename) {
    this._checkError(this._EN.usehydfile(filename));
  };
  HydraulicAnalysisFunctions.prototype.openH = function () {
    this._checkError(this._EN.openH());
  };
  HydraulicAnalysisFunctions.prototype.initH = function (initFlag) {
    this._checkError(this._EN.initH(initFlag));
  };
  HydraulicAnalysisFunctions.prototype.runH = function () {
    var _a;
    var memory = this._allocateMemory('long');
    this._checkError((_a = this._EN).runH.apply(_a, memory));
    return this._getValue(memory[0], 'long');
  };
  HydraulicAnalysisFunctions.prototype.nextH = function () {
    var _a;
    var memory = this._allocateMemory('long');
    this._checkError((_a = this._EN).nextH.apply(_a, memory));
    return this._getValue(memory[0], 'long');
  };
  HydraulicAnalysisFunctions.prototype.saveH = function () {
    this._checkError(this._EN.saveH());
  };
  HydraulicAnalysisFunctions.prototype.saveHydFile = function (filename) {
    this._checkError(this._EN.savehydfile(filename));
  };
  HydraulicAnalysisFunctions.prototype.closeH = function () {
    this._checkError(this._EN.closeH());
  };
  return HydraulicAnalysisFunctions;
}();
var WaterQualityAnalysisFunctions = /*#__PURE__*/

/** @class */
function () {
  function WaterQualityAnalysisFunctions() {}
  WaterQualityAnalysisFunctions.prototype.solveQ = function () {
    this._checkError(this._EN.solveQ());
  };
  WaterQualityAnalysisFunctions.prototype.openQ = function () {
    this._checkError(this._EN.openQ());
  };
  WaterQualityAnalysisFunctions.prototype.initQ = function (initFlag) {
    this._checkError(this._EN.initQ(initFlag));
  };
  WaterQualityAnalysisFunctions.prototype.runQ = function () {
    var _a;
    var memory = this._allocateMemory('long');
    this._checkError((_a = this._EN).runQ.apply(_a, memory));
    return this._getValue(memory[0], 'long');
  };
  WaterQualityAnalysisFunctions.prototype.nextQ = function () {
    var _a;
    var memory = this._allocateMemory('long');
    this._checkError((_a = this._EN).nextQ.apply(_a, memory));
    return this._getValue(memory[0], 'long');
  };
  WaterQualityAnalysisFunctions.prototype.stepQ = function () {
    var _a;
    var memory = this._allocateMemory('long');
    this._checkError((_a = this._EN).stepQ.apply(_a, memory));
    return this._getValue(memory[0], 'long');
  };
  WaterQualityAnalysisFunctions.prototype.closeQ = function () {
    this._checkError(this._EN.closeQ());
  };
  return WaterQualityAnalysisFunctions;
}();
var ReportingFunctions = /*#__PURE__*/

/** @class */
function () {
  function ReportingFunctions() {}
  ReportingFunctions.prototype.writeLine = function (line) {
    this._checkError(this._EN.writeline(line));
  };
  ReportingFunctions.prototype.report = function () {
    this._checkError(this._EN.report());
  };
  ReportingFunctions.prototype.copyReport = function (filename) {
    this._checkError(this._EN.copyreport(filename));
  };
  ReportingFunctions.prototype.clearReport = function () {
    this._checkError(this._EN.clearreport());
  };
  ReportingFunctions.prototype.resetReport = function () {
    this._checkError(this._EN.resetreport());
  };
  ReportingFunctions.prototype.setReport = function (format) {
    this._checkError(this._EN.setreport(format));
  };
  ReportingFunctions.prototype.setStatusReport = function (level) {
    this._checkError(this._EN.setstatusreport(level));
  };
  ReportingFunctions.prototype.getStatistic = function (type) {
    var _a;
    var memory = this._allocateMemory('double');
    this._checkError((_a = this._EN).getstatistic.apply(_a, __spreadArrays([type], memory)));
    return this._getValue(memory[0], 'double');
  };
  ReportingFunctions.prototype.getResultIndex = function (type, index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getresultindex.apply(_a, __spreadArrays([type, index], memory)));
    return this._getValue(memory[0], 'int');
  };
  return ReportingFunctions;
}();
var AnalysisOptionsFunctions = /*#__PURE__*/

/** @class */
function () {
  function AnalysisOptionsFunctions() {}
  AnalysisOptionsFunctions.prototype.getFlowUnits = function () {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getflowunits.apply(_a, memory));
    return this._getValue(memory[0], 'int');
  };
  AnalysisOptionsFunctions.prototype.getOption = function (option) {
    var _a;
    var memory = this._allocateMemory('double');
    this._checkError((_a = this._EN).getoption.apply(_a, __spreadArrays([option], memory)));
    return this._getValue(memory[0], 'double');
  };
  AnalysisOptionsFunctions.prototype.getQualityInfo = function () {
    var _a;
    var memory = this._allocateMemory('int', 'char', 'char', 'int');
    this._checkError((_a = this._EN).getqualinfo.apply(_a, memory));
    return {
      qualType: this._getValue(memory[0], 'int'),
      chemName: this._getValue(memory[1], 'char'),
      chemUnits: this._getValue(memory[2], 'char'),
      traceNode: this._getValue(memory[3], 'int')
    };
  };
  AnalysisOptionsFunctions.prototype.getQualityType = function () {
    var _a;
    var memory = this._allocateMemory('int', 'int');
    this._checkError((_a = this._EN).getqualtype.apply(_a, memory));
    return {
      qualType: this._getValue(memory[0], 'int'),
      traceNode: this._getValue(memory[1], 'int')
    };
  };
  AnalysisOptionsFunctions.prototype.getTimeParameter = function (param) {
    var _a;
    var memory = this._allocateMemory('long');
    this._checkError((_a = this._EN).gettimeparam.apply(_a, __spreadArrays([param], memory)));
    return this._getValue(memory[0], 'long');
  };
  AnalysisOptionsFunctions.prototype.setFlowUnits = function (units) {
    this._checkError(this._EN.setflowunits(units));
  };
  AnalysisOptionsFunctions.prototype.setOption = function (option, value) {
    this._checkError(this._EN.setoption(option, value));
  };
  AnalysisOptionsFunctions.prototype.setQualityType = function (qualType, chemName, chemUnits, traceNode) {
    this._checkError(this._EN.setqualtype(qualType, chemName, chemUnits, traceNode));
  };
  AnalysisOptionsFunctions.prototype.setTimeParameter = function (param, value) {
    this._checkError(this._EN.settimeparam(param, value));
  };
  return AnalysisOptionsFunctions;
}();
var NodalDemandFunctions = /*#__PURE__*/

/** @class */
function () {
  function NodalDemandFunctions() {}
  NodalDemandFunctions.prototype.addDemand = function (nodeIndex, baseDemand, demandPattern, demandName) {
    this._checkError(this._EN.adddemand(nodeIndex, baseDemand, demandPattern, demandName));
  };
  NodalDemandFunctions.prototype.deleteDemand = function (nodeIndex, demandIndex) {
    this._checkError(this._EN.deletedemand(nodeIndex, demandIndex));
  };
  NodalDemandFunctions.prototype.getBaseDemand = function (nodeIndex, demandIndex) {
    var _a;
    var memory = this._allocateMemory('double');
    this._checkError((_a = this._EN).getbasedemand.apply(_a, __spreadArrays([nodeIndex, demandIndex], memory)));
    return this._getValue(memory[0], 'double');
  };
  NodalDemandFunctions.prototype.getDemandIndex = function (nodeIndex, demandName) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getdemandindex.apply(_a, __spreadArrays([nodeIndex, demandName], memory)));
    return this._getValue(memory[0], 'int');
  };
  NodalDemandFunctions.prototype.getDemandModel = function () {
    var _a;
    var memory = this._allocateMemory('int', 'double', 'double', 'double');
    this._checkError((_a = this._EN).getdemandmodel.apply(_a, memory));
    return {
      type: this._getValue(memory[0], 'int'),
      pmin: this._getValue(memory[1], 'double'),
      preq: this._getValue(memory[2], 'double'),
      pexp: this._getValue(memory[3], 'double')
    };
  };
  NodalDemandFunctions.prototype.getDemandName = function (nodeIndex, demandIndex) {
    var _a;
    var memory = this._allocateMemory('char');
    this._checkError((_a = this._EN).getdemandname.apply(_a, __spreadArrays([nodeIndex, demandIndex], memory)));
    return this._getValue(memory[0], 'char');
  };
  NodalDemandFunctions.prototype.getDemandPattern = function (nodeIndex, demandIndex) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getdemandpattern.apply(_a, __spreadArrays([nodeIndex, demandIndex], memory)));
    return this._getValue(memory[0], 'int');
  };
  NodalDemandFunctions.prototype.getNumberOfDemands = function (nodeIndex) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getnumdemands.apply(_a, __spreadArrays([nodeIndex], memory)));
    return this._getValue(memory[0], 'int');
  };
  NodalDemandFunctions.prototype.setBaseDemand = function (nodeIndex, demandIndex, baseDemand) {
    this._checkError(this._EN.setbasedemand(nodeIndex, demandIndex, baseDemand));
  };
  NodalDemandFunctions.prototype.setDemandModel = function (type, pmin, preq, pexp) {
    this._checkError(this._EN.setdemandmodel(type, pmin, preq, pexp));
  };
  NodalDemandFunctions.prototype.setDemandName = function (nodeIndex, demandIdx, demandName) {
    this._checkError(this._EN.setdemandname(nodeIndex, demandIdx, demandName));
  };
  NodalDemandFunctions.prototype.setDemandPattern = function (nodeIndex, demandIndex, patIndex) {
    this._checkError(this._EN.setdemandpattern(nodeIndex, demandIndex, patIndex));
  };
  return NodalDemandFunctions;
}();
var NetworkLinkFunctions = /*#__PURE__*/

/** @class */
function () {
  function NetworkLinkFunctions() {}
  NetworkLinkFunctions.prototype.addLink = function (id, linkType, fromNode, toNode) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).addlink.apply(_a, __spreadArrays([id, linkType, fromNode, toNode], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkLinkFunctions.prototype.deleteLink = function (index, actionCode) {
    this._checkError(this._EN.deletelink(index, actionCode));
  };
  NetworkLinkFunctions.prototype.getLinkIndex = function (id) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getlinkindex.apply(_a, __spreadArrays([id], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkLinkFunctions.prototype.getLinkId = function (index) {
    var _a;
    var memory = this._allocateMemory('char');
    this._checkError((_a = this._EN).getlinkid.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'char');
  };
  NetworkLinkFunctions.prototype.setLinkId = function (index, newid) {
    this._checkError(this._EN.setlinkid(index, newid));
  };
  NetworkLinkFunctions.prototype.getLinkType = function (index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getlinktype.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkLinkFunctions.prototype.setLinkType = function (index, linkType, actionCode) {
    // Index is In/Out for setlinktype API
    var memory = this._allocateMemory('int');
    this._instance.setValue(memory[0], index, 'i32');
    this._checkError(this._EN.setlinktype(memory[0], linkType, actionCode));
    return this._getValue(memory[0], 'int');
  };
  NetworkLinkFunctions.prototype.getLinkNodes = function (index) {
    var _a;
    var memory = this._allocateMemory('int', 'int');
    this._checkError((_a = this._EN).getlinknodes.apply(_a, __spreadArrays([index], memory)));
    return {
      node1: this._getValue(memory[0], 'int'),
      node2: this._getValue(memory[1], 'int')
    };
  };
  NetworkLinkFunctions.prototype.setLinkNodes = function (index, node1, node2) {
    this._checkError(this._EN.setlinknodes(index, node1, node2));
  };
  NetworkLinkFunctions.prototype.getLinkValue = function (index, property) {
    var _a;
    var memory = this._allocateMemory('double');
    this._checkError((_a = this._EN).getlinkvalue.apply(_a, __spreadArrays([index, property], memory)));
    return this._getValue(memory[0], 'double');
  };
  NetworkLinkFunctions.prototype.setLinkValue = function (index, property, value) {
    this._checkError(this._EN.setlinkvalue(index, property, value));
  };
  NetworkLinkFunctions.prototype.setPipeData = function (index, length, diam, rough, mloss) {
    this._checkError(this._EN.setpipedata(index, length, diam, rough, mloss));
  };
  NetworkLinkFunctions.prototype.getPumpType = function (index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getpumptype.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkLinkFunctions.prototype.getHeadCurveIndex = function (linkIndex) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getheadcurveindex.apply(_a, __spreadArrays([linkIndex], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkLinkFunctions.prototype.setHeadCurveIndex = function (linkIndex, curveIndex) {
    this._checkError(this._EN.setheadcurveindex(linkIndex, curveIndex));
  };
  NetworkLinkFunctions.prototype.getVertexCount = function (index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getvertexcount.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'int');
  };
  NetworkLinkFunctions.prototype.getVertex = function (index, vertex) {
    var _a;
    var memory = this._allocateMemory('double', 'double');
    this._checkError((_a = this._EN).getvertex.apply(_a, __spreadArrays([index, vertex], memory)));
    return {
      x: this._getValue(memory[0], 'double'),
      y: this._getValue(memory[1], 'double')
    };
  };
  NetworkLinkFunctions.prototype.setVertices = function (index, x, y) {
    if (x.length !== y.length) {
      throw new Error("X and Y vertex arrays must have the same length - X length: " + x.length + ", Y length " + y.length);
    }
    var xPtr = this._allocateMemoryForArray(x);
    var yPtr = this._allocateMemoryForArray(y);
    this._checkError(this._EN.setvertices(index, xPtr, yPtr, x.length)); // Free memory

    this._instance._free(xPtr);
    this._instance._free(yPtr);
  };
  return NetworkLinkFunctions;
}();
var TimePatternFunctions = /*#__PURE__*/

/** @class */
function () {
  function TimePatternFunctions() {}
  TimePatternFunctions.prototype.addPattern = function (id) {
    this._checkError(this._EN.addpattern(id));
  };
  TimePatternFunctions.prototype.deletePattern = function (index) {
    this._checkError(this._EN.deletepattern(index));
  };
  TimePatternFunctions.prototype.getPatternIndex = function (id) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getpatternindex.apply(_a, __spreadArrays([id], memory)));
    return this._getValue(memory[0], 'int');
  };
  TimePatternFunctions.prototype.getPatternId = function (index) {
    var _a;
    var memory = this._allocateMemory('char');
    this._checkError((_a = this._EN).getpatternid.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'char');
  };
  TimePatternFunctions.prototype.setPatternId = function (index, id) {
    this._checkError(this._EN.setpatternid(index, id));
  };
  TimePatternFunctions.prototype.getPatternLength = function (index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getpatternlen.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'int');
  };
  TimePatternFunctions.prototype.getPatternValue = function (index, period) {
    var _a;
    var memory = this._allocateMemory('double');
    this._checkError((_a = this._EN).getpatternvalue.apply(_a, __spreadArrays([index, period], memory)));
    return this._getValue(memory[0], 'double');
  };
  TimePatternFunctions.prototype.setPatternValue = function (index, period, value) {
    this._checkError(this._EN.setpatternvalue(index, period, value));
  };
  TimePatternFunctions.prototype.getAveragePatternValue = function (index) {
    var _a;
    var memory = this._allocateMemory('double');
    this._checkError((_a = this._EN).getaveragepatternvalue.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'double');
  };
  TimePatternFunctions.prototype.setPattern = function (index, values) {
    var valuesPtr = this._allocateMemoryForArray(values);
    this._checkError(this._EN.setpattern(index, valuesPtr, values.length)); // Free memory

    this._instance._free(valuesPtr);
  };
  return TimePatternFunctions;
}();
var DataCurveFunctions = /*#__PURE__*/

/** @class */
function () {
  function DataCurveFunctions() {}
  DataCurveFunctions.prototype.addCurve = function (id) {
    this._checkError(this._EN.addcurve(id));
  };
  DataCurveFunctions.prototype.deleteCurve = function (index) {
    this._checkError(this._EN.deletecurve(index));
  };
  DataCurveFunctions.prototype.getCurveIndex = function (id) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getcurveindex.apply(_a, __spreadArrays([id], memory)));
    return this._getValue(memory[0], 'int');
  };
  DataCurveFunctions.prototype.getCurveId = function (index) {
    var _a;
    var memory = this._allocateMemory('char');
    this._checkError((_a = this._EN).getcurveid.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'char');
  };
  DataCurveFunctions.prototype.setCurveId = function (index, id) {
    this._checkError(this._EN.setcurveid(index, id));
  };
  DataCurveFunctions.prototype.getCurveLenth = function (index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getcurvelen.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'int');
  };
  DataCurveFunctions.prototype.getCurveType = function (index) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).getcurvetype.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'int');
  };
  DataCurveFunctions.prototype.getCurveValue = function (curveIndex, pointIndex) {
    var _a;
    var memory = this._allocateMemory('double', 'double');
    this._checkError((_a = this._EN).getcurvevalue.apply(_a, __spreadArrays([curveIndex, pointIndex], memory)));
    return {
      x: this._getValue(memory[0], 'double'),
      y: this._getValue(memory[1], 'double')
    };
  };
  DataCurveFunctions.prototype.setCurveValue = function (curveIndex, pointIndex, x, y) {
    this._checkError(this._EN.setcurvevalue(curveIndex, pointIndex, x, y));
  };
  DataCurveFunctions.prototype.setCurve = function (index, xValues, yValues) {
    if (xValues.length !== yValues.length) {
      throw new Error("X and Y vertex arrays must have the same length - X length: " + xValues.length + ", Y length " + yValues.length);
    }
    var xPtr = this._allocateMemoryForArray(xValues);
    var yPtr = this._allocateMemoryForArray(yValues);
    this._checkError(this._EN.setcurve(index, xPtr, yPtr, xValues.length)); // Free memory

    this._instance._free(xPtr);
    this._instance._free(yPtr);
  };
  return DataCurveFunctions;
}();
var SimpleControlFunctions = /*#__PURE__*/

/** @class */
function () {
  function SimpleControlFunctions() {}
  SimpleControlFunctions.prototype.addControl = function (type, linkIndex, setting, nodeIndex, level) {
    var _a;
    var memory = this._allocateMemory('int');
    this._checkError((_a = this._EN).addcontrol.apply(_a, __spreadArrays([type, linkIndex, setting, nodeIndex, level], memory)));
    return this._getValue(memory[0], 'int');
  };
  SimpleControlFunctions.prototype.deleteControl = function (index) {
    this._checkError(this._EN.deletecontrol(index));
  };
  SimpleControlFunctions.prototype.getControl = function (index) {
    var _a;
    var memory = this._allocateMemory('int', 'int', 'double', 'int', 'double');
    this._checkError((_a = this._EN).getcontrol.apply(_a, __spreadArrays([index], memory)));
    return {
      type: this._getValue(memory[0], 'int'),
      linkIndex: this._getValue(memory[1], 'int'),
      setting: this._getValue(memory[2], 'double'),
      nodeIndex: this._getValue(memory[3], 'int'),
      level: this._getValue(memory[4], 'double')
    };
  };
  SimpleControlFunctions.prototype.setControl = function (index, type, linkIndex, setting, nodeIndex, level) {
    this._checkError(this._EN.setcontrol(index, type, linkIndex, setting, nodeIndex, level));
  };
  return SimpleControlFunctions;
}();
var RuleBasedControlFunctions = /*#__PURE__*/

/** @class */
function () {
  function RuleBasedControlFunctions() {}
  RuleBasedControlFunctions.prototype.addRule = function (rule) {
    this._checkError(this._EN.addrule(rule));
  };
  RuleBasedControlFunctions.prototype.deleteRule = function (index) {
    this._checkError(this._EN.deleterule(index));
  };
  RuleBasedControlFunctions.prototype.getRule = function (index) {
    var _a;
    var memory = this._allocateMemory('int', 'int', 'int', 'double');
    this._checkError((_a = this._EN).getrule.apply(_a, __spreadArrays([index], memory)));
    return {
      premiseCount: this._getValue(memory[0], 'int'),
      thenActionCount: this._getValue(memory[1], 'int'),
      elseActionCount: this._getValue(memory[2], 'int'),
      priority: this._getValue(memory[3], 'double')
    };
  };
  RuleBasedControlFunctions.prototype.getRuleId = function (index) {
    var _a;
    var memory = this._allocateMemory('char');
    this._checkError((_a = this._EN).getruleID.apply(_a, __spreadArrays([index], memory)));
    return this._getValue(memory[0], 'char');
  };
  RuleBasedControlFunctions.prototype.getPremise = function (ruleIndex, premiseIndex) {
    var _a;
    var memory = this._allocateMemory('int', 'int', 'int', 'int', 'int', 'int', 'double');
    this._checkError((_a = this._EN).getpremise.apply(_a, __spreadArrays([ruleIndex, premiseIndex], memory)));
    return {
      logop: this._getValue(memory[0], 'int'),
      object: this._getValue(memory[1], 'int'),
      objIndex: this._getValue(memory[2], 'int'),
      variable: this._getValue(memory[3], 'int'),
      relop: this._getValue(memory[4], 'int'),
      status: this._getValue(memory[5], 'int'),
      value: this._getValue(memory[6], 'double')
    };
  };
  RuleBasedControlFunctions.prototype.setPremise = function (ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value) {
    this._checkError(this._EN.setpremise(ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value));
  };
  RuleBasedControlFunctions.prototype.setPremiseIndex = function (ruleIndex, premiseIndex, objIndex) {
    this._checkError(this._EN.setpremiseindex(ruleIndex, premiseIndex, objIndex));
  };
  RuleBasedControlFunctions.prototype.setPremiseStatus = function (ruleIndex, premiseIndex, status) {
    this._checkError(this._EN.setpremisestatus(ruleIndex, premiseIndex, status));
  };
  RuleBasedControlFunctions.prototype.setPremiseValue = function (ruleIndex, premiseIndex, value) {
    this._checkError(this._EN.setpremisevalue(ruleIndex, premiseIndex, value));
  };
  RuleBasedControlFunctions.prototype.getThenAction = function (ruleIndex, actionIndex) {
    var _a;
    var memory = this._allocateMemory('int', 'int', 'double');
    this._checkError((_a = this._EN).getthenaction.apply(_a, __spreadArrays([ruleIndex, actionIndex], memory)));
    return {
      linkIndex: this._getValue(memory[0], 'int'),
      status: this._getValue(memory[1], 'int'),
      setting: this._getValue(memory[2], 'double')
    };
  };
  RuleBasedControlFunctions.prototype.setThenAction = function (ruleIndex, actionIndex, linkIndex, status, setting) {
    this._checkError(this._EN.setthenaction(ruleIndex, actionIndex, linkIndex, status, setting));
  };
  RuleBasedControlFunctions.prototype.getElseAction = function (ruleIndex, actionIndex) {
    var _a;
    var memory = this._allocateMemory('int', 'int', 'double');
    this._checkError((_a = this._EN).getelseaction.apply(_a, __spreadArrays([ruleIndex, actionIndex], memory)));
    return {
      linkIndex: this._getValue(memory[0], 'int'),
      status: this._getValue(memory[1], 'int'),
      setting: this._getValue(memory[2], 'double')
    };
  };
  RuleBasedControlFunctions.prototype.setElseAction = function (ruleIndex, actionIndex, linkIndex, status, setting) {
    this._checkError(this._EN.setelseaction(ruleIndex, actionIndex, linkIndex, status, setting));
  };
  RuleBasedControlFunctions.prototype.setRulePriority = function (index, priority) {
    this._checkError(this._EN.setrulepriority(index, priority));
  };
  return RuleBasedControlFunctions;
}();
var Project = exports.Project = /*#__PURE__*/

/** @class */
function () {
  function Project(ws) {
    // Implementing function classes
    // Project Functions
    this.open = ProjectFunctions.prototype.open;
    this.close = ProjectFunctions.prototype.close;
    this.runProject = ProjectFunctions.prototype.runProject;
    this.init = ProjectFunctions.prototype.init;
    this.getCount = ProjectFunctions.prototype.getCount;
    this.getTitle = ProjectFunctions.prototype.getTitle;
    this.setTitle = ProjectFunctions.prototype.setTitle;
    this.saveInpFile = ProjectFunctions.prototype.saveInpFile; // Hydraulic Analysis Functions

    this.solveH = HydraulicAnalysisFunctions.prototype.solveH;
    this.useHydFile = HydraulicAnalysisFunctions.prototype.useHydFile;
    this.openH = HydraulicAnalysisFunctions.prototype.openH;
    this.initH = HydraulicAnalysisFunctions.prototype.initH;
    this.runH = HydraulicAnalysisFunctions.prototype.runH;
    this.nextH = HydraulicAnalysisFunctions.prototype.nextH;
    this.saveH = HydraulicAnalysisFunctions.prototype.saveH;
    this.saveHydFile = HydraulicAnalysisFunctions.prototype.saveHydFile;
    this.closeH = HydraulicAnalysisFunctions.prototype.closeH; // Water Quality Analysis Functions

    this.solveQ = WaterQualityAnalysisFunctions.prototype.solveQ;
    this.openQ = WaterQualityAnalysisFunctions.prototype.openQ;
    this.initQ = WaterQualityAnalysisFunctions.prototype.initQ;
    this.runQ = WaterQualityAnalysisFunctions.prototype.runQ;
    this.nextQ = WaterQualityAnalysisFunctions.prototype.nextQ;
    this.stepQ = WaterQualityAnalysisFunctions.prototype.stepQ;
    this.closeQ = WaterQualityAnalysisFunctions.prototype.closeQ; // Reporting Functions

    this.writeLine = ReportingFunctions.prototype.writeLine;
    this.report = ReportingFunctions.prototype.report;
    this.copyReport = ReportingFunctions.prototype.copyReport;
    this.clearReport = ReportingFunctions.prototype.clearReport;
    this.resetReport = ReportingFunctions.prototype.resetReport;
    this.setReport = ReportingFunctions.prototype.setReport;
    this.setStatusReport = ReportingFunctions.prototype.setStatusReport;
    this.getStatistic = ReportingFunctions.prototype.getStatistic;
    this.getResultIndex = ReportingFunctions.prototype.getResultIndex; // Analysis Options Functions

    this.getFlowUnits = AnalysisOptionsFunctions.prototype.getFlowUnits;
    this.getOption = AnalysisOptionsFunctions.prototype.getOption;
    this.getQualityInfo = AnalysisOptionsFunctions.prototype.getQualityInfo;
    this.getQualityType = AnalysisOptionsFunctions.prototype.getQualityType;
    this.getTimeParameter = AnalysisOptionsFunctions.prototype.getTimeParameter;
    this.setFlowUnits = AnalysisOptionsFunctions.prototype.setFlowUnits;
    this.setOption = AnalysisOptionsFunctions.prototype.setOption;
    this.setQualityType = AnalysisOptionsFunctions.prototype.setQualityType;
    this.setTimeParameter = AnalysisOptionsFunctions.prototype.setTimeParameter; //Network Node Functions

    this.addNode = NetworkNodeFunctions.prototype.addNode;
    this.deleteNode = NetworkNodeFunctions.prototype.deleteNode;
    this.getNodeIndex = NetworkNodeFunctions.prototype.getNodeIndex;
    this.getNodeId = NetworkNodeFunctions.prototype.getNodeId;
    this.setNodeId = NetworkNodeFunctions.prototype.setNodeId;
    this.getNodeType = NetworkNodeFunctions.prototype.getNodeType;
    this.getNodeValue = NetworkNodeFunctions.prototype.getNodeValue;
    this.setNodeValue = NetworkNodeFunctions.prototype.setNodeValue;
    this.setJunctionData = NetworkNodeFunctions.prototype.setJunctionData;
    this.setTankData = NetworkNodeFunctions.prototype.setTankData;
    this.getCoordinates = NetworkNodeFunctions.prototype.getCoordinates;
    this.setCoordinates = NetworkNodeFunctions.prototype.setCoordinates; // Nodal Demand Functions

    this.addDemand = NodalDemandFunctions.prototype.addDemand;
    this.deleteDemand = NodalDemandFunctions.prototype.deleteDemand;
    this.getBaseDemand = NodalDemandFunctions.prototype.getBaseDemand;
    this.getDemandIndex = NodalDemandFunctions.prototype.getDemandIndex;
    this.getDemandModel = NodalDemandFunctions.prototype.getDemandModel;
    this.getDemandName = NodalDemandFunctions.prototype.getDemandName;
    this.getDemandPattern = NodalDemandFunctions.prototype.getDemandPattern;
    this.getNumberOfDemands = NodalDemandFunctions.prototype.getNumberOfDemands;
    this.setBaseDemand = NodalDemandFunctions.prototype.setBaseDemand;
    this.setDemandModel = NodalDemandFunctions.prototype.setDemandModel;
    this.setDemandName = NodalDemandFunctions.prototype.setDemandName;
    this.setDemandPattern = NodalDemandFunctions.prototype.setDemandPattern; // Network Link Functions

    this.addLink = NetworkLinkFunctions.prototype.addLink;
    this.deleteLink = NetworkLinkFunctions.prototype.deleteLink;
    this.getLinkIndex = NetworkLinkFunctions.prototype.getLinkIndex;
    this.getLinkId = NetworkLinkFunctions.prototype.getLinkId;
    this.setLinkId = NetworkLinkFunctions.prototype.setLinkId;
    this.getLinkType = NetworkLinkFunctions.prototype.getLinkType;
    this.setLinkType = NetworkLinkFunctions.prototype.setLinkType;
    this.getLinkNodes = NetworkLinkFunctions.prototype.getLinkNodes;
    this.setLinkNodes = NetworkLinkFunctions.prototype.setLinkNodes;
    this.getLinkValue = NetworkLinkFunctions.prototype.getLinkValue;
    this.setLinkValue = NetworkLinkFunctions.prototype.setLinkValue;
    this.setPipeData = NetworkLinkFunctions.prototype.setPipeData;
    this.getPumpType = NetworkLinkFunctions.prototype.getPumpType;
    this.getHeadCurveIndex = NetworkLinkFunctions.prototype.getHeadCurveIndex;
    this.setHeadCurveIndex = NetworkLinkFunctions.prototype.setHeadCurveIndex;
    this.getVertexCount = NetworkLinkFunctions.prototype.getVertexCount;
    this.getVertex = NetworkLinkFunctions.prototype.getVertex;
    this.setVertices = NetworkLinkFunctions.prototype.setVertices; // Time Pattern Functions

    this.addPattern = TimePatternFunctions.prototype.addPattern;
    this.deletePattern = TimePatternFunctions.prototype.deletePattern;
    this.getPatternIndex = TimePatternFunctions.prototype.getPatternIndex;
    this.getPatternId = TimePatternFunctions.prototype.getPatternId;
    this.setPatternId = TimePatternFunctions.prototype.setPatternId;
    this.getPatternLength = TimePatternFunctions.prototype.getPatternLength;
    this.getPatternValue = TimePatternFunctions.prototype.getPatternValue;
    this.setPatternValue = TimePatternFunctions.prototype.setPatternValue;
    this.getAveragePatternValue = TimePatternFunctions.prototype.getAveragePatternValue;
    this.setPattern = TimePatternFunctions.prototype.setPattern; // Data Curve Functions

    this.addCurve = DataCurveFunctions.prototype.addCurve;
    this.deleteCurve = DataCurveFunctions.prototype.deleteCurve;
    this.getCurveIndex = DataCurveFunctions.prototype.getCurveIndex;
    this.getCurveId = DataCurveFunctions.prototype.getCurveId;
    this.setCurveId = DataCurveFunctions.prototype.setCurveId;
    this.getCurveLenth = DataCurveFunctions.prototype.getCurveLenth;
    this.getCurveType = DataCurveFunctions.prototype.getCurveType;
    this.getCurveValue = DataCurveFunctions.prototype.getCurveValue;
    this.setCurveValue = DataCurveFunctions.prototype.setCurveValue;
    this.setCurve = DataCurveFunctions.prototype.setCurve; // Simple Control Functions

    this.addControl = SimpleControlFunctions.prototype.addControl;
    this.deleteControl = SimpleControlFunctions.prototype.deleteControl;
    this.getControl = SimpleControlFunctions.prototype.getControl;
    this.setControl = SimpleControlFunctions.prototype.setControl; // Rule-Based Control Functions

    this.addRule = RuleBasedControlFunctions.prototype.addRule;
    this.deleteRule = RuleBasedControlFunctions.prototype.deleteRule;
    this.getRule = RuleBasedControlFunctions.prototype.getRule;
    this.getRuleId = RuleBasedControlFunctions.prototype.getRuleId;
    this.getPremise = RuleBasedControlFunctions.prototype.getPremise;
    this.setPremise = RuleBasedControlFunctions.prototype.setPremise;
    this.setPremiseIndex = RuleBasedControlFunctions.prototype.setPremiseIndex;
    this.setPremiseStatus = RuleBasedControlFunctions.prototype.setPremiseStatus;
    this.setPremiseValue = RuleBasedControlFunctions.prototype.setPremiseValue;
    this.getThenAction = RuleBasedControlFunctions.prototype.getThenAction;
    this.setThenAction = RuleBasedControlFunctions.prototype.setThenAction;
    this.getElseAction = RuleBasedControlFunctions.prototype.getElseAction;
    this.setElseAction = RuleBasedControlFunctions.prototype.setElseAction;
    this.setRulePriority = RuleBasedControlFunctions.prototype.setRulePriority;
    this._ws = ws;
    this._instance = ws._instance;
    this._EN = new this._ws._instance.Epanet();
  }
  Project.prototype._getValue = function (pointer, type) {
    var value;
    if (type === 'char') {
      value = this._instance.UTF8ToString(pointer);
    } else {
      var size = type === 'int' ? 'i32' : type === 'long' ? 'i64' : 'double';
      value = this._instance.getValue(pointer, size);
    }
    this._instance._free(pointer);
    return value;
  };
  Project.prototype._allocateMemory = function (v1) {
    var _this = this;
    if (typeof v1 != 'string') {
      throw new Error('Method _allocateMemory expected string');
    }
    var types = Array.prototype.slice.call(arguments);
    return types.reduce(function (acc, t) {
      var memsize;
      switch (t) {
        case 'char':
          memsize = 32; //MAXID in EPANET

          break;
        case 'char-title':
          memsize = 80; //TITLELEN in EPANET

          break;
        case 'int':
          memsize = 4;
          break;
        default:
          memsize = 8; //Double

          break;
      }
      var pointer = _this._instance._malloc(memsize);
      return acc.concat(pointer);
    }, []);
  };
  Project.prototype._allocateMemoryForArray = function (arr) {
    var typedArray = new Float64Array(arr);
    var nDataBytes = typedArray.length * typedArray.BYTES_PER_ELEMENT;
    var dataPtr = this._instance._malloc(nDataBytes);
    this._instance.HEAP8.set(new Uint8Array(typedArray.buffer), dataPtr);
    return dataPtr;
  };
  Project.prototype._checkError = function (errorCode) {
    if (errorCode === 0) {
      return;
    } else if (errorCode < 100) {
      console.warn("epanet-js: " + this._ws.getError(errorCode));
      return;
    }
    var errorMsg = this._ws.getError(errorCode);
    throw new Error(errorMsg);
  };
  return Project;
}();
var ActionCodeType;
(function (ActionCodeType) {
  ActionCodeType[ActionCodeType["Unconditional"] = 0] = "Unconditional";
  ActionCodeType[ActionCodeType["Conditional"] = 1] = "Conditional";
})(ActionCodeType || (ActionCodeType = {}));
var ActionCodeType$1 = exports.ActionCodeType = ActionCodeType;
var AnalysisStatistic;
(function (AnalysisStatistic) {
  AnalysisStatistic[AnalysisStatistic["Iterations"] = 0] = "Iterations";
  AnalysisStatistic[AnalysisStatistic["RelativeError"] = 1] = "RelativeError";
  AnalysisStatistic[AnalysisStatistic["MaxHeadError"] = 2] = "MaxHeadError";
  AnalysisStatistic[AnalysisStatistic["MaxFlowChange"] = 3] = "MaxFlowChange";
  AnalysisStatistic[AnalysisStatistic["MassBalance"] = 4] = "MassBalance";
  AnalysisStatistic[AnalysisStatistic["DeficientNodes"] = 5] = "DeficientNodes";
  AnalysisStatistic[AnalysisStatistic["DemandReduction"] = 6] = "DemandReduction";
})(AnalysisStatistic || (AnalysisStatistic = {}));
var AnalysisStatistic$1 = exports.AnalysisStatistic = AnalysisStatistic;
var ControlType;
(function (ControlType) {
  ControlType[ControlType["LowLevel"] = 0] = "LowLevel";
  ControlType[ControlType["HiLevel"] = 1] = "HiLevel";
  ControlType[ControlType["Timer"] = 2] = "Timer";
  ControlType[ControlType["TimeOfDay"] = 3] = "TimeOfDay";
})(ControlType || (ControlType = {}));
var ControlType$1 = exports.ControlType = ControlType;
var CountType;
(function (CountType) {
  CountType[CountType["NodeCount"] = 0] = "NodeCount";
  CountType[CountType["TankCount"] = 1] = "TankCount";
  CountType[CountType["LinkCount"] = 2] = "LinkCount";
  CountType[CountType["PatCount"] = 3] = "PatCount";
  CountType[CountType["CurveCount"] = 4] = "CurveCount";
  CountType[CountType["ControlCount"] = 5] = "ControlCount";
  CountType[CountType["RuleCount"] = 6] = "RuleCount";
})(CountType || (CountType = {}));
var CountType$1 = exports.CountType = CountType;
var CurveType;
(function (CurveType) {
  CurveType[CurveType["VolumeCurve"] = 0] = "VolumeCurve";
  CurveType[CurveType["PumpCurve"] = 1] = "PumpCurve";
  CurveType[CurveType["EfficCurve"] = 2] = "EfficCurve";
  CurveType[CurveType["HlossCurve"] = 3] = "HlossCurve";
  CurveType[CurveType["GenericCurve"] = 4] = "GenericCurve";
})(CurveType || (CurveType = {}));
var CurveType$1 = exports.CurveType = CurveType;
var DemandModel;
(function (DemandModel) {
  DemandModel[DemandModel["DDA"] = 0] = "DDA";
  DemandModel[DemandModel["PDA"] = 1] = "PDA";
})(DemandModel || (DemandModel = {}));
var DemandModel$1 = exports.DemandModel = DemandModel;
var FlowUnits;
(function (FlowUnits) {
  FlowUnits[FlowUnits["CFS"] = 0] = "CFS";
  FlowUnits[FlowUnits["GPM"] = 1] = "GPM";
  FlowUnits[FlowUnits["MGD"] = 2] = "MGD";
  FlowUnits[FlowUnits["IMGD"] = 3] = "IMGD";
  FlowUnits[FlowUnits["AFD"] = 4] = "AFD";
  FlowUnits[FlowUnits["LPS"] = 5] = "LPS";
  FlowUnits[FlowUnits["LPM"] = 6] = "LPM";
  FlowUnits[FlowUnits["MLD"] = 7] = "MLD";
  FlowUnits[FlowUnits["CMH"] = 8] = "CMH";
  FlowUnits[FlowUnits["CMD"] = 9] = "CMD";
})(FlowUnits || (FlowUnits = {}));
var FlowUnits$1 = exports.FlowUnits = FlowUnits;
var HeadLossType;
(function (HeadLossType) {
  HeadLossType[HeadLossType["HW"] = 0] = "HW";
  HeadLossType[HeadLossType["DW"] = 1] = "DW";
  HeadLossType[HeadLossType["CM"] = 2] = "CM";
})(HeadLossType || (HeadLossType = {}));
var HeadLossType$1 = exports.HeadLossType = HeadLossType;
var InitHydOption;
(function (InitHydOption) {
  InitHydOption[InitHydOption["NoSave"] = 0] = "NoSave";
  InitHydOption[InitHydOption["Save"] = 1] = "Save";
  InitHydOption[InitHydOption["InitFlow"] = 10] = "InitFlow";
  InitHydOption[InitHydOption["SaveAndInit"] = 11] = "SaveAndInit";
})(InitHydOption || (InitHydOption = {}));
var InitHydOption$1 = exports.InitHydOption = InitHydOption;
var LinkProperty;
(function (LinkProperty) {
  LinkProperty[LinkProperty["Diameter"] = 0] = "Diameter";
  LinkProperty[LinkProperty["Length"] = 1] = "Length";
  LinkProperty[LinkProperty["Roughness"] = 2] = "Roughness";
  LinkProperty[LinkProperty["MinorLoss"] = 3] = "MinorLoss";
  LinkProperty[LinkProperty["InitStatus"] = 4] = "InitStatus";
  LinkProperty[LinkProperty["InitSetting"] = 5] = "InitSetting";
  LinkProperty[LinkProperty["KBulk"] = 6] = "KBulk";
  LinkProperty[LinkProperty["KWall"] = 7] = "KWall";
  LinkProperty[LinkProperty["Flow"] = 8] = "Flow";
  LinkProperty[LinkProperty["Velocity"] = 9] = "Velocity";
  LinkProperty[LinkProperty["Headloss"] = 10] = "Headloss";
  LinkProperty[LinkProperty["Status"] = 11] = "Status";
  LinkProperty[LinkProperty["Setting"] = 12] = "Setting";
  LinkProperty[LinkProperty["Energy"] = 13] = "Energy";
  LinkProperty[LinkProperty["LinkQual"] = 14] = "LinkQual";
  LinkProperty[LinkProperty["LinkPattern"] = 15] = "LinkPattern";
  LinkProperty[LinkProperty["PumpState"] = 16] = "PumpState";
  LinkProperty[LinkProperty["PumpEffic"] = 17] = "PumpEffic";
  LinkProperty[LinkProperty["PumpPower"] = 18] = "PumpPower";
  LinkProperty[LinkProperty["PumpHCurve"] = 19] = "PumpHCurve";
  LinkProperty[LinkProperty["PumpECurve"] = 20] = "PumpECurve";
  LinkProperty[LinkProperty["PumpECost"] = 21] = "PumpECost";
  LinkProperty[LinkProperty["PumpEPat"] = 22] = "PumpEPat";
})(LinkProperty || (LinkProperty = {}));
var LinkProperty$1 = exports.LinkProperty = LinkProperty;
var LinkStatusType;
(function (LinkStatusType) {
  LinkStatusType[LinkStatusType["Closed"] = 0] = "Closed";
  LinkStatusType[LinkStatusType["Open"] = 1] = "Open";
})(LinkStatusType || (LinkStatusType = {}));
var LinkStatusType$1 = exports.LinkStatusType = LinkStatusType;
var LinkType;
(function (LinkType) {
  LinkType[LinkType["CVPipe"] = 0] = "CVPipe";
  LinkType[LinkType["Pipe"] = 1] = "Pipe";
  LinkType[LinkType["Pump"] = 2] = "Pump";
  LinkType[LinkType["PRV"] = 3] = "PRV";
  LinkType[LinkType["PSV"] = 4] = "PSV";
  LinkType[LinkType["PBV"] = 5] = "PBV";
  LinkType[LinkType["FCV"] = 6] = "FCV";
  LinkType[LinkType["TCV"] = 7] = "TCV";
  LinkType[LinkType["GPV"] = 8] = "GPV";
})(LinkType || (LinkType = {}));
var LinkType$1 = exports.LinkType = LinkType;
var MixingModel;
(function (MixingModel) {
  MixingModel[MixingModel["Mix1"] = 0] = "Mix1";
  MixingModel[MixingModel["Mix2"] = 1] = "Mix2";
  MixingModel[MixingModel["FIFO"] = 2] = "FIFO";
  MixingModel[MixingModel["LIFO"] = 3] = "LIFO";
})(MixingModel || (MixingModel = {}));
var MixingModel$1 = exports.MixingModel = MixingModel;
var NodeProperty;
(function (NodeProperty) {
  NodeProperty[NodeProperty["Elevation"] = 0] = "Elevation";
  NodeProperty[NodeProperty["BaseDemand"] = 1] = "BaseDemand";
  NodeProperty[NodeProperty["Pattern"] = 2] = "Pattern";
  NodeProperty[NodeProperty["Emitter"] = 3] = "Emitter";
  NodeProperty[NodeProperty["Initqual"] = 4] = "Initqual";
  NodeProperty[NodeProperty["SourceQual"] = 5] = "SourceQual";
  NodeProperty[NodeProperty["SourcePat"] = 6] = "SourcePat";
  NodeProperty[NodeProperty["SourceType"] = 7] = "SourceType";
  NodeProperty[NodeProperty["TankLevel"] = 8] = "TankLevel";
  NodeProperty[NodeProperty["Demand"] = 9] = "Demand";
  NodeProperty[NodeProperty["Head"] = 10] = "Head";
  NodeProperty[NodeProperty["Pressure"] = 11] = "Pressure";
  NodeProperty[NodeProperty["Quality"] = 12] = "Quality";
  NodeProperty[NodeProperty["SourceMass"] = 13] = "SourceMass";
  NodeProperty[NodeProperty["InitVolume"] = 14] = "InitVolume";
  NodeProperty[NodeProperty["MixModel"] = 15] = "MixModel";
  NodeProperty[NodeProperty["MixZoneVol"] = 16] = "MixZoneVol";
  NodeProperty[NodeProperty["TankDiam"] = 17] = "TankDiam";
  NodeProperty[NodeProperty["MinVolume"] = 18] = "MinVolume";
  NodeProperty[NodeProperty["VolCurve"] = 19] = "VolCurve";
  NodeProperty[NodeProperty["MinLevel"] = 20] = "MinLevel";
  NodeProperty[NodeProperty["MaxLevel"] = 21] = "MaxLevel";
  NodeProperty[NodeProperty["MixFraction"] = 22] = "MixFraction";
  NodeProperty[NodeProperty["TankKBulk"] = 23] = "TankKBulk";
  NodeProperty[NodeProperty["TankVolume"] = 24] = "TankVolume";
  NodeProperty[NodeProperty["MaxVolume"] = 25] = "MaxVolume";
  NodeProperty[NodeProperty["CanOverFlow"] = 26] = "CanOverFlow";
  NodeProperty[NodeProperty["DemandDeficit"] = 27] = "DemandDeficit";
})(NodeProperty || (NodeProperty = {}));
var NodeProperty$1 = exports.NodeProperty = NodeProperty;
var NodeType;
(function (NodeType) {
  NodeType[NodeType["Junction"] = 0] = "Junction";
  NodeType[NodeType["Reservoir"] = 1] = "Reservoir";
  NodeType[NodeType["Tank"] = 2] = "Tank";
})(NodeType || (NodeType = {}));
var NodeType$1 = exports.NodeType = NodeType;
var ObjectType;
(function (ObjectType) {
  ObjectType[ObjectType["Node"] = 0] = "Node";
  ObjectType[ObjectType["Link"] = 1] = "Link";
  ObjectType[ObjectType["TimePat"] = 2] = "TimePat";
  ObjectType[ObjectType["Curve"] = 3] = "Curve";
  ObjectType[ObjectType["Control"] = 4] = "Control";
  ObjectType[ObjectType["Rule"] = 5] = "Rule";
})(ObjectType || (ObjectType = {}));
var ObjectType$1 = exports.ObjectType = ObjectType;
var Option;
(function (Option) {
  Option[Option["Trials"] = 0] = "Trials";
  Option[Option["Accuracy"] = 1] = "Accuracy";
  Option[Option["Tolerance"] = 2] = "Tolerance";
  Option[Option["Emitexpon"] = 3] = "Emitexpon";
  Option[Option["DemandMult"] = 4] = "DemandMult";
  Option[Option["HeadError"] = 5] = "HeadError";
  Option[Option["FlowChange"] = 6] = "FlowChange";
  Option[Option["HeadlossForm"] = 7] = "HeadlossForm";
  Option[Option["GlobalEffic"] = 8] = "GlobalEffic";
  Option[Option["GlobalPrice"] = 9] = "GlobalPrice";
  Option[Option["GlobalPattern"] = 10] = "GlobalPattern";
  Option[Option["DemandCharge"] = 11] = "DemandCharge";
  Option[Option["SpGravity"] = 12] = "SpGravity";
  Option[Option["SpViscos"] = 13] = "SpViscos";
  Option[Option["Unbalanced"] = 14] = "Unbalanced";
  Option[Option["CheckFreq"] = 15] = "CheckFreq";
  Option[Option["MaxCheck"] = 16] = "MaxCheck";
  Option[Option["DampLimit"] = 17] = "DampLimit";
  Option[Option["SpDiffus"] = 18] = "SpDiffus";
  Option[Option["BulkOrder"] = 19] = "BulkOrder";
  Option[Option["WallOrder"] = 20] = "WallOrder";
  Option[Option["TankOrder"] = 21] = "TankOrder";
  Option[Option["ConcenLimit"] = 22] = "ConcenLimit";
})(Option || (Option = {}));
var Option$1 = exports.Option = Option;
var PumpStateType;
(function (PumpStateType) {
  PumpStateType[PumpStateType["PumpXHead"] = 0] = "PumpXHead";
  PumpStateType[PumpStateType["PumpClosed"] = 2] = "PumpClosed";
  PumpStateType[PumpStateType["PumpOpen"] = 3] = "PumpOpen";
  PumpStateType[PumpStateType["PumpXFlow"] = 5] = "PumpXFlow";
})(PumpStateType || (PumpStateType = {}));
var PumpStateType$1 = exports.PumpStateType = PumpStateType;
var PumpType;
(function (PumpType) {
  PumpType[PumpType["ConstHP"] = 0] = "ConstHP";
  PumpType[PumpType["PowerFunc"] = 1] = "PowerFunc";
  PumpType[PumpType["Custom"] = 2] = "Custom";
  PumpType[PumpType["NoCurve"] = 3] = "NoCurve";
})(PumpType || (PumpType = {}));
var PumpType$1 = exports.PumpType = PumpType;
var QualityType;
(function (QualityType) {
  QualityType[QualityType["None"] = 0] = "None";
  QualityType[QualityType["Chem"] = 1] = "Chem";
  QualityType[QualityType["Age"] = 2] = "Age";
  QualityType[QualityType["Trace"] = 3] = "Trace";
})(QualityType || (QualityType = {}));
var QualityType$1 = exports.QualityType = QualityType;
var RuleObject;
(function (RuleObject) {
  RuleObject[RuleObject["Node"] = 6] = "Node";
  RuleObject[RuleObject["Link"] = 7] = "Link";
  RuleObject[RuleObject["System"] = 8] = "System";
})(RuleObject || (RuleObject = {}));
var RuleObject$1 = exports.RuleObject = RuleObject;
var RuleOperator;
(function (RuleOperator) {
  RuleOperator[RuleOperator["EqualTo"] = 0] = "EqualTo";
  RuleOperator[RuleOperator["NotEqualTo"] = 1] = "NotEqualTo";
  RuleOperator[RuleOperator["LessOrEqualTo"] = 2] = "LessOrEqualTo";
  RuleOperator[RuleOperator["GreaterOrEqualTo"] = 3] = "GreaterOrEqualTo";
  RuleOperator[RuleOperator["LessThan"] = 4] = "LessThan";
  RuleOperator[RuleOperator["GreaterThan"] = 5] = "GreaterThan";
  RuleOperator[RuleOperator["Is"] = 6] = "Is";
  RuleOperator[RuleOperator["Not"] = 7] = "Not";
  RuleOperator[RuleOperator["Below"] = 8] = "Below";
  RuleOperator[RuleOperator["Above"] = 9] = "Above";
})(RuleOperator || (RuleOperator = {}));
var RuleOperator$1 = exports.RuleOperator = RuleOperator;
var RuleStatus;
(function (RuleStatus) {
  RuleStatus[RuleStatus["IsOpen"] = 1] = "IsOpen";
  RuleStatus[RuleStatus["IsClosed"] = 2] = "IsClosed";
  RuleStatus[RuleStatus["IsActive"] = 3] = "IsActive";
})(RuleStatus || (RuleStatus = {}));
var RuleStatus$1 = exports.RuleStatus = RuleStatus;
var RuleVariable;
(function (RuleVariable) {
  RuleVariable[RuleVariable["Demand"] = 0] = "Demand";
  RuleVariable[RuleVariable["Head"] = 1] = "Head";
  RuleVariable[RuleVariable["Grade"] = 2] = "Grade";
  RuleVariable[RuleVariable["Level"] = 3] = "Level";
  RuleVariable[RuleVariable["Pressure"] = 4] = "Pressure";
  RuleVariable[RuleVariable["Flow"] = 5] = "Flow";
  RuleVariable[RuleVariable["Status"] = 6] = "Status";
  RuleVariable[RuleVariable["Setting"] = 7] = "Setting";
  RuleVariable[RuleVariable["Power"] = 8] = "Power";
  RuleVariable[RuleVariable["Time"] = 9] = "Time";
  RuleVariable[RuleVariable["ClockTime"] = 10] = "ClockTime";
  RuleVariable[RuleVariable["FillTime"] = 11] = "FillTime";
  RuleVariable[RuleVariable["DrainTime"] = 12] = "DrainTime";
})(RuleVariable || (RuleVariable = {}));
var RuleVariable$1 = exports.RuleVariable = RuleVariable;
var SizeLimits;
(function (SizeLimits) {
  SizeLimits[SizeLimits["MaxId"] = 31] = "MaxId";
  SizeLimits[SizeLimits["MaxMsg"] = 255] = "MaxMsg";
})(SizeLimits || (SizeLimits = {}));
var SizeLimits$1 = exports.SizeLimits = SizeLimits;
var SourceType;
(function (SourceType) {
  SourceType[SourceType["Concen"] = 0] = "Concen";
  SourceType[SourceType["Mass"] = 1] = "Mass";
  SourceType[SourceType["SetPoint"] = 2] = "SetPoint";
  SourceType[SourceType["FlowPaced"] = 3] = "FlowPaced";
})(SourceType || (SourceType = {}));
var SourceType$1 = exports.SourceType = SourceType;
var StatisticType;
(function (StatisticType) {
  StatisticType[StatisticType["Series"] = 0] = "Series";
  StatisticType[StatisticType["Average"] = 1] = "Average";
  StatisticType[StatisticType["Minimum"] = 2] = "Minimum";
  StatisticType[StatisticType["Maximum"] = 3] = "Maximum";
  StatisticType[StatisticType["Range"] = 4] = "Range";
})(StatisticType || (StatisticType = {}));
var StatisticType$1 = exports.StatisticType = StatisticType;
var StatusReport;
(function (StatusReport) {
  StatusReport[StatusReport["NoReport"] = 0] = "NoReport";
  StatusReport[StatusReport["NormalReport"] = 1] = "NormalReport";
  StatusReport[StatusReport["FullReport"] = 2] = "FullReport";
})(StatusReport || (StatusReport = {}));
var StatusReport$1 = exports.StatusReport = StatusReport;
var TimeParameter;
(function (TimeParameter) {
  TimeParameter[TimeParameter["Duration"] = 0] = "Duration";
  TimeParameter[TimeParameter["HydStep"] = 1] = "HydStep";
  TimeParameter[TimeParameter["QualStep"] = 2] = "QualStep";
  TimeParameter[TimeParameter["PatternStep"] = 3] = "PatternStep";
  TimeParameter[TimeParameter["PatternStart"] = 4] = "PatternStart";
  TimeParameter[TimeParameter["ReportStep"] = 5] = "ReportStep";
  TimeParameter[TimeParameter["ReportStart"] = 6] = "ReportStart";
  TimeParameter[TimeParameter["RuleStep"] = 7] = "RuleStep";
  TimeParameter[TimeParameter["Statistic"] = 8] = "Statistic";
  TimeParameter[TimeParameter["Periods"] = 9] = "Periods";
  TimeParameter[TimeParameter["StartTime"] = 10] = "StartTime";
  TimeParameter[TimeParameter["HTime"] = 11] = "HTime";
  TimeParameter[TimeParameter["QTime"] = 12] = "QTime";
  TimeParameter[TimeParameter["HaltFlag"] = 13] = "HaltFlag";
  TimeParameter[TimeParameter["NextEvent"] = 14] = "NextEvent";
  TimeParameter[TimeParameter["NextEventTank"] = 15] = "NextEventTank";
})(TimeParameter || (TimeParameter = {}));
var TimeParameter$1 = exports.TimeParameter = TimeParameter;
var NodeResultTypes;
(function (NodeResultTypes) {
  NodeResultTypes[NodeResultTypes["Demand"] = 0] = "Demand";
  NodeResultTypes[NodeResultTypes["Head"] = 1] = "Head";
  NodeResultTypes[NodeResultTypes["Pressure"] = 2] = "Pressure";
  NodeResultTypes[NodeResultTypes["WaterQuality"] = 3] = "WaterQuality";
})(NodeResultTypes || (NodeResultTypes = {}));
var LinkResultTypes;
(function (LinkResultTypes) {
  LinkResultTypes[LinkResultTypes["Flow"] = 0] = "Flow";
  LinkResultTypes[LinkResultTypes["Velocity"] = 1] = "Velocity";
  LinkResultTypes[LinkResultTypes["Headloss"] = 2] = "Headloss";
  LinkResultTypes[LinkResultTypes["AvgWaterQuality"] = 3] = "AvgWaterQuality";
  LinkResultTypes[LinkResultTypes["Status"] = 4] = "Status";
  LinkResultTypes[LinkResultTypes["Setting"] = 5] = "Setting";
  LinkResultTypes[LinkResultTypes["ReactionRate"] = 6] = "ReactionRate";
  LinkResultTypes[LinkResultTypes["Friction"] = 7] = "Friction";
})(LinkResultTypes || (LinkResultTypes = {}));
var idBytes = 32;
function readBinary(results) {
  var view1 = new DataView(results.buffer);
  var prolog = {
    nodeCount: view1.getInt32(8, true),
    resAndTankCount: view1.getInt32(12, true),
    linkCount: view1.getInt32(16, true),
    pumpCount: view1.getInt32(20, true),
    valveCount: view1.getInt32(24, true),
    reportingPeriods: view1.getInt32(results.byteLength - 12, true)
  };
  var offsetNodeIds = 884;
  var offsetLinkIds = offsetNodeIds + idBytes * prolog.nodeCount;
  var offsetLinkTypes = offsetNodeIds + 32 * prolog.nodeCount + 40 * prolog.linkCount;
  var offsetNodeIndexes = offsetNodeIds + 32 * prolog.nodeCount + 44 * prolog.linkCount;
  var offsetResults = offsetNodeIds + 36 * prolog.nodeCount + 52 * prolog.linkCount + 8 * prolog.resAndTankCount + 28 * prolog.pumpCount + 4;
  var nodeIds = getIds(offsetNodeIds, prolog.nodeCount, view1);
  var nodeTypes = getNodeTypes(offsetNodeIndexes, prolog.nodeCount, prolog.resAndTankCount, view1);
  var linkIds = getIds(offsetLinkIds, prolog.linkCount, view1);
  var linkTypes = getLinkTypes(offsetLinkTypes, prolog.linkCount, view1);
  var nodes = __spreadArrays(Array(prolog.nodeCount)).map(function (_, i) {
    return getNodeResults(prolog, offsetResults, i, view1, nodeIds[i], nodeTypes[i]);
  });
  var links = __spreadArrays(Array(prolog.linkCount)).map(function (_, i) {
    return getLinkResults(prolog, offsetResults, i, view1, linkIds[i], linkTypes[i]);
  });
  var data = {
    prolog: prolog,
    results: {
      nodes: nodes,
      links: links
    }
  };
  return data;
}
var getIds = function getIds(offset, count, dataView) {
  var ids = [];
  forEachIndex(count, function (index) {
    var arrayBuffer = dataView.buffer.slice(offset + idBytes * index, offset + idBytes * index + idBytes);
    ids.push(stringFrom(arrayBuffer));
  });
  return ids;
};
var getNodeTypes = function getNodeTypes(offset, nodeCount, resAndTankCount, dataView) {
  var types = [];
  var _a = getResAndTanksData(offset, resAndTankCount, dataView),
    resAndTankIndexes = _a[0],
    resAndTankAreas = _a[1];
  forEachIndex(nodeCount, function (index) {
    if (!resAndTankIndexes.includes(index)) {
      types.push(NodeType$1.Junction);
      return;
    }
    if (resAndTankAreas[resAndTankIndexes.indexOf(index)] === 0.0) {
      types.push(NodeType$1.Reservoir);
      return;
    }
    types.push(NodeType$1.Tank);
  });
  return types;
};
var getResAndTanksData = function getResAndTanksData(offsetNodeIndexes, count, dataView) {
  var indexes = [];
  var areas = [];
  var offsetAreas = offsetNodeIndexes + 4 * count;
  forEachIndex(count, function (index) {
    var nodeIndex = dataView.getInt32(offsetNodeIndexes + 4 * index, true);
    indexes.push(nodeIndex - 1);
    areas.push(dataView.getFloat32(offsetAreas + 4 * index, true));
  });
  return [indexes, areas];
};
var getLinkTypes = function getLinkTypes(offset, count, dataView) {
  var types = [];
  forEachIndex(count, function (index) {
    var position = offset + 4 * index;
    var type = dataView.getInt32(position, true);
    types.push(type);
  });
  return types;
};
var getNodeResults = function getNodeResults(prolog, offsetResults, nodeIndex, dataView, id, type) {
  var nodeResults = {
    id: id,
    type: type,
    demand: [],
    head: [],
    pressure: [],
    waterQuality: []
  };
  var result = ['demand', 'head', 'pressure', 'waterQuality'].reduce(function (map, obj, i) {
    var _a;
    return _assign(_assign({}, map), (_a = {}, _a[obj] = getResultByteOffSet(prolog, offsetResults, true, nodeIndex, i).map(function (x) {
      return dataView.getFloat32(x, true);
    }), _a));
  }, nodeResults);
  return result;
};
var getLinkResults = function getLinkResults(prolog, offsetResults, linkIndex, dataView, id, type) {
  var linkResults = {
    id: id,
    type: type,
    flow: [],
    velocity: [],
    headloss: [],
    avgWaterQuality: [],
    status: [],
    setting: [],
    reactionRate: [],
    friction: []
  };
  var result = ['flow', 'velocity', 'headloss', 'avgWaterQuality', 'status', 'setting', 'reactionRate', 'friction'].reduce(function (map, obj, i) {
    var _a;
    return _assign(_assign({}, map), (_a = {}, _a[obj] = getResultByteOffSet(prolog, offsetResults, false, linkIndex, i).map(function (x) {
      return dataView.getFloat32(x, true);
    }), _a));
  }, linkResults);
  return result;
};
var getResultByteOffSet = function getResultByteOffSet(prolog, offsetResults, isNode, objIndex, resultType) {
  var linkResultOffset = isNode ? 0 : 16 * prolog.nodeCount;
  var typeCount = isNode ? prolog.nodeCount : prolog.linkCount;
  var resultSize = 16 * prolog.nodeCount + 32 * prolog.linkCount;
  var answer = __spreadArrays(Array(prolog.reportingPeriods)).map(function (_, i) {
    return offsetResults + resultSize * i + linkResultOffset + 4 * objIndex + 4 * resultType * typeCount;
  });
  return answer;
};
var forEachIndex = function forEachIndex(count, callback) {
  for (var i = 0; i < count; ++i) {
    callback(i);
  }
};
var stringFrom = function stringFrom(arrayBuffer) {
  var array = new Uint8Array(arrayBuffer);
  var arrayNumber = Array.from(array).filter(function (o) {
    return o > 0;
  });
  return String.fromCharCode.apply(null, arrayNumber);
};
},{"@model-create/epanet-engine":"node_modules/@model-create/epanet-engine/dist/index.es6.js"}],"src/index.js":[function(require,module,exports) {
"use strict";

require("./styles.css");
var _epanetJs = require("epanet-js");
var _fs = _interopRequireDefault(require("fs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Read an existing inp file from the disk
var net1 = Buffer("", "base64");

// Initialise a new Workspace and Project object
var ws = new _epanetJs.Workspace();
var model = new _epanetJs.Project(ws);

// Write a copy of the inp file to the workspace
ws.writeFile("net1.inp", net1);

// Runs toolkit methods: EN_open, EN_solveH & EN_close
model.open("net1.inp", "report.rpt", "out.bin");
model.solveH();
model.close();
var reportFile = ws.readFile("report.rpt");
document.getElementById("epanet-report").innerHTML = reportFile;
},{"./styles.css":"src/styles.css","epanet-js":"node_modules/epanet-js/dist/epanet-js.esm.js","fs":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "57117" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","src/index.js"], null)
//# sourceMappingURL=/src.a2b27638.js.map